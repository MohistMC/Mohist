pluginManagement {
    repositories {
        gradlePluginPortal()
        mavenLocal()
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://hub.spigotmc.org/nexus/content/groups/public/' }
        maven { url = 'https://maven.mohistmc.com/' }
        maven { url = 'https://maven.izzel.io/releases' }
        maven { url = 'https://repo.extendedclip.com/content/repositories/placeholderapi' }
    }
}

buildscript {
    dependencies {
        classpath('com.google.code.gson:gson') {
            version {
                strictly '2.10.1'
            }
        }
    }
}

plugins {
    id 'org.gradle.toolchains.foojay-resolver-convention' version '0.7.0'
}

dependencyResolutionManagement {
    versionCatalogs {
        libs {
            library('forgespi', 'net.minecraftforge:forgespi:7.1.5') // Needs modlauncher
            library('modlauncher', 'net.minecraftforge:modlauncher:10.2.2') // Needs securemodules
            library('securemodules', 'net.minecraftforge:securemodules:mohist-2.2.19') // Needs unsafe
            library('unsafe', 'net.minecraftforge:unsafe:0.9.2')
            library('accesstransformers', 'net.minecraftforge:accesstransformers:8.2.0')
            library('coremods', 'net.minecraftforge:coremods:5.1.6')
            library('nashorn', 'org.openjdk.nashorn:nashorn-core:15.4') // Needed by coremods, because the JRE no longer ships JS
            library('eventbus', 'net.minecraftforge:eventbus:6.2.8')
            library('typetools', 'net.jodah:typetools:0.6.3') // Needed by EventBus because of lambdas
            library('mergetool-api', 'net.minecraftforge:mergetool-api:1.0')

            library('mixin', 'org.spongepowered:mixin:0.8.7')
            library('nulls', 'org.jetbrains:annotations:24.1.0') // Got to have our null annotations!
            library('slf4j-api', 'org.slf4j:slf4j-api:2.0.7')
            library('maven-artifact', 'org.apache.maven:maven-artifact:3.8.5')

            // Google's InMemory File System. Used by ForgeDev Tests for now, but could be useful for a lot of things.
            library('jimfs', 'com.google.jimfs:jimfs:1.3.0')
            bundle('jimfs', ['guava', 'failureaccess'])

            version('bootstrap', '2.1.3')
            library('bootstrap',      'net.minecraftforge', 'bootstrap'     ).versionRef('bootstrap') // Needs modlauncher
            library('bootstrap-api',  'net.minecraftforge', 'bootstrap-api' ).versionRef('bootstrap')
            library('bootstrap-dev',  'net.minecraftforge', 'bootstrap-dev' ).versionRef('bootstrap')
            library('bootstrap-shim', 'net.minecraftforge', 'bootstrap-shim').versionRef('bootstrap')

            // ASM it's used for so many of our hacks
            version('asm', '9.7')
            library('asm',          'org.ow2.asm', 'asm'         ).versionRef('asm')
            library('asm-tree',     'org.ow2.asm', 'asm-tree'    ).versionRef('asm')
            library('asm-util',     'org.ow2.asm', 'asm-util'    ).versionRef('asm')
            library('asm-commons',  'org.ow2.asm', 'asm-commons' ).versionRef('asm')
            library('asm-analysis', 'org.ow2.asm', 'asm-analysis').versionRef('asm')
            bundle('asm', ['asm', 'asm-tree', 'asm-util', 'asm-commons', 'asm-analysis'])

            // Terminal Console Appender.. essentually make pretty colors in the console, but it's been a PITA
            library('terminalconsoleappender', 'net.minecrell:terminalconsoleappender:1.4.0')
            version('jline', '3.21.0')
            library('jline-reader',       'org.jline', 'jline-reader'      ).versionRef('jline')
            library('jline-terminal',     'org.jline', 'jline-terminal'    ).versionRef('jline')
            library('jline-terminal-jansi', 'org.jline', 'jline-terminal-jansi').versionRef('jline') // Colors and tab completeion
            bundle('terminalconsoleappender', ['terminalconsoleappender', 'jline-reader', 'jline-terminal', 'jline-terminal-jansi'])

            // The core of our configuration system, it has many flaws, but it works for the most part
            version('night-config', '3.7.3')
            library('night-config-toml', 'com.electronwill.night-config', 'toml').versionRef('night-config')
            library('night-config-core', 'com.electronwill.night-config', 'core').versionRef('night-config')
            bundle('night-config', ['night-config-toml', 'night-config-core'])

            // Jar in Jar FileSystem
            version('jarjar', '0.3.26')
            library('jarjar-fs',       'net.minecraftforge', 'JarJarFileSystems').versionRef('jarjar')
            library('jarjar-meta',     'net.minecraftforge', 'JarJarMetadata'   ).versionRef('jarjar')
            library('jarjar-selector', 'net.minecraftforge', 'JarJarSelector'   ).versionRef('jarjar')
            bundle('jarjar', ['jarjar-fs', 'jarjar-selector', 'jarjar-meta'])

            // These are libraries shipped by the MC launcher, try and keep them in sync with the manifest
            // but honestly if we don't it just means we ship them as normal libraries by adding them to the installer config in the forge project
            library('gson', 'com.google.code.gson:gson:2.10.1')
            library('guava', 'com.google.guava:guava:32.1.2-jre')
            library('failureaccess', 'com.google.guava:failureaccess:1.0.1')
            version('log4j', '2.22.1')
            library('log4j-api',  'org.apache.logging.log4j', 'log4j-api' ).versionRef('log4j')
            library('log4j-core', 'org.apache.logging.log4j', 'log4j-core').versionRef('log4j')
            library('log4j-iostreams', 'org.apache.logging.log4j', 'log4j-iostreams').versionRef('log4j')
            library('log4j-slf4j2-impl', 'org.apache.logging.log4j', 'log4j-slf4j2-impl').versionRef('log4j')
            bundle('log4j', ['log4j-api', 'log4j-core', 'log4j-iostreams', 'log4j-slf4j2-impl'])

            library('apache-commons', 'org.apache.commons:commons-lang3:3.14.0')
            library('mojang-logging', 'com.mojang:logging:1.2.7')
            library('jopt-simple', 'net.sf.jopt-simple:jopt-simple:5.0.4')
            library('commons-io', 'commons-io:commons-io:2.15.1')

            version('lwjgl', '3.3.3')
            library('lwjgl',        'org.lwjgl', 'lwjgl'       ).versionRef('lwjgl')
            library('lwjgl-glfw',   'org.lwjgl', 'lwjgl-glfw'  ).versionRef('lwjgl')
            library('lwjgl-opengl', 'org.lwjgl', 'lwjgl-opengl').versionRef('lwjgl')
            library('lwjgl-stb',    'org.lwjgl', 'lwjgl-stb'   ).versionRef('lwjgl')
            library('lwjgl-tinyfd', 'org.lwjgl', 'lwjgl-tinyfd').versionRef('lwjgl')
            bundle('lwjgl', ['lwjgl', 'lwjgl-glfw', 'lwjgl-opengl', 'lwjgl-stb', 'lwjgl-tinyfd'])

            version('adventure', '4.14.0')
            library('adventure-api', 'net.kyori', 'adventure-api').versionRef('adventure')
            library('adventure-key', 'net.kyori', 'adventure-key').versionRef('adventure')
            library('minimessage', 'net.kyori', 'adventure-text-minimessage').versionRef('adventure')
            library('serializer-gson', 'net.kyori', 'adventure-text-serializer-gson').versionRef('adventure')
            library('serializer-json', 'net.kyori', 'adventure-text-serializer-json').versionRef('adventure')
            library('serializer-legacy', 'net.kyori', 'adventure-text-serializer-legacy').versionRef('adventure')
            library('serializer-plain', 'net.kyori', 'adventure-text-serializer-plain').versionRef('adventure')
            library('serializer-ansi', 'net.kyori', 'adventure-text-serializer-ansi').versionRef('adventure')
            library('text-logger-slf4j', 'net.kyori', 'adventure-text-logger-slf4j').versionRef('adventure')
            library('ansi', 'net.kyori:ansi:1.0.3')
            library('examination-api', 'net.kyori:examination-api:1.3.0')
            library('examination-string', 'net.kyori:examination-string:1.3.0')
            bundle('adventure', ['adventure-api', 'adventure-key', 'minimessage', 'serializer-gson', 'serializer-json', 'serializer-legacy', 'serializer-plain', 'serializer-ansi', 'text-logger-slf4j', 'ansi', 'examination-api', 'examination-string'])

            library('i18n', 'com.mohistmc:i18n:0.6')
            library('json', 'com.mohistmc:json:0.5')
            library('tools', 'com.mohistmc:tools:0.5.1')
            library('snakeyaml', 'org.yaml:snakeyaml:2.2')
            library('yaml', 'com.mohistmc:yaml:0.8')
            library('dynamicenum', 'com.mohistmc:dynamicenum:0.3.1')
            library('libraries', 'com.mohistmc:libraries:0.5')
            library('progressbar', 'me.tongfei:progressbar:0.10.0')
            library('orgjline', 'org.jline:jline:3.25.1')
        }
    }
}

rootProject.name = 'Mohist'

include 'fmlloader'
include 'fmlcore'
include 'mclanguage'
include 'javafmllanguage'
include 'lowcodelanguage'

include 'mohistlauncher'
include 'bootstrap'
include 'mohistplugins'

include ':mcp'
project(":mcp").projectDir = file("projects/mcp")

include ':forge'
project(":forge").projectDir = file("projects/mohist")
project(':forge').buildFileName = '../../build_mohist.gradle'

include ':clean'
project(":clean").projectDir = file("projects/clean")
project(':clean').buildFileName = '../../build_clean.gradle'

project(":fmlloader").projectDir = file("forge/fmlloader")
project(":fmlcore").projectDir = file("forge/fmlcore")
project(":mclanguage").projectDir = file("forge/mclanguage")
project(":javafmllanguage").projectDir = file("forge/javafmllanguage")
project(":lowcodelanguage").projectDir = file("forge/lowcodelanguage")
