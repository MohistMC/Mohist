From e082dee74b52e19c5f67c0cbb6ae3984e2cd7e19 Mon Sep 17 00:00:00 2001
From: md_5 <git@md-5.net>
Date: Sat, 30 Jul 2016 11:29:14 +1000
Subject: [PATCH] Branchless NibbleArray


diff --git a/src/main/java/net/minecraft/server/NibbleArray.java b/src/main/java/net/minecraft/server/NibbleArray.java
index 99822dde7..9aeb6ed1b 100644
--- a/src/main/java/net/minecraft/server/NibbleArray.java
+++ b/src/main/java/net/minecraft/server/NibbleArray.java
@@ -32,29 +32,27 @@ public class NibbleArray {
         return j << 8 | k << 4 | i;
     }
 
-    private int b(int i) {
+    public int b(int i) { // PAIL: private -> public
         if (this.a == null) {
             return 0;
         } else {
             int j = this.d(i);
 
-            return this.c(i) ? this.a[j] & 15 : this.a[j] >> 4 & 15;
+            return this.a[j] >> ((i & 1) << 2) & 15; // Spigot
         }
     }
 
-    private void a(int i, int j) {
+    public void a(int i, int j) { // PAIL: private -> public
         if (this.a == null) {
             this.a = new byte[2048];
         }
 
         int k = this.d(i);
 
-        if (this.c(i)) {
-            this.a[k] = (byte) (this.a[k] & 240 | j & 15);
-        } else {
-            this.a[k] = (byte) (this.a[k] & 15 | (j & 15) << 4);
-        }
-
+        // Spigot start
+        int shift = (i & 1) << 2;
+        this.a[k] = (byte) (this.a[k] & ~(15 << shift) | (j & 15) << shift);
+        // Spigot end
     }
 
     private boolean c(int i) {
diff --git a/src/test/java/org/bukkit/NibbleArrayTest.java b/src/test/java/org/bukkit/NibbleArrayTest.java
new file mode 100644
index 000000000..40ba97fb7
--- /dev/null
+++ b/src/test/java/org/bukkit/NibbleArrayTest.java
@@ -0,0 +1,29 @@
+package org.bukkit;
+
+import java.util.Random;
+import net.minecraft.server.NibbleArray;
+import org.junit.Assert;
+import org.junit.Test;
+
+public class NibbleArrayTest {
+
+    private static final int NIBBLE_SIZE = 4096;
+
+    @Test
+    public void testNibble() {
+        Random random = new Random();
+        byte[] classic = new byte[NIBBLE_SIZE];
+        NibbleArray nibble = new NibbleArray();
+
+        for (int i = 0; i < classic.length; i++) {
+            byte number = (byte) (random.nextInt() & 0xF);
+
+            classic[i] = number;
+            nibble.a(i, number);
+        }
+
+        for (int i = 0; i < classic.length; i++) {
+            Assert.assertEquals("Nibble array mismatch", classic[i], nibble.b(i));
+        }
+    }
+}
-- 
2.25.1

