From: Jedediah Smith <jedediah@silencegreys.com>
Date: Tue, 1 Mar 2016 04:32:08 -0500
Subject: [PATCH] Import necessary NMS classes


diff --git a/src/main/java/net/minecraft/server/BlockFalling.java b/src/main/java/net/minecraft/server/BlockFalling.java
new file mode 100644
index 0000000..dcdae99
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockFalling.java
@@ -0,0 +1,77 @@
+package net.minecraft.server;
+
+import java.util.Random;
+
+public class BlockFalling extends Block {
+
+    public static boolean instaFall;
+
+    public BlockFalling() {
+        super(Material.SAND);
+        this.a(CreativeModeTab.b);
+    }
+
+    public BlockFalling(Material material) {
+        super(material);
+    }
+
+    public void onPlace(World world, BlockPosition blockposition, IBlockData iblockdata) {
+        world.a(blockposition, (Block) this, this.a(world));
+    }
+
+    public void a(IBlockData iblockdata, World world, BlockPosition blockposition, Block block, BlockPosition blockposition1) {
+        world.a(blockposition, (Block) this, this.a(world));
+    }
+
+    public void b(World world, BlockPosition blockposition, IBlockData iblockdata, Random random) {
+        if (!world.isClientSide) {
+            this.c(world, blockposition);
+        }
+
+    }
+
+    private void c(World world, BlockPosition blockposition) {
+        if (i(world.getType(blockposition.down())) && blockposition.getY() >= 0) {
+            boolean flag = true;
+
+            if (!BlockFalling.instaFall && world.areChunksLoadedBetween(blockposition.a(-32, -32, -32), blockposition.a(32, 32, 32))) {
+                if (!world.isClientSide) {
+                    EntityFallingBlock entityfallingblock = new EntityFallingBlock(world, (double) blockposition.getX() + 0.5D, (double) blockposition.getY(), (double) blockposition.getZ() + 0.5D, world.getType(blockposition));
+
+                    this.a(entityfallingblock);
+                    world.addEntity(entityfallingblock);
+                }
+            } else {
+                world.setAir(blockposition);
+
+                BlockPosition blockposition1;
+
+                for (blockposition1 = blockposition.down(); i(world.getType(blockposition1)) && blockposition1.getY() > 0; blockposition1 = blockposition1.down()) {
+                    ;
+                }
+
+                if (blockposition1.getY() > 0) {
+                    world.setTypeUpdate(blockposition1.up(), this.getBlockData());
+                }
+            }
+
+        }
+    }
+
+    protected void a(EntityFallingBlock entityfallingblock) {}
+
+    public int a(World world) {
+        return 2;
+    }
+
+    public static boolean i(IBlockData iblockdata) {
+        Block block = iblockdata.getBlock();
+        Material material = iblockdata.getMaterial();
+
+        return block == Blocks.FIRE || material == Material.AIR || material == Material.WATER || material == Material.LAVA;
+    }
+
+    public void a_(World world, BlockPosition blockposition) {}
+
+    public void b(World world, BlockPosition blockposition) {}
+}
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
new file mode 100644
index 0000000..67b476b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -0,0 +1,421 @@
+package net.minecraft.server;
+
+import com.google.common.collect.AbstractIterator;
+import com.google.common.collect.Lists;
+import java.util.Iterator;
+import java.util.List;
+import javax.annotation.concurrent.Immutable;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+@Immutable
+public class BlockPosition extends BaseBlockPosition {
+
+    private static final Logger b = LogManager.getLogger();
+    public static final BlockPosition ZERO = new BlockPosition(0, 0, 0);
+    private static final int c = 1 + MathHelper.e(MathHelper.c(30000000));
+    private static final int d = BlockPosition.c;
+    private static final int f = 64 - BlockPosition.c - BlockPosition.d;
+    private static final int g = 0 + BlockPosition.d;
+    private static final int h = BlockPosition.g + BlockPosition.f;
+    private static final long i = (1L << BlockPosition.c) - 1L;
+    private static final long j = (1L << BlockPosition.f) - 1L;
+    private static final long k = (1L << BlockPosition.d) - 1L;
+
+    public BlockPosition(int i, int j, int k) {
+        super(i, j, k);
+    }
+
+    public BlockPosition(double d0, double d1, double d2) {
+        super(d0, d1, d2);
+    }
+
+    public BlockPosition(Entity entity) {
+        this(entity.locX, entity.locY, entity.locZ);
+    }
+
+    public BlockPosition(Vec3D vec3d) {
+        this(vec3d.x, vec3d.y, vec3d.z);
+    }
+
+    public BlockPosition(BaseBlockPosition baseblockposition) {
+        this(baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ());
+    }
+
+    public BlockPosition a(double d0, double d1, double d2) {
+        return d0 == 0.0D && d1 == 0.0D && d2 == 0.0D ? this : new BlockPosition((double) this.getX() + d0, (double) this.getY() + d1, (double) this.getZ() + d2);
+    }
+
+    public BlockPosition a(int i, int j, int k) {
+        return i == 0 && j == 0 && k == 0 ? this : new BlockPosition(this.getX() + i, this.getY() + j, this.getZ() + k);
+    }
+
+    public BlockPosition a(BaseBlockPosition baseblockposition) {
+        return this.a(baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ());
+    }
+
+    public BlockPosition b(BaseBlockPosition baseblockposition) {
+        return this.a(-baseblockposition.getX(), -baseblockposition.getY(), -baseblockposition.getZ());
+    }
+
+    public BlockPosition up() {
+        return this.up(1);
+    }
+
+    public BlockPosition up(int i) {
+        return this.shift(EnumDirection.UP, i);
+    }
+
+    public BlockPosition down() {
+        return this.down(1);
+    }
+
+    public BlockPosition down(int i) {
+        return this.shift(EnumDirection.DOWN, i);
+    }
+
+    public BlockPosition north() {
+        return this.north(1);
+    }
+
+    public BlockPosition north(int i) {
+        return this.shift(EnumDirection.NORTH, i);
+    }
+
+    public BlockPosition south() {
+        return this.south(1);
+    }
+
+    public BlockPosition south(int i) {
+        return this.shift(EnumDirection.SOUTH, i);
+    }
+
+    public BlockPosition west() {
+        return this.west(1);
+    }
+
+    public BlockPosition west(int i) {
+        return this.shift(EnumDirection.WEST, i);
+    }
+
+    public BlockPosition east() {
+        return this.east(1);
+    }
+
+    public BlockPosition east(int i) {
+        return this.shift(EnumDirection.EAST, i);
+    }
+
+    public BlockPosition shift(EnumDirection enumdirection) {
+        return this.shift(enumdirection, 1);
+    }
+
+    public BlockPosition shift(EnumDirection enumdirection, int i) {
+        return i == 0 ? this : new BlockPosition(this.getX() + enumdirection.getAdjacentX() * i, this.getY() + enumdirection.getAdjacentY() * i, this.getZ() + enumdirection.getAdjacentZ() * i);
+    }
+
+    public BlockPosition a(EnumBlockRotation enumblockrotation) {
+        switch (enumblockrotation) {
+        case NONE:
+        default:
+            return this;
+
+        case CLOCKWISE_90:
+            return new BlockPosition(-this.getZ(), this.getY(), this.getX());
+
+        case CLOCKWISE_180:
+            return new BlockPosition(-this.getX(), this.getY(), -this.getZ());
+
+        case COUNTERCLOCKWISE_90:
+            return new BlockPosition(this.getZ(), this.getY(), -this.getX());
+        }
+    }
+
+    public BlockPosition c(BaseBlockPosition baseblockposition) {
+        return new BlockPosition(this.getY() * baseblockposition.getZ() - this.getZ() * baseblockposition.getY(), this.getZ() * baseblockposition.getX() - this.getX() * baseblockposition.getZ(), this.getX() * baseblockposition.getY() - this.getY() * baseblockposition.getX());
+    }
+
+    public long asLong() {
+        return ((long) this.getX() & BlockPosition.i) << BlockPosition.h | ((long) this.getY() & BlockPosition.j) << BlockPosition.g | ((long) this.getZ() & BlockPosition.k) << 0;
+    }
+
+    public static BlockPosition fromLong(long i) {
+        int j = (int) (i << 64 - BlockPosition.h - BlockPosition.c >> 64 - BlockPosition.c);
+        int k = (int) (i << 64 - BlockPosition.g - BlockPosition.f >> 64 - BlockPosition.f);
+        int l = (int) (i << 64 - BlockPosition.d >> 64 - BlockPosition.d);
+
+        return new BlockPosition(j, k, l);
+    }
+
+    public static Iterable<BlockPosition> a(BlockPosition blockposition, BlockPosition blockposition1) {
+        return a(Math.min(blockposition.getX(), blockposition1.getX()), Math.min(blockposition.getY(), blockposition1.getY()), Math.min(blockposition.getZ(), blockposition1.getZ()), Math.max(blockposition.getX(), blockposition1.getX()), Math.max(blockposition.getY(), blockposition1.getY()), Math.max(blockposition.getZ(), blockposition1.getZ()));
+    }
+
+    public static Iterable<BlockPosition> a(final int i, final int j, final int k, final int l, final int i1, final int j1) {
+        return new Iterable() {
+            public Iterator<BlockPosition> iterator() {
+                return new AbstractIterator() {
+                    private boolean b = true;
+                    private int c;
+                    private int d;
+                    private int e;
+
+                    protected BlockPosition a() {
+                        if (this.b) {
+                            this.b = false;
+                            this.c = i;
+                            this.d = j;
+                            this.e = k;
+                            return new BlockPosition(i, j, k);
+                        } else if (this.c == l && this.d == i1 && this.e == j1) {
+                            return (BlockPosition) this.endOfData();
+                        } else {
+                            if (this.c < l) {
+                                ++this.c;
+                            } else if (this.d < i1) {
+                                this.c = i;
+                                ++this.d;
+                            } else if (this.e < j1) {
+                                this.c = i;
+                                this.d = j;
+                                ++this.e;
+                            }
+
+                            return new BlockPosition(this.c, this.d, this.e);
+                        }
+                    }
+
+                    protected Object computeNext() {
+                        return this.a();
+                    }
+                };
+            }
+        };
+    }
+
+    public BlockPosition h() {
+        return this;
+    }
+
+    public static Iterable<BlockPosition.MutableBlockPosition> b(BlockPosition blockposition, BlockPosition blockposition1) {
+        return b(Math.min(blockposition.getX(), blockposition1.getX()), Math.min(blockposition.getY(), blockposition1.getY()), Math.min(blockposition.getZ(), blockposition1.getZ()), Math.max(blockposition.getX(), blockposition1.getX()), Math.max(blockposition.getY(), blockposition1.getY()), Math.max(blockposition.getZ(), blockposition1.getZ()));
+    }
+
+    public static Iterable<BlockPosition.MutableBlockPosition> b(final int i, final int j, final int k, final int l, final int i1, final int j1) {
+        return new Iterable() {
+            public Iterator<BlockPosition.MutableBlockPosition> iterator() {
+                return new AbstractIterator() {
+                    private BlockPosition.MutableBlockPosition b;
+
+                    protected BlockPosition.MutableBlockPosition a() {
+                        if (this.b == null) {
+                            this.b = new BlockPosition.MutableBlockPosition(i, j, k);
+                            return this.b;
+                        } else if (this.b.b == l && this.b.c == i1 && this.b.d == j1) {
+                            return (BlockPosition.MutableBlockPosition) this.endOfData();
+                        } else {
+                            if (this.b.b < l) {
+                                ++this.b.b;
+                            } else if (this.b.c < i1) {
+                                this.b.b = i;
+                                ++this.b.c;
+                            } else if (this.b.d < j1) {
+                                this.b.b = i;
+                                this.b.c = j;
+                                ++this.b.d;
+                            }
+
+                            return this.b;
+                        }
+                    }
+
+                    protected Object computeNext() {
+                        return this.a();
+                    }
+                };
+            }
+        };
+    }
+
+    public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
+        return this.c(baseblockposition);
+    }
+
+    public static final class PooledBlockPosition extends BlockPosition.MutableBlockPosition {
+
+        private boolean f;
+        private static final List<BlockPosition.PooledBlockPosition> g = Lists.newArrayList();
+
+        private PooledBlockPosition(int i, int j, int k) {
+            super(i, j, k);
+        }
+
+        public static BlockPosition.PooledBlockPosition s() {
+            return e(0, 0, 0);
+        }
+
+        public static BlockPosition.PooledBlockPosition d(double d0, double d1, double d2) {
+            return e(MathHelper.floor(d0), MathHelper.floor(d1), MathHelper.floor(d2));
+        }
+
+        public static BlockPosition.PooledBlockPosition e(int i, int j, int k) {
+            List list = BlockPosition.PooledBlockPosition.g;
+
+            synchronized (BlockPosition.PooledBlockPosition.g) {
+                if (!BlockPosition.PooledBlockPosition.g.isEmpty()) {
+                    BlockPosition.PooledBlockPosition blockposition_pooledblockposition = (BlockPosition.PooledBlockPosition) BlockPosition.PooledBlockPosition.g.remove(BlockPosition.PooledBlockPosition.g.size() - 1);
+
+                    if (blockposition_pooledblockposition != null && blockposition_pooledblockposition.f) {
+                        blockposition_pooledblockposition.f = false;
+                        blockposition_pooledblockposition.f(i, j, k);
+                        return blockposition_pooledblockposition;
+                    }
+                }
+            }
+
+            return new BlockPosition.PooledBlockPosition(i, j, k);
+        }
+
+        public void t() {
+            List list = BlockPosition.PooledBlockPosition.g;
+
+            synchronized (BlockPosition.PooledBlockPosition.g) {
+                if (BlockPosition.PooledBlockPosition.g.size() < 100) {
+                    BlockPosition.PooledBlockPosition.g.add(this);
+                }
+
+                this.f = true;
+            }
+        }
+
+        public BlockPosition.PooledBlockPosition f(int i, int j, int k) {
+            if (this.f) {
+                BlockPosition.b.error("PooledMutableBlockPosition modified after it was released.", new Throwable());
+                this.f = false;
+            }
+
+            return (BlockPosition.PooledBlockPosition) super.c(i, j, k);
+        }
+
+        public BlockPosition.PooledBlockPosition e(double d0, double d1, double d2) {
+            return (BlockPosition.PooledBlockPosition) super.c(d0, d1, d2);
+        }
+
+        public BlockPosition.PooledBlockPosition j(BaseBlockPosition baseblockposition) {
+            return (BlockPosition.PooledBlockPosition) super.g(baseblockposition);
+        }
+
+        public BlockPosition.PooledBlockPosition d(EnumDirection enumdirection) {
+            return (BlockPosition.PooledBlockPosition) super.c(enumdirection);
+        }
+
+        public BlockPosition.PooledBlockPosition d(EnumDirection enumdirection, int i) {
+            return (BlockPosition.PooledBlockPosition) super.c(enumdirection, i);
+        }
+
+        public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection, int i) {
+            return this.d(enumdirection, i);
+        }
+
+        public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection) {
+            return this.d(enumdirection);
+        }
+
+        public BlockPosition.MutableBlockPosition g(BaseBlockPosition baseblockposition) {
+            return this.j(baseblockposition);
+        }
+
+        public BlockPosition.MutableBlockPosition c(double d0, double d1, double d2) {
+            return this.e(d0, d1, d2);
+        }
+
+        public BlockPosition.MutableBlockPosition c(int i, int j, int k) {
+            return this.f(i, j, k);
+        }
+    }
+
+    public static class MutableBlockPosition extends BlockPosition {
+
+        protected int b;
+        protected int c;
+        protected int d;
+
+        public MutableBlockPosition() {
+            this(0, 0, 0);
+        }
+
+        public MutableBlockPosition(BlockPosition blockposition) {
+            this(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+        }
+
+        public MutableBlockPosition(int i, int j, int k) {
+            super(0, 0, 0);
+            this.b = i;
+            this.c = j;
+            this.d = k;
+        }
+
+        public BlockPosition a(double d0, double d1, double d2) {
+            return super.a(d0, d1, d2).h();
+        }
+
+        public BlockPosition a(int i, int j, int k) {
+            return super.a(i, j, k).h();
+        }
+
+        public BlockPosition shift(EnumDirection enumdirection, int i) {
+            return super.shift(enumdirection, i).h();
+        }
+
+        public BlockPosition a(EnumBlockRotation enumblockrotation) {
+            return super.a(enumblockrotation).h();
+        }
+
+        public int getX() {
+            return this.b;
+        }
+
+        public int getY() {
+            return this.c;
+        }
+
+        public int getZ() {
+            return this.d;
+        }
+
+        public BlockPosition.MutableBlockPosition c(int i, int j, int k) {
+            this.b = i;
+            this.c = j;
+            this.d = k;
+            return this;
+        }
+
+        public BlockPosition.MutableBlockPosition c(double d0, double d1, double d2) {
+            return this.c(MathHelper.floor(d0), MathHelper.floor(d1), MathHelper.floor(d2));
+        }
+
+        public BlockPosition.MutableBlockPosition g(BaseBlockPosition baseblockposition) {
+            return this.c(baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ());
+        }
+
+        public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection) {
+            return this.c(enumdirection, 1);
+        }
+
+        public BlockPosition.MutableBlockPosition c(EnumDirection enumdirection, int i) {
+            return this.c(this.b + enumdirection.getAdjacentX() * i, this.c + enumdirection.getAdjacentY() * i, this.d + enumdirection.getAdjacentZ() * i);
+        }
+
+        public void p(int i) {
+            this.c = i;
+        }
+
+        public BlockPosition h() {
+            return new BlockPosition(this);
+        }
+
+        public BaseBlockPosition d(BaseBlockPosition baseblockposition) {
+            return super.c(baseblockposition);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/DataConverterMaterialId.java b/src/main/java/net/minecraft/server/DataConverterMaterialId.java
new file mode 100644
index 0000000..87b82eb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/DataConverterMaterialId.java
@@ -0,0 +1,342 @@
+package net.minecraft.server;
+
+public class DataConverterMaterialId implements IDataConverter {
+
+    private static final String[] a = new String[2268];
+
+    public DataConverterMaterialId() {}
+
+    public int a() {
+        return 102;
+    }
+
+    public NBTTagCompound a(NBTTagCompound nbttagcompound) {
+        if (nbttagcompound.hasKeyOfType("id", 99)) {
+            short short0 = nbttagcompound.getShort("id");
+
+            if (short0 > 0 && short0 < DataConverterMaterialId.a.length && DataConverterMaterialId.a[short0] != null) {
+                nbttagcompound.setString("id", DataConverterMaterialId.a[short0]);
+            }
+        }
+
+        return nbttagcompound;
+    }
+
+    static {
+        DataConverterMaterialId.a[1] = "minecraft:stone";
+        DataConverterMaterialId.a[2] = "minecraft:grass";
+        DataConverterMaterialId.a[3] = "minecraft:dirt";
+        DataConverterMaterialId.a[4] = "minecraft:cobblestone";
+        DataConverterMaterialId.a[5] = "minecraft:planks";
+        DataConverterMaterialId.a[6] = "minecraft:sapling";
+        DataConverterMaterialId.a[7] = "minecraft:bedrock";
+        DataConverterMaterialId.a[8] = "minecraft:flowing_water";
+        DataConverterMaterialId.a[9] = "minecraft:water";
+        DataConverterMaterialId.a[10] = "minecraft:flowing_lava";
+        DataConverterMaterialId.a[11] = "minecraft:lava";
+        DataConverterMaterialId.a[12] = "minecraft:sand";
+        DataConverterMaterialId.a[13] = "minecraft:gravel";
+        DataConverterMaterialId.a[14] = "minecraft:gold_ore";
+        DataConverterMaterialId.a[15] = "minecraft:iron_ore";
+        DataConverterMaterialId.a[16] = "minecraft:coal_ore";
+        DataConverterMaterialId.a[17] = "minecraft:log";
+        DataConverterMaterialId.a[18] = "minecraft:leaves";
+        DataConverterMaterialId.a[19] = "minecraft:sponge";
+        DataConverterMaterialId.a[20] = "minecraft:glass";
+        DataConverterMaterialId.a[21] = "minecraft:lapis_ore";
+        DataConverterMaterialId.a[22] = "minecraft:lapis_block";
+        DataConverterMaterialId.a[23] = "minecraft:dispenser";
+        DataConverterMaterialId.a[24] = "minecraft:sandstone";
+        DataConverterMaterialId.a[25] = "minecraft:noteblock";
+        DataConverterMaterialId.a[27] = "minecraft:golden_rail";
+        DataConverterMaterialId.a[28] = "minecraft:detector_rail";
+        DataConverterMaterialId.a[29] = "minecraft:sticky_piston";
+        DataConverterMaterialId.a[30] = "minecraft:web";
+        DataConverterMaterialId.a[31] = "minecraft:tallgrass";
+        DataConverterMaterialId.a[32] = "minecraft:deadbush";
+        DataConverterMaterialId.a[33] = "minecraft:piston";
+        DataConverterMaterialId.a[35] = "minecraft:wool";
+        DataConverterMaterialId.a[37] = "minecraft:yellow_flower";
+        DataConverterMaterialId.a[38] = "minecraft:red_flower";
+        DataConverterMaterialId.a[39] = "minecraft:brown_mushroom";
+        DataConverterMaterialId.a[40] = "minecraft:red_mushroom";
+        DataConverterMaterialId.a[41] = "minecraft:gold_block";
+        DataConverterMaterialId.a[42] = "minecraft:iron_block";
+        DataConverterMaterialId.a[43] = "minecraft:double_stone_slab";
+        DataConverterMaterialId.a[44] = "minecraft:stone_slab";
+        DataConverterMaterialId.a[45] = "minecraft:brick_block";
+        DataConverterMaterialId.a[46] = "minecraft:tnt";
+        DataConverterMaterialId.a[47] = "minecraft:bookshelf";
+        DataConverterMaterialId.a[48] = "minecraft:mossy_cobblestone";
+        DataConverterMaterialId.a[49] = "minecraft:obsidian";
+        DataConverterMaterialId.a[50] = "minecraft:torch";
+        DataConverterMaterialId.a[51] = "minecraft:fire";
+        DataConverterMaterialId.a[52] = "minecraft:mob_spawner";
+        DataConverterMaterialId.a[53] = "minecraft:oak_stairs";
+        DataConverterMaterialId.a[54] = "minecraft:chest";
+        DataConverterMaterialId.a[56] = "minecraft:diamond_ore";
+        DataConverterMaterialId.a[57] = "minecraft:diamond_block";
+        DataConverterMaterialId.a[58] = "minecraft:crafting_table";
+        DataConverterMaterialId.a[60] = "minecraft:farmland";
+        DataConverterMaterialId.a[61] = "minecraft:furnace";
+        DataConverterMaterialId.a[62] = "minecraft:lit_furnace";
+        DataConverterMaterialId.a[65] = "minecraft:ladder";
+        DataConverterMaterialId.a[66] = "minecraft:rail";
+        DataConverterMaterialId.a[67] = "minecraft:stone_stairs";
+        DataConverterMaterialId.a[69] = "minecraft:lever";
+        DataConverterMaterialId.a[70] = "minecraft:stone_pressure_plate";
+        DataConverterMaterialId.a[72] = "minecraft:wooden_pressure_plate";
+        DataConverterMaterialId.a[73] = "minecraft:redstone_ore";
+        DataConverterMaterialId.a[76] = "minecraft:redstone_torch";
+        DataConverterMaterialId.a[77] = "minecraft:stone_button";
+        DataConverterMaterialId.a[78] = "minecraft:snow_layer";
+        DataConverterMaterialId.a[79] = "minecraft:ice";
+        DataConverterMaterialId.a[80] = "minecraft:snow";
+        DataConverterMaterialId.a[81] = "minecraft:cactus";
+        DataConverterMaterialId.a[82] = "minecraft:clay";
+        DataConverterMaterialId.a[84] = "minecraft:jukebox";
+        DataConverterMaterialId.a[85] = "minecraft:fence";
+        DataConverterMaterialId.a[86] = "minecraft:pumpkin";
+        DataConverterMaterialId.a[87] = "minecraft:netherrack";
+        DataConverterMaterialId.a[88] = "minecraft:soul_sand";
+        DataConverterMaterialId.a[89] = "minecraft:glowstone";
+        DataConverterMaterialId.a[90] = "minecraft:portal";
+        DataConverterMaterialId.a[91] = "minecraft:lit_pumpkin";
+        DataConverterMaterialId.a[95] = "minecraft:stained_glass";
+        DataConverterMaterialId.a[96] = "minecraft:trapdoor";
+        DataConverterMaterialId.a[97] = "minecraft:monster_egg";
+        DataConverterMaterialId.a[98] = "minecraft:stonebrick";
+        DataConverterMaterialId.a[99] = "minecraft:brown_mushroom_block";
+        DataConverterMaterialId.a[100] = "minecraft:red_mushroom_block";
+        DataConverterMaterialId.a[101] = "minecraft:iron_bars";
+        DataConverterMaterialId.a[102] = "minecraft:glass_pane";
+        DataConverterMaterialId.a[103] = "minecraft:melon_block";
+        DataConverterMaterialId.a[106] = "minecraft:vine";
+        DataConverterMaterialId.a[107] = "minecraft:fence_gate";
+        DataConverterMaterialId.a[108] = "minecraft:brick_stairs";
+        DataConverterMaterialId.a[109] = "minecraft:stone_brick_stairs";
+        DataConverterMaterialId.a[110] = "minecraft:mycelium";
+        DataConverterMaterialId.a[111] = "minecraft:waterlily";
+        DataConverterMaterialId.a[112] = "minecraft:nether_brick";
+        DataConverterMaterialId.a[113] = "minecraft:nether_brick_fence";
+        DataConverterMaterialId.a[114] = "minecraft:nether_brick_stairs";
+        DataConverterMaterialId.a[116] = "minecraft:enchanting_table";
+        DataConverterMaterialId.a[119] = "minecraft:end_portal";
+        DataConverterMaterialId.a[120] = "minecraft:end_portal_frame";
+        DataConverterMaterialId.a[121] = "minecraft:end_stone";
+        DataConverterMaterialId.a[122] = "minecraft:dragon_egg";
+        DataConverterMaterialId.a[123] = "minecraft:redstone_lamp";
+        DataConverterMaterialId.a[125] = "minecraft:double_wooden_slab";
+        DataConverterMaterialId.a[126] = "minecraft:wooden_slab";
+        DataConverterMaterialId.a[127] = "minecraft:cocoa";
+        DataConverterMaterialId.a[128] = "minecraft:sandstone_stairs";
+        DataConverterMaterialId.a[129] = "minecraft:emerald_ore";
+        DataConverterMaterialId.a[130] = "minecraft:ender_chest";
+        DataConverterMaterialId.a[131] = "minecraft:tripwire_hook";
+        DataConverterMaterialId.a[133] = "minecraft:emerald_block";
+        DataConverterMaterialId.a[134] = "minecraft:spruce_stairs";
+        DataConverterMaterialId.a[135] = "minecraft:birch_stairs";
+        DataConverterMaterialId.a[136] = "minecraft:jungle_stairs";
+        DataConverterMaterialId.a[137] = "minecraft:command_block";
+        DataConverterMaterialId.a[138] = "minecraft:beacon";
+        DataConverterMaterialId.a[139] = "minecraft:cobblestone_wall";
+        DataConverterMaterialId.a[141] = "minecraft:carrots";
+        DataConverterMaterialId.a[142] = "minecraft:potatoes";
+        DataConverterMaterialId.a[143] = "minecraft:wooden_button";
+        DataConverterMaterialId.a[145] = "minecraft:anvil";
+        DataConverterMaterialId.a[146] = "minecraft:trapped_chest";
+        DataConverterMaterialId.a[147] = "minecraft:light_weighted_pressure_plate";
+        DataConverterMaterialId.a[148] = "minecraft:heavy_weighted_pressure_plate";
+        DataConverterMaterialId.a[151] = "minecraft:daylight_detector";
+        DataConverterMaterialId.a[152] = "minecraft:redstone_block";
+        DataConverterMaterialId.a[153] = "minecraft:quartz_ore";
+        DataConverterMaterialId.a[154] = "minecraft:hopper";
+        DataConverterMaterialId.a[155] = "minecraft:quartz_block";
+        DataConverterMaterialId.a[156] = "minecraft:quartz_stairs";
+        DataConverterMaterialId.a[157] = "minecraft:activator_rail";
+        DataConverterMaterialId.a[158] = "minecraft:dropper";
+        DataConverterMaterialId.a[159] = "minecraft:stained_hardened_clay";
+        DataConverterMaterialId.a[160] = "minecraft:stained_glass_pane";
+        DataConverterMaterialId.a[161] = "minecraft:leaves2";
+        DataConverterMaterialId.a[162] = "minecraft:log2";
+        DataConverterMaterialId.a[163] = "minecraft:acacia_stairs";
+        DataConverterMaterialId.a[164] = "minecraft:dark_oak_stairs";
+        DataConverterMaterialId.a[170] = "minecraft:hay_block";
+        DataConverterMaterialId.a[171] = "minecraft:carpet";
+        DataConverterMaterialId.a[172] = "minecraft:hardened_clay";
+        DataConverterMaterialId.a[173] = "minecraft:coal_block";
+        DataConverterMaterialId.a[174] = "minecraft:packed_ice";
+        DataConverterMaterialId.a[175] = "minecraft:double_plant";
+        DataConverterMaterialId.a[256] = "minecraft:iron_shovel";
+        DataConverterMaterialId.a[257] = "minecraft:iron_pickaxe";
+        DataConverterMaterialId.a[258] = "minecraft:iron_axe";
+        DataConverterMaterialId.a[259] = "minecraft:flint_and_steel";
+        DataConverterMaterialId.a[260] = "minecraft:apple";
+        DataConverterMaterialId.a[261] = "minecraft:bow";
+        DataConverterMaterialId.a[262] = "minecraft:arrow";
+        DataConverterMaterialId.a[263] = "minecraft:coal";
+        DataConverterMaterialId.a[264] = "minecraft:diamond";
+        DataConverterMaterialId.a[265] = "minecraft:iron_ingot";
+        DataConverterMaterialId.a[266] = "minecraft:gold_ingot";
+        DataConverterMaterialId.a[267] = "minecraft:iron_sword";
+        DataConverterMaterialId.a[268] = "minecraft:wooden_sword";
+        DataConverterMaterialId.a[269] = "minecraft:wooden_shovel";
+        DataConverterMaterialId.a[270] = "minecraft:wooden_pickaxe";
+        DataConverterMaterialId.a[271] = "minecraft:wooden_axe";
+        DataConverterMaterialId.a[272] = "minecraft:stone_sword";
+        DataConverterMaterialId.a[273] = "minecraft:stone_shovel";
+        DataConverterMaterialId.a[274] = "minecraft:stone_pickaxe";
+        DataConverterMaterialId.a[275] = "minecraft:stone_axe";
+        DataConverterMaterialId.a[276] = "minecraft:diamond_sword";
+        DataConverterMaterialId.a[277] = "minecraft:diamond_shovel";
+        DataConverterMaterialId.a[278] = "minecraft:diamond_pickaxe";
+        DataConverterMaterialId.a[279] = "minecraft:diamond_axe";
+        DataConverterMaterialId.a[280] = "minecraft:stick";
+        DataConverterMaterialId.a[281] = "minecraft:bowl";
+        DataConverterMaterialId.a[282] = "minecraft:mushroom_stew";
+        DataConverterMaterialId.a[283] = "minecraft:golden_sword";
+        DataConverterMaterialId.a[284] = "minecraft:golden_shovel";
+        DataConverterMaterialId.a[285] = "minecraft:golden_pickaxe";
+        DataConverterMaterialId.a[286] = "minecraft:golden_axe";
+        DataConverterMaterialId.a[287] = "minecraft:string";
+        DataConverterMaterialId.a[288] = "minecraft:feather";
+        DataConverterMaterialId.a[289] = "minecraft:gunpowder";
+        DataConverterMaterialId.a[290] = "minecraft:wooden_hoe";
+        DataConverterMaterialId.a[291] = "minecraft:stone_hoe";
+        DataConverterMaterialId.a[292] = "minecraft:iron_hoe";
+        DataConverterMaterialId.a[293] = "minecraft:diamond_hoe";
+        DataConverterMaterialId.a[294] = "minecraft:golden_hoe";
+        DataConverterMaterialId.a[295] = "minecraft:wheat_seeds";
+        DataConverterMaterialId.a[296] = "minecraft:wheat";
+        DataConverterMaterialId.a[297] = "minecraft:bread";
+        DataConverterMaterialId.a[298] = "minecraft:leather_helmet";
+        DataConverterMaterialId.a[299] = "minecraft:leather_chestplate";
+        DataConverterMaterialId.a[300] = "minecraft:leather_leggings";
+        DataConverterMaterialId.a[301] = "minecraft:leather_boots";
+        DataConverterMaterialId.a[302] = "minecraft:chainmail_helmet";
+        DataConverterMaterialId.a[303] = "minecraft:chainmail_chestplate";
+        DataConverterMaterialId.a[304] = "minecraft:chainmail_leggings";
+        DataConverterMaterialId.a[305] = "minecraft:chainmail_boots";
+        DataConverterMaterialId.a[306] = "minecraft:iron_helmet";
+        DataConverterMaterialId.a[307] = "minecraft:iron_chestplate";
+        DataConverterMaterialId.a[308] = "minecraft:iron_leggings";
+        DataConverterMaterialId.a[309] = "minecraft:iron_boots";
+        DataConverterMaterialId.a[310] = "minecraft:diamond_helmet";
+        DataConverterMaterialId.a[311] = "minecraft:diamond_chestplate";
+        DataConverterMaterialId.a[312] = "minecraft:diamond_leggings";
+        DataConverterMaterialId.a[313] = "minecraft:diamond_boots";
+        DataConverterMaterialId.a[314] = "minecraft:golden_helmet";
+        DataConverterMaterialId.a[315] = "minecraft:golden_chestplate";
+        DataConverterMaterialId.a[316] = "minecraft:golden_leggings";
+        DataConverterMaterialId.a[317] = "minecraft:golden_boots";
+        DataConverterMaterialId.a[318] = "minecraft:flint";
+        DataConverterMaterialId.a[319] = "minecraft:porkchop";
+        DataConverterMaterialId.a[320] = "minecraft:cooked_porkchop";
+        DataConverterMaterialId.a[321] = "minecraft:painting";
+        DataConverterMaterialId.a[322] = "minecraft:golden_apple";
+        DataConverterMaterialId.a[323] = "minecraft:sign";
+        DataConverterMaterialId.a[324] = "minecraft:wooden_door";
+        DataConverterMaterialId.a[325] = "minecraft:bucket";
+        DataConverterMaterialId.a[326] = "minecraft:water_bucket";
+        DataConverterMaterialId.a[327] = "minecraft:lava_bucket";
+        DataConverterMaterialId.a[328] = "minecraft:minecart";
+        DataConverterMaterialId.a[329] = "minecraft:saddle";
+        DataConverterMaterialId.a[330] = "minecraft:iron_door";
+        DataConverterMaterialId.a[331] = "minecraft:redstone";
+        DataConverterMaterialId.a[332] = "minecraft:snowball";
+        DataConverterMaterialId.a[333] = "minecraft:boat";
+        DataConverterMaterialId.a[334] = "minecraft:leather";
+        DataConverterMaterialId.a[335] = "minecraft:milk_bucket";
+        DataConverterMaterialId.a[336] = "minecraft:brick";
+        DataConverterMaterialId.a[337] = "minecraft:clay_ball";
+        DataConverterMaterialId.a[338] = "minecraft:reeds";
+        DataConverterMaterialId.a[339] = "minecraft:paper";
+        DataConverterMaterialId.a[340] = "minecraft:book";
+        DataConverterMaterialId.a[341] = "minecraft:slime_ball";
+        DataConverterMaterialId.a[342] = "minecraft:chest_minecart";
+        DataConverterMaterialId.a[343] = "minecraft:furnace_minecart";
+        DataConverterMaterialId.a[344] = "minecraft:egg";
+        DataConverterMaterialId.a[345] = "minecraft:compass";
+        DataConverterMaterialId.a[346] = "minecraft:fishing_rod";
+        DataConverterMaterialId.a[347] = "minecraft:clock";
+        DataConverterMaterialId.a[348] = "minecraft:glowstone_dust";
+        DataConverterMaterialId.a[349] = "minecraft:fish";
+        DataConverterMaterialId.a[350] = "minecraft:cooked_fished";
+        DataConverterMaterialId.a[351] = "minecraft:dye";
+        DataConverterMaterialId.a[352] = "minecraft:bone";
+        DataConverterMaterialId.a[353] = "minecraft:sugar";
+        DataConverterMaterialId.a[354] = "minecraft:cake";
+        DataConverterMaterialId.a[355] = "minecraft:bed";
+        DataConverterMaterialId.a[356] = "minecraft:repeater";
+        DataConverterMaterialId.a[357] = "minecraft:cookie";
+        DataConverterMaterialId.a[358] = "minecraft:filled_map";
+        DataConverterMaterialId.a[359] = "minecraft:shears";
+        DataConverterMaterialId.a[360] = "minecraft:melon";
+        DataConverterMaterialId.a[361] = "minecraft:pumpkin_seeds";
+        DataConverterMaterialId.a[362] = "minecraft:melon_seeds";
+        DataConverterMaterialId.a[363] = "minecraft:beef";
+        DataConverterMaterialId.a[364] = "minecraft:cooked_beef";
+        DataConverterMaterialId.a[365] = "minecraft:chicken";
+        DataConverterMaterialId.a[366] = "minecraft:cooked_chicken";
+        DataConverterMaterialId.a[367] = "minecraft:rotten_flesh";
+        DataConverterMaterialId.a[368] = "minecraft:ender_pearl";
+        DataConverterMaterialId.a[369] = "minecraft:blaze_rod";
+        DataConverterMaterialId.a[370] = "minecraft:ghast_tear";
+        DataConverterMaterialId.a[371] = "minecraft:gold_nugget";
+        DataConverterMaterialId.a[372] = "minecraft:nether_wart";
+        DataConverterMaterialId.a[373] = "minecraft:potion";
+        DataConverterMaterialId.a[374] = "minecraft:glass_bottle";
+        DataConverterMaterialId.a[375] = "minecraft:spider_eye";
+        DataConverterMaterialId.a[376] = "minecraft:fermented_spider_eye";
+        DataConverterMaterialId.a[377] = "minecraft:blaze_powder";
+        DataConverterMaterialId.a[378] = "minecraft:magma_cream";
+        DataConverterMaterialId.a[379] = "minecraft:brewing_stand";
+        DataConverterMaterialId.a[380] = "minecraft:cauldron";
+        DataConverterMaterialId.a[381] = "minecraft:ender_eye";
+        DataConverterMaterialId.a[382] = "minecraft:speckled_melon";
+        DataConverterMaterialId.a[383] = "minecraft:spawn_egg";
+        DataConverterMaterialId.a[384] = "minecraft:experience_bottle";
+        DataConverterMaterialId.a[385] = "minecraft:fire_charge";
+        DataConverterMaterialId.a[386] = "minecraft:writable_book";
+        DataConverterMaterialId.a[387] = "minecraft:written_book";
+        DataConverterMaterialId.a[388] = "minecraft:emerald";
+        DataConverterMaterialId.a[389] = "minecraft:item_frame";
+        DataConverterMaterialId.a[390] = "minecraft:flower_pot";
+        DataConverterMaterialId.a[391] = "minecraft:carrot";
+        DataConverterMaterialId.a[392] = "minecraft:potato";
+        DataConverterMaterialId.a[393] = "minecraft:baked_potato";
+        DataConverterMaterialId.a[394] = "minecraft:poisonous_potato";
+        DataConverterMaterialId.a[395] = "minecraft:map";
+        DataConverterMaterialId.a[396] = "minecraft:golden_carrot";
+        DataConverterMaterialId.a[397] = "minecraft:skull";
+        DataConverterMaterialId.a[398] = "minecraft:carrot_on_a_stick";
+        DataConverterMaterialId.a[399] = "minecraft:nether_star";
+        DataConverterMaterialId.a[400] = "minecraft:pumpkin_pie";
+        DataConverterMaterialId.a[401] = "minecraft:fireworks";
+        DataConverterMaterialId.a[402] = "minecraft:firework_charge";
+        DataConverterMaterialId.a[403] = "minecraft:enchanted_book";
+        DataConverterMaterialId.a[404] = "minecraft:comparator";
+        DataConverterMaterialId.a[405] = "minecraft:netherbrick";
+        DataConverterMaterialId.a[406] = "minecraft:quartz";
+        DataConverterMaterialId.a[407] = "minecraft:tnt_minecart";
+        DataConverterMaterialId.a[408] = "minecraft:hopper_minecart";
+        DataConverterMaterialId.a[417] = "minecraft:iron_horse_armor";
+        DataConverterMaterialId.a[418] = "minecraft:golden_horse_armor";
+        DataConverterMaterialId.a[419] = "minecraft:diamond_horse_armor";
+        DataConverterMaterialId.a[420] = "minecraft:lead";
+        DataConverterMaterialId.a[421] = "minecraft:name_tag";
+        DataConverterMaterialId.a[422] = "minecraft:command_block_minecart";
+        DataConverterMaterialId.a[2256] = "minecraft:record_13";
+        DataConverterMaterialId.a[2257] = "minecraft:record_cat";
+        DataConverterMaterialId.a[2258] = "minecraft:record_blocks";
+        DataConverterMaterialId.a[2259] = "minecraft:record_chirp";
+        DataConverterMaterialId.a[2260] = "minecraft:record_far";
+        DataConverterMaterialId.a[2261] = "minecraft:record_mall";
+        DataConverterMaterialId.a[2262] = "minecraft:record_mellohi";
+        DataConverterMaterialId.a[2263] = "minecraft:record_stal";
+        DataConverterMaterialId.a[2264] = "minecraft:record_strad";
+        DataConverterMaterialId.a[2265] = "minecraft:record_ward";
+        DataConverterMaterialId.a[2266] = "minecraft:record_11";
+        DataConverterMaterialId.a[2267] = "minecraft:record_wait";
+    }
+}
diff --git a/src/main/java/net/minecraft/server/DataConverterPotionId.java b/src/main/java/net/minecraft/server/DataConverterPotionId.java
new file mode 100644
index 0000000..201f560
--- /dev/null
+++ b/src/main/java/net/minecraft/server/DataConverterPotionId.java
@@ -0,0 +1,166 @@
+package net.minecraft.server;
+
+public class DataConverterPotionId implements IDataConverter {
+
+    private static final String[] a = new String[128];
+
+    public DataConverterPotionId() {}
+
+    public int a() {
+        return 102;
+    }
+
+    public NBTTagCompound a(NBTTagCompound nbttagcompound) {
+        if ("minecraft:potion".equals(nbttagcompound.getString("id"))) {
+            NBTTagCompound nbttagcompound1 = nbttagcompound.getCompound("tag");
+            short short0 = nbttagcompound.getShort("Damage");
+
+            if (!nbttagcompound1.hasKeyOfType("Potion", 8)) {
+                String s = DataConverterPotionId.a[short0 & 127];
+
+                nbttagcompound1.setString("Potion", s == null ? "minecraft:water" : s);
+                nbttagcompound.set("tag", nbttagcompound1);
+                if ((short0 & 16384) == 16384) {
+                    nbttagcompound.setString("id", "minecraft:splash_potion");
+                }
+            }
+
+            if (short0 != 0) {
+                nbttagcompound.setShort("Damage", (short) 0);
+            }
+        }
+
+        return nbttagcompound;
+    }
+
+    static {
+        DataConverterPotionId.a[0] = "minecraft:water";
+        DataConverterPotionId.a[1] = "minecraft:regeneration";
+        DataConverterPotionId.a[2] = "minecraft:swiftness";
+        DataConverterPotionId.a[3] = "minecraft:fire_resistance";
+        DataConverterPotionId.a[4] = "minecraft:poison";
+        DataConverterPotionId.a[5] = "minecraft:healing";
+        DataConverterPotionId.a[6] = "minecraft:night_vision";
+        DataConverterPotionId.a[7] = null;
+        DataConverterPotionId.a[8] = "minecraft:weakness";
+        DataConverterPotionId.a[9] = "minecraft:strength";
+        DataConverterPotionId.a[10] = "minecraft:slowness";
+        DataConverterPotionId.a[11] = "minecraft:leaping";
+        DataConverterPotionId.a[12] = "minecraft:harming";
+        DataConverterPotionId.a[13] = "minecraft:water_breathing";
+        DataConverterPotionId.a[14] = "minecraft:invisibility";
+        DataConverterPotionId.a[15] = null;
+        DataConverterPotionId.a[16] = "minecraft:awkward";
+        DataConverterPotionId.a[17] = "minecraft:regeneration";
+        DataConverterPotionId.a[18] = "minecraft:swiftness";
+        DataConverterPotionId.a[19] = "minecraft:fire_resistance";
+        DataConverterPotionId.a[20] = "minecraft:poison";
+        DataConverterPotionId.a[21] = "minecraft:healing";
+        DataConverterPotionId.a[22] = "minecraft:night_vision";
+        DataConverterPotionId.a[23] = null;
+        DataConverterPotionId.a[24] = "minecraft:weakness";
+        DataConverterPotionId.a[25] = "minecraft:strength";
+        DataConverterPotionId.a[26] = "minecraft:slowness";
+        DataConverterPotionId.a[27] = "minecraft:leaping";
+        DataConverterPotionId.a[28] = "minecraft:harming";
+        DataConverterPotionId.a[29] = "minecraft:water_breathing";
+        DataConverterPotionId.a[30] = "minecraft:invisibility";
+        DataConverterPotionId.a[31] = null;
+        DataConverterPotionId.a[32] = "minecraft:thick";
+        DataConverterPotionId.a[33] = "minecraft:strong_regeneration";
+        DataConverterPotionId.a[34] = "minecraft:strong_swiftness";
+        DataConverterPotionId.a[35] = "minecraft:fire_resistance";
+        DataConverterPotionId.a[36] = "minecraft:strong_poison";
+        DataConverterPotionId.a[37] = "minecraft:strong_healing";
+        DataConverterPotionId.a[38] = "minecraft:night_vision";
+        DataConverterPotionId.a[39] = null;
+        DataConverterPotionId.a[40] = "minecraft:weakness";
+        DataConverterPotionId.a[41] = "minecraft:strong_strength";
+        DataConverterPotionId.a[42] = "minecraft:slowness";
+        DataConverterPotionId.a[43] = "minecraft:strong_leaping";
+        DataConverterPotionId.a[44] = "minecraft:strong_harming";
+        DataConverterPotionId.a[45] = "minecraft:water_breathing";
+        DataConverterPotionId.a[46] = "minecraft:invisibility";
+        DataConverterPotionId.a[47] = null;
+        DataConverterPotionId.a[48] = null;
+        DataConverterPotionId.a[49] = "minecraft:strong_regeneration";
+        DataConverterPotionId.a[50] = "minecraft:strong_swiftness";
+        DataConverterPotionId.a[51] = "minecraft:fire_resistance";
+        DataConverterPotionId.a[52] = "minecraft:strong_poison";
+        DataConverterPotionId.a[53] = "minecraft:strong_healing";
+        DataConverterPotionId.a[54] = "minecraft:night_vision";
+        DataConverterPotionId.a[55] = null;
+        DataConverterPotionId.a[56] = "minecraft:weakness";
+        DataConverterPotionId.a[57] = "minecraft:strong_strength";
+        DataConverterPotionId.a[58] = "minecraft:slowness";
+        DataConverterPotionId.a[59] = "minecraft:strong_leaping";
+        DataConverterPotionId.a[60] = "minecraft:strong_harming";
+        DataConverterPotionId.a[61] = "minecraft:water_breathing";
+        DataConverterPotionId.a[62] = "minecraft:invisibility";
+        DataConverterPotionId.a[63] = null;
+        DataConverterPotionId.a[64] = "minecraft:mundane";
+        DataConverterPotionId.a[65] = "minecraft:long_regeneration";
+        DataConverterPotionId.a[66] = "minecraft:long_swiftness";
+        DataConverterPotionId.a[67] = "minecraft:long_fire_resistance";
+        DataConverterPotionId.a[68] = "minecraft:long_poison";
+        DataConverterPotionId.a[69] = "minecraft:healing";
+        DataConverterPotionId.a[70] = "minecraft:long_night_vision";
+        DataConverterPotionId.a[71] = null;
+        DataConverterPotionId.a[72] = "minecraft:long_weakness";
+        DataConverterPotionId.a[73] = "minecraft:long_strength";
+        DataConverterPotionId.a[74] = "minecraft:long_slowness";
+        DataConverterPotionId.a[75] = "minecraft:long_leaping";
+        DataConverterPotionId.a[76] = "minecraft:harming";
+        DataConverterPotionId.a[77] = "minecraft:long_water_breathing";
+        DataConverterPotionId.a[78] = "minecraft:long_invisibility";
+        DataConverterPotionId.a[79] = null;
+        DataConverterPotionId.a[80] = "minecraft:awkward";
+        DataConverterPotionId.a[81] = "minecraft:long_regeneration";
+        DataConverterPotionId.a[82] = "minecraft:long_swiftness";
+        DataConverterPotionId.a[83] = "minecraft:long_fire_resistance";
+        DataConverterPotionId.a[84] = "minecraft:long_poison";
+        DataConverterPotionId.a[85] = "minecraft:healing";
+        DataConverterPotionId.a[86] = "minecraft:long_night_vision";
+        DataConverterPotionId.a[87] = null;
+        DataConverterPotionId.a[88] = "minecraft:long_weakness";
+        DataConverterPotionId.a[89] = "minecraft:long_strength";
+        DataConverterPotionId.a[90] = "minecraft:long_slowness";
+        DataConverterPotionId.a[91] = "minecraft:long_leaping";
+        DataConverterPotionId.a[92] = "minecraft:harming";
+        DataConverterPotionId.a[93] = "minecraft:long_water_breathing";
+        DataConverterPotionId.a[94] = "minecraft:long_invisibility";
+        DataConverterPotionId.a[95] = null;
+        DataConverterPotionId.a[96] = "minecraft:thick";
+        DataConverterPotionId.a[97] = "minecraft:regeneration";
+        DataConverterPotionId.a[98] = "minecraft:swiftness";
+        DataConverterPotionId.a[99] = "minecraft:long_fire_resistance";
+        DataConverterPotionId.a[100] = "minecraft:poison";
+        DataConverterPotionId.a[101] = "minecraft:strong_healing";
+        DataConverterPotionId.a[102] = "minecraft:long_night_vision";
+        DataConverterPotionId.a[103] = null;
+        DataConverterPotionId.a[104] = "minecraft:long_weakness";
+        DataConverterPotionId.a[105] = "minecraft:strength";
+        DataConverterPotionId.a[106] = "minecraft:long_slowness";
+        DataConverterPotionId.a[107] = "minecraft:leaping";
+        DataConverterPotionId.a[108] = "minecraft:strong_harming";
+        DataConverterPotionId.a[109] = "minecraft:long_water_breathing";
+        DataConverterPotionId.a[110] = "minecraft:long_invisibility";
+        DataConverterPotionId.a[111] = null;
+        DataConverterPotionId.a[112] = null;
+        DataConverterPotionId.a[113] = "minecraft:regeneration";
+        DataConverterPotionId.a[114] = "minecraft:swiftness";
+        DataConverterPotionId.a[115] = "minecraft:long_fire_resistance";
+        DataConverterPotionId.a[116] = "minecraft:poison";
+        DataConverterPotionId.a[117] = "minecraft:strong_healing";
+        DataConverterPotionId.a[118] = "minecraft:long_night_vision";
+        DataConverterPotionId.a[119] = null;
+        DataConverterPotionId.a[120] = "minecraft:long_weakness";
+        DataConverterPotionId.a[121] = "minecraft:strength";
+        DataConverterPotionId.a[122] = "minecraft:long_slowness";
+        DataConverterPotionId.a[123] = "minecraft:leaping";
+        DataConverterPotionId.a[124] = "minecraft:strong_harming";
+        DataConverterPotionId.a[125] = "minecraft:long_water_breathing";
+        DataConverterPotionId.a[126] = "minecraft:long_invisibility";
+        DataConverterPotionId.a[127] = null;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityHorse.java b/src/main/java/net/minecraft/server/EntityHorse.java
new file mode 100644
index 0000000..7eaa95a
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityHorse.java
@@ -0,0 +1,281 @@
+package net.minecraft.server;
+
+import java.util.UUID;
+import javax.annotation.Nullable;
+
+public class EntityHorse extends EntityHorseAbstract {
+
+    private static final UUID bG = UUID.fromString("556E1665-8B10-40C8-8F9D-CF9B1667F295");
+    private static final DataWatcherObject<Integer> bH = DataWatcher.a(EntityHorse.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Integer> bI = DataWatcher.a(EntityHorse.class, DataWatcherRegistry.b);
+    private static final String[] bJ = new String[] { "textures/entity/horse/horse_white.png", "textures/entity/horse/horse_creamy.png", "textures/entity/horse/horse_chestnut.png", "textures/entity/horse/horse_brown.png", "textures/entity/horse/horse_black.png", "textures/entity/horse/horse_gray.png", "textures/entity/horse/horse_darkbrown.png"};
+    private static final String[] bK = new String[] { "hwh", "hcr", "hch", "hbr", "hbl", "hgr", "hdb"};
+    private static final String[] bL = new String[] { null, "textures/entity/horse/horse_markings_white.png", "textures/entity/horse/horse_markings_whitefield.png", "textures/entity/horse/horse_markings_whitedots.png", "textures/entity/horse/horse_markings_blackdots.png"};
+    private static final String[] bM = new String[] { "", "wo_", "wmo", "wdo", "bdo"};
+    private String bN;
+    private final String[] bO = new String[3];
+
+    public EntityHorse(World world) {
+        super(world);
+    }
+
+    protected void i() {
+        super.i();
+        this.datawatcher.register(EntityHorse.bH, Integer.valueOf(0));
+        this.datawatcher.register(EntityHorse.bI, Integer.valueOf(EnumHorseArmor.NONE.a()));
+    }
+
+    public static void a(DataConverterManager dataconvertermanager) {
+        EntityHorseAbstract.c(dataconvertermanager, EntityHorse.class);
+        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItem(EntityHorse.class, new String[] { "ArmorItem"})));
+    }
+
+    public void b(NBTTagCompound nbttagcompound) {
+        super.b(nbttagcompound);
+        nbttagcompound.setInt("Variant", this.getVariant());
+        if (!this.inventoryChest.getItem(1).isEmpty()) {
+            nbttagcompound.set("ArmorItem", this.inventoryChest.getItem(1).save(new NBTTagCompound()));
+        }
+
+    }
+
+    public void a(NBTTagCompound nbttagcompound) {
+        super.a(nbttagcompound);
+        this.setVariant(nbttagcompound.getInt("Variant"));
+        if (nbttagcompound.hasKeyOfType("ArmorItem", 10)) {
+            ItemStack itemstack = new ItemStack(nbttagcompound.getCompound("ArmorItem"));
+
+            if (!itemstack.isEmpty() && EnumHorseArmor.b(itemstack.getItem())) {
+                this.inventoryChest.setItem(1, itemstack);
+            }
+        }
+
+        this.dy();
+    }
+
+    public void setVariant(int i) {
+        this.datawatcher.set(EntityHorse.bH, Integer.valueOf(i));
+        this.dM();
+    }
+
+    public int getVariant() {
+        return ((Integer) this.datawatcher.get(EntityHorse.bH)).intValue();
+    }
+
+    private void dM() {
+        this.bN = null;
+    }
+
+    protected void dy() {
+        super.dy();
+        this.g(this.inventoryChest.getItem(1));
+    }
+
+    public void g(ItemStack itemstack) {
+        EnumHorseArmor enumhorsearmor = EnumHorseArmor.a(itemstack);
+
+        this.datawatcher.set(EntityHorse.bI, Integer.valueOf(enumhorsearmor.a()));
+        this.dM();
+        if (!this.world.isClientSide) {
+            this.getAttributeInstance(GenericAttributes.g).b(EntityHorse.bG);
+            int i = enumhorsearmor.c();
+
+            if (i != 0) {
+                this.getAttributeInstance(GenericAttributes.g).b((new AttributeModifier(EntityHorse.bG, "Horse armor bonus", (double) i, 0)).a(false));
+            }
+        }
+
+    }
+
+    public EnumHorseArmor dL() {
+        return EnumHorseArmor.a(((Integer) this.datawatcher.get(EntityHorse.bI)).intValue());
+    }
+
+    public void a(IInventory iinventory) {
+        EnumHorseArmor enumhorsearmor = this.dL();
+
+        super.a(iinventory);
+        EnumHorseArmor enumhorsearmor1 = this.dL();
+
+        if (this.ticksLived > 20 && enumhorsearmor != enumhorsearmor1 && enumhorsearmor1 != EnumHorseArmor.NONE) {
+            this.a(SoundEffects.cB, 0.5F, 1.0F);
+        }
+
+    }
+
+    protected void a(SoundEffectType soundeffecttype) {
+        super.a(soundeffecttype);
+        if (this.random.nextInt(10) == 0) {
+            this.a(SoundEffects.cC, soundeffecttype.a() * 0.6F, soundeffecttype.b());
+        }
+
+    }
+
+    protected void initAttributes() {
+        super.initAttributes();
+        this.getAttributeInstance(GenericAttributes.maxHealth).setValue((double) this.dH());
+        this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(this.dJ());
+        this.getAttributeInstance(EntityHorse.attributeJumpStrength).setValue(this.dI());
+    }
+
+    public void A_() {
+        super.A_();
+        if (this.world.isClientSide && this.datawatcher.a()) {
+            this.datawatcher.e();
+            this.dM();
+        }
+
+    }
+
+    protected SoundEffect G() {
+        super.G();
+        return SoundEffects.cz;
+    }
+
+    protected SoundEffect bX() {
+        super.bX();
+        return SoundEffects.cD;
+    }
+
+    protected SoundEffect bW() {
+        super.bW();
+        return SoundEffects.cG;
+    }
+
+    protected SoundEffect dj() {
+        super.dj();
+        return SoundEffects.cA;
+    }
+
+    protected MinecraftKey J() {
+        return LootTables.G;
+    }
+
+    public boolean a(EntityHuman entityhuman, EnumHand enumhand) {
+        ItemStack itemstack = entityhuman.b(enumhand);
+        boolean flag = !itemstack.isEmpty();
+
+        if (flag && itemstack.getItem() == Items.SPAWN_EGG) {
+            return super.a(entityhuman, enumhand);
+        } else {
+            if (!this.isBaby()) {
+                if (this.isTamed() && entityhuman.isSneaking()) {
+                    this.f(entityhuman);
+                    return true;
+                }
+
+                if (this.isVehicle()) {
+                    return super.a(entityhuman, enumhand);
+                }
+            }
+
+            if (flag) {
+                if (this.b(entityhuman, itemstack)) {
+                    if (!entityhuman.abilities.canInstantlyBuild) {
+                        itemstack.subtract(1);
+                    }
+
+                    return true;
+                }
+
+                if (itemstack.a(entityhuman, (EntityLiving) this, enumhand)) {
+                    return true;
+                }
+
+                if (!this.isTamed()) {
+                    this.dF();
+                    return true;
+                }
+
+                boolean flag1 = EnumHorseArmor.a(itemstack) != EnumHorseArmor.NONE;
+                boolean flag2 = !this.isBaby() && !this.dB() && itemstack.getItem() == Items.SADDLE;
+
+                if (flag1 || flag2) {
+                    this.f(entityhuman);
+                    return true;
+                }
+            }
+
+            if (this.isBaby()) {
+                return super.a(entityhuman, enumhand);
+            } else {
+                this.g(entityhuman);
+                return true;
+            }
+        }
+    }
+
+    public boolean mate(EntityAnimal entityanimal) {
+        return entityanimal == this ? false : (!(entityanimal instanceof EntityHorseDonkey) && !(entityanimal instanceof EntityHorse) ? false : this.dG() && ((EntityHorseAbstract) entityanimal).dG());
+    }
+
+    public EntityAgeable createChild(EntityAgeable entityageable) {
+        Object object;
+
+        if (entityageable instanceof EntityHorseDonkey) {
+            object = new EntityHorseMule(this.world);
+        } else {
+            EntityHorse entityhorse = (EntityHorse) entityageable;
+
+            object = new EntityHorse(this.world);
+            int i = this.random.nextInt(9);
+            int j;
+
+            if (i < 4) {
+                j = this.getVariant() & 255;
+            } else if (i < 8) {
+                j = entityhorse.getVariant() & 255;
+            } else {
+                j = this.random.nextInt(7);
+            }
+
+            int k = this.random.nextInt(5);
+
+            if (k < 2) {
+                j |= this.getVariant() & '\uff00';
+            } else if (k < 4) {
+                j |= entityhorse.getVariant() & '\uff00';
+            } else {
+                j |= this.random.nextInt(5) << 8 & '\uff00';
+            }
+
+            ((EntityHorse) object).setVariant(j);
+        }
+
+        this.a(entityageable, (EntityHorseAbstract) object);
+        return (EntityAgeable) object;
+    }
+
+    public boolean dK() {
+        return true;
+    }
+
+    public boolean f(ItemStack itemstack) {
+        return EnumHorseArmor.b(itemstack.getItem());
+    }
+
+    @Nullable
+    public GroupDataEntity prepare(DifficultyDamageScaler difficultydamagescaler, @Nullable GroupDataEntity groupdataentity) {
+        Object object = super.prepare(difficultydamagescaler, groupdataentity);
+        int i;
+
+        if (object instanceof EntityHorse.a) {
+            i = ((EntityHorse.a) object).a;
+        } else {
+            i = this.random.nextInt(7);
+            object = new EntityHorse.a(i);
+        }
+
+        this.setVariant(i | this.random.nextInt(5) << 8);
+        return (GroupDataEntity) object;
+    }
+
+    public static class a implements GroupDataEntity {
+
+        public int a;
+
+        public a(int i) {
+            this.a = i;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java b/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
new file mode 100644
index 0000000..22aa68d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
@@ -0,0 +1,192 @@
+package net.minecraft.server;
+
+public abstract class EntityHorseChestedAbstract extends EntityHorseAbstract {
+
+    private static final DataWatcherObject<Boolean> bG = DataWatcher.a(EntityHorseChestedAbstract.class, DataWatcherRegistry.h);
+
+    public EntityHorseChestedAbstract(World world) {
+        super(world);
+        this.bE = false;
+    }
+
+    protected void i() {
+        super.i();
+        this.datawatcher.register(EntityHorseChestedAbstract.bG, Boolean.valueOf(false));
+    }
+
+    protected void initAttributes() {
+        super.initAttributes();
+        this.getAttributeInstance(GenericAttributes.maxHealth).setValue((double) this.dH());
+        this.getAttributeInstance(GenericAttributes.MOVEMENT_SPEED).setValue(0.17499999701976776D);
+        this.getAttributeInstance(EntityHorseChestedAbstract.attributeJumpStrength).setValue(0.5D);
+    }
+
+    public boolean isCarryingChest() {
+        return ((Boolean) this.datawatcher.get(EntityHorseChestedAbstract.bG)).booleanValue();
+    }
+
+    public void setCarryingChest(boolean flag) {
+        this.datawatcher.set(EntityHorseChestedAbstract.bG, Boolean.valueOf(flag));
+    }
+
+    protected int di() {
+        return this.isCarryingChest() ? 17 : super.di();
+    }
+
+    public double ay() {
+        return super.ay() - 0.25D;
+    }
+
+    protected SoundEffect dj() {
+        super.dj();
+        return SoundEffects.aA;
+    }
+
+    public void die(DamageSource damagesource) {
+        super.die(damagesource);
+        if (this.isCarryingChest()) {
+            if (!this.world.isClientSide) {
+                this.a(Item.getItemOf(Blocks.CHEST), 1);
+            }
+
+            this.setCarryingChest(false);
+        }
+
+    }
+
+    public static void b(DataConverterManager dataconvertermanager, Class<?> oclass) {
+        EntityHorseAbstract.c(dataconvertermanager, oclass);
+        dataconvertermanager.a(DataConverterTypes.ENTITY, (DataInspector) (new DataInspectorItemList(oclass, new String[] { "Items"})));
+    }
+
+    public void b(NBTTagCompound nbttagcompound) {
+        super.b(nbttagcompound);
+        nbttagcompound.setBoolean("ChestedHorse", this.isCarryingChest());
+        if (this.isCarryingChest()) {
+            NBTTagList nbttaglist = new NBTTagList();
+
+            for (int i = 2; i < this.inventoryChest.getSize(); ++i) {
+                ItemStack itemstack = this.inventoryChest.getItem(i);
+
+                if (!itemstack.isEmpty()) {
+                    NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+
+                    nbttagcompound1.setByte("Slot", (byte) i);
+                    itemstack.save(nbttagcompound1);
+                    nbttaglist.add(nbttagcompound1);
+                }
+            }
+
+            nbttagcompound.set("Items", nbttaglist);
+        }
+
+    }
+
+    public void a(NBTTagCompound nbttagcompound) {
+        super.a(nbttagcompound);
+        this.setCarryingChest(nbttagcompound.getBoolean("ChestedHorse"));
+        if (this.isCarryingChest()) {
+            NBTTagList nbttaglist = nbttagcompound.getList("Items", 10);
+
+            this.dx();
+
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
+                int j = nbttagcompound1.getByte("Slot") & 255;
+
+                if (j >= 2 && j < this.inventoryChest.getSize()) {
+                    this.inventoryChest.setItem(j, new ItemStack(nbttagcompound1));
+                }
+            }
+        }
+
+        this.dy();
+    }
+
+    public boolean c(int i, ItemStack itemstack) {
+        if (i == 499) {
+            if (this.isCarryingChest() && itemstack.isEmpty()) {
+                this.setCarryingChest(false);
+                this.dx();
+                return true;
+            }
+
+            if (!this.isCarryingChest() && itemstack.getItem() == Item.getItemOf(Blocks.CHEST)) {
+                this.setCarryingChest(true);
+                this.dx();
+                return true;
+            }
+        }
+
+        return super.c(i, itemstack);
+    }
+
+    public boolean a(EntityHuman entityhuman, EnumHand enumhand) {
+        ItemStack itemstack = entityhuman.b(enumhand);
+
+        if (itemstack.getItem() == Items.SPAWN_EGG) {
+            return super.a(entityhuman, enumhand);
+        } else {
+            if (!this.isBaby()) {
+                if (this.isTamed() && entityhuman.isSneaking()) {
+                    this.f(entityhuman);
+                    return true;
+                }
+
+                if (this.isVehicle()) {
+                    return super.a(entityhuman, enumhand);
+                }
+            }
+
+            if (!itemstack.isEmpty()) {
+                boolean flag = this.b(entityhuman, itemstack);
+
+                if (!flag && !this.isTamed()) {
+                    if (itemstack.a(entityhuman, (EntityLiving) this, enumhand)) {
+                        return true;
+                    }
+
+                    this.dF();
+                    return true;
+                }
+
+                if (!flag && !this.isCarryingChest() && itemstack.getItem() == Item.getItemOf(Blocks.CHEST)) {
+                    this.setCarryingChest(true);
+                    this.dk();
+                    flag = true;
+                    this.dx();
+                }
+
+                if (!flag && !this.isBaby() && !this.dB() && itemstack.getItem() == Items.SADDLE) {
+                    this.f(entityhuman);
+                    return true;
+                }
+
+                if (flag) {
+                    if (!entityhuman.abilities.canInstantlyBuild) {
+                        itemstack.subtract(1);
+                    }
+
+                    return true;
+                }
+            }
+
+            if (this.isBaby()) {
+                return super.a(entityhuman, enumhand);
+            } else if (itemstack.a(entityhuman, (EntityLiving) this, enumhand)) {
+                return true;
+            } else {
+                this.g(entityhuman);
+                return true;
+            }
+        }
+    }
+
+    protected void dk() {
+        this.a(SoundEffects.aB, 1.0F, (this.random.nextFloat() - this.random.nextFloat()) * 0.2F + 1.0F);
+    }
+
+    public int dl() {
+        return 5;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/EnumProtocol.java b/src/main/java/net/minecraft/server/EnumProtocol.java
new file mode 100644
index 0000000..6e35b48
--- /dev/null
+++ b/src/main/java/net/minecraft/server/EnumProtocol.java
@@ -0,0 +1,236 @@
+package net.minecraft.server;
+
+import com.google.common.collect.BiMap;
+import com.google.common.collect.HashBiMap;
+import com.google.common.collect.Maps;
+import java.util.Iterator;
+import java.util.Map;
+import javax.annotation.Nullable;
+import org.apache.logging.log4j.LogManager;
+
+public enum EnumProtocol {
+
+    HANDSHAKING(-1) {;
+        {
+            this.a(EnumProtocolDirection.SERVERBOUND, PacketHandshakingInSetProtocol.class);
+        }
+    }, PLAY(0) {;
+    {
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnEntity.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnEntityExperienceOrb.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnEntityWeather.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnEntityLiving.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnEntityPainting.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutNamedEntitySpawn.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutAnimation.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutStatistic.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutBlockBreakAnimation.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutTileEntityData.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutBlockAction.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutBlockChange.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutBoss.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutServerDifficulty.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutTabComplete.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutChat.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutMultiBlockChange.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutTransaction.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCloseWindow.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutOpenWindow.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutWindowItems.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutWindowData.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSetSlot.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSetCooldown.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCustomPayload.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCustomSoundEffect.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutKickDisconnect.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityStatus.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutExplosion.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutUnloadChunk.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutGameStateChange.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutKeepAlive.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutMapChunk.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutWorldEvent.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutWorldParticles.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutLogin.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutMap.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntity.PacketPlayOutRelEntityMove.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntity.PacketPlayOutRelEntityMoveLook.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntity.PacketPlayOutEntityLook.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntity.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutVehicleMove.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutOpenSignEditor.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutAbilities.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCombatEvent.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutPlayerInfo.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutPosition.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutBed.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityDestroy.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutRemoveEntityEffect.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutResourcePackSend.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutRespawn.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityHeadRotation.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutWorldBorder.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCamera.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutHeldItemSlot.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutScoreboardDisplayObjective.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityMetadata.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutAttachEntity.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityVelocity.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityEquipment.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutExperience.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutUpdateHealth.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutScoreboardObjective.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutMount.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutScoreboardTeam.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutScoreboardScore.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnPosition.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutUpdateTime.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutTitle.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutNamedSoundEffect.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutPlayerListHeaderFooter.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCollect.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityTeleport.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutUpdateAttributes.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutEntityEffect.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInTeleportAccept.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInTabComplete.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInChat.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInClientCommand.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInSettings.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInTransaction.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInEnchantItem.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInWindowClick.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInCloseWindow.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInCustomPayload.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInUseEntity.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInKeepAlive.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInFlying.PacketPlayInPosition.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInFlying.PacketPlayInPositionLook.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInFlying.PacketPlayInLook.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInFlying.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInVehicleMove.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInBoatMove.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInAbilities.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInBlockDig.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInEntityAction.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInSteerVehicle.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInResourcePackStatus.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInHeldItemSlot.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInSetCreativeSlot.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInUpdateSign.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInArmAnimation.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInSpectate.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInUseItem.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketPlayInBlockPlace.class);
+    }
+}, STATUS(1) {;
+    {
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketStatusInStart.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketStatusOutServerInfo.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketStatusInPing.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketStatusOutPong.class);
+    }
+}, LOGIN(2) {;
+    {
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketLoginOutDisconnect.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketLoginOutEncryptionBegin.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketLoginOutSuccess.class);
+        this.a(EnumProtocolDirection.CLIENTBOUND, PacketLoginOutSetCompression.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketLoginInStart.class);
+        this.a(EnumProtocolDirection.SERVERBOUND, PacketLoginInEncryptionBegin.class);
+    }
+};
+
+    private static final EnumProtocol[] e = new EnumProtocol[4];
+    private static final Map<Class<? extends Packet<?>>, EnumProtocol> f = Maps.newHashMap();
+    private final int g;
+    private final Map<EnumProtocolDirection, BiMap<Integer, Class<? extends Packet<?>>>> h;
+
+    private EnumProtocol(int i) {
+        this.h = Maps.newEnumMap(EnumProtocolDirection.class);
+        this.g = i;
+    }
+
+    protected EnumProtocol a(EnumProtocolDirection enumprotocoldirection, Class<? extends Packet<?>> oclass) {
+        Object object = (BiMap) this.h.get(enumprotocoldirection);
+
+        if (object == null) {
+            object = HashBiMap.create();
+            this.h.put(enumprotocoldirection, object);
+        }
+
+        if (((BiMap) object).containsValue(oclass)) {
+            String s = enumprotocoldirection + " packet " + oclass + " is already known to ID " + ((BiMap) object).inverse().get(oclass);
+
+            LogManager.getLogger().fatal(s);
+            throw new IllegalArgumentException(s);
+        } else {
+            ((BiMap) object).put(Integer.valueOf(((BiMap) object).size()), oclass);
+            return this;
+        }
+    }
+
+    public Integer a(EnumProtocolDirection enumprotocoldirection, Packet<?> packet) {
+        return (Integer) ((BiMap) this.h.get(enumprotocoldirection)).inverse().get(packet.getClass());
+    }
+
+    @Nullable
+    public Packet<?> a(EnumProtocolDirection enumprotocoldirection, int i) throws IllegalAccessException, InstantiationException {
+        Class oclass = (Class) ((BiMap) this.h.get(enumprotocoldirection)).get(Integer.valueOf(i));
+
+        return oclass == null ? null : (Packet) oclass.newInstance();
+    }
+
+    public int a() {
+        return this.g;
+    }
+
+    public static EnumProtocol a(int i) {
+        return i >= -1 && i <= 2 ? EnumProtocol.e[i - -1] : null;
+    }
+
+    public static EnumProtocol a(Packet<?> packet) {
+        return (EnumProtocol) EnumProtocol.f.get(packet.getClass());
+    }
+
+    EnumProtocol(int i, Object object) {
+        this(i);
+    }
+
+    static {
+        EnumProtocol[] aenumprotocol = values();
+        int i = aenumprotocol.length;
+
+        for (int j = 0; j < i; ++j) {
+            EnumProtocol enumprotocol = aenumprotocol[j];
+            int k = enumprotocol.a();
+
+            if (k < -1 || k > 2) {
+                throw new Error("Invalid protocol ID " + Integer.toString(k));
+            }
+
+            EnumProtocol.e[k - -1] = enumprotocol;
+            Iterator iterator = enumprotocol.h.keySet().iterator();
+
+            while (iterator.hasNext()) {
+                EnumProtocolDirection enumprotocoldirection = (EnumProtocolDirection) iterator.next();
+
+                Class oclass;
+
+                for (Iterator iterator1 = ((BiMap) enumprotocol.h.get(enumprotocoldirection)).values().iterator(); iterator1.hasNext(); EnumProtocol.f.put(oclass, enumprotocol)) {
+                    oclass = (Class) iterator1.next();
+                    if (EnumProtocol.f.containsKey(oclass) && EnumProtocol.f.get(oclass) != enumprotocol) {
+                        throw new Error("Packet " + oclass + " is already assigned to protocol " + EnumProtocol.f.get(oclass) + " - can\'t reassign to " + enumprotocol);
+                    }
+
+                    try {
+                        oclass.newInstance();
+                    } catch (Throwable throwable) {
+                        throw new Error("Packet " + oclass + " fails instantiation checks! " + oclass);
+                    }
+                }
+            }
+        }
+
+    }
+}
diff --git a/src/main/java/net/minecraft/server/GameProfileBanList.java b/src/main/java/net/minecraft/server/GameProfileBanList.java
new file mode 100644
index 0000000..737035b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/GameProfileBanList.java
@@ -0,0 +1,58 @@
+package net.minecraft.server;
+
+import com.google.gson.JsonObject;
+import com.mojang.authlib.GameProfile;
+import java.io.File;
+import java.util.Iterator;
+
+public class GameProfileBanList extends JsonList<GameProfile, GameProfileBanEntry> {
+
+    public GameProfileBanList(File file) {
+        super(file);
+    }
+
+    protected JsonListEntry<GameProfile> a(JsonObject jsonobject) {
+        return new GameProfileBanEntry(jsonobject);
+    }
+
+    public boolean isBanned(GameProfile gameprofile) {
+        return this.d(gameprofile);
+    }
+
+    public String[] getEntries() {
+        String[] astring = new String[this.e().size()];
+        int i = 0;
+
+        GameProfileBanEntry gameprofilebanentry;
+
+        for (Iterator iterator = this.e().values().iterator(); iterator.hasNext(); astring[i++] = ((GameProfile) gameprofilebanentry.getKey()).getName()) {
+            gameprofilebanentry = (GameProfileBanEntry) iterator.next();
+        }
+
+        return astring;
+    }
+
+    protected String b(GameProfile gameprofile) {
+        return gameprofile.getId().toString();
+    }
+
+    public GameProfile a(String s) {
+        Iterator iterator = this.e().values().iterator();
+
+        GameProfileBanEntry gameprofilebanentry;
+
+        do {
+            if (!iterator.hasNext()) {
+                return null;
+            }
+
+            gameprofilebanentry = (GameProfileBanEntry) iterator.next();
+        } while (!s.equalsIgnoreCase(((GameProfile) gameprofilebanentry.getKey()).getName()));
+
+        return (GameProfile) gameprofilebanentry.getKey();
+    }
+
+    protected String a(Object object) {
+        return this.b((GameProfile) object);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/GenericAttributes.java b/src/main/java/net/minecraft/server/GenericAttributes.java
new file mode 100644
index 0000000..15ad9fa
--- /dev/null
+++ b/src/main/java/net/minecraft/server/GenericAttributes.java
@@ -0,0 +1,119 @@
+package net.minecraft.server;
+
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.UUID;
+import javax.annotation.Nullable;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class GenericAttributes {
+
+    private static final Logger j = LogManager.getLogger();
+    public static final IAttribute maxHealth = (new AttributeRanged((IAttribute) null, "generic.maxHealth", 20.0D, 0.0D, 1024.0D)).a("Max Health").a(true);
+    public static final IAttribute FOLLOW_RANGE = (new AttributeRanged((IAttribute) null, "generic.followRange", 32.0D, 0.0D, 2048.0D)).a("Follow Range");
+    public static final IAttribute c = (new AttributeRanged((IAttribute) null, "generic.knockbackResistance", 0.0D, 0.0D, 1.0D)).a("Knockback Resistance");
+    public static final IAttribute MOVEMENT_SPEED = (new AttributeRanged((IAttribute) null, "generic.movementSpeed", 0.699999988079071D, 0.0D, 1024.0D)).a("Movement Speed").a(true);
+    public static final IAttribute ATTACK_DAMAGE = new AttributeRanged((IAttribute) null, "generic.attackDamage", 2.0D, 0.0D, 2048.0D);
+    public static final IAttribute f = (new AttributeRanged((IAttribute) null, "generic.attackSpeed", 4.0D, 0.0D, 1024.0D)).a(true);
+    public static final IAttribute g = (new AttributeRanged((IAttribute) null, "generic.armor", 0.0D, 0.0D, 30.0D)).a(true);
+    public static final IAttribute h = (new AttributeRanged((IAttribute) null, "generic.armorToughness", 0.0D, 0.0D, 20.0D)).a(true);
+    public static final IAttribute i = (new AttributeRanged((IAttribute) null, "generic.luck", 0.0D, -1024.0D, 1024.0D)).a(true);
+
+    public static NBTTagList a(AttributeMapBase attributemapbase) {
+        NBTTagList nbttaglist = new NBTTagList();
+        Iterator iterator = attributemapbase.a().iterator();
+
+        while (iterator.hasNext()) {
+            AttributeInstance attributeinstance = (AttributeInstance) iterator.next();
+
+            nbttaglist.add(a(attributeinstance));
+        }
+
+        return nbttaglist;
+    }
+
+    private static NBTTagCompound a(AttributeInstance attributeinstance) {
+        NBTTagCompound nbttagcompound = new NBTTagCompound();
+        IAttribute iattribute = attributeinstance.getAttribute();
+
+        nbttagcompound.setString("Name", iattribute.getName());
+        nbttagcompound.setDouble("Base", attributeinstance.b());
+        Collection collection = attributeinstance.c();
+
+        if (collection != null && !collection.isEmpty()) {
+            NBTTagList nbttaglist = new NBTTagList();
+            Iterator iterator = collection.iterator();
+
+            while (iterator.hasNext()) {
+                AttributeModifier attributemodifier = (AttributeModifier) iterator.next();
+
+                if (attributemodifier.e()) {
+                    nbttaglist.add(a(attributemodifier));
+                }
+            }
+
+            nbttagcompound.set("Modifiers", nbttaglist);
+        }
+
+        return nbttagcompound;
+    }
+
+    public static NBTTagCompound a(AttributeModifier attributemodifier) {
+        NBTTagCompound nbttagcompound = new NBTTagCompound();
+
+        nbttagcompound.setString("Name", attributemodifier.b());
+        nbttagcompound.setDouble("Amount", attributemodifier.d());
+        nbttagcompound.setInt("Operation", attributemodifier.c());
+        nbttagcompound.a("UUID", attributemodifier.a());
+        return nbttagcompound;
+    }
+
+    public static void a(AttributeMapBase attributemapbase, NBTTagList nbttaglist) {
+        for (int i = 0; i < nbttaglist.size(); ++i) {
+            NBTTagCompound nbttagcompound = nbttaglist.get(i);
+            AttributeInstance attributeinstance = attributemapbase.a(nbttagcompound.getString("Name"));
+
+            if (attributeinstance == null) {
+                GenericAttributes.j.warn("Ignoring unknown attribute \'{}\'", new Object[] { nbttagcompound.getString("Name")});
+            } else {
+                a(attributeinstance, nbttagcompound);
+            }
+        }
+
+    }
+
+    private static void a(AttributeInstance attributeinstance, NBTTagCompound nbttagcompound) {
+        attributeinstance.setValue(nbttagcompound.getDouble("Base"));
+        if (nbttagcompound.hasKeyOfType("Modifiers", 9)) {
+            NBTTagList nbttaglist = nbttagcompound.getList("Modifiers", 10);
+
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                AttributeModifier attributemodifier = a(nbttaglist.get(i));
+
+                if (attributemodifier != null) {
+                    AttributeModifier attributemodifier1 = attributeinstance.a(attributemodifier.a());
+
+                    if (attributemodifier1 != null) {
+                        attributeinstance.c(attributemodifier1);
+                    }
+
+                    attributeinstance.b(attributemodifier);
+                }
+            }
+        }
+
+    }
+
+    @Nullable
+    public static AttributeModifier a(NBTTagCompound nbttagcompound) {
+        UUID uuid = nbttagcompound.a("UUID");
+
+        try {
+            return new AttributeModifier(uuid, nbttagcompound.getString("Name"), nbttagcompound.getDouble("Amount"), nbttagcompound.getInt("Operation"));
+        } catch (Exception exception) {
+            GenericAttributes.j.warn("Unable to create attribute: {}", new Object[] { exception.getMessage()});
+            return null;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Item.java b/src/main/java/net/minecraft/server/Item.java
new file mode 100644
index 0000000..081bf91
--- /dev/null
+++ b/src/main/java/net/minecraft/server/Item.java
@@ -0,0 +1,785 @@
+package net.minecraft.server;
+
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Multimap;
+import java.util.Map;
+import java.util.Random;
+import java.util.UUID;
+import javax.annotation.Nullable;
+
+public class Item {
+
+    public static final RegistryMaterials<MinecraftKey, Item> REGISTRY = new RegistryMaterials();
+    private static final Map<Block, Item> a = Maps.newHashMap();
+    private static final IDynamicTexture b = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture c = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture d = new IDynamicTexture() {
+    };
+    private static final IDynamicTexture e = new IDynamicTexture() {
+    };
+    private final IRegistry<MinecraftKey, IDynamicTexture> f = new RegistrySimple();
+    protected static final UUID h = UUID.fromString("CB3F55D3-645C-4F38-A497-9C13A33DB5CF");
+    protected static final UUID i = UUID.fromString("FA233E1C-4180-4865-B01B-BCCE9785ACA3");
+    private CreativeModeTab n;
+    protected static Random j = new Random();
+    protected int maxStackSize = 64;
+    private int durability;
+    protected boolean l;
+    protected boolean m;
+    private Item craftingResult;
+    private String name;
+
+    public static int getId(Item item) {
+        return item == null ? 0 : Item.REGISTRY.a((Object) item);
+    }
+
+    public static Item getById(int i) {
+        return (Item) Item.REGISTRY.getId(i);
+    }
+
+    public static Item getItemOf(Block block) {
+        Item item = (Item) Item.a.get(block);
+
+        return item == null ? Items.a : item;
+    }
+
+    @Nullable
+    public static Item b(String s) {
+        Item item = (Item) Item.REGISTRY.get(new MinecraftKey(s));
+
+        if (item == null) {
+            try {
+                return getById(Integer.parseInt(s));
+            } catch (NumberFormatException numberformatexception) {
+                ;
+            }
+        }
+
+        return item;
+    }
+
+    public final void a(MinecraftKey minecraftkey, IDynamicTexture idynamictexture) {
+        this.f.a(minecraftkey, idynamictexture);
+    }
+
+    public boolean a(NBTTagCompound nbttagcompound) {
+        return false;
+    }
+
+    public Item() {
+        this.a(new MinecraftKey("lefthanded"), Item.d);
+        this.a(new MinecraftKey("cooldown"), Item.e);
+    }
+
+    public Item d(int i) {
+        this.maxStackSize = i;
+        return this;
+    }
+
+    public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
+        return EnumInteractionResult.PASS;
+    }
+
+    public float getDestroySpeed(ItemStack itemstack, IBlockData iblockdata) {
+        return 1.0F;
+    }
+
+    public InteractionResultWrapper<ItemStack> a(World world, EntityHuman entityhuman, EnumHand enumhand) {
+        return new InteractionResultWrapper(EnumInteractionResult.PASS, entityhuman.b(enumhand));
+    }
+
+    public ItemStack a(ItemStack itemstack, World world, EntityLiving entityliving) {
+        return itemstack;
+    }
+
+    public int getMaxStackSize() {
+        return this.maxStackSize;
+    }
+
+    public int filterData(int i) {
+        return 0;
+    }
+
+    public boolean l() {
+        return this.m;
+    }
+
+    protected Item a(boolean flag) {
+        this.m = flag;
+        return this;
+    }
+
+    public int getMaxDurability() {
+        return this.durability;
+    }
+
+    protected Item setMaxDurability(int i) {
+        this.durability = i;
+        if (i > 0) {
+            this.a(new MinecraftKey("damaged"), Item.b);
+            this.a(new MinecraftKey("damage"), Item.c);
+        }
+
+        return this;
+    }
+
+    public boolean usesDurability() {
+        return this.durability > 0 && (!this.m || this.maxStackSize == 1);
+    }
+
+    public boolean a(ItemStack itemstack, EntityLiving entityliving, EntityLiving entityliving1) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, World world, IBlockData iblockdata, BlockPosition blockposition, EntityLiving entityliving) {
+        return false;
+    }
+
+    public boolean canDestroySpecialBlock(IBlockData iblockdata) {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, EntityHuman entityhuman, EntityLiving entityliving, EnumHand enumhand) {
+        return false;
+    }
+
+    public Item o() {
+        this.l = true;
+        return this;
+    }
+
+    public Item c(String s) {
+        this.name = s;
+        return this;
+    }
+
+    public String j(ItemStack itemstack) {
+        return LocaleI18n.get(this.a(itemstack));
+    }
+
+    public String getName() {
+        return "item." + this.name;
+    }
+
+    public String a(ItemStack itemstack) {
+        return "item." + this.name;
+    }
+
+    public Item b(Item item) {
+        this.craftingResult = item;
+        return this;
+    }
+
+    public boolean q() {
+        return true;
+    }
+
+    @Nullable
+    public Item r() {
+        return this.craftingResult;
+    }
+
+    public boolean s() {
+        return this.craftingResult != null;
+    }
+
+    public void a(ItemStack itemstack, World world, Entity entity, int i, boolean flag) {}
+
+    public void b(ItemStack itemstack, World world, EntityHuman entityhuman) {}
+
+    public boolean f() {
+        return false;
+    }
+
+    public EnumAnimation f(ItemStack itemstack) {
+        return EnumAnimation.NONE;
+    }
+
+    public int e(ItemStack itemstack) {
+        return 0;
+    }
+
+    public void a(ItemStack itemstack, World world, EntityLiving entityliving, int i) {}
+
+    public String b(ItemStack itemstack) {
+        return LocaleI18n.get(this.j(itemstack) + ".name").trim();
+    }
+
+    public EnumItemRarity g(ItemStack itemstack) {
+        return itemstack.hasEnchantments() ? EnumItemRarity.RARE : EnumItemRarity.COMMON;
+    }
+
+    public boolean g_(ItemStack itemstack) {
+        return this.getMaxStackSize() == 1 && this.usesDurability();
+    }
+
+    protected MovingObjectPosition a(World world, EntityHuman entityhuman, boolean flag) {
+        float f = entityhuman.pitch;
+        float f1 = entityhuman.yaw;
+        double d0 = entityhuman.locX;
+        double d1 = entityhuman.locY + (double) entityhuman.getHeadHeight();
+        double d2 = entityhuman.locZ;
+        Vec3D vec3d = new Vec3D(d0, d1, d2);
+        float f2 = MathHelper.cos(-f1 * 0.017453292F - 3.1415927F);
+        float f3 = MathHelper.sin(-f1 * 0.017453292F - 3.1415927F);
+        float f4 = -MathHelper.cos(-f * 0.017453292F);
+        float f5 = MathHelper.sin(-f * 0.017453292F);
+        float f6 = f3 * f4;
+        float f7 = f2 * f4;
+        double d3 = 5.0D;
+        Vec3D vec3d1 = vec3d.add((double) f6 * 5.0D, (double) f5 * 5.0D, (double) f7 * 5.0D);
+
+        return world.rayTrace(vec3d, vec3d1, flag, !flag, false);
+    }
+
+    public int c() {
+        return 0;
+    }
+
+    public Item a(CreativeModeTab creativemodetab) {
+        this.n = creativemodetab;
+        return this;
+    }
+
+    public boolean t() {
+        return false;
+    }
+
+    public boolean a(ItemStack itemstack, ItemStack itemstack1) {
+        return false;
+    }
+
+    public Multimap<String, AttributeModifier> a(EnumItemSlot enumitemslot) {
+        return HashMultimap.create();
+    }
+
+    public static void u() {
+        a(Blocks.AIR, (Item) (new ItemAir(Blocks.AIR)));
+        a(Blocks.STONE, (new ItemMultiTexture(Blocks.STONE, Blocks.STONE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockStone.EnumStoneVariant.a(itemstack.getData()).d();
+            }
+        })).c("stone"));
+        a((Block) Blocks.GRASS, (Item) (new ItemWithAuxData(Blocks.GRASS, false)));
+        a(Blocks.DIRT, (new ItemMultiTexture(Blocks.DIRT, Blocks.DIRT, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockDirt.EnumDirtVariant.a(itemstack.getData()).c();
+            }
+        })).c("dirt"));
+        b(Blocks.COBBLESTONE);
+        a(Blocks.PLANKS, (new ItemMultiTexture(Blocks.PLANKS, Blocks.PLANKS, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+        })).c("wood"));
+        a(Blocks.SAPLING, (new ItemMultiTexture(Blocks.SAPLING, Blocks.SAPLING, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+        })).c("sapling"));
+        b(Blocks.BEDROCK);
+        a((Block) Blocks.SAND, (new ItemMultiTexture(Blocks.SAND, Blocks.SAND, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockSand.EnumSandVariant.a(itemstack.getData()).e();
+            }
+        })).c("sand"));
+        b(Blocks.GRAVEL);
+        b(Blocks.GOLD_ORE);
+        b(Blocks.IRON_ORE);
+        b(Blocks.COAL_ORE);
+        a(Blocks.LOG, (new ItemMultiTexture(Blocks.LOG, Blocks.LOG, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData()).d();
+            }
+        })).c("log"));
+        a(Blocks.LOG2, (new ItemMultiTexture(Blocks.LOG2, Blocks.LOG2, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockWood.EnumLogVariant.a(itemstack.getData() + 4).d();
+            }
+        })).c("log"));
+        a((Block) Blocks.LEAVES, (new ItemLeaves(Blocks.LEAVES)).c("leaves"));
+        a((Block) Blocks.LEAVES2, (new ItemLeaves(Blocks.LEAVES2)).c("leaves"));
+        a(Blocks.SPONGE, (new ItemMultiTexture(Blocks.SPONGE, Blocks.SPONGE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return (itemstack.getData() & 1) == 1 ? "wet" : "dry";
+            }
+        })).c("sponge"));
+        b(Blocks.GLASS);
+        b(Blocks.LAPIS_ORE);
+        b(Blocks.LAPIS_BLOCK);
+        b(Blocks.DISPENSER);
+        a(Blocks.SANDSTONE, (new ItemMultiTexture(Blocks.SANDSTONE, Blocks.SANDSTONE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockSandStone.EnumSandstoneVariant.a(itemstack.getData()).c();
+            }
+        })).c("sandStone"));
+        b(Blocks.NOTEBLOCK);
+        b(Blocks.GOLDEN_RAIL);
+        b(Blocks.DETECTOR_RAIL);
+        a((Block) Blocks.STICKY_PISTON, (Item) (new ItemPiston(Blocks.STICKY_PISTON)));
+        b(Blocks.WEB);
+        a((Block) Blocks.TALLGRASS, (Item) (new ItemWithAuxData(Blocks.TALLGRASS, true)).a(new String[] { "shrub", "grass", "fern"}));
+        b((Block) Blocks.DEADBUSH);
+        a((Block) Blocks.PISTON, (Item) (new ItemPiston(Blocks.PISTON)));
+        a(Blocks.WOOL, (new ItemCloth(Blocks.WOOL)).c("cloth"));
+        a((Block) Blocks.YELLOW_FLOWER, (new ItemMultiTexture(Blocks.YELLOW_FLOWER, Blocks.YELLOW_FLOWER, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.YELLOW, itemstack.getData()).d();
+            }
+        })).c("flower"));
+        a((Block) Blocks.RED_FLOWER, (new ItemMultiTexture(Blocks.RED_FLOWER, Blocks.RED_FLOWER, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockFlowers.EnumFlowerVarient.a(BlockFlowers.EnumFlowerType.RED, itemstack.getData()).d();
+            }
+        })).c("rose"));
+        b((Block) Blocks.BROWN_MUSHROOM);
+        b((Block) Blocks.RED_MUSHROOM);
+        b(Blocks.GOLD_BLOCK);
+        b(Blocks.IRON_BLOCK);
+        a((Block) Blocks.STONE_SLAB, (new ItemStep(Blocks.STONE_SLAB, Blocks.STONE_SLAB, Blocks.DOUBLE_STONE_SLAB)).c("stoneSlab"));
+        b(Blocks.BRICK_BLOCK);
+        b(Blocks.TNT);
+        b(Blocks.BOOKSHELF);
+        b(Blocks.MOSSY_COBBLESTONE);
+        b(Blocks.OBSIDIAN);
+        b(Blocks.TORCH);
+        b(Blocks.END_ROD);
+        b(Blocks.CHORUS_PLANT);
+        b(Blocks.CHORUS_FLOWER);
+        b(Blocks.PURPUR_BLOCK);
+        b(Blocks.PURPUR_PILLAR);
+        b(Blocks.PURPUR_STAIRS);
+        a((Block) Blocks.PURPUR_SLAB, (new ItemStep(Blocks.PURPUR_SLAB, Blocks.PURPUR_SLAB, Blocks.PURPUR_DOUBLE_SLAB)).c("purpurSlab"));
+        b(Blocks.MOB_SPAWNER);
+        b(Blocks.OAK_STAIRS);
+        b((Block) Blocks.CHEST);
+        b(Blocks.DIAMOND_ORE);
+        b(Blocks.DIAMOND_BLOCK);
+        b(Blocks.CRAFTING_TABLE);
+        b(Blocks.FARMLAND);
+        b(Blocks.FURNACE);
+        b(Blocks.LADDER);
+        b(Blocks.RAIL);
+        b(Blocks.STONE_STAIRS);
+        b(Blocks.LEVER);
+        b(Blocks.STONE_PRESSURE_PLATE);
+        b(Blocks.WOODEN_PRESSURE_PLATE);
+        b(Blocks.REDSTONE_ORE);
+        b(Blocks.REDSTONE_TORCH);
+        b(Blocks.STONE_BUTTON);
+        a(Blocks.SNOW_LAYER, (Item) (new ItemSnow(Blocks.SNOW_LAYER)));
+        b(Blocks.ICE);
+        b(Blocks.SNOW);
+        b((Block) Blocks.CACTUS);
+        b(Blocks.CLAY);
+        b(Blocks.JUKEBOX);
+        b(Blocks.FENCE);
+        b(Blocks.SPRUCE_FENCE);
+        b(Blocks.BIRCH_FENCE);
+        b(Blocks.JUNGLE_FENCE);
+        b(Blocks.DARK_OAK_FENCE);
+        b(Blocks.ACACIA_FENCE);
+        b(Blocks.PUMPKIN);
+        b(Blocks.NETHERRACK);
+        b(Blocks.SOUL_SAND);
+        b(Blocks.GLOWSTONE);
+        b(Blocks.LIT_PUMPKIN);
+        b(Blocks.TRAPDOOR);
+        a(Blocks.MONSTER_EGG, (new ItemMultiTexture(Blocks.MONSTER_EGG, Blocks.MONSTER_EGG, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockMonsterEggs.EnumMonsterEggVarient.a(itemstack.getData()).c();
+            }
+        })).c("monsterStoneEgg"));
+        a(Blocks.STONEBRICK, (new ItemMultiTexture(Blocks.STONEBRICK, Blocks.STONEBRICK, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockSmoothBrick.EnumStonebrickType.a(itemstack.getData()).c();
+            }
+        })).c("stonebricksmooth"));
+        b(Blocks.BROWN_MUSHROOM_BLOCK);
+        b(Blocks.RED_MUSHROOM_BLOCK);
+        b(Blocks.IRON_BARS);
+        b(Blocks.GLASS_PANE);
+        b(Blocks.MELON_BLOCK);
+        a(Blocks.VINE, (Item) (new ItemWithAuxData(Blocks.VINE, false)));
+        b(Blocks.FENCE_GATE);
+        b(Blocks.SPRUCE_FENCE_GATE);
+        b(Blocks.BIRCH_FENCE_GATE);
+        b(Blocks.JUNGLE_FENCE_GATE);
+        b(Blocks.DARK_OAK_FENCE_GATE);
+        b(Blocks.ACACIA_FENCE_GATE);
+        b(Blocks.BRICK_STAIRS);
+        b(Blocks.STONE_BRICK_STAIRS);
+        b((Block) Blocks.MYCELIUM);
+        a(Blocks.WATERLILY, (Item) (new ItemWaterLily(Blocks.WATERLILY)));
+        b(Blocks.NETHER_BRICK);
+        b(Blocks.NETHER_BRICK_FENCE);
+        b(Blocks.NETHER_BRICK_STAIRS);
+        b(Blocks.ENCHANTING_TABLE);
+        b(Blocks.END_PORTAL_FRAME);
+        b(Blocks.END_STONE);
+        b(Blocks.END_BRICKS);
+        b(Blocks.DRAGON_EGG);
+        b(Blocks.REDSTONE_LAMP);
+        a((Block) Blocks.WOODEN_SLAB, (new ItemStep(Blocks.WOODEN_SLAB, Blocks.WOODEN_SLAB, Blocks.DOUBLE_WOODEN_SLAB)).c("woodSlab"));
+        b(Blocks.SANDSTONE_STAIRS);
+        b(Blocks.EMERALD_ORE);
+        b(Blocks.ENDER_CHEST);
+        b((Block) Blocks.TRIPWIRE_HOOK);
+        b(Blocks.EMERALD_BLOCK);
+        b(Blocks.SPRUCE_STAIRS);
+        b(Blocks.BIRCH_STAIRS);
+        b(Blocks.JUNGLE_STAIRS);
+        b(Blocks.COMMAND_BLOCK);
+        b((Block) Blocks.BEACON);
+        a(Blocks.COBBLESTONE_WALL, (new ItemMultiTexture(Blocks.COBBLESTONE_WALL, Blocks.COBBLESTONE_WALL, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockCobbleWall.EnumCobbleVariant.a(itemstack.getData()).c();
+            }
+        })).c("cobbleWall"));
+        b(Blocks.WOODEN_BUTTON);
+        a(Blocks.ANVIL, (new ItemAnvil(Blocks.ANVIL)).c("anvil"));
+        b(Blocks.TRAPPED_CHEST);
+        b(Blocks.LIGHT_WEIGHTED_PRESSURE_PLATE);
+        b(Blocks.HEAVY_WEIGHTED_PRESSURE_PLATE);
+        b((Block) Blocks.DAYLIGHT_DETECTOR);
+        b(Blocks.REDSTONE_BLOCK);
+        b(Blocks.QUARTZ_ORE);
+        b((Block) Blocks.HOPPER);
+        a(Blocks.QUARTZ_BLOCK, (new ItemMultiTexture(Blocks.QUARTZ_BLOCK, Blocks.QUARTZ_BLOCK, new String[] { "default", "chiseled", "lines"})).c("quartzBlock"));
+        b(Blocks.QUARTZ_STAIRS);
+        b(Blocks.ACTIVATOR_RAIL);
+        b(Blocks.DROPPER);
+        a(Blocks.STAINED_HARDENED_CLAY, (new ItemCloth(Blocks.STAINED_HARDENED_CLAY)).c("clayHardenedStained"));
+        b(Blocks.BARRIER);
+        b(Blocks.IRON_TRAPDOOR);
+        b(Blocks.HAY_BLOCK);
+        a(Blocks.CARPET, (new ItemCloth(Blocks.CARPET)).c("woolCarpet"));
+        b(Blocks.HARDENED_CLAY);
+        b(Blocks.COAL_BLOCK);
+        b(Blocks.PACKED_ICE);
+        b(Blocks.ACACIA_STAIRS);
+        b(Blocks.DARK_OAK_STAIRS);
+        b(Blocks.SLIME);
+        b(Blocks.GRASS_PATH);
+        a((Block) Blocks.DOUBLE_PLANT, (new ItemMultiTexture(Blocks.DOUBLE_PLANT, Blocks.DOUBLE_PLANT, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockTallPlant.EnumTallFlowerVariants.a(itemstack.getData()).c();
+            }
+        })).c("doublePlant"));
+        a((Block) Blocks.STAINED_GLASS, (new ItemCloth(Blocks.STAINED_GLASS)).c("stainedGlass"));
+        a((Block) Blocks.STAINED_GLASS_PANE, (new ItemCloth(Blocks.STAINED_GLASS_PANE)).c("stainedGlassPane"));
+        a(Blocks.PRISMARINE, (new ItemMultiTexture(Blocks.PRISMARINE, Blocks.PRISMARINE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockPrismarine.EnumPrismarineVariant.a(itemstack.getData()).c();
+            }
+        })).c("prismarine"));
+        b(Blocks.SEA_LANTERN);
+        a(Blocks.RED_SANDSTONE, (new ItemMultiTexture(Blocks.RED_SANDSTONE, Blocks.RED_SANDSTONE, new ItemMultiTexture.a() {
+            public String a(ItemStack itemstack) {
+                return BlockRedSandstone.EnumRedSandstoneVariant.a(itemstack.getData()).c();
+            }
+        })).c("redSandStone"));
+        b(Blocks.RED_SANDSTONE_STAIRS);
+        a((Block) Blocks.STONE_SLAB2, (new ItemStep(Blocks.STONE_SLAB2, Blocks.STONE_SLAB2, Blocks.DOUBLE_STONE_SLAB2)).c("stoneSlab2"));
+        b(Blocks.dc);
+        b(Blocks.dd);
+        b(Blocks.df);
+        b(Blocks.dg);
+        b(Blocks.dh);
+        b(Blocks.di);
+        b(Blocks.dj);
+        b(Blocks.dk);
+        a(Blocks.WHITE_SHULKER_BOX, (Item) (new ItemShulkerBox(Blocks.WHITE_SHULKER_BOX)));
+        a(Blocks.dm, (Item) (new ItemShulkerBox(Blocks.dm)));
+        a(Blocks.dn, (Item) (new ItemShulkerBox(Blocks.dn)));
+        a(Blocks.LIGHT_BLUE_SHULKER_BOX, (Item) (new ItemShulkerBox(Blocks.LIGHT_BLUE_SHULKER_BOX)));
+        a(Blocks.dp, (Item) (new ItemShulkerBox(Blocks.dp)));
+        a(Blocks.dq, (Item) (new ItemShulkerBox(Blocks.dq)));
+        a(Blocks.dr, (Item) (new ItemShulkerBox(Blocks.dr)));
+        a(Blocks.ds, (Item) (new ItemShulkerBox(Blocks.ds)));
+        a(Blocks.dt, (Item) (new ItemShulkerBox(Blocks.dt)));
+        a(Blocks.du, (Item) (new ItemShulkerBox(Blocks.du)));
+        a(Blocks.dv, (Item) (new ItemShulkerBox(Blocks.dv)));
+        a(Blocks.dw, (Item) (new ItemShulkerBox(Blocks.dw)));
+        a(Blocks.dx, (Item) (new ItemShulkerBox(Blocks.dx)));
+        a(Blocks.dy, (Item) (new ItemShulkerBox(Blocks.dy)));
+        a(Blocks.dz, (Item) (new ItemShulkerBox(Blocks.dz)));
+        a(Blocks.dA, (Item) (new ItemShulkerBox(Blocks.dA)));
+        b(Blocks.STRUCTURE_BLOCK);
+        a(256, "iron_shovel", (new ItemSpade(Item.EnumToolMaterial.IRON)).c("shovelIron"));
+        a(257, "iron_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.IRON)).c("pickaxeIron"));
+        a(258, "iron_axe", (new ItemAxe(Item.EnumToolMaterial.IRON)).c("hatchetIron"));
+        a(259, "flint_and_steel", (new ItemFlintAndSteel()).c("flintAndSteel"));
+        a(260, "apple", (new ItemFood(4, 0.3F, false)).c("apple"));
+        a(261, "bow", (new ItemBow()).c("bow"));
+        a(262, "arrow", (new ItemArrow()).c("arrow"));
+        a(263, "coal", (new ItemCoal()).c("coal"));
+        a(264, "diamond", (new Item()).c("diamond").a(CreativeModeTab.l));
+        a(265, "iron_ingot", (new Item()).c("ingotIron").a(CreativeModeTab.l));
+        a(266, "gold_ingot", (new Item()).c("ingotGold").a(CreativeModeTab.l));
+        a(267, "iron_sword", (new ItemSword(Item.EnumToolMaterial.IRON)).c("swordIron"));
+        a(268, "wooden_sword", (new ItemSword(Item.EnumToolMaterial.WOOD)).c("swordWood"));
+        a(269, "wooden_shovel", (new ItemSpade(Item.EnumToolMaterial.WOOD)).c("shovelWood"));
+        a(270, "wooden_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.WOOD)).c("pickaxeWood"));
+        a(271, "wooden_axe", (new ItemAxe(Item.EnumToolMaterial.WOOD)).c("hatchetWood"));
+        a(272, "stone_sword", (new ItemSword(Item.EnumToolMaterial.STONE)).c("swordStone"));
+        a(273, "stone_shovel", (new ItemSpade(Item.EnumToolMaterial.STONE)).c("shovelStone"));
+        a(274, "stone_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.STONE)).c("pickaxeStone"));
+        a(275, "stone_axe", (new ItemAxe(Item.EnumToolMaterial.STONE)).c("hatchetStone"));
+        a(276, "diamond_sword", (new ItemSword(Item.EnumToolMaterial.DIAMOND)).c("swordDiamond"));
+        a(277, "diamond_shovel", (new ItemSpade(Item.EnumToolMaterial.DIAMOND)).c("shovelDiamond"));
+        a(278, "diamond_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.DIAMOND)).c("pickaxeDiamond"));
+        a(279, "diamond_axe", (new ItemAxe(Item.EnumToolMaterial.DIAMOND)).c("hatchetDiamond"));
+        a(280, "stick", (new Item()).o().c("stick").a(CreativeModeTab.l));
+        a(281, "bowl", (new Item()).c("bowl").a(CreativeModeTab.l));
+        a(282, "mushroom_stew", (new ItemSoup(6)).c("mushroomStew"));
+        a(283, "golden_sword", (new ItemSword(Item.EnumToolMaterial.GOLD)).c("swordGold"));
+        a(284, "golden_shovel", (new ItemSpade(Item.EnumToolMaterial.GOLD)).c("shovelGold"));
+        a(285, "golden_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.GOLD)).c("pickaxeGold"));
+        a(286, "golden_axe", (new ItemAxe(Item.EnumToolMaterial.GOLD)).c("hatchetGold"));
+        a(287, "string", (new ItemReed(Blocks.TRIPWIRE)).c("string").a(CreativeModeTab.l));
+        a(288, "feather", (new Item()).c("feather").a(CreativeModeTab.l));
+        a(289, "gunpowder", (new Item()).c("sulphur").a(CreativeModeTab.l));
+        a(290, "wooden_hoe", (new ItemHoe(Item.EnumToolMaterial.WOOD)).c("hoeWood"));
+        a(291, "stone_hoe", (new ItemHoe(Item.EnumToolMaterial.STONE)).c("hoeStone"));
+        a(292, "iron_hoe", (new ItemHoe(Item.EnumToolMaterial.IRON)).c("hoeIron"));
+        a(293, "diamond_hoe", (new ItemHoe(Item.EnumToolMaterial.DIAMOND)).c("hoeDiamond"));
+        a(294, "golden_hoe", (new ItemHoe(Item.EnumToolMaterial.GOLD)).c("hoeGold"));
+        a(295, "wheat_seeds", (new ItemSeeds(Blocks.WHEAT, Blocks.FARMLAND)).c("seeds"));
+        a(296, "wheat", (new Item()).c("wheat").a(CreativeModeTab.l));
+        a(297, "bread", (new ItemFood(5, 0.6F, false)).c("bread"));
+        a(298, "leather_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.HEAD)).c("helmetCloth"));
+        a(299, "leather_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.CHEST)).c("chestplateCloth"));
+        a(300, "leather_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.LEGS)).c("leggingsCloth"));
+        a(301, "leather_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.LEATHER, 0, EnumItemSlot.FEET)).c("bootsCloth"));
+        a(302, "chainmail_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.HEAD)).c("helmetChain"));
+        a(303, "chainmail_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.CHEST)).c("chestplateChain"));
+        a(304, "chainmail_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.LEGS)).c("leggingsChain"));
+        a(305, "chainmail_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.CHAIN, 1, EnumItemSlot.FEET)).c("bootsChain"));
+        a(306, "iron_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.HEAD)).c("helmetIron"));
+        a(307, "iron_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.CHEST)).c("chestplateIron"));
+        a(308, "iron_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.LEGS)).c("leggingsIron"));
+        a(309, "iron_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.IRON, 2, EnumItemSlot.FEET)).c("bootsIron"));
+        a(310, "diamond_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.HEAD)).c("helmetDiamond"));
+        a(311, "diamond_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.CHEST)).c("chestplateDiamond"));
+        a(312, "diamond_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.LEGS)).c("leggingsDiamond"));
+        a(313, "diamond_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.DIAMOND, 3, EnumItemSlot.FEET)).c("bootsDiamond"));
+        a(314, "golden_helmet", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.HEAD)).c("helmetGold"));
+        a(315, "golden_chestplate", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.CHEST)).c("chestplateGold"));
+        a(316, "golden_leggings", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.LEGS)).c("leggingsGold"));
+        a(317, "golden_boots", (new ItemArmor(ItemArmor.EnumArmorMaterial.GOLD, 4, EnumItemSlot.FEET)).c("bootsGold"));
+        a(318, "flint", (new Item()).c("flint").a(CreativeModeTab.l));
+        a(319, "porkchop", (new ItemFood(3, 0.3F, true)).c("porkchopRaw"));
+        a(320, "cooked_porkchop", (new ItemFood(8, 0.8F, true)).c("porkchopCooked"));
+        a(321, "painting", (new ItemHanging(EntityPainting.class)).c("painting"));
+        a(322, "golden_apple", (new ItemGoldenApple(4, 1.2F, false)).h().c("appleGold"));
+        a(323, "sign", (new ItemSign()).c("sign"));
+        a(324, "wooden_door", (new ItemDoor(Blocks.WOODEN_DOOR)).c("doorOak"));
+        Item item = (new ItemBucket(Blocks.AIR)).c("bucket").d(16);
+
+        a(325, "bucket", item);
+        a(326, "water_bucket", (new ItemBucket(Blocks.FLOWING_WATER)).c("bucketWater").b(item));
+        a(327, "lava_bucket", (new ItemBucket(Blocks.FLOWING_LAVA)).c("bucketLava").b(item));
+        a(328, "minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.RIDEABLE)).c("minecart"));
+        a(329, "saddle", (new ItemSaddle()).c("saddle"));
+        a(330, "iron_door", (new ItemDoor(Blocks.IRON_DOOR)).c("doorIron"));
+        a(331, "redstone", (new ItemRedstone()).c("redstone"));
+        a(332, "snowball", (new ItemSnowball()).c("snowball"));
+        a(333, "boat", new ItemBoat(EntityBoat.EnumBoatType.OAK));
+        a(334, "leather", (new Item()).c("leather").a(CreativeModeTab.l));
+        a(335, "milk_bucket", (new ItemMilkBucket()).c("milk").b(item));
+        a(336, "brick", (new Item()).c("brick").a(CreativeModeTab.l));
+        a(337, "clay_ball", (new Item()).c("clay").a(CreativeModeTab.l));
+        a(338, "reeds", (new ItemReed(Blocks.REEDS)).c("reeds").a(CreativeModeTab.l));
+        a(339, "paper", (new Item()).c("paper").a(CreativeModeTab.f));
+        a(340, "book", (new ItemBook()).c("book").a(CreativeModeTab.f));
+        a(341, "slime_ball", (new Item()).c("slimeball").a(CreativeModeTab.f));
+        a(342, "chest_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.CHEST)).c("minecartChest"));
+        a(343, "furnace_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.FURNACE)).c("minecartFurnace"));
+        a(344, "egg", (new ItemEgg()).c("egg"));
+        a(345, "compass", (new ItemCompass()).c("compass").a(CreativeModeTab.i));
+        a(346, "fishing_rod", (new ItemFishingRod()).c("fishingRod"));
+        a(347, "clock", (new ItemClock()).c("clock").a(CreativeModeTab.i));
+        a(348, "glowstone_dust", (new Item()).c("yellowDust").a(CreativeModeTab.l));
+        a(349, "fish", (new ItemFish(false)).c("fish").a(true));
+        a(350, "cooked_fish", (new ItemFish(true)).c("fish").a(true));
+        a(351, "dye", (new ItemDye()).c("dyePowder"));
+        a(352, "bone", (new Item()).c("bone").o().a(CreativeModeTab.f));
+        a(353, "sugar", (new Item()).c("sugar").a(CreativeModeTab.l));
+        a(354, "cake", (new ItemReed(Blocks.CAKE)).d(1).c("cake").a(CreativeModeTab.h));
+        a(355, "bed", (new ItemBed()).d(1).c("bed"));
+        a(356, "repeater", (new ItemReed(Blocks.UNPOWERED_REPEATER)).c("diode").a(CreativeModeTab.d));
+        a(357, "cookie", (new ItemFood(2, 0.1F, false)).c("cookie"));
+        a(358, "filled_map", (new ItemWorldMap()).c("map"));
+        a(359, "shears", (new ItemShears()).c("shears"));
+        a(360, "melon", (new ItemFood(2, 0.3F, false)).c("melon"));
+        a(361, "pumpkin_seeds", (new ItemSeeds(Blocks.PUMPKIN_STEM, Blocks.FARMLAND)).c("seeds_pumpkin"));
+        a(362, "melon_seeds", (new ItemSeeds(Blocks.MELON_STEM, Blocks.FARMLAND)).c("seeds_melon"));
+        a(363, "beef", (new ItemFood(3, 0.3F, true)).c("beefRaw"));
+        a(364, "cooked_beef", (new ItemFood(8, 0.8F, true)).c("beefCooked"));
+        a(365, "chicken", (new ItemFood(2, 0.3F, true)).a(new MobEffect(MobEffects.HUNGER, 600, 0), 0.3F).c("chickenRaw"));
+        a(366, "cooked_chicken", (new ItemFood(6, 0.6F, true)).c("chickenCooked"));
+        a(367, "rotten_flesh", (new ItemFood(4, 0.1F, true)).a(new MobEffect(MobEffects.HUNGER, 600, 0), 0.8F).c("rottenFlesh"));
+        a(368, "ender_pearl", (new ItemEnderPearl()).c("enderPearl"));
+        a(369, "blaze_rod", (new Item()).c("blazeRod").a(CreativeModeTab.l).o());
+        a(370, "ghast_tear", (new Item()).c("ghastTear").a(CreativeModeTab.k));
+        a(371, "gold_nugget", (new Item()).c("goldNugget").a(CreativeModeTab.l));
+        a(372, "nether_wart", (new ItemSeeds(Blocks.NETHER_WART, Blocks.SOUL_SAND)).c("netherStalkSeeds"));
+        a(373, "potion", (new ItemPotion()).c("potion"));
+        Item item1 = (new ItemGlassBottle()).c("glassBottle");
+
+        a(374, "glass_bottle", item1);
+        a(375, "spider_eye", (new ItemFood(2, 0.8F, false)).a(new MobEffect(MobEffects.POISON, 100, 0), 1.0F).c("spiderEye"));
+        a(376, "fermented_spider_eye", (new Item()).c("fermentedSpiderEye").a(CreativeModeTab.k));
+        a(377, "blaze_powder", (new Item()).c("blazePowder").a(CreativeModeTab.k));
+        a(378, "magma_cream", (new Item()).c("magmaCream").a(CreativeModeTab.k));
+        a(379, "brewing_stand", (new ItemReed(Blocks.BREWING_STAND)).c("brewingStand").a(CreativeModeTab.k));
+        a(380, "cauldron", (new ItemReed(Blocks.cauldron)).c("cauldron").a(CreativeModeTab.k));
+        a(381, "ender_eye", (new ItemEnderEye()).c("eyeOfEnder"));
+        a(382, "speckled_melon", (new Item()).c("speckledMelon").a(CreativeModeTab.k));
+        a(383, "spawn_egg", (new ItemMonsterEgg()).c("monsterPlacer"));
+        a(384, "experience_bottle", (new ItemExpBottle()).c("expBottle"));
+        a(385, "fire_charge", (new ItemFireball()).c("fireball"));
+        a(386, "writable_book", (new ItemBookAndQuill()).c("writingBook").a(CreativeModeTab.f));
+        a(387, "written_book", (new ItemWrittenBook()).c("writtenBook").d(16));
+        a(388, "emerald", (new Item()).c("emerald").a(CreativeModeTab.l));
+        a(389, "item_frame", (new ItemHanging(EntityItemFrame.class)).c("frame"));
+        a(390, "flower_pot", (new ItemReed(Blocks.FLOWER_POT)).c("flowerPot").a(CreativeModeTab.c));
+        a(391, "carrot", (new ItemSeedFood(3, 0.6F, Blocks.CARROTS, Blocks.FARMLAND)).c("carrots"));
+        a(392, "potato", (new ItemSeedFood(1, 0.3F, Blocks.POTATOES, Blocks.FARMLAND)).c("potato"));
+        a(393, "baked_potato", (new ItemFood(5, 0.6F, false)).c("potatoBaked"));
+        a(394, "poisonous_potato", (new ItemFood(2, 0.3F, false)).a(new MobEffect(MobEffects.POISON, 100, 0), 0.6F).c("potatoPoisonous"));
+        a(395, "map", (new ItemMapEmpty()).c("emptyMap"));
+        a(396, "golden_carrot", (new ItemFood(6, 1.2F, false)).c("carrotGolden").a(CreativeModeTab.k));
+        a(397, "skull", (new ItemSkull()).c("skull"));
+        a(398, "carrot_on_a_stick", (new ItemCarrotStick()).c("carrotOnAStick"));
+        a(399, "nether_star", (new ItemNetherStar()).c("netherStar").a(CreativeModeTab.l));
+        a(400, "pumpkin_pie", (new ItemFood(8, 0.3F, false)).c("pumpkinPie").a(CreativeModeTab.h));
+        a(401, "fireworks", (new ItemFireworks()).c("fireworks"));
+        a(402, "firework_charge", (new ItemFireworksCharge()).c("fireworksCharge").a(CreativeModeTab.f));
+        a(403, "enchanted_book", (new ItemEnchantedBook()).d(1).c("enchantedBook"));
+        a(404, "comparator", (new ItemReed(Blocks.UNPOWERED_COMPARATOR)).c("comparator").a(CreativeModeTab.d));
+        a(405, "netherbrick", (new Item()).c("netherbrick").a(CreativeModeTab.l));
+        a(406, "quartz", (new Item()).c("netherquartz").a(CreativeModeTab.l));
+        a(407, "tnt_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.TNT)).c("minecartTnt"));
+        a(408, "hopper_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.HOPPER)).c("minecartHopper"));
+        a(409, "prismarine_shard", (new Item()).c("prismarineShard").a(CreativeModeTab.l));
+        a(410, "prismarine_crystals", (new Item()).c("prismarineCrystals").a(CreativeModeTab.l));
+        a(411, "rabbit", (new ItemFood(3, 0.3F, true)).c("rabbitRaw"));
+        a(412, "cooked_rabbit", (new ItemFood(5, 0.6F, true)).c("rabbitCooked"));
+        a(413, "rabbit_stew", (new ItemSoup(10)).c("rabbitStew"));
+        a(414, "rabbit_foot", (new Item()).c("rabbitFoot").a(CreativeModeTab.k));
+        a(415, "rabbit_hide", (new Item()).c("rabbitHide").a(CreativeModeTab.l));
+        a(416, "armor_stand", (new ItemArmorStand()).c("armorStand").d(16));
+        a(417, "iron_horse_armor", (new Item()).c("horsearmormetal").d(1).a(CreativeModeTab.f));
+        a(418, "golden_horse_armor", (new Item()).c("horsearmorgold").d(1).a(CreativeModeTab.f));
+        a(419, "diamond_horse_armor", (new Item()).c("horsearmordiamond").d(1).a(CreativeModeTab.f));
+        a(420, "lead", (new ItemLeash()).c("leash"));
+        a(421, "name_tag", (new ItemNameTag()).c("nameTag"));
+        a(422, "command_block_minecart", (new ItemMinecart(EntityMinecartAbstract.EnumMinecartType.COMMAND_BLOCK)).c("minecartCommandBlock").a((CreativeModeTab) null));
+        a(423, "mutton", (new ItemFood(2, 0.3F, true)).c("muttonRaw"));
+        a(424, "cooked_mutton", (new ItemFood(6, 0.8F, true)).c("muttonCooked"));
+        a(425, "banner", (new ItemBanner()).c("banner"));
+        a(426, "end_crystal", new ItemEndCrystal());
+        a(427, "spruce_door", (new ItemDoor(Blocks.SPRUCE_DOOR)).c("doorSpruce"));
+        a(428, "birch_door", (new ItemDoor(Blocks.BIRCH_DOOR)).c("doorBirch"));
+        a(429, "jungle_door", (new ItemDoor(Blocks.JUNGLE_DOOR)).c("doorJungle"));
+        a(430, "acacia_door", (new ItemDoor(Blocks.ACACIA_DOOR)).c("doorAcacia"));
+        a(431, "dark_oak_door", (new ItemDoor(Blocks.DARK_OAK_DOOR)).c("doorDarkOak"));
+        a(432, "chorus_fruit", (new ItemChorusFruit(4, 0.3F)).h().c("chorusFruit").a(CreativeModeTab.l));
+        a(433, "chorus_fruit_popped", (new Item()).c("chorusFruitPopped").a(CreativeModeTab.l));
+        a(434, "beetroot", (new ItemFood(1, 0.6F, false)).c("beetroot"));
+        a(435, "beetroot_seeds", (new ItemSeeds(Blocks.BEETROOT, Blocks.FARMLAND)).c("beetroot_seeds"));
+        a(436, "beetroot_soup", (new ItemSoup(6)).c("beetroot_soup"));
+        a(437, "dragon_breath", (new Item()).a(CreativeModeTab.k).c("dragon_breath").b(item1));
+        a(438, "splash_potion", (new ItemSplashPotion()).c("splash_potion"));
+        a(439, "spectral_arrow", (new ItemSpectralArrow()).c("spectral_arrow"));
+        a(440, "tipped_arrow", (new ItemTippedArrow()).c("tipped_arrow"));
+        a(441, "lingering_potion", (new ItemLingeringPotion()).c("lingering_potion"));
+        a(442, "shield", (new ItemShield()).c("shield"));
+        a(443, "elytra", (new ItemElytra()).c("elytra"));
+        a(444, "spruce_boat", new ItemBoat(EntityBoat.EnumBoatType.SPRUCE));
+        a(445, "birch_boat", new ItemBoat(EntityBoat.EnumBoatType.BIRCH));
+        a(446, "jungle_boat", new ItemBoat(EntityBoat.EnumBoatType.JUNGLE));
+        a(447, "acacia_boat", new ItemBoat(EntityBoat.EnumBoatType.ACACIA));
+        a(448, "dark_oak_boat", new ItemBoat(EntityBoat.EnumBoatType.DARK_OAK));
+        a(449, "totem_of_undying", (new Item()).c("totem").d(1).a(CreativeModeTab.j));
+        a(450, "shulker_shell", (new Item()).c("shulkerShell").a(CreativeModeTab.l));
+        a(452, "iron_nugget", (new Item()).c("ironNugget").a(CreativeModeTab.l));
+        a(2256, "record_13", (new ItemRecord("13", SoundEffects.fa)).c("record"));
+        a(2257, "record_cat", (new ItemRecord("cat", SoundEffects.fc)).c("record"));
+        a(2258, "record_blocks", (new ItemRecord("blocks", SoundEffects.fb)).c("record"));
+        a(2259, "record_chirp", (new ItemRecord("chirp", SoundEffects.fd)).c("record"));
+        a(2260, "record_far", (new ItemRecord("far", SoundEffects.fe)).c("record"));
+        a(2261, "record_mall", (new ItemRecord("mall", SoundEffects.ff)).c("record"));
+        a(2262, "record_mellohi", (new ItemRecord("mellohi", SoundEffects.fg)).c("record"));
+        a(2263, "record_stal", (new ItemRecord("stal", SoundEffects.fh)).c("record"));
+        a(2264, "record_strad", (new ItemRecord("strad", SoundEffects.fi)).c("record"));
+        a(2265, "record_ward", (new ItemRecord("ward", SoundEffects.fk)).c("record"));
+        a(2266, "record_11", (new ItemRecord("11", SoundEffects.eZ)).c("record"));
+        a(2267, "record_wait", (new ItemRecord("wait", SoundEffects.fj)).c("record"));
+    }
+
+    private static void b(Block block) {
+        a(block, (Item) (new ItemBlock(block)));
+    }
+
+    protected static void a(Block block, Item item) {
+        a(Block.getId(block), (MinecraftKey) Block.REGISTRY.b(block), item);
+        Item.a.put(block, item);
+    }
+
+    private static void a(int i, String s, Item item) {
+        a(i, new MinecraftKey(s), item);
+    }
+
+    private static void a(int i, MinecraftKey minecraftkey, Item item) {
+        Item.REGISTRY.a(i, minecraftkey, item);
+    }
+
+    public static enum EnumToolMaterial {
+
+        WOOD(0, 59, 2.0F, 0.0F, 15), STONE(1, 131, 4.0F, 1.0F, 5), IRON(2, 250, 6.0F, 2.0F, 14), DIAMOND(3, 1561, 8.0F, 3.0F, 10), GOLD(0, 32, 12.0F, 0.0F, 22);
+
+        private final int f;
+        private final int g;
+        private final float h;
+        private final float i;
+        private final int j;
+
+        private EnumToolMaterial(int i, int j, float f, float f1, int k) {
+            this.f = i;
+            this.g = j;
+            this.h = f;
+            this.i = f1;
+            this.j = k;
+        }
+
+        public int a() {
+            return this.g;
+        }
+
+        public float b() {
+            return this.h;
+        }
+
+        public float c() {
+            return this.i;
+        }
+
+        public int d() {
+            return this.f;
+        }
+
+        public int e() {
+            return this.j;
+        }
+
+        public Item f() {
+            return this == Item.EnumToolMaterial.WOOD ? Item.getItemOf(Blocks.PLANKS) : (this == Item.EnumToolMaterial.STONE ? Item.getItemOf(Blocks.COBBLESTONE) : (this == Item.EnumToolMaterial.GOLD ? Items.GOLD_INGOT : (this == Item.EnumToolMaterial.IRON ? Items.IRON_INGOT : (this == Item.EnumToolMaterial.DIAMOND ? Items.DIAMOND : null))));
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/OpList.java b/src/main/java/net/minecraft/server/OpList.java
new file mode 100644
index 0000000..e5f457b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/OpList.java
@@ -0,0 +1,66 @@
+package net.minecraft.server;
+
+import com.google.gson.JsonObject;
+import com.mojang.authlib.GameProfile;
+import java.io.File;
+import java.util.Iterator;
+
+public class OpList extends JsonList<GameProfile, OpListEntry> {
+
+    public OpList(File file) {
+        super(file);
+    }
+
+    protected JsonListEntry<GameProfile> a(JsonObject jsonobject) {
+        return new OpListEntry(jsonobject);
+    }
+
+    public String[] getEntries() {
+        String[] astring = new String[this.e().size()];
+        int i = 0;
+
+        OpListEntry oplistentry;
+
+        for (Iterator iterator = this.e().values().iterator(); iterator.hasNext(); astring[i++] = ((GameProfile) oplistentry.getKey()).getName()) {
+            oplistentry = (OpListEntry) iterator.next();
+        }
+
+        return astring;
+    }
+
+    public int a(GameProfile gameprofile) {
+        OpListEntry oplistentry = (OpListEntry) this.get(gameprofile);
+
+        return oplistentry != null ? oplistentry.a() : 0;
+    }
+
+    public boolean b(GameProfile gameprofile) {
+        OpListEntry oplistentry = (OpListEntry) this.get(gameprofile);
+
+        return oplistentry != null ? oplistentry.b() : false;
+    }
+
+    protected String c(GameProfile gameprofile) {
+        return gameprofile.getId().toString();
+    }
+
+    public GameProfile a(String s) {
+        Iterator iterator = this.e().values().iterator();
+
+        OpListEntry oplistentry;
+
+        do {
+            if (!iterator.hasNext()) {
+                return null;
+            }
+
+            oplistentry = (OpListEntry) iterator.next();
+        } while (!s.equalsIgnoreCase(((GameProfile) oplistentry.getKey()).getName()));
+
+        return (GameProfile) oplistentry.getKey();
+    }
+
+    protected String a(Object object) {
+        return this.c((GameProfile) object);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketDecoder.java b/src/main/java/net/minecraft/server/PacketDecoder.java
new file mode 100644
index 0000000..fc22c20
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketDecoder.java
@@ -0,0 +1,45 @@
+package net.minecraft.server;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.ByteToMessageDecoder;
+import java.io.IOException;
+import java.util.List;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.MarkerManager;
+
+public class PacketDecoder extends ByteToMessageDecoder {
+
+    private static final Logger a = LogManager.getLogger();
+    private static final Marker b = MarkerManager.getMarker("PACKET_RECEIVED", NetworkManager.b);
+    private final EnumProtocolDirection c;
+
+    public PacketDecoder(EnumProtocolDirection enumprotocoldirection) {
+        this.c = enumprotocoldirection;
+    }
+
+    protected void decode(ChannelHandlerContext channelhandlercontext, ByteBuf bytebuf, List<Object> list) throws Exception {
+        if (bytebuf.readableBytes() != 0) {
+            PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
+            int i = packetdataserializer.g();
+            Packet packet = ((EnumProtocol) channelhandlercontext.channel().attr(NetworkManager.c).get()).a(this.c, i);
+
+            if (packet == null) {
+                throw new IOException("Bad packet id " + i);
+            } else {
+                packet.a(packetdataserializer);
+                if (packetdataserializer.readableBytes() > 0) {
+                    throw new IOException("Packet " + ((EnumProtocol) channelhandlercontext.channel().attr(NetworkManager.c).get()).a() + "/" + i + " (" + packet.getClass().getSimpleName() + ") was larger than I expected, found " + packetdataserializer.readableBytes() + " bytes extra whilst reading packet " + i);
+                } else {
+                    list.add(packet);
+                    if (PacketDecoder.a.isDebugEnabled()) {
+                        PacketDecoder.a.debug(PacketDecoder.b, " IN: [{}:{}] {}", new Object[] { channelhandlercontext.channel().attr(NetworkManager.c).get(), Integer.valueOf(i), packet.getClass().getName()});
+                    }
+
+                }
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketEncoder.java b/src/main/java/net/minecraft/server/PacketEncoder.java
new file mode 100644
index 0000000..a79fa01
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketEncoder.java
@@ -0,0 +1,48 @@
+package net.minecraft.server;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.MessageToByteEncoder;
+import java.io.IOException;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.MarkerManager;
+
+public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
+
+    private static final Logger a = LogManager.getLogger();
+    private static final Marker b = MarkerManager.getMarker("PACKET_SENT", NetworkManager.b);
+    private final EnumProtocolDirection c;
+
+    public PacketEncoder(EnumProtocolDirection enumprotocoldirection) {
+        this.c = enumprotocoldirection;
+    }
+
+    protected void a(ChannelHandlerContext channelhandlercontext, Packet<?> packet, ByteBuf bytebuf) throws Exception {
+        Integer integer = ((EnumProtocol) channelhandlercontext.channel().attr(NetworkManager.c).get()).a(this.c, packet);
+
+        if (PacketEncoder.a.isDebugEnabled()) {
+            PacketEncoder.a.debug(PacketEncoder.b, "OUT: [{}:{}] {}", new Object[] { channelhandlercontext.channel().attr(NetworkManager.c).get(), integer, packet.getClass().getName()});
+        }
+
+        if (integer == null) {
+            throw new IOException("Can\'t serialize unregistered packet");
+        } else {
+            PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
+
+            packetdataserializer.d(integer.intValue());
+
+            try {
+                packet.b(packetdataserializer);
+            } catch (Throwable throwable) {
+                PacketEncoder.a.error(throwable);
+            }
+
+        }
+    }
+
+    protected void encode(ChannelHandlerContext channelhandlercontext, Object object, ByteBuf bytebuf) throws Exception {
+        this.a(channelhandlercontext, (Packet) object, bytebuf);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java b/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java
new file mode 100644
index 0000000..1cb9d60
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketHandshakingInSetProtocol.java
@@ -0,0 +1,39 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketHandshakingInSetProtocol implements Packet<PacketHandshakingInListener> {
+
+    private int a;
+    public String hostname;
+    public int port;
+    private EnumProtocol d;
+
+    public PacketHandshakingInSetProtocol() {}
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.hostname = packetdataserializer.e(255);
+        this.port = packetdataserializer.readUnsignedShort();
+        this.d = EnumProtocol.a(packetdataserializer.g());
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.d(this.a);
+        packetdataserializer.a(this.hostname);
+        packetdataserializer.writeShort(this.port);
+        packetdataserializer.d(this.d.a());
+    }
+
+    public void a(PacketHandshakingInListener packethandshakinginlistener) {
+        packethandshakinginlistener.a(this);
+    }
+
+    public EnumProtocol a() {
+        return this.d;
+    }
+
+    public int b() {
+        return this.a;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java b/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
new file mode 100644
index 0000000..512b3e4
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
@@ -0,0 +1,33 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayInResourcePackStatus implements Packet<PacketListenerPlayIn> {
+
+    public PacketPlayInResourcePackStatus.EnumResourcePackStatus status;
+
+    public PacketPlayInResourcePackStatus() {}
+
+    public PacketPlayInResourcePackStatus(PacketPlayInResourcePackStatus.EnumResourcePackStatus packetplayinresourcepackstatus_enumresourcepackstatus) {
+        this.status = packetplayinresourcepackstatus_enumresourcepackstatus;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.status = (PacketPlayInResourcePackStatus.EnumResourcePackStatus) packetdataserializer.a(PacketPlayInResourcePackStatus.EnumResourcePackStatus.class);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a((Enum) this.status);
+    }
+
+    public void a(PacketListenerPlayIn packetlistenerplayin) {
+        packetlistenerplayin.a(this);
+    }
+
+    public static enum EnumResourcePackStatus {
+
+        SUCCESSFULLY_LOADED, DECLINED, FAILED_DOWNLOAD, ACCEPTED;
+
+        private EnumResourcePackStatus() {}
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayInUseEntity.java b/src/main/java/net/minecraft/server/PacketPlayInUseEntity.java
new file mode 100644
index 0000000..c67cb54
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayInUseEntity.java
@@ -0,0 +1,75 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import javax.annotation.Nullable;
+
+public class PacketPlayInUseEntity implements Packet<PacketListenerPlayIn> {
+
+    private int a;
+    private PacketPlayInUseEntity.EnumEntityUseAction action;
+    private Vec3D c;
+    private EnumHand d;
+
+    public PacketPlayInUseEntity() {}
+
+    public PacketPlayInUseEntity(Entity entity) {
+        this.a = entity.getId();
+        this.action = PacketPlayInUseEntity.EnumEntityUseAction.ATTACK;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.action = (PacketPlayInUseEntity.EnumEntityUseAction) packetdataserializer.a(PacketPlayInUseEntity.EnumEntityUseAction.class);
+        if (this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
+            this.c = new Vec3D((double) packetdataserializer.readFloat(), (double) packetdataserializer.readFloat(), (double) packetdataserializer.readFloat());
+        }
+
+        if (this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT || this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
+            this.d = (EnumHand) packetdataserializer.a(EnumHand.class);
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.d(this.a);
+        packetdataserializer.a((Enum) this.action);
+        if (this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
+            packetdataserializer.writeFloat((float) this.c.x);
+            packetdataserializer.writeFloat((float) this.c.y);
+            packetdataserializer.writeFloat((float) this.c.z);
+        }
+
+        if (this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT || this.action == PacketPlayInUseEntity.EnumEntityUseAction.INTERACT_AT) {
+            packetdataserializer.a((Enum) this.d);
+        }
+
+    }
+
+    public void a(PacketListenerPlayIn packetlistenerplayin) {
+        packetlistenerplayin.a(this);
+    }
+
+    @Nullable
+    public Entity a(World world) {
+        return world.getEntity(this.a);
+    }
+
+    public PacketPlayInUseEntity.EnumEntityUseAction a() {
+        return this.action;
+    }
+
+    public EnumHand b() {
+        return this.d;
+    }
+
+    public Vec3D c() {
+        return this.c;
+    }
+
+    public static enum EnumEntityUseAction {
+
+        INTERACT, ATTACK, INTERACT_AT;
+
+        private EnumEntityUseAction() {}
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayInUseItem.java b/src/main/java/net/minecraft/server/PacketPlayInUseItem.java
new file mode 100644
index 0000000..bdcda81
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayInUseItem.java
@@ -0,0 +1,61 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayInUseItem implements Packet<PacketListenerPlayIn> {
+
+    private BlockPosition a;
+    private EnumDirection b;
+    private EnumHand c;
+    private float d;
+    private float e;
+    private float f;
+
+    public PacketPlayInUseItem() {}
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.e();
+        this.b = (EnumDirection) packetdataserializer.a(EnumDirection.class);
+        this.c = (EnumHand) packetdataserializer.a(EnumHand.class);
+        this.d = packetdataserializer.readFloat();
+        this.e = packetdataserializer.readFloat();
+        this.f = packetdataserializer.readFloat();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.a((Enum) this.b);
+        packetdataserializer.a((Enum) this.c);
+        packetdataserializer.writeFloat(this.d);
+        packetdataserializer.writeFloat(this.e);
+        packetdataserializer.writeFloat(this.f);
+    }
+
+    public void a(PacketListenerPlayIn packetlistenerplayin) {
+        packetlistenerplayin.a(this);
+    }
+
+    public BlockPosition a() {
+        return this.a;
+    }
+
+    public EnumDirection b() {
+        return this.b;
+    }
+
+    public EnumHand c() {
+        return this.c;
+    }
+
+    public float d() {
+        return this.d;
+    }
+
+    public float e() {
+        return this.e;
+    }
+
+    public float f() {
+        return this.f;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutAttachEntity.java b/src/main/java/net/minecraft/server/PacketPlayOutAttachEntity.java
new file mode 100644
index 0000000..9d23a64
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutAttachEntity.java
@@ -0,0 +1,31 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import javax.annotation.Nullable;
+
+public class PacketPlayOutAttachEntity implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private int b;
+
+    public PacketPlayOutAttachEntity() {}
+
+    public PacketPlayOutAttachEntity(Entity entity, @Nullable Entity entity1) {
+        this.a = entity.getId();
+        this.b = entity1 != null ? entity1.getId() : -1;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.readInt();
+        this.b = packetdataserializer.readInt();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.writeInt(this.a);
+        packetdataserializer.writeInt(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutChat.java b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
new file mode 100644
index 0000000..24462f1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutChat.java
@@ -0,0 +1,42 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutChat implements Packet<PacketListenerPlayOut> {
+
+    private IChatBaseComponent a;
+    private byte b;
+
+    public PacketPlayOutChat() {}
+
+    public PacketPlayOutChat(IChatBaseComponent ichatbasecomponent) {
+        this(ichatbasecomponent, (byte) 1);
+    }
+
+    public PacketPlayOutChat(IChatBaseComponent ichatbasecomponent, byte b0) {
+        this.a = ichatbasecomponent;
+        this.b = b0;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.f();
+        this.b = packetdataserializer.readByte();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.writeByte(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public boolean b() {
+        return this.b == 1 || this.b == 2;
+    }
+
+    public byte c() {
+        return this.b;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutCollect.java b/src/main/java/net/minecraft/server/PacketPlayOutCollect.java
new file mode 100644
index 0000000..1678628
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutCollect.java
@@ -0,0 +1,34 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutCollect implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private int b;
+    private int c;
+
+    public PacketPlayOutCollect() {}
+
+    public PacketPlayOutCollect(int i, int j, int k) {
+        this.a = i;
+        this.b = j;
+        this.c = k;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.g();
+        this.c = packetdataserializer.g();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.d(this.a);
+        packetdataserializer.d(this.b);
+        packetdataserializer.d(this.c);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutCustomSoundEffect.java b/src/main/java/net/minecraft/server/PacketPlayOutCustomSoundEffect.java
new file mode 100644
index 0000000..8a19c73
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutCustomSoundEffect.java
@@ -0,0 +1,52 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import org.apache.commons.lang3.Validate;
+
+public class PacketPlayOutCustomSoundEffect implements Packet<PacketListenerPlayOut> {
+
+    private String a;
+    private SoundCategory b;
+    private int c;
+    private int d = Integer.MAX_VALUE;
+    private int e;
+    private float f;
+    private float g;
+
+    public PacketPlayOutCustomSoundEffect() {}
+
+    public PacketPlayOutCustomSoundEffect(String s, SoundCategory soundcategory, double d0, double d1, double d2, float f, float f1) {
+        Validate.notNull(s, "name", new Object[0]);
+        this.a = s;
+        this.b = soundcategory;
+        this.c = (int) (d0 * 8.0D);
+        this.d = (int) (d1 * 8.0D);
+        this.e = (int) (d2 * 8.0D);
+        this.f = f;
+        this.g = f1;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.e(256);
+        this.b = (SoundCategory) packetdataserializer.a(SoundCategory.class);
+        this.c = packetdataserializer.readInt();
+        this.d = packetdataserializer.readInt();
+        this.e = packetdataserializer.readInt();
+        this.f = packetdataserializer.readFloat();
+        this.g = packetdataserializer.readFloat();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.a((Enum) this.b);
+        packetdataserializer.writeInt(this.c);
+        packetdataserializer.writeInt(this.d);
+        packetdataserializer.writeInt(this.e);
+        packetdataserializer.writeFloat(this.f);
+        packetdataserializer.writeFloat(this.g);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityHeadRotation.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityHeadRotation.java
new file mode 100644
index 0000000..6913631
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityHeadRotation.java
@@ -0,0 +1,30 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutEntityHeadRotation implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private byte b;
+
+    public PacketPlayOutEntityHeadRotation() {}
+
+    public PacketPlayOutEntityHeadRotation(Entity entity, byte b0) {
+        this.a = entity.getId();
+        this.b = b0;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.readByte();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.d(this.a);
+        packetdataserializer.writeByte(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
new file mode 100644
index 0000000..fdf19d1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityMetadata.java
@@ -0,0 +1,37 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.List;
+
+public class PacketPlayOutEntityMetadata implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private List<DataWatcher.Item<?>> b;
+
+    public PacketPlayOutEntityMetadata() {}
+
+    public PacketPlayOutEntityMetadata(int i, DataWatcher datawatcher, boolean flag) {
+        this.a = i;
+        if (flag) {
+            this.b = datawatcher.c();
+            datawatcher.e();
+        } else {
+            this.b = datawatcher.b();
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = DataWatcher.b(packetdataserializer);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.d(this.a);
+        DataWatcher.a(this.b, packetdataserializer);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java b/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java
new file mode 100644
index 0000000..76a558e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutEntityTeleport.java
@@ -0,0 +1,50 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutEntityTeleport implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private double b;
+    private double c;
+    private double d;
+    private byte e;
+    private byte f;
+    private boolean g;
+
+    public PacketPlayOutEntityTeleport() {}
+
+    public PacketPlayOutEntityTeleport(Entity entity) {
+        this.a = entity.getId();
+        this.b = entity.locX;
+        this.c = entity.locY;
+        this.d = entity.locZ;
+        this.e = (byte) ((int) (entity.yaw * 256.0F / 360.0F));
+        this.f = (byte) ((int) (entity.pitch * 256.0F / 360.0F));
+        this.g = entity.onGround;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.readDouble();
+        this.c = packetdataserializer.readDouble();
+        this.d = packetdataserializer.readDouble();
+        this.e = packetdataserializer.readByte();
+        this.f = packetdataserializer.readByte();
+        this.g = packetdataserializer.readBoolean();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.d(this.a);
+        packetdataserializer.writeDouble(this.b);
+        packetdataserializer.writeDouble(this.c);
+        packetdataserializer.writeDouble(this.d);
+        packetdataserializer.writeByte(this.e);
+        packetdataserializer.writeByte(this.f);
+        packetdataserializer.writeBoolean(this.g);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutLogin.java b/src/main/java/net/minecraft/server/PacketPlayOutLogin.java
new file mode 100644
index 0000000..9a973d5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutLogin.java
@@ -0,0 +1,67 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutLogin implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private boolean b;
+    private EnumGamemode c;
+    private int d;
+    private EnumDifficulty e;
+    private int f;
+    private WorldType g;
+    private boolean h;
+
+    public PacketPlayOutLogin() {}
+
+    public PacketPlayOutLogin(int i, EnumGamemode enumgamemode, boolean flag, int j, EnumDifficulty enumdifficulty, int k, WorldType worldtype, boolean flag1) {
+        this.a = i;
+        this.d = j;
+        this.e = enumdifficulty;
+        this.c = enumgamemode;
+        this.f = k;
+        this.b = flag;
+        this.g = worldtype;
+        this.h = flag1;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.readInt();
+        short short0 = packetdataserializer.readUnsignedByte();
+
+        this.b = (short0 & 8) == 8;
+        int i = short0 & -9;
+
+        this.c = EnumGamemode.getById(i);
+        this.d = packetdataserializer.readInt();
+        this.e = EnumDifficulty.getById(packetdataserializer.readUnsignedByte());
+        this.f = packetdataserializer.readUnsignedByte();
+        this.g = WorldType.getType(packetdataserializer.e(16));
+        if (this.g == null) {
+            this.g = WorldType.NORMAL;
+        }
+
+        this.h = packetdataserializer.readBoolean();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.writeInt(this.a);
+        int i = this.c.getId();
+
+        if (this.b) {
+            i |= 8;
+        }
+
+        packetdataserializer.writeByte(i);
+        packetdataserializer.writeInt(this.d);
+        packetdataserializer.writeByte(this.e.a());
+        packetdataserializer.writeByte(this.f);
+        packetdataserializer.a(this.g.name());
+        packetdataserializer.writeBoolean(this.h);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
new file mode 100644
index 0000000..d16669b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -0,0 +1,152 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map.Entry;
+
+public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private int b;
+    private int c;
+    private byte[] d;
+    private List<NBTTagCompound> e;
+    private boolean f;
+
+    public PacketPlayOutMapChunk() {}
+
+    public PacketPlayOutMapChunk(Chunk chunk, int i) {
+        this.a = chunk.locX;
+        this.b = chunk.locZ;
+        this.f = i == '\uffff';
+        boolean flag = chunk.getWorld().worldProvider.m();
+
+        this.d = new byte[this.a(chunk, flag, i)];
+        this.c = this.a(new PacketDataSerializer(this.g()), chunk, flag, i);
+        this.e = Lists.newArrayList();
+        Iterator iterator = chunk.getTileEntities().entrySet().iterator();
+
+        while (iterator.hasNext()) {
+            Entry entry = (Entry) iterator.next();
+            BlockPosition blockposition = (BlockPosition) entry.getKey();
+            TileEntity tileentity = (TileEntity) entry.getValue();
+            int j = blockposition.getY() >> 4;
+
+            if (this.e() || (i & 1 << j) != 0) {
+                NBTTagCompound nbttagcompound = tileentity.d();
+
+                this.e.add(nbttagcompound);
+            }
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.readInt();
+        this.b = packetdataserializer.readInt();
+        this.f = packetdataserializer.readBoolean();
+        this.c = packetdataserializer.g();
+        int i = packetdataserializer.g();
+
+        if (i > 2097152) {
+            throw new RuntimeException("Chunk Packet trying to allocate too much memory on read.");
+        } else {
+            this.d = new byte[i];
+            packetdataserializer.readBytes(this.d);
+            int j = packetdataserializer.g();
+
+            this.e = Lists.newArrayList();
+
+            for (int k = 0; k < j; ++k) {
+                this.e.add(packetdataserializer.j());
+            }
+
+        }
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.writeInt(this.a);
+        packetdataserializer.writeInt(this.b);
+        packetdataserializer.writeBoolean(this.f);
+        packetdataserializer.d(this.c);
+        packetdataserializer.d(this.d.length);
+        packetdataserializer.writeBytes(this.d);
+        packetdataserializer.d(this.e.size());
+        Iterator iterator = this.e.iterator();
+
+        while (iterator.hasNext()) {
+            NBTTagCompound nbttagcompound = (NBTTagCompound) iterator.next();
+
+            packetdataserializer.a(nbttagcompound);
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    private ByteBuf g() {
+        ByteBuf bytebuf = Unpooled.wrappedBuffer(this.d);
+
+        bytebuf.writerIndex(0);
+        return bytebuf;
+    }
+
+    public int a(PacketDataSerializer packetdataserializer, Chunk chunk, boolean flag, int i) {
+        int j = 0;
+        ChunkSection[] achunksection = chunk.getSections();
+        int k = 0;
+
+        for (int l = achunksection.length; k < l; ++k) {
+            ChunkSection chunksection = achunksection[k];
+
+            if (chunksection != Chunk.a && (!this.e() || !chunksection.a()) && (i & 1 << k) != 0) {
+                j |= 1 << k;
+                chunksection.getBlocks().b(packetdataserializer);
+                packetdataserializer.writeBytes(chunksection.getEmittedLightArray().asBytes());
+                if (flag) {
+                    packetdataserializer.writeBytes(chunksection.getSkyLightArray().asBytes());
+                }
+            }
+        }
+
+        if (this.e()) {
+            packetdataserializer.writeBytes(chunk.getBiomeIndex());
+        }
+
+        return j;
+    }
+
+    protected int a(Chunk chunk, boolean flag, int i) {
+        int j = 0;
+        ChunkSection[] achunksection = chunk.getSections();
+        int k = 0;
+
+        for (int l = achunksection.length; k < l; ++k) {
+            ChunkSection chunksection = achunksection[k];
+
+            if (chunksection != Chunk.a && (!this.e() || !chunksection.a()) && (i & 1 << k) != 0) {
+                j += chunksection.getBlocks().a();
+                j += chunksection.getEmittedLightArray().asBytes().length;
+                if (flag) {
+                    j += chunksection.getSkyLightArray().asBytes().length;
+                }
+            }
+        }
+
+        if (this.e()) {
+            j += chunk.getBiomeIndex().length;
+        }
+
+        return j;
+    }
+
+    public boolean e() {
+        return this.f;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMount.java b/src/main/java/net/minecraft/server/PacketPlayOutMount.java
new file mode 100644
index 0000000..9891622
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMount.java
@@ -0,0 +1,38 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.List;
+
+public class PacketPlayOutMount implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private int[] b;
+
+    public PacketPlayOutMount() {}
+
+    public PacketPlayOutMount(Entity entity) {
+        this.a = entity.getId();
+        List list = entity.bx();
+
+        this.b = new int[list.size()];
+
+        for (int i = 0; i < list.size(); ++i) {
+            this.b[i] = ((Entity) list.get(i)).getId();
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.b();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.d(this.a);
+        packetdataserializer.a(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java b/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
new file mode 100644
index 0000000..072c2ba
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutNamedEntitySpawn.java
@@ -0,0 +1,57 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.UUID;
+
+public class PacketPlayOutNamedEntitySpawn implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private UUID b;
+    private double c;
+    private double d;
+    private double e;
+    private byte f;
+    private byte g;
+    private DataWatcher h;
+    private List<DataWatcher.Item<?>> i;
+
+    public PacketPlayOutNamedEntitySpawn() {}
+
+    public PacketPlayOutNamedEntitySpawn(EntityHuman entityhuman) {
+        this.a = entityhuman.getId();
+        this.b = entityhuman.getProfile().getId();
+        this.c = entityhuman.locX;
+        this.d = entityhuman.locY;
+        this.e = entityhuman.locZ;
+        this.f = (byte) ((int) (entityhuman.yaw * 256.0F / 360.0F));
+        this.g = (byte) ((int) (entityhuman.pitch * 256.0F / 360.0F));
+        this.h = entityhuman.getDataWatcher();
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.i();
+        this.c = packetdataserializer.readDouble();
+        this.d = packetdataserializer.readDouble();
+        this.e = packetdataserializer.readDouble();
+        this.f = packetdataserializer.readByte();
+        this.g = packetdataserializer.readByte();
+        this.i = DataWatcher.b(packetdataserializer);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.d(this.a);
+        packetdataserializer.a(this.b);
+        packetdataserializer.writeDouble(this.c);
+        packetdataserializer.writeDouble(this.d);
+        packetdataserializer.writeDouble(this.e);
+        packetdataserializer.writeByte(this.f);
+        packetdataserializer.writeByte(this.g);
+        this.h.a(packetdataserializer);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutNamedSoundEffect.java b/src/main/java/net/minecraft/server/PacketPlayOutNamedSoundEffect.java
new file mode 100644
index 0000000..736015c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutNamedSoundEffect.java
@@ -0,0 +1,52 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import org.apache.commons.lang3.Validate;
+
+public class PacketPlayOutNamedSoundEffect implements Packet<PacketListenerPlayOut> {
+
+    private SoundEffect a;
+    private SoundCategory b;
+    private int c;
+    private int d;
+    private int e;
+    private float f;
+    private float g;
+
+    public PacketPlayOutNamedSoundEffect() {}
+
+    public PacketPlayOutNamedSoundEffect(SoundEffect soundeffect, SoundCategory soundcategory, double d0, double d1, double d2, float f, float f1) {
+        Validate.notNull(soundeffect, "sound", new Object[0]);
+        this.a = soundeffect;
+        this.b = soundcategory;
+        this.c = (int) (d0 * 8.0D);
+        this.d = (int) (d1 * 8.0D);
+        this.e = (int) (d2 * 8.0D);
+        this.f = f;
+        this.g = f1;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = (SoundEffect) SoundEffect.a.getId(packetdataserializer.g());
+        this.b = (SoundCategory) packetdataserializer.a(SoundCategory.class);
+        this.c = packetdataserializer.readInt();
+        this.d = packetdataserializer.readInt();
+        this.e = packetdataserializer.readInt();
+        this.f = packetdataserializer.readFloat();
+        this.g = packetdataserializer.readFloat();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.d(SoundEffect.a.a((Object) this.a));
+        packetdataserializer.a((Enum) this.b);
+        packetdataserializer.writeInt(this.c);
+        packetdataserializer.writeInt(this.d);
+        packetdataserializer.writeInt(this.e);
+        packetdataserializer.writeFloat(this.f);
+        packetdataserializer.writeFloat(this.g);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutOpenWindow.java b/src/main/java/net/minecraft/server/PacketPlayOutOpenWindow.java
new file mode 100644
index 0000000..e9f24b3
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutOpenWindow.java
@@ -0,0 +1,56 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutOpenWindow implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private String b;
+    private IChatBaseComponent c;
+    private int d;
+    private int e;
+
+    public PacketPlayOutOpenWindow() {}
+
+    public PacketPlayOutOpenWindow(int i, String s, IChatBaseComponent ichatbasecomponent) {
+        this(i, s, ichatbasecomponent, 0);
+    }
+
+    public PacketPlayOutOpenWindow(int i, String s, IChatBaseComponent ichatbasecomponent, int j) {
+        this.a = i;
+        this.b = s;
+        this.c = ichatbasecomponent;
+        this.d = j;
+    }
+
+    public PacketPlayOutOpenWindow(int i, String s, IChatBaseComponent ichatbasecomponent, int j, int k) {
+        this(i, s, ichatbasecomponent, j);
+        this.e = k;
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.readUnsignedByte();
+        this.b = packetdataserializer.e(32);
+        this.c = packetdataserializer.f();
+        this.d = packetdataserializer.readUnsignedByte();
+        if (this.b.equals("EntityHorse")) {
+            this.e = packetdataserializer.readInt();
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.writeByte(this.a);
+        packetdataserializer.a(this.b);
+        packetdataserializer.a(this.c);
+        packetdataserializer.writeByte(this.d);
+        if (this.b.equals("EntityHorse")) {
+            packetdataserializer.writeInt(this.e);
+        }
+
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
new file mode 100644
index 0000000..4fb32f1
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerInfo.java
@@ -0,0 +1,218 @@
+package net.minecraft.server;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.Lists;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.properties.Property;
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.List;
+import javax.annotation.Nullable;
+
+public class PacketPlayOutPlayerInfo implements Packet<PacketListenerPlayOut> {
+
+    private PacketPlayOutPlayerInfo.EnumPlayerInfoAction a;
+    private final List<PacketPlayOutPlayerInfo.PlayerInfoData> b = Lists.newArrayList();
+
+    public PacketPlayOutPlayerInfo() {}
+
+    public PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, EntityPlayer... aentityplayer) {
+        this.a = packetplayoutplayerinfo_enumplayerinfoaction;
+        EntityPlayer[] aentityplayer1 = aentityplayer;
+        int i = aentityplayer.length;
+
+        for (int j = 0; j < i; ++j) {
+            EntityPlayer entityplayer = aentityplayer1[j];
+
+            this.b.add(new PacketPlayOutPlayerInfo.PlayerInfoData(entityplayer.getProfile(), entityplayer.ping, entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
+        }
+
+    }
+
+    public PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction packetplayoutplayerinfo_enumplayerinfoaction, Iterable<EntityPlayer> iterable) {
+        this.a = packetplayoutplayerinfo_enumplayerinfoaction;
+        Iterator iterator = iterable.iterator();
+
+        while (iterator.hasNext()) {
+            EntityPlayer entityplayer = (EntityPlayer) iterator.next();
+
+            this.b.add(new PacketPlayOutPlayerInfo.PlayerInfoData(entityplayer.getProfile(), entityplayer.ping, entityplayer.playerInteractManager.getGameMode(), entityplayer.getPlayerListName()));
+        }
+
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = (PacketPlayOutPlayerInfo.EnumPlayerInfoAction) packetdataserializer.a(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.class);
+        int i = packetdataserializer.g();
+
+        for (int j = 0; j < i; ++j) {
+            GameProfile gameprofile = null;
+            int k = 0;
+            EnumGamemode enumgamemode = null;
+            IChatBaseComponent ichatbasecomponent = null;
+
+            switch (this.a) {
+            case ADD_PLAYER:
+                gameprofile = new GameProfile(packetdataserializer.i(), packetdataserializer.e(16));
+                int l = packetdataserializer.g();
+
+                for (int i1 = 0; i1 < l; ++i1) {
+                    String s = packetdataserializer.e(32767);
+                    String s1 = packetdataserializer.e(32767);
+
+                    if (packetdataserializer.readBoolean()) {
+                        gameprofile.getProperties().put(s, new Property(s, s1, packetdataserializer.e(32767)));
+                    } else {
+                        gameprofile.getProperties().put(s, new Property(s, s1));
+                    }
+                }
+
+                enumgamemode = EnumGamemode.getById(packetdataserializer.g());
+                k = packetdataserializer.g();
+                if (packetdataserializer.readBoolean()) {
+                    ichatbasecomponent = packetdataserializer.f();
+                }
+                break;
+
+            case UPDATE_GAME_MODE:
+                gameprofile = new GameProfile(packetdataserializer.i(), (String) null);
+                enumgamemode = EnumGamemode.getById(packetdataserializer.g());
+                break;
+
+            case UPDATE_LATENCY:
+                gameprofile = new GameProfile(packetdataserializer.i(), (String) null);
+                k = packetdataserializer.g();
+                break;
+
+            case UPDATE_DISPLAY_NAME:
+                gameprofile = new GameProfile(packetdataserializer.i(), (String) null);
+                if (packetdataserializer.readBoolean()) {
+                    ichatbasecomponent = packetdataserializer.f();
+                }
+                break;
+
+            case REMOVE_PLAYER:
+                gameprofile = new GameProfile(packetdataserializer.i(), (String) null);
+            }
+
+            this.b.add(new PacketPlayOutPlayerInfo.PlayerInfoData(gameprofile, k, enumgamemode, ichatbasecomponent));
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a((Enum) this.a);
+        packetdataserializer.d(this.b.size());
+        Iterator iterator = this.b.iterator();
+
+        while (iterator.hasNext()) {
+            PacketPlayOutPlayerInfo.PlayerInfoData packetplayoutplayerinfo_playerinfodata = (PacketPlayOutPlayerInfo.PlayerInfoData) iterator.next();
+
+            switch (this.a) {
+            case ADD_PLAYER:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getName());
+                packetdataserializer.d(packetplayoutplayerinfo_playerinfodata.a().getProperties().size());
+                Iterator iterator1 = packetplayoutplayerinfo_playerinfodata.a().getProperties().values().iterator();
+
+                while (iterator1.hasNext()) {
+                    Property property = (Property) iterator1.next();
+
+                    packetdataserializer.a(property.getName());
+                    packetdataserializer.a(property.getValue());
+                    if (property.hasSignature()) {
+                        packetdataserializer.writeBoolean(true);
+                        packetdataserializer.a(property.getSignature());
+                    } else {
+                        packetdataserializer.writeBoolean(false);
+                    }
+                }
+
+                packetdataserializer.d(packetplayoutplayerinfo_playerinfodata.c().getId());
+                packetdataserializer.d(packetplayoutplayerinfo_playerinfodata.b());
+                if (packetplayoutplayerinfo_playerinfodata.d() == null) {
+                    packetdataserializer.writeBoolean(false);
+                } else {
+                    packetdataserializer.writeBoolean(true);
+                    packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.d());
+                }
+                break;
+
+            case UPDATE_GAME_MODE:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                packetdataserializer.d(packetplayoutplayerinfo_playerinfodata.c().getId());
+                break;
+
+            case UPDATE_LATENCY:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                packetdataserializer.d(packetplayoutplayerinfo_playerinfodata.b());
+                break;
+
+            case UPDATE_DISPLAY_NAME:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+                if (packetplayoutplayerinfo_playerinfodata.d() == null) {
+                    packetdataserializer.writeBoolean(false);
+                } else {
+                    packetdataserializer.writeBoolean(true);
+                    packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.d());
+                }
+                break;
+
+            case REMOVE_PLAYER:
+                packetdataserializer.a(packetplayoutplayerinfo_playerinfodata.a().getId());
+            }
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public String toString() {
+        return Objects.toStringHelper(this).add("action", this.a).add("entries", this.b).toString();
+    }
+
+    public class PlayerInfoData {
+
+        private final int b;
+        private final EnumGamemode c;
+        private final GameProfile d;
+        private final IChatBaseComponent e;
+
+        public PlayerInfoData(GameProfile gameprofile, int i, EnumGamemode enumgamemode, @Nullable IChatBaseComponent ichatbasecomponent) {
+            this.d = gameprofile;
+            this.b = i;
+            this.c = enumgamemode;
+            this.e = ichatbasecomponent;
+        }
+
+        public GameProfile a() {
+            return this.d;
+        }
+
+        public int b() {
+            return this.b;
+        }
+
+        public EnumGamemode c() {
+            return this.c;
+        }
+
+        @Nullable
+        public IChatBaseComponent d() {
+            return this.e;
+        }
+
+        public String toString() {
+            return Objects.toStringHelper(this).add("latency", this.b).add("gameMode", this.c).add("profile", this.d).add("displayName", this.e == null ? null : IChatBaseComponent.ChatSerializer.a(this.e)).toString();
+        }
+    }
+
+    public static enum EnumPlayerInfoAction {
+
+        ADD_PLAYER, UPDATE_GAME_MODE, UPDATE_LATENCY, UPDATE_DISPLAY_NAME, REMOVE_PLAYER;
+
+        private EnumPlayerInfoAction() {}
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java b/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java
new file mode 100644
index 0000000..5f5b382
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutPlayerListHeaderFooter.java
@@ -0,0 +1,29 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutPlayerListHeaderFooter implements Packet<PacketListenerPlayOut> {
+
+    private IChatBaseComponent a;
+    private IChatBaseComponent b;
+
+    public PacketPlayOutPlayerListHeaderFooter() {}
+
+    public PacketPlayOutPlayerListHeaderFooter(IChatBaseComponent ichatbasecomponent) {
+        this.a = ichatbasecomponent;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.f();
+        this.b = packetdataserializer.f();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.a(this.b);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
new file mode 100644
index 0000000..d8ec504
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutScoreboardTeam.java
@@ -0,0 +1,119 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import java.io.IOException;
+import java.util.Collection;
+import java.util.Iterator;
+
+public class PacketPlayOutScoreboardTeam implements Packet<PacketListenerPlayOut> {
+
+    private String a = "";
+    private String b = "";
+    private String c = "";
+    private String d = "";
+    private String e;
+    private String f;
+    private int g;
+    private final Collection<String> h;
+    private int i;
+    private int j;
+
+    public PacketPlayOutScoreboardTeam() {
+        this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
+        this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
+        this.g = -1;
+        this.h = Lists.newArrayList();
+    }
+
+    public PacketPlayOutScoreboardTeam(ScoreboardTeam scoreboardteam, int i) {
+        this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
+        this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
+        this.g = -1;
+        this.h = Lists.newArrayList();
+        this.a = scoreboardteam.getName();
+        this.i = i;
+        if (i == 0 || i == 2) {
+            this.b = scoreboardteam.getDisplayName();
+            this.c = scoreboardteam.getPrefix();
+            this.d = scoreboardteam.getSuffix();
+            this.j = scoreboardteam.packOptionData();
+            this.e = scoreboardteam.getNameTagVisibility().e;
+            this.f = scoreboardteam.getCollisionRule().e;
+            this.g = scoreboardteam.m().b();
+        }
+
+        if (i == 0) {
+            this.h.addAll(scoreboardteam.getPlayerNameSet());
+        }
+
+    }
+
+    public PacketPlayOutScoreboardTeam(ScoreboardTeam scoreboardteam, Collection<String> collection, int i) {
+        this.e = ScoreboardTeamBase.EnumNameTagVisibility.ALWAYS.e;
+        this.f = ScoreboardTeamBase.EnumTeamPush.ALWAYS.e;
+        this.g = -1;
+        this.h = Lists.newArrayList();
+        if (i != 3 && i != 4) {
+            throw new IllegalArgumentException("Method must be join or leave for player constructor");
+        } else if (collection != null && !collection.isEmpty()) {
+            this.i = i;
+            this.a = scoreboardteam.getName();
+            this.h.addAll(collection);
+        } else {
+            throw new IllegalArgumentException("Players cannot be null/empty");
+        }
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.e(16);
+        this.i = packetdataserializer.readByte();
+        if (this.i == 0 || this.i == 2) {
+            this.b = packetdataserializer.e(32);
+            this.c = packetdataserializer.e(16);
+            this.d = packetdataserializer.e(16);
+            this.j = packetdataserializer.readByte();
+            this.e = packetdataserializer.e(32);
+            this.f = packetdataserializer.e(32);
+            this.g = packetdataserializer.readByte();
+        }
+
+        if (this.i == 0 || this.i == 3 || this.i == 4) {
+            int i = packetdataserializer.g();
+
+            for (int j = 0; j < i; ++j) {
+                this.h.add(packetdataserializer.e(40));
+            }
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.writeByte(this.i);
+        if (this.i == 0 || this.i == 2) {
+            packetdataserializer.a(this.b);
+            packetdataserializer.a(this.c);
+            packetdataserializer.a(this.d);
+            packetdataserializer.writeByte(this.j);
+            packetdataserializer.a(this.e);
+            packetdataserializer.a(this.f);
+            packetdataserializer.writeByte(this.g);
+        }
+
+        if (this.i == 0 || this.i == 3 || this.i == 4) {
+            packetdataserializer.d(this.h.size());
+            Iterator iterator = this.h.iterator();
+
+            while (iterator.hasNext()) {
+                String s = (String) iterator.next();
+
+                packetdataserializer.a(s);
+            }
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java
new file mode 100644
index 0000000..428bc93
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntity.java
@@ -0,0 +1,96 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.UUID;
+
+public class PacketPlayOutSpawnEntity implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private UUID b;
+    private double c;
+    private double d;
+    private double e;
+    private int f;
+    private int g;
+    private int h;
+    private int i;
+    private int j;
+    private int k;
+    private int l;
+
+    public PacketPlayOutSpawnEntity() {}
+
+    public PacketPlayOutSpawnEntity(Entity entity, int i) {
+        this(entity, i, 0);
+    }
+
+    public PacketPlayOutSpawnEntity(Entity entity, int i, int j) {
+        this.a = entity.getId();
+        this.b = entity.getUniqueID();
+        this.c = entity.locX;
+        this.d = entity.locY;
+        this.e = entity.locZ;
+        this.i = MathHelper.d(entity.pitch * 256.0F / 360.0F);
+        this.j = MathHelper.d(entity.yaw * 256.0F / 360.0F);
+        this.k = i;
+        this.l = j;
+        double d0 = 3.9D;
+
+        this.f = (int) (MathHelper.a(entity.motX, -3.9D, 3.9D) * 8000.0D);
+        this.g = (int) (MathHelper.a(entity.motY, -3.9D, 3.9D) * 8000.0D);
+        this.h = (int) (MathHelper.a(entity.motZ, -3.9D, 3.9D) * 8000.0D);
+    }
+
+    public PacketPlayOutSpawnEntity(Entity entity, int i, int j, BlockPosition blockposition) {
+        this(entity, i, j);
+        this.c = (double) blockposition.getX();
+        this.d = (double) blockposition.getY();
+        this.e = (double) blockposition.getZ();
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.i();
+        this.k = packetdataserializer.readByte();
+        this.c = packetdataserializer.readDouble();
+        this.d = packetdataserializer.readDouble();
+        this.e = packetdataserializer.readDouble();
+        this.i = packetdataserializer.readByte();
+        this.j = packetdataserializer.readByte();
+        this.l = packetdataserializer.readInt();
+        this.f = packetdataserializer.readShort();
+        this.g = packetdataserializer.readShort();
+        this.h = packetdataserializer.readShort();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.d(this.a);
+        packetdataserializer.a(this.b);
+        packetdataserializer.writeByte(this.k);
+        packetdataserializer.writeDouble(this.c);
+        packetdataserializer.writeDouble(this.d);
+        packetdataserializer.writeDouble(this.e);
+        packetdataserializer.writeByte(this.i);
+        packetdataserializer.writeByte(this.j);
+        packetdataserializer.writeInt(this.l);
+        packetdataserializer.writeShort(this.f);
+        packetdataserializer.writeShort(this.g);
+        packetdataserializer.writeShort(this.h);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public void a(int i) {
+        this.f = i;
+    }
+
+    public void b(int i) {
+        this.g = i;
+    }
+
+    public void c(int i) {
+        this.h = i;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
new file mode 100644
index 0000000..6c86341
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
@@ -0,0 +1,106 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.UUID;
+
+public class PacketPlayOutSpawnEntityLiving implements Packet<PacketListenerPlayOut> {
+
+    private int a;
+    private UUID b;
+    private int c;
+    private double d;
+    private double e;
+    private double f;
+    private int g;
+    private int h;
+    private int i;
+    private byte j;
+    private byte k;
+    private byte l;
+    private DataWatcher m;
+    private List<DataWatcher.Item<?>> n;
+
+    public PacketPlayOutSpawnEntityLiving() {}
+
+    public PacketPlayOutSpawnEntityLiving(EntityLiving entityliving) {
+        this.a = entityliving.getId();
+        this.b = entityliving.getUniqueID();
+        this.c = EntityTypes.b.a((Object) entityliving.getClass());
+        this.d = entityliving.locX;
+        this.e = entityliving.locY;
+        this.f = entityliving.locZ;
+        this.j = (byte) ((int) (entityliving.yaw * 256.0F / 360.0F));
+        this.k = (byte) ((int) (entityliving.pitch * 256.0F / 360.0F));
+        this.l = (byte) ((int) (entityliving.aP * 256.0F / 360.0F));
+        double d0 = 3.9D;
+        double d1 = entityliving.motX;
+        double d2 = entityliving.motY;
+        double d3 = entityliving.motZ;
+
+        if (d1 < -3.9D) {
+            d1 = -3.9D;
+        }
+
+        if (d2 < -3.9D) {
+            d2 = -3.9D;
+        }
+
+        if (d3 < -3.9D) {
+            d3 = -3.9D;
+        }
+
+        if (d1 > 3.9D) {
+            d1 = 3.9D;
+        }
+
+        if (d2 > 3.9D) {
+            d2 = 3.9D;
+        }
+
+        if (d3 > 3.9D) {
+            d3 = 3.9D;
+        }
+
+        this.g = (int) (d1 * 8000.0D);
+        this.h = (int) (d2 * 8000.0D);
+        this.i = (int) (d3 * 8000.0D);
+        this.m = entityliving.getDataWatcher();
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.g();
+        this.b = packetdataserializer.i();
+        this.c = packetdataserializer.g();
+        this.d = packetdataserializer.readDouble();
+        this.e = packetdataserializer.readDouble();
+        this.f = packetdataserializer.readDouble();
+        this.j = packetdataserializer.readByte();
+        this.k = packetdataserializer.readByte();
+        this.l = packetdataserializer.readByte();
+        this.g = packetdataserializer.readShort();
+        this.h = packetdataserializer.readShort();
+        this.i = packetdataserializer.readShort();
+        this.n = DataWatcher.b(packetdataserializer);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.d(this.a);
+        packetdataserializer.a(this.b);
+        packetdataserializer.d(this.c);
+        packetdataserializer.writeDouble(this.d);
+        packetdataserializer.writeDouble(this.e);
+        packetdataserializer.writeDouble(this.f);
+        packetdataserializer.writeByte(this.j);
+        packetdataserializer.writeByte(this.k);
+        packetdataserializer.writeByte(this.l);
+        packetdataserializer.writeShort(this.g);
+        packetdataserializer.writeShort(this.h);
+        packetdataserializer.writeShort(this.i);
+        this.m.a(packetdataserializer);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java b/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
new file mode 100644
index 0000000..b30c97e
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
@@ -0,0 +1,34 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+
+public class PacketPlayOutTileEntityData implements Packet<PacketListenerPlayOut> {
+
+    private BlockPosition a;
+    private int b;
+    private NBTTagCompound c;
+
+    public PacketPlayOutTileEntityData() {}
+
+    public PacketPlayOutTileEntityData(BlockPosition blockposition, int i, NBTTagCompound nbttagcompound) {
+        this.a = blockposition;
+        this.b = i;
+        this.c = nbttagcompound;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = packetdataserializer.e();
+        this.b = packetdataserializer.readUnsignedByte();
+        this.c = packetdataserializer.j();
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(this.a);
+        packetdataserializer.writeByte((byte) this.b);
+        packetdataserializer.a(this.c);
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
new file mode 100644
index 0000000..7bcafa8
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
@@ -0,0 +1,101 @@
+package net.minecraft.server;
+
+import java.io.IOException;
+import java.util.Locale;
+import javax.annotation.Nullable;
+
+public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
+
+    private PacketPlayOutTitle.EnumTitleAction a;
+    private IChatBaseComponent b;
+    private int c;
+    private int d;
+    private int e;
+
+    public PacketPlayOutTitle() {}
+
+    public PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction packetplayouttitle_enumtitleaction, IChatBaseComponent ichatbasecomponent) {
+        this(packetplayouttitle_enumtitleaction, ichatbasecomponent, -1, -1, -1);
+    }
+
+    public PacketPlayOutTitle(int i, int j, int k) {
+        this(PacketPlayOutTitle.EnumTitleAction.TIMES, (IChatBaseComponent) null, i, j, k);
+    }
+
+    public PacketPlayOutTitle(PacketPlayOutTitle.EnumTitleAction packetplayouttitle_enumtitleaction, @Nullable IChatBaseComponent ichatbasecomponent, int i, int j, int k) {
+        this.a = packetplayouttitle_enumtitleaction;
+        this.b = ichatbasecomponent;
+        this.c = i;
+        this.d = j;
+        this.e = k;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.a = (PacketPlayOutTitle.EnumTitleAction) packetdataserializer.a(PacketPlayOutTitle.EnumTitleAction.class);
+        if (this.a == PacketPlayOutTitle.EnumTitleAction.TITLE || this.a == PacketPlayOutTitle.EnumTitleAction.SUBTITLE || this.a == PacketPlayOutTitle.EnumTitleAction.ACTIONBAR) {
+            this.b = packetdataserializer.f();
+        }
+
+        if (this.a == PacketPlayOutTitle.EnumTitleAction.TIMES) {
+            this.c = packetdataserializer.readInt();
+            this.d = packetdataserializer.readInt();
+            this.e = packetdataserializer.readInt();
+        }
+
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a((Enum) this.a);
+        if (this.a == PacketPlayOutTitle.EnumTitleAction.TITLE || this.a == PacketPlayOutTitle.EnumTitleAction.SUBTITLE || this.a == PacketPlayOutTitle.EnumTitleAction.ACTIONBAR) {
+            packetdataserializer.a(this.b);
+        }
+
+        if (this.a == PacketPlayOutTitle.EnumTitleAction.TIMES) {
+            packetdataserializer.writeInt(this.c);
+            packetdataserializer.writeInt(this.d);
+            packetdataserializer.writeInt(this.e);
+        }
+
+    }
+
+    public void a(PacketListenerPlayOut packetlistenerplayout) {
+        packetlistenerplayout.a(this);
+    }
+
+    public static enum EnumTitleAction {
+
+        TITLE, SUBTITLE, ACTIONBAR, TIMES, CLEAR, RESET;
+
+        private EnumTitleAction() {}
+
+        public static PacketPlayOutTitle.EnumTitleAction a(String s) {
+            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = values();
+            int i = apacketplayouttitle_enumtitleaction.length;
+
+            for (int j = 0; j < i; ++j) {
+                PacketPlayOutTitle.EnumTitleAction packetplayouttitle_enumtitleaction = apacketplayouttitle_enumtitleaction[j];
+
+                if (packetplayouttitle_enumtitleaction.name().equalsIgnoreCase(s)) {
+                    return packetplayouttitle_enumtitleaction;
+                }
+            }
+
+            return PacketPlayOutTitle.EnumTitleAction.TITLE;
+        }
+
+        public static String[] a() {
+            String[] astring = new String[values().length];
+            int i = 0;
+            PacketPlayOutTitle.EnumTitleAction[] apacketplayouttitle_enumtitleaction = values();
+            int j = apacketplayouttitle_enumtitleaction.length;
+
+            for (int k = 0; k < j; ++k) {
+                PacketPlayOutTitle.EnumTitleAction packetplayouttitle_enumtitleaction = apacketplayouttitle_enumtitleaction[k];
+
+                astring[i++] = packetplayouttitle_enumtitleaction.name().toLowerCase(Locale.ROOT);
+            }
+
+            return astring;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PacketStatusOutServerInfo.java b/src/main/java/net/minecraft/server/PacketStatusOutServerInfo.java
new file mode 100644
index 0000000..df9b08b
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PacketStatusOutServerInfo.java
@@ -0,0 +1,29 @@
+package net.minecraft.server;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import java.io.IOException;
+
+public class PacketStatusOutServerInfo implements Packet<PacketStatusOutListener> {
+
+    private static final Gson a = (new GsonBuilder()).registerTypeAdapter(ServerPing.ServerData.class, new ServerPing.ServerData.ServerData$Serializer()).registerTypeAdapter(ServerPing.ServerPingPlayerSample.class, new ServerPing.ServerPingPlayerSample.ServerPingPlayerSample$Serializer()).registerTypeAdapter(ServerPing.class, new ServerPing.Serializer()).registerTypeHierarchyAdapter(IChatBaseComponent.class, new IChatBaseComponent.ChatSerializer()).registerTypeHierarchyAdapter(ChatModifier.class, new ChatModifier.ChatModifierSerializer()).registerTypeAdapterFactory(new ChatTypeAdapterFactory()).create();
+    private ServerPing b;
+
+    public PacketStatusOutServerInfo() {}
+
+    public PacketStatusOutServerInfo(ServerPing serverping) {
+        this.b = serverping;
+    }
+
+    public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        this.b = (ServerPing) ChatDeserializer.a(PacketStatusOutServerInfo.a, packetdataserializer.e(32767), ServerPing.class);
+    }
+
+    public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        packetdataserializer.a(PacketStatusOutServerInfo.a.toJson(this.b));
+    }
+
+    public void a(PacketStatusOutListener packetstatusoutlistener) {
+        packetstatusoutlistener.a(this);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/PotionUtil.java b/src/main/java/net/minecraft/server/PotionUtil.java
new file mode 100644
index 0000000..1aeb53d
--- /dev/null
+++ b/src/main/java/net/minecraft/server/PotionUtil.java
@@ -0,0 +1,155 @@
+package net.minecraft.server;
+
+import com.google.common.base.Objects;
+import com.google.common.collect.Lists;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import javax.annotation.Nullable;
+
+public class PotionUtil {
+
+    public static List<MobEffect> getEffects(ItemStack itemstack) {
+        return a(itemstack.getTag());
+    }
+
+    public static List<MobEffect> a(PotionRegistry potionregistry, Collection<MobEffect> collection) {
+        ArrayList arraylist = Lists.newArrayList();
+
+        arraylist.addAll(potionregistry.a());
+        arraylist.addAll(collection);
+        return arraylist;
+    }
+
+    public static List<MobEffect> a(@Nullable NBTTagCompound nbttagcompound) {
+        ArrayList arraylist = Lists.newArrayList();
+
+        arraylist.addAll(c(nbttagcompound).a());
+        a(nbttagcompound, (List) arraylist);
+        return arraylist;
+    }
+
+    public static List<MobEffect> b(ItemStack itemstack) {
+        return b(itemstack.getTag());
+    }
+
+    public static List<MobEffect> b(@Nullable NBTTagCompound nbttagcompound) {
+        ArrayList arraylist = Lists.newArrayList();
+
+        a(nbttagcompound, (List) arraylist);
+        return arraylist;
+    }
+
+    public static void a(@Nullable NBTTagCompound nbttagcompound, List<MobEffect> list) {
+        if (nbttagcompound != null && nbttagcompound.hasKeyOfType("CustomPotionEffects", 9)) {
+            NBTTagList nbttaglist = nbttagcompound.getList("CustomPotionEffects", 10);
+
+            for (int i = 0; i < nbttaglist.size(); ++i) {
+                NBTTagCompound nbttagcompound1 = nbttaglist.get(i);
+                MobEffect mobeffect = MobEffect.b(nbttagcompound1);
+
+                if (mobeffect != null) {
+                    list.add(mobeffect);
+                }
+            }
+        }
+
+    }
+
+    public static int c(ItemStack itemstack) {
+        NBTTagCompound nbttagcompound = itemstack.getTag();
+
+        return nbttagcompound != null && nbttagcompound.hasKeyOfType("CustomPotionColor", 99) ? nbttagcompound.getInt("CustomPotionColor") : (d(itemstack) == Potions.EMPTY ? 16253176 : a((Collection) getEffects(itemstack)));
+    }
+
+    public static int a(PotionRegistry potionregistry) {
+        return potionregistry == Potions.EMPTY ? 16253176 : a((Collection) potionregistry.a());
+    }
+
+    public static int a(Collection<MobEffect> collection) {
+        int i = 3694022;
+
+        if (collection.isEmpty()) {
+            return 3694022;
+        } else {
+            float f = 0.0F;
+            float f1 = 0.0F;
+            float f2 = 0.0F;
+            int j = 0;
+            Iterator iterator = collection.iterator();
+
+            while (iterator.hasNext()) {
+                MobEffect mobeffect = (MobEffect) iterator.next();
+
+                if (mobeffect.isShowParticles()) {
+                    int k = mobeffect.getMobEffect().getColor();
+                    int l = mobeffect.getAmplifier() + 1;
+
+                    f += (float) (l * (k >> 16 & 255)) / 255.0F;
+                    f1 += (float) (l * (k >> 8 & 255)) / 255.0F;
+                    f2 += (float) (l * (k >> 0 & 255)) / 255.0F;
+                    j += l;
+                }
+            }
+
+            if (j == 0) {
+                return 0;
+            } else {
+                f = f / (float) j * 255.0F;
+                f1 = f1 / (float) j * 255.0F;
+                f2 = f2 / (float) j * 255.0F;
+                return (int) f << 16 | (int) f1 << 8 | (int) f2;
+            }
+        }
+    }
+
+    public static PotionRegistry d(ItemStack itemstack) {
+        return c(itemstack.getTag());
+    }
+
+    public static PotionRegistry c(@Nullable NBTTagCompound nbttagcompound) {
+        return nbttagcompound == null ? Potions.EMPTY : PotionRegistry.a(nbttagcompound.getString("Potion"));
+    }
+
+    public static ItemStack a(ItemStack itemstack, PotionRegistry potionregistry) {
+        MinecraftKey minecraftkey = (MinecraftKey) PotionRegistry.a.b(potionregistry);
+        NBTTagCompound nbttagcompound;
+
+        if (potionregistry == Potions.EMPTY) {
+            if (itemstack.hasTag()) {
+                nbttagcompound = itemstack.getTag();
+                nbttagcompound.remove("Potion");
+                if (nbttagcompound.isEmpty()) {
+                    itemstack.setTag((NBTTagCompound) null);
+                }
+            }
+        } else {
+            nbttagcompound = itemstack.hasTag() ? itemstack.getTag() : new NBTTagCompound();
+            nbttagcompound.setString("Potion", minecraftkey.toString());
+            itemstack.setTag(nbttagcompound);
+        }
+
+        return itemstack;
+    }
+
+    public static ItemStack a(ItemStack itemstack, Collection<MobEffect> collection) {
+        if (collection.isEmpty()) {
+            return itemstack;
+        } else {
+            NBTTagCompound nbttagcompound = (NBTTagCompound) Objects.firstNonNull(itemstack.getTag(), new NBTTagCompound());
+            NBTTagList nbttaglist = nbttagcompound.getList("CustomPotionEffects", 9);
+            Iterator iterator = collection.iterator();
+
+            while (iterator.hasNext()) {
+                MobEffect mobeffect = (MobEffect) iterator.next();
+
+                nbttaglist.add(mobeffect.a(new NBTTagCompound()));
+            }
+
+            nbttagcompound.set("CustomPotionEffects", nbttaglist);
+            itemstack.setTag(nbttagcompound);
+            return itemstack;
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
new file mode 100644
index 0000000..07016aa
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -0,0 +1,174 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Lists;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import io.netty.bootstrap.ServerBootstrap;
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelException;
+import io.netty.channel.ChannelFuture;
+import io.netty.channel.ChannelInitializer;
+import io.netty.channel.ChannelOption;
+import io.netty.channel.EventLoopGroup;
+import io.netty.channel.epoll.Epoll;
+import io.netty.channel.epoll.EpollEventLoopGroup;
+import io.netty.channel.epoll.EpollServerSocketChannel;
+import io.netty.channel.local.LocalEventLoopGroup;
+import io.netty.channel.nio.NioEventLoopGroup;
+import io.netty.channel.socket.nio.NioServerSocketChannel;
+import io.netty.handler.timeout.ReadTimeoutHandler;
+import io.netty.util.concurrent.Future;
+import io.netty.util.concurrent.GenericFutureListener;
+import java.io.IOException;
+import java.net.InetAddress;
+import java.util.Collections;
+import java.util.Iterator;
+import java.util.List;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class ServerConnection {
+
+    private static final Logger e = LogManager.getLogger();
+    public static final LazyInitVar<NioEventLoopGroup> a = new LazyInitVar() {
+        protected NioEventLoopGroup a() {
+            return new NioEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Server IO #%d").setDaemon(true).build());
+        }
+
+        protected Object init() {
+            return this.a();
+        }
+    };
+    public static final LazyInitVar<EpollEventLoopGroup> b = new LazyInitVar() {
+        protected EpollEventLoopGroup a() {
+            return new EpollEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Epoll Server IO #%d").setDaemon(true).build());
+        }
+
+        protected Object init() {
+            return this.a();
+        }
+    };
+    public static final LazyInitVar<LocalEventLoopGroup> c = new LazyInitVar() {
+        protected LocalEventLoopGroup a() {
+            return new LocalEventLoopGroup(0, (new ThreadFactoryBuilder()).setNameFormat("Netty Local Server IO #%d").setDaemon(true).build());
+        }
+
+        protected Object init() {
+            return this.a();
+        }
+    };
+    private final MinecraftServer f;
+    public volatile boolean d;
+    private final List<ChannelFuture> g = Collections.synchronizedList(Lists.newArrayList());
+    private final List<NetworkManager> h = Collections.synchronizedList(Lists.newArrayList());
+
+    public ServerConnection(MinecraftServer minecraftserver) {
+        this.f = minecraftserver;
+        this.d = true;
+    }
+
+    public void a(InetAddress inetaddress, int i) throws IOException {
+        List list = this.g;
+
+        synchronized (this.g) {
+            Class oclass;
+            LazyInitVar lazyinitvar;
+
+            if (Epoll.isAvailable() && this.f.af()) {
+                oclass = EpollServerSocketChannel.class;
+                lazyinitvar = ServerConnection.b;
+                ServerConnection.e.info("Using epoll channel type");
+            } else {
+                oclass = NioServerSocketChannel.class;
+                lazyinitvar = ServerConnection.a;
+                ServerConnection.e.info("Using default channel type");
+            }
+
+            this.g.add(((ServerBootstrap) ((ServerBootstrap) (new ServerBootstrap()).channel(oclass)).childHandler(new ChannelInitializer() {
+                protected void initChannel(Channel channel) throws Exception {
+                    try {
+                        channel.config().setOption(ChannelOption.TCP_NODELAY, Boolean.valueOf(true));
+                    } catch (ChannelException channelexception) {
+                        ;
+                    }
+
+                    channel.pipeline().addLast("timeout", new ReadTimeoutHandler(30)).addLast("legacy_query", new LegacyPingHandler(ServerConnection.this)).addLast("splitter", new PacketSplitter()).addLast("decoder", new PacketDecoder(EnumProtocolDirection.SERVERBOUND)).addLast("prepender", new PacketPrepender()).addLast("encoder", new PacketEncoder(EnumProtocolDirection.CLIENTBOUND));
+                    NetworkManager networkmanager = new NetworkManager(EnumProtocolDirection.SERVERBOUND);
+
+                    ServerConnection.this.h.add(networkmanager);
+                    channel.pipeline().addLast("packet_handler", networkmanager);
+                    networkmanager.setPacketListener(new HandshakeListener(ServerConnection.this.f, networkmanager));
+                }
+            }).group((EventLoopGroup) lazyinitvar.c()).localAddress(inetaddress, i)).bind().syncUninterruptibly());
+        }
+    }
+
+    public void b() {
+        this.d = false;
+        Iterator iterator = this.g.iterator();
+
+        while (iterator.hasNext()) {
+            ChannelFuture channelfuture = (ChannelFuture) iterator.next();
+
+            try {
+                channelfuture.channel().close().sync();
+            } catch (InterruptedException interruptedexception) {
+                ServerConnection.e.error("Interrupted whilst closing channel");
+            }
+        }
+
+    }
+
+    public void c() {
+        List list = this.h;
+
+        synchronized (this.h) {
+            Iterator iterator = this.h.iterator();
+
+            while (iterator.hasNext()) {
+                final NetworkManager networkmanager = (NetworkManager) iterator.next();
+
+                if (!networkmanager.h()) {
+                    if (networkmanager.isConnected()) {
+                        try {
+                            networkmanager.a();
+                        } catch (Exception exception) {
+                            if (networkmanager.isLocal()) {
+                                CrashReport crashreport = CrashReport.a(exception, "Ticking memory connection");
+                                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Ticking connection");
+
+                                crashreportsystemdetails.a("Connection", new CrashReportCallable() {
+                                    public String a() throws Exception {
+                                        return networkmanager.toString();
+                                    }
+
+                                    public Object call() throws Exception {
+                                        return this.a();
+                                    }
+                                });
+                                throw new ReportedException(crashreport);
+                            }
+
+                            ServerConnection.e.warn("Failed to handle packet for {}", new Object[] { networkmanager.getSocketAddress(), exception});
+                            final ChatComponentText chatcomponenttext = new ChatComponentText("Internal server error");
+
+                            networkmanager.sendPacket(new PacketPlayOutKickDisconnect(chatcomponenttext), new GenericFutureListener() {
+                                public void operationComplete(Future<? super Void> future) throws Exception {
+                                    networkmanager.close(chatcomponenttext);
+                                }
+                            }, new GenericFutureListener[0]);
+                            networkmanager.stopReading();
+                        }
+                    } else {
+                        iterator.remove();
+                        networkmanager.handleDisconnection();
+                    }
+                }
+            }
+
+        }
+    }
+
+    public MinecraftServer d() {
+        return this.f;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/SoundEffect.java b/src/main/java/net/minecraft/server/SoundEffect.java
new file mode 100644
index 0000000..46acdcb
--- /dev/null
+++ b/src/main/java/net/minecraft/server/SoundEffect.java
@@ -0,0 +1,514 @@
+package net.minecraft.server;
+
+public class SoundEffect {
+
+    public static final RegistryMaterials<MinecraftKey, SoundEffect> a = new RegistryMaterials();
+    private final MinecraftKey b;
+    private static int c;
+
+    public SoundEffect(MinecraftKey minecraftkey) {
+        this.b = minecraftkey;
+    }
+
+    public static void b() {
+        a("ambient.cave");
+        a("block.anvil.break");
+        a("block.anvil.destroy");
+        a("block.anvil.fall");
+        a("block.anvil.hit");
+        a("block.anvil.land");
+        a("block.anvil.place");
+        a("block.anvil.step");
+        a("block.anvil.use");
+        a("block.brewing_stand.brew");
+        a("block.chest.close");
+        a("block.chest.locked");
+        a("block.chest.open");
+        a("block.chorus_flower.death");
+        a("block.chorus_flower.grow");
+        a("block.cloth.break");
+        a("block.cloth.fall");
+        a("block.cloth.hit");
+        a("block.cloth.place");
+        a("block.cloth.step");
+        a("block.comparator.click");
+        a("block.dispenser.dispense");
+        a("block.dispenser.fail");
+        a("block.dispenser.launch");
+        a("block.enchantment_table.use");
+        a("block.end_gateway.spawn");
+        a("block.enderchest.close");
+        a("block.enderchest.open");
+        a("block.fence_gate.close");
+        a("block.fence_gate.open");
+        a("block.fire.ambient");
+        a("block.fire.extinguish");
+        a("block.furnace.fire_crackle");
+        a("block.glass.break");
+        a("block.glass.fall");
+        a("block.glass.hit");
+        a("block.glass.place");
+        a("block.glass.step");
+        a("block.grass.break");
+        a("block.grass.fall");
+        a("block.grass.hit");
+        a("block.grass.place");
+        a("block.grass.step");
+        a("block.gravel.break");
+        a("block.gravel.fall");
+        a("block.gravel.hit");
+        a("block.gravel.place");
+        a("block.gravel.step");
+        a("block.iron_door.close");
+        a("block.iron_door.open");
+        a("block.iron_trapdoor.close");
+        a("block.iron_trapdoor.open");
+        a("block.ladder.break");
+        a("block.ladder.fall");
+        a("block.ladder.hit");
+        a("block.ladder.place");
+        a("block.ladder.step");
+        a("block.lava.ambient");
+        a("block.lava.extinguish");
+        a("block.lava.pop");
+        a("block.lever.click");
+        a("block.metal.break");
+        a("block.metal.fall");
+        a("block.metal.hit");
+        a("block.metal.place");
+        a("block.metal.step");
+        a("block.metal_pressureplate.click_off");
+        a("block.metal_pressureplate.click_on");
+        a("block.note.basedrum");
+        a("block.note.bass");
+        a("block.note.harp");
+        a("block.note.hat");
+        a("block.note.pling");
+        a("block.note.snare");
+        a("block.piston.contract");
+        a("block.piston.extend");
+        a("block.portal.ambient");
+        a("block.portal.travel");
+        a("block.portal.trigger");
+        a("block.redstone_torch.burnout");
+        a("block.sand.break");
+        a("block.sand.fall");
+        a("block.sand.hit");
+        a("block.sand.place");
+        a("block.sand.step");
+        a("block.shulker_box.close");
+        a("block.shulker_box.open");
+        a("block.slime.break");
+        a("block.slime.fall");
+        a("block.slime.hit");
+        a("block.slime.place");
+        a("block.slime.step");
+        a("block.snow.break");
+        a("block.snow.fall");
+        a("block.snow.hit");
+        a("block.snow.place");
+        a("block.snow.step");
+        a("block.stone.break");
+        a("block.stone.fall");
+        a("block.stone.hit");
+        a("block.stone.place");
+        a("block.stone.step");
+        a("block.stone_button.click_off");
+        a("block.stone_button.click_on");
+        a("block.stone_pressureplate.click_off");
+        a("block.stone_pressureplate.click_on");
+        a("block.tripwire.attach");
+        a("block.tripwire.click_off");
+        a("block.tripwire.click_on");
+        a("block.tripwire.detach");
+        a("block.water.ambient");
+        a("block.waterlily.place");
+        a("block.wood.break");
+        a("block.wood.fall");
+        a("block.wood.hit");
+        a("block.wood.place");
+        a("block.wood.step");
+        a("block.wood_button.click_off");
+        a("block.wood_button.click_on");
+        a("block.wood_pressureplate.click_off");
+        a("block.wood_pressureplate.click_on");
+        a("block.wooden_door.close");
+        a("block.wooden_door.open");
+        a("block.wooden_trapdoor.close");
+        a("block.wooden_trapdoor.open");
+        a("enchant.thorns.hit");
+        a("entity.armorstand.break");
+        a("entity.armorstand.fall");
+        a("entity.armorstand.hit");
+        a("entity.armorstand.place");
+        a("entity.arrow.hit");
+        a("entity.arrow.hit_player");
+        a("entity.arrow.shoot");
+        a("entity.bat.ambient");
+        a("entity.bat.death");
+        a("entity.bat.hurt");
+        a("entity.bat.loop");
+        a("entity.bat.takeoff");
+        a("entity.blaze.ambient");
+        a("entity.blaze.burn");
+        a("entity.blaze.death");
+        a("entity.blaze.hurt");
+        a("entity.blaze.shoot");
+        a("entity.bobber.splash");
+        a("entity.bobber.throw");
+        a("entity.cat.ambient");
+        a("entity.cat.death");
+        a("entity.cat.hiss");
+        a("entity.cat.hurt");
+        a("entity.cat.purr");
+        a("entity.cat.purreow");
+        a("entity.chicken.ambient");
+        a("entity.chicken.death");
+        a("entity.chicken.egg");
+        a("entity.chicken.hurt");
+        a("entity.chicken.step");
+        a("entity.cow.ambient");
+        a("entity.cow.death");
+        a("entity.cow.hurt");
+        a("entity.cow.milk");
+        a("entity.cow.step");
+        a("entity.creeper.death");
+        a("entity.creeper.hurt");
+        a("entity.creeper.primed");
+        a("entity.donkey.ambient");
+        a("entity.donkey.angry");
+        a("entity.donkey.chest");
+        a("entity.donkey.death");
+        a("entity.donkey.hurt");
+        a("entity.egg.throw");
+        a("entity.elder_guardian.ambient");
+        a("entity.elder_guardian.ambient_land");
+        a("entity.elder_guardian.curse");
+        a("entity.elder_guardian.death");
+        a("entity.elder_guardian.death_land");
+        a("entity.elder_guardian.hurt");
+        a("entity.elder_guardian.flop");
+        a("entity.elder_guardian.hurt_land");
+        a("entity.enderdragon.ambient");
+        a("entity.enderdragon.death");
+        a("entity.enderdragon.flap");
+        a("entity.enderdragon.growl");
+        a("entity.enderdragon.hurt");
+        a("entity.enderdragon.shoot");
+        a("entity.enderdragon_fireball.explode");
+        a("entity.endereye.launch");
+        a("entity.endermen.ambient");
+        a("entity.endermen.death");
+        a("entity.endermen.hurt");
+        a("entity.endermen.scream");
+        a("entity.endermen.stare");
+        a("entity.endermen.teleport");
+        a("entity.endermite.ambient");
+        a("entity.endermite.death");
+        a("entity.endermite.hurt");
+        a("entity.endermite.step");
+        a("entity.enderpearl.throw");
+        a("entity.evocation_fangs.attack");
+        a("entity.evocation_illager.ambient");
+        a("entity.evocation_illager.cast_spell");
+        a("entity.evocation_illager.death");
+        a("entity.evocation_illager.hurt");
+        a("entity.evocation_illager.prepare_attack");
+        a("entity.evocation_illager.prepare_summon");
+        a("entity.evocation_illager.prepare_wololo");
+        a("entity.experience_bottle.throw");
+        a("entity.experience_orb.pickup");
+        a("entity.firework.blast");
+        a("entity.firework.blast_far");
+        a("entity.firework.large_blast");
+        a("entity.firework.large_blast_far");
+        a("entity.firework.launch");
+        a("entity.firework.shoot");
+        a("entity.firework.twinkle");
+        a("entity.firework.twinkle_far");
+        a("entity.generic.big_fall");
+        a("entity.generic.burn");
+        a("entity.generic.death");
+        a("entity.generic.drink");
+        a("entity.generic.eat");
+        a("entity.generic.explode");
+        a("entity.generic.extinguish_fire");
+        a("entity.generic.hurt");
+        a("entity.generic.small_fall");
+        a("entity.generic.splash");
+        a("entity.generic.swim");
+        a("entity.ghast.ambient");
+        a("entity.ghast.death");
+        a("entity.ghast.hurt");
+        a("entity.ghast.scream");
+        a("entity.ghast.shoot");
+        a("entity.ghast.warn");
+        a("entity.guardian.ambient");
+        a("entity.guardian.ambient_land");
+        a("entity.guardian.attack");
+        a("entity.guardian.death");
+        a("entity.guardian.death_land");
+        a("entity.guardian.flop");
+        a("entity.guardian.hurt");
+        a("entity.guardian.hurt_land");
+        a("entity.horse.ambient");
+        a("entity.horse.angry");
+        a("entity.horse.armor");
+        a("entity.horse.breathe");
+        a("entity.horse.death");
+        a("entity.horse.eat");
+        a("entity.horse.gallop");
+        a("entity.horse.hurt");
+        a("entity.horse.jump");
+        a("entity.horse.land");
+        a("entity.horse.saddle");
+        a("entity.horse.step");
+        a("entity.horse.step_wood");
+        a("entity.hostile.big_fall");
+        a("entity.hostile.death");
+        a("entity.hostile.hurt");
+        a("entity.hostile.small_fall");
+        a("entity.hostile.splash");
+        a("entity.hostile.swim");
+        a("entity.husk.ambient");
+        a("entity.husk.death");
+        a("entity.husk.hurt");
+        a("entity.husk.step");
+        a("entity.irongolem.attack");
+        a("entity.irongolem.death");
+        a("entity.irongolem.hurt");
+        a("entity.irongolem.step");
+        a("entity.item.break");
+        a("entity.item.pickup");
+        a("entity.itemframe.add_item");
+        a("entity.itemframe.break");
+        a("entity.itemframe.place");
+        a("entity.itemframe.remove_item");
+        a("entity.itemframe.rotate_item");
+        a("entity.leashknot.break");
+        a("entity.leashknot.place");
+        a("entity.lightning.impact");
+        a("entity.lightning.thunder");
+        a("entity.lingeringpotion.throw");
+        a("entity.llama.ambient");
+        a("entity.llama.angry");
+        a("entity.llama.chest");
+        a("entity.llama.death");
+        a("entity.llama.eat");
+        a("entity.llama.hurt");
+        a("entity.llama.spit");
+        a("entity.llama.step");
+        a("entity.llama.swag");
+        a("entity.magmacube.death");
+        a("entity.magmacube.hurt");
+        a("entity.magmacube.jump");
+        a("entity.magmacube.squish");
+        a("entity.minecart.inside");
+        a("entity.minecart.riding");
+        a("entity.mooshroom.shear");
+        a("entity.mule.ambient");
+        a("entity.mule.chest");
+        a("entity.mule.death");
+        a("entity.mule.hurt");
+        a("entity.painting.break");
+        a("entity.painting.place");
+        a("entity.pig.ambient");
+        a("entity.pig.death");
+        a("entity.pig.hurt");
+        a("entity.pig.saddle");
+        a("entity.pig.step");
+        a("entity.player.attack.crit");
+        a("entity.player.attack.knockback");
+        a("entity.player.attack.nodamage");
+        a("entity.player.attack.strong");
+        a("entity.player.attack.sweep");
+        a("entity.player.attack.weak");
+        a("entity.player.big_fall");
+        a("entity.player.breath");
+        a("entity.player.burp");
+        a("entity.player.death");
+        a("entity.player.hurt");
+        a("entity.player.levelup");
+        a("entity.player.small_fall");
+        a("entity.player.splash");
+        a("entity.player.swim");
+        a("entity.polar_bear.ambient");
+        a("entity.polar_bear.baby_ambient");
+        a("entity.polar_bear.death");
+        a("entity.polar_bear.hurt");
+        a("entity.polar_bear.step");
+        a("entity.polar_bear.warning");
+        a("entity.rabbit.ambient");
+        a("entity.rabbit.attack");
+        a("entity.rabbit.death");
+        a("entity.rabbit.hurt");
+        a("entity.rabbit.jump");
+        a("entity.sheep.ambient");
+        a("entity.sheep.death");
+        a("entity.sheep.hurt");
+        a("entity.sheep.shear");
+        a("entity.sheep.step");
+        a("entity.shulker.ambient");
+        a("entity.shulker.close");
+        a("entity.shulker.death");
+        a("entity.shulker.hurt");
+        a("entity.shulker.hurt_closed");
+        a("entity.shulker.open");
+        a("entity.shulker.shoot");
+        a("entity.shulker.teleport");
+        a("entity.shulker_bullet.hit");
+        a("entity.shulker_bullet.hurt");
+        a("entity.silverfish.ambient");
+        a("entity.silverfish.death");
+        a("entity.silverfish.hurt");
+        a("entity.silverfish.step");
+        a("entity.skeleton.ambient");
+        a("entity.skeleton.death");
+        a("entity.skeleton.hurt");
+        a("entity.skeleton.shoot");
+        a("entity.skeleton.step");
+        a("entity.skeleton_horse.ambient");
+        a("entity.skeleton_horse.death");
+        a("entity.skeleton_horse.hurt");
+        a("entity.slime.attack");
+        a("entity.slime.death");
+        a("entity.slime.hurt");
+        a("entity.slime.jump");
+        a("entity.slime.squish");
+        a("entity.small_magmacube.death");
+        a("entity.small_magmacube.hurt");
+        a("entity.small_magmacube.squish");
+        a("entity.small_slime.death");
+        a("entity.small_slime.hurt");
+        a("entity.small_slime.jump");
+        a("entity.small_slime.squish");
+        a("entity.snowball.throw");
+        a("entity.snowman.ambient");
+        a("entity.snowman.death");
+        a("entity.snowman.hurt");
+        a("entity.snowman.shoot");
+        a("entity.spider.ambient");
+        a("entity.spider.death");
+        a("entity.spider.hurt");
+        a("entity.spider.step");
+        a("entity.splash_potion.break");
+        a("entity.splash_potion.throw");
+        a("entity.squid.ambient");
+        a("entity.squid.death");
+        a("entity.squid.hurt");
+        a("entity.stray.ambient");
+        a("entity.stray.death");
+        a("entity.stray.hurt");
+        a("entity.stray.step");
+        a("entity.tnt.primed");
+        a("entity.vex.ambient");
+        a("entity.vex.charge");
+        a("entity.vex.death");
+        a("entity.vex.hurt");
+        a("entity.villager.ambient");
+        a("entity.villager.death");
+        a("entity.villager.hurt");
+        a("entity.villager.no");
+        a("entity.villager.trading");
+        a("entity.villager.yes");
+        a("entity.vindication_illager.ambient");
+        a("entity.vindication_illager.death");
+        a("entity.vindication_illager.hurt");
+        a("entity.witch.ambient");
+        a("entity.witch.death");
+        a("entity.witch.drink");
+        a("entity.witch.hurt");
+        a("entity.witch.throw");
+        a("entity.wither.ambient");
+        a("entity.wither.break_block");
+        a("entity.wither.death");
+        a("entity.wither.hurt");
+        a("entity.wither.shoot");
+        a("entity.wither.spawn");
+        a("entity.wither_skeleton.ambient");
+        a("entity.wither_skeleton.death");
+        a("entity.wither_skeleton.hurt");
+        a("entity.wither_skeleton.step");
+        a("entity.wolf.ambient");
+        a("entity.wolf.death");
+        a("entity.wolf.growl");
+        a("entity.wolf.howl");
+        a("entity.wolf.hurt");
+        a("entity.wolf.pant");
+        a("entity.wolf.shake");
+        a("entity.wolf.step");
+        a("entity.wolf.whine");
+        a("entity.zombie.ambient");
+        a("entity.zombie.attack_door_wood");
+        a("entity.zombie.attack_iron_door");
+        a("entity.zombie.break_door_wood");
+        a("entity.zombie.death");
+        a("entity.zombie.hurt");
+        a("entity.zombie.infect");
+        a("entity.zombie.step");
+        a("entity.zombie_horse.ambient");
+        a("entity.zombie_horse.death");
+        a("entity.zombie_horse.hurt");
+        a("entity.zombie_pig.ambient");
+        a("entity.zombie_pig.angry");
+        a("entity.zombie_pig.death");
+        a("entity.zombie_pig.hurt");
+        a("entity.zombie_villager.ambient");
+        a("entity.zombie_villager.converted");
+        a("entity.zombie_villager.cure");
+        a("entity.zombie_villager.death");
+        a("entity.zombie_villager.hurt");
+        a("entity.zombie_villager.step");
+        a("item.armor.equip_chain");
+        a("item.armor.equip_diamond");
+        a("item.armor.equip_elytra");
+        a("item.armor.equip_generic");
+        a("item.armor.equip_gold");
+        a("item.armor.equip_iron");
+        a("item.armor.equip_leather");
+        a("item.bottle.empty");
+        a("item.bottle.fill");
+        a("item.bottle.fill_dragonbreath");
+        a("item.bucket.empty");
+        a("item.bucket.empty_lava");
+        a("item.bucket.fill");
+        a("item.bucket.fill_lava");
+        a("item.chorus_fruit.teleport");
+        a("item.elytra.flying");
+        a("item.firecharge.use");
+        a("item.flintandsteel.use");
+        a("item.hoe.till");
+        a("item.shield.block");
+        a("item.shield.break");
+        a("item.shovel.flatten");
+        a("item.totem.use");
+        a("music.creative");
+        a("music.credits");
+        a("music.dragon");
+        a("music.end");
+        a("music.game");
+        a("music.menu");
+        a("music.nether");
+        a("record.11");
+        a("record.13");
+        a("record.blocks");
+        a("record.cat");
+        a("record.chirp");
+        a("record.far");
+        a("record.mall");
+        a("record.mellohi");
+        a("record.stal");
+        a("record.strad");
+        a("record.wait");
+        a("record.ward");
+        a("ui.button.click");
+        a("weather.rain");
+        a("weather.rain.above");
+    }
+
+    private static void a(String s) {
+        MinecraftKey minecraftkey = new MinecraftKey(s);
+
+        SoundEffect.a.a(SoundEffect.c++, minecraftkey, new SoundEffect(minecraftkey));
+    }
+}
diff --git a/src/main/java/net/minecraft/server/SoundEffectType.java b/src/main/java/net/minecraft/server/SoundEffectType.java
new file mode 100644
index 0000000..219653c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/SoundEffectType.java
@@ -0,0 +1,54 @@
+package net.minecraft.server;
+
+public class SoundEffectType {
+
+    public static final SoundEffectType a = new SoundEffectType(1.0F, 1.0F, SoundEffects.hV, SoundEffects.id, SoundEffects.ia, SoundEffects.hZ, SoundEffects.hY);
+    public static final SoundEffectType b = new SoundEffectType(1.0F, 1.0F, SoundEffects.cl, SoundEffects.cp, SoundEffects.co, SoundEffects.cn, SoundEffects.cm);
+    public static final SoundEffectType c = new SoundEffectType(1.0F, 1.0F, SoundEffects.cg, SoundEffects.ck, SoundEffects.cj, SoundEffects.ci, SoundEffects.ch);
+    public static final SoundEffectType d = new SoundEffectType(1.0F, 1.0F, SoundEffects.gH, SoundEffects.gP, SoundEffects.gM, SoundEffects.gL, SoundEffects.gK);
+    public static final SoundEffectType e = new SoundEffectType(1.0F, 1.5F, SoundEffects.dM, SoundEffects.dS, SoundEffects.dP, SoundEffects.dO, SoundEffects.dN);
+    public static final SoundEffectType f = new SoundEffectType(1.0F, 1.0F, SoundEffects.cb, SoundEffects.cf, SoundEffects.ce, SoundEffects.cd, SoundEffects.cc);
+    public static final SoundEffectType g = new SoundEffectType(1.0F, 1.0F, SoundEffects.ai, SoundEffects.am, SoundEffects.al, SoundEffects.ak, SoundEffects.aj);
+    public static final SoundEffectType h = new SoundEffectType(1.0F, 1.0F, SoundEffects.fm, SoundEffects.fq, SoundEffects.fp, SoundEffects.fo, SoundEffects.fn);
+    public static final SoundEffectType i = new SoundEffectType(1.0F, 1.0F, SoundEffects.gt, SoundEffects.gx, SoundEffects.gw, SoundEffects.gv, SoundEffects.gu);
+    public static final SoundEffectType j = new SoundEffectType(1.0F, 1.0F, SoundEffects.dl, SoundEffects.dp, SoundEffects.do, SoundEffects.dn, SoundEffects.dm);
+    public static final SoundEffectType k = new SoundEffectType(0.3F, 1.0F, SoundEffects.b, SoundEffects.h, SoundEffects.g, SoundEffects.e, SoundEffects.d);
+    public static final SoundEffectType l = new SoundEffectType(1.0F, 1.0F, SoundEffects.fY, SoundEffects.gg, SoundEffects.ge, SoundEffects.gb, SoundEffects.ga);
+    public final float m;
+    public final float n;
+    private final SoundEffect o;
+    private final SoundEffect p;
+    private final SoundEffect q;
+    private final SoundEffect r;
+    private final SoundEffect s;
+
+    public SoundEffectType(float f, float f1, SoundEffect soundeffect, SoundEffect soundeffect1, SoundEffect soundeffect2, SoundEffect soundeffect3, SoundEffect soundeffect4) {
+        this.m = f;
+        this.n = f1;
+        this.o = soundeffect;
+        this.p = soundeffect1;
+        this.q = soundeffect2;
+        this.r = soundeffect3;
+        this.s = soundeffect4;
+    }
+
+    public float a() {
+        return this.m;
+    }
+
+    public float b() {
+        return this.n;
+    }
+
+    public SoundEffect d() {
+        return this.p;
+    }
+
+    public SoundEffect e() {
+        return this.q;
+    }
+
+    public SoundEffect g() {
+        return this.s;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/SoundEffects.java b/src/main/java/net/minecraft/server/SoundEffects.java
new file mode 100644
index 0000000..2cafa4c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/SoundEffects.java
@@ -0,0 +1,1008 @@
+package net.minecraft.server;
+
+public class SoundEffects {
+
+    public static final SoundEffect a;
+    public static final SoundEffect b;
+    public static final SoundEffect c;
+    public static final SoundEffect d;
+    public static final SoundEffect e;
+    public static final SoundEffect f;
+    public static final SoundEffect g;
+    public static final SoundEffect h;
+    public static final SoundEffect i;
+    public static final SoundEffect j;
+    public static final SoundEffect k;
+    public static final SoundEffect l;
+    public static final SoundEffect m;
+    public static final SoundEffect n;
+    public static final SoundEffect o;
+    public static final SoundEffect p;
+    public static final SoundEffect q;
+    public static final SoundEffect r;
+    public static final SoundEffect s;
+    public static final SoundEffect t;
+    public static final SoundEffect u;
+    public static final SoundEffect v;
+    public static final SoundEffect w;
+    public static final SoundEffect x;
+    public static final SoundEffect y;
+    public static final SoundEffect z;
+    public static final SoundEffect A;
+    public static final SoundEffect B;
+    public static final SoundEffect C;
+    public static final SoundEffect D;
+    public static final SoundEffect E;
+    public static final SoundEffect F;
+    public static final SoundEffect G;
+    public static final SoundEffect H;
+    public static final SoundEffect I;
+    public static final SoundEffect J;
+    public static final SoundEffect K;
+    public static final SoundEffect L;
+    public static final SoundEffect M;
+    public static final SoundEffect N;
+    public static final SoundEffect O;
+    public static final SoundEffect P;
+    public static final SoundEffect Q;
+    public static final SoundEffect R;
+    public static final SoundEffect S;
+    public static final SoundEffect T;
+    public static final SoundEffect U;
+    public static final SoundEffect V;
+    public static final SoundEffect W;
+    public static final SoundEffect X;
+    public static final SoundEffect Y;
+    public static final SoundEffect Z;
+    public static final SoundEffect aa;
+    public static final SoundEffect ab;
+    public static final SoundEffect ac;
+    public static final SoundEffect ad;
+    public static final SoundEffect ae;
+    public static final SoundEffect af;
+    public static final SoundEffect ag;
+    public static final SoundEffect ah;
+    public static final SoundEffect ai;
+    public static final SoundEffect aj;
+    public static final SoundEffect ak;
+    public static final SoundEffect al;
+    public static final SoundEffect am;
+    public static final SoundEffect an;
+    public static final SoundEffect ao;
+    public static final SoundEffect ap;
+    public static final SoundEffect aq;
+    public static final SoundEffect ar;
+    public static final SoundEffect as;
+    public static final SoundEffect at;
+    public static final SoundEffect au;
+    public static final SoundEffect av;
+    public static final SoundEffect aw;
+    public static final SoundEffect ax;
+    public static final SoundEffect ay;
+    public static final SoundEffect az;
+    public static final SoundEffect aA;
+    public static final SoundEffect aB;
+    public static final SoundEffect aC;
+    public static final SoundEffect aD;
+    public static final SoundEffect aE;
+    public static final SoundEffect aF;
+    public static final SoundEffect aG;
+    public static final SoundEffect aH;
+    public static final SoundEffect aI;
+    public static final SoundEffect aJ;
+    public static final SoundEffect aK;
+    public static final SoundEffect aL;
+    public static final SoundEffect aM;
+    public static final SoundEffect aN;
+    public static final SoundEffect aO;
+    public static final SoundEffect aP;
+    public static final SoundEffect aQ;
+    public static final SoundEffect aR;
+    public static final SoundEffect aS;
+    public static final SoundEffect aT;
+    public static final SoundEffect aU;
+    public static final SoundEffect aV;
+    public static final SoundEffect aW;
+    public static final SoundEffect aX;
+    public static final SoundEffect aY;
+    public static final SoundEffect aZ;
+    public static final SoundEffect ba;
+    public static final SoundEffect bb;
+    public static final SoundEffect bc;
+    public static final SoundEffect bd;
+    public static final SoundEffect be;
+    public static final SoundEffect bf;
+    public static final SoundEffect bg;
+    public static final SoundEffect bh;
+    public static final SoundEffect bi;
+    public static final SoundEffect bj;
+    public static final SoundEffect bk;
+    public static final SoundEffect bl;
+    public static final SoundEffect bm;
+    public static final SoundEffect bn;
+    public static final SoundEffect bo;
+    public static final SoundEffect bp;
+    public static final SoundEffect bq;
+    public static final SoundEffect br;
+    public static final SoundEffect bs;
+    public static final SoundEffect bt;
+    public static final SoundEffect bu;
+    public static final SoundEffect bv;
+    public static final SoundEffect bw;
+    public static final SoundEffect bx;
+    public static final SoundEffect by;
+    public static final SoundEffect bz;
+    public static final SoundEffect bA;
+    public static final SoundEffect bB;
+    public static final SoundEffect bC;
+    public static final SoundEffect bD;
+    public static final SoundEffect bE;
+    public static final SoundEffect bF;
+    public static final SoundEffect bG;
+    public static final SoundEffect bH;
+    public static final SoundEffect bI;
+    public static final SoundEffect bJ;
+    public static final SoundEffect bK;
+    public static final SoundEffect bL;
+    public static final SoundEffect bM;
+    public static final SoundEffect bN;
+    public static final SoundEffect bO;
+    public static final SoundEffect bP;
+    public static final SoundEffect bQ;
+    public static final SoundEffect bR;
+    public static final SoundEffect bS;
+    public static final SoundEffect bT;
+    public static final SoundEffect bU;
+    public static final SoundEffect bV;
+    public static final SoundEffect bW;
+    public static final SoundEffect bX;
+    public static final SoundEffect bY;
+    public static final SoundEffect bZ;
+    public static final SoundEffect ca;
+    public static final SoundEffect cb;
+    public static final SoundEffect cc;
+    public static final SoundEffect cd;
+    public static final SoundEffect ce;
+    public static final SoundEffect cf;
+    public static final SoundEffect cg;
+    public static final SoundEffect ch;
+    public static final SoundEffect ci;
+    public static final SoundEffect cj;
+    public static final SoundEffect ck;
+    public static final SoundEffect cl;
+    public static final SoundEffect cm;
+    public static final SoundEffect cn;
+    public static final SoundEffect co;
+    public static final SoundEffect cp;
+    public static final SoundEffect cq;
+    public static final SoundEffect cr;
+    public static final SoundEffect cs;
+    public static final SoundEffect ct;
+    public static final SoundEffect cu;
+    public static final SoundEffect cv;
+    public static final SoundEffect cw;
+    public static final SoundEffect cx;
+    public static final SoundEffect cy;
+    public static final SoundEffect cz;
+    public static final SoundEffect cA;
+    public static final SoundEffect cB;
+    public static final SoundEffect cC;
+    public static final SoundEffect cD;
+    public static final SoundEffect cE;
+    public static final SoundEffect cF;
+    public static final SoundEffect cG;
+    public static final SoundEffect cH;
+    public static final SoundEffect cI;
+    public static final SoundEffect cJ;
+    public static final SoundEffect cK;
+    public static final SoundEffect cL;
+    public static final SoundEffect cM;
+    public static final SoundEffect cN;
+    public static final SoundEffect cO;
+    public static final SoundEffect cP;
+    public static final SoundEffect cQ;
+    public static final SoundEffect cR;
+    public static final SoundEffect cS;
+    public static final SoundEffect cT;
+    public static final SoundEffect cU;
+    public static final SoundEffect cV;
+    public static final SoundEffect cW;
+    public static final SoundEffect cX;
+    public static final SoundEffect cY;
+    public static final SoundEffect cZ;
+    public static final SoundEffect da;
+    public static final SoundEffect db;
+    public static final SoundEffect dc;
+    public static final SoundEffect dd;
+    public static final SoundEffect de;
+    public static final SoundEffect df;
+    public static final SoundEffect dg;
+    public static final SoundEffect dh;
+    public static final SoundEffect di;
+    public static final SoundEffect dj;
+    public static final SoundEffect dk;
+    public static final SoundEffect dl;
+    public static final SoundEffect dm;
+    public static final SoundEffect dn;
+    public static final SoundEffect do;
+    public static final SoundEffect dp;
+    public static final SoundEffect dq;
+    public static final SoundEffect dr;
+    public static final SoundEffect ds;
+    public static final SoundEffect dt;
+    public static final SoundEffect du;
+    public static final SoundEffect dv;
+    public static final SoundEffect dw;
+    public static final SoundEffect dx;
+    public static final SoundEffect dy;
+    public static final SoundEffect dz;
+    public static final SoundEffect dA;
+    public static final SoundEffect dB;
+    public static final SoundEffect dC;
+    public static final SoundEffect dD;
+    public static final SoundEffect dE;
+    public static final SoundEffect dF;
+    public static final SoundEffect dG;
+    public static final SoundEffect dH;
+    public static final SoundEffect dI;
+    public static final SoundEffect dJ;
+    public static final SoundEffect dK;
+    public static final SoundEffect dL;
+    public static final SoundEffect dM;
+    public static final SoundEffect dN;
+    public static final SoundEffect dO;
+    public static final SoundEffect dP;
+    public static final SoundEffect BLOCK_METAL_PRESSUREPLATE_CLICK_OFF;
+    public static final SoundEffect dR;
+    public static final SoundEffect dS;
+    public static final SoundEffect dT;
+    public static final SoundEffect dU;
+    public static final SoundEffect dV;
+    public static final SoundEffect dW;
+    public static final SoundEffect dX;
+    public static final SoundEffect dY;
+    public static final SoundEffect dZ;
+    public static final SoundEffect ea;
+    public static final SoundEffect eb;
+    public static final SoundEffect ec;
+    public static final SoundEffect ed;
+    public static final SoundEffect ee;
+    public static final SoundEffect ef;
+    public static final SoundEffect eg;
+    public static final SoundEffect eh;
+    public static final SoundEffect ei;
+    public static final SoundEffect ej;
+    public static final SoundEffect ek;
+    public static final SoundEffect el;
+    public static final SoundEffect em;
+    public static final SoundEffect en;
+    public static final SoundEffect eo;
+    public static final SoundEffect ep;
+    public static final SoundEffect eq;
+    public static final SoundEffect er;
+    public static final SoundEffect es;
+    public static final SoundEffect et;
+    public static final SoundEffect eu;
+    public static final SoundEffect ev;
+    public static final SoundEffect ENTITY_PLAYER_ATTACK_CRIT;
+    public static final SoundEffect ex;
+    public static final SoundEffect ey;
+    public static final SoundEffect ez;
+    public static final SoundEffect eA;
+    public static final SoundEffect eB;
+    public static final SoundEffect eC;
+    public static final SoundEffect eD;
+    public static final SoundEffect eE;
+    public static final SoundEffect eF;
+    public static final SoundEffect ENTITY_PLAYER_HURT;
+    public static final SoundEffect eH;
+    public static final SoundEffect eI;
+    public static final SoundEffect eJ;
+    public static final SoundEffect eK;
+    public static final SoundEffect eL;
+    public static final SoundEffect eM;
+    public static final SoundEffect eN;
+    public static final SoundEffect eO;
+    public static final SoundEffect eP;
+    public static final SoundEffect eQ;
+    public static final SoundEffect eR;
+    public static final SoundEffect eS;
+    public static final SoundEffect eT;
+    public static final SoundEffect eU;
+    public static final SoundEffect eV;
+    public static final SoundEffect eW;
+    public static final SoundEffect eX;
+    public static final SoundEffect eY;
+    public static final SoundEffect eZ;
+    public static final SoundEffect fa;
+    public static final SoundEffect fb;
+    public static final SoundEffect fc;
+    public static final SoundEffect fd;
+    public static final SoundEffect fe;
+    public static final SoundEffect ff;
+    public static final SoundEffect fg;
+    public static final SoundEffect fh;
+    public static final SoundEffect fi;
+    public static final SoundEffect fj;
+    public static final SoundEffect fk;
+    public static final SoundEffect fl;
+    public static final SoundEffect fm;
+    public static final SoundEffect fn;
+    public static final SoundEffect fo;
+    public static final SoundEffect fp;
+    public static final SoundEffect fq;
+    public static final SoundEffect fr;
+    public static final SoundEffect fs;
+    public static final SoundEffect ft;
+    public static final SoundEffect fu;
+    public static final SoundEffect fv;
+    public static final SoundEffect fw;
+    public static final SoundEffect fx;
+    public static final SoundEffect fy;
+    public static final SoundEffect fz;
+    public static final SoundEffect fA;
+    public static final SoundEffect fB;
+    public static final SoundEffect fC;
+    public static final SoundEffect fD;
+    public static final SoundEffect fE;
+    public static final SoundEffect fF;
+    public static final SoundEffect fG;
+    public static final SoundEffect fH;
+    public static final SoundEffect fI;
+    public static final SoundEffect fJ;
+    public static final SoundEffect fK;
+    public static final SoundEffect fL;
+    public static final SoundEffect fM;
+    public static final SoundEffect fN;
+    public static final SoundEffect fO;
+    public static final SoundEffect fP;
+    public static final SoundEffect fQ;
+    public static final SoundEffect fR;
+    public static final SoundEffect fS;
+    public static final SoundEffect fT;
+    public static final SoundEffect fU;
+    public static final SoundEffect fV;
+    public static final SoundEffect fW;
+    public static final SoundEffect fX;
+    public static final SoundEffect fY;
+    public static final SoundEffect fZ;
+    public static final SoundEffect ga;
+    public static final SoundEffect gb;
+    public static final SoundEffect gc;
+    public static final SoundEffect gd;
+    public static final SoundEffect ge;
+    public static final SoundEffect gf;
+    public static final SoundEffect gg;
+    public static final SoundEffect gh;
+    public static final SoundEffect gi;
+    public static final SoundEffect gj;
+    public static final SoundEffect gk;
+    public static final SoundEffect gl;
+    public static final SoundEffect gm;
+    public static final SoundEffect gn;
+    public static final SoundEffect go;
+    public static final SoundEffect gp;
+    public static final SoundEffect gq;
+    public static final SoundEffect gr;
+    public static final SoundEffect gs;
+    public static final SoundEffect gt;
+    public static final SoundEffect gu;
+    public static final SoundEffect gv;
+    public static final SoundEffect gw;
+    public static final SoundEffect gx;
+    public static final SoundEffect gy;
+    public static final SoundEffect gz;
+    public static final SoundEffect gA;
+    public static final SoundEffect gB;
+    public static final SoundEffect gC;
+    public static final SoundEffect gD;
+    public static final SoundEffect gE;
+    public static final SoundEffect gF;
+    public static final SoundEffect gG;
+    public static final SoundEffect gH;
+    public static final SoundEffect gI;
+    public static final SoundEffect gJ;
+    public static final SoundEffect gK;
+    public static final SoundEffect gL;
+    public static final SoundEffect gM;
+    public static final SoundEffect gN;
+    public static final SoundEffect gO;
+    public static final SoundEffect gP;
+    public static final SoundEffect gQ;
+    public static final SoundEffect gR;
+    public static final SoundEffect gS;
+    public static final SoundEffect gT;
+    public static final SoundEffect gU;
+    public static final SoundEffect gV;
+    public static final SoundEffect gW;
+    public static final SoundEffect gX;
+    public static final SoundEffect gY;
+    public static final SoundEffect gZ;
+    public static final SoundEffect ha;
+    public static final SoundEffect hb;
+    public static final SoundEffect hc;
+    public static final SoundEffect hd;
+    public static final SoundEffect he;
+    public static final SoundEffect hf;
+    public static final SoundEffect hg;
+    public static final SoundEffect hh;
+    public static final SoundEffect hi;
+    public static final SoundEffect hj;
+    public static final SoundEffect hk;
+    public static final SoundEffect hl;
+    public static final SoundEffect hm;
+    public static final SoundEffect hn;
+    public static final SoundEffect ho;
+    public static final SoundEffect hp;
+    public static final SoundEffect hq;
+    public static final SoundEffect hr;
+    public static final SoundEffect hs;
+    public static final SoundEffect ht;
+    public static final SoundEffect hu;
+    public static final SoundEffect hv;
+    public static final SoundEffect hw;
+    public static final SoundEffect hx;
+    public static final SoundEffect hy;
+    public static final SoundEffect hz;
+    public static final SoundEffect hA;
+    public static final SoundEffect hB;
+    public static final SoundEffect hC;
+    public static final SoundEffect hD;
+    public static final SoundEffect hE;
+    public static final SoundEffect hF;
+    public static final SoundEffect hG;
+    public static final SoundEffect hH;
+    public static final SoundEffect hI;
+    public static final SoundEffect hJ;
+    public static final SoundEffect hK;
+    public static final SoundEffect hL;
+    public static final SoundEffect hM;
+    public static final SoundEffect hN;
+    public static final SoundEffect hO;
+    public static final SoundEffect hP;
+    public static final SoundEffect hQ;
+    public static final SoundEffect hR;
+    public static final SoundEffect hS;
+    public static final SoundEffect hT;
+    public static final SoundEffect hU;
+    public static final SoundEffect hV;
+    public static final SoundEffect hW;
+    public static final SoundEffect hX;
+    public static final SoundEffect hY;
+    public static final SoundEffect hZ;
+    public static final SoundEffect ia;
+    public static final SoundEffect ib;
+    public static final SoundEffect ic;
+    public static final SoundEffect id;
+    public static final SoundEffect ie;
+    public static final SoundEffect if;
+    public static final SoundEffect ig;
+    public static final SoundEffect ih;
+    public static final SoundEffect ii;
+    public static final SoundEffect ij;
+    public static final SoundEffect ik;
+    public static final SoundEffect il;
+    public static final SoundEffect im;
+    public static final SoundEffect in;
+    public static final SoundEffect io;
+    public static final SoundEffect ip;
+    public static final SoundEffect iq;
+    public static final SoundEffect ir;
+    public static final SoundEffect is;
+    public static final SoundEffect it;
+    public static final SoundEffect iu;
+    public static final SoundEffect iv;
+    public static final SoundEffect iw;
+    public static final SoundEffect ix;
+    public static final SoundEffect iy;
+
+    private static SoundEffect a(String s) {
+        SoundEffect soundeffect = (SoundEffect) SoundEffect.a.get(new MinecraftKey(s));
+
+        if (soundeffect == null) {
+            throw new IllegalStateException("Invalid Sound requested: " + s);
+        } else {
+            return soundeffect;
+        }
+    }
+
+    static {
+        if (!DispenserRegistry.a()) {
+            throw new RuntimeException("Accessed Sounds before Bootstrap!");
+        } else {
+            a = a("ambient.cave");
+            b = a("block.anvil.break");
+            c = a("block.anvil.destroy");
+            d = a("block.anvil.fall");
+            e = a("block.anvil.hit");
+            f = a("block.anvil.land");
+            g = a("block.anvil.place");
+            h = a("block.anvil.step");
+            i = a("block.anvil.use");
+            j = a("entity.armorstand.break");
+            k = a("entity.armorstand.fall");
+            l = a("entity.armorstand.hit");
+            m = a("entity.armorstand.place");
+            n = a("item.armor.equip_chain");
+            o = a("item.armor.equip_diamond");
+            p = a("item.armor.equip_elytra");
+            q = a("item.armor.equip_generic");
+            r = a("item.armor.equip_gold");
+            s = a("item.armor.equip_iron");
+            t = a("item.armor.equip_leather");
+            u = a("entity.arrow.hit");
+            v = a("entity.arrow.hit_player");
+            w = a("entity.arrow.shoot");
+            x = a("entity.bat.ambient");
+            y = a("entity.bat.death");
+            z = a("entity.bat.hurt");
+            A = a("entity.bat.loop");
+            B = a("entity.bat.takeoff");
+            C = a("entity.blaze.ambient");
+            D = a("entity.blaze.burn");
+            E = a("entity.blaze.death");
+            F = a("entity.blaze.hurt");
+            G = a("entity.blaze.shoot");
+            H = a("entity.bobber.splash");
+            I = a("entity.bobber.throw");
+            J = a("item.bottle.empty");
+            K = a("item.bottle.fill");
+            L = a("item.bottle.fill_dragonbreath");
+            M = a("block.brewing_stand.brew");
+            N = a("item.bucket.empty");
+            O = a("item.bucket.empty_lava");
+            P = a("item.bucket.fill");
+            Q = a("item.bucket.fill_lava");
+            R = a("entity.cat.ambient");
+            S = a("entity.cat.death");
+            T = a("entity.cat.hiss");
+            U = a("entity.cat.hurt");
+            V = a("entity.cat.purr");
+            W = a("entity.cat.purreow");
+            X = a("block.chest.close");
+            Y = a("block.chest.locked");
+            Z = a("block.chest.open");
+            aa = a("entity.chicken.ambient");
+            ab = a("entity.chicken.death");
+            ac = a("entity.chicken.egg");
+            ad = a("entity.chicken.hurt");
+            ae = a("entity.chicken.step");
+            af = a("block.chorus_flower.death");
+            ag = a("block.chorus_flower.grow");
+            ah = a("item.chorus_fruit.teleport");
+            ai = a("block.cloth.break");
+            aj = a("block.cloth.fall");
+            ak = a("block.cloth.hit");
+            al = a("block.cloth.place");
+            am = a("block.cloth.step");
+            an = a("block.comparator.click");
+            ao = a("entity.cow.ambient");
+            ap = a("entity.cow.death");
+            aq = a("entity.cow.hurt");
+            ar = a("entity.cow.milk");
+            as = a("entity.cow.step");
+            at = a("entity.creeper.death");
+            au = a("entity.creeper.hurt");
+            av = a("entity.creeper.primed");
+            aw = a("block.dispenser.dispense");
+            ax = a("block.dispenser.fail");
+            ay = a("block.dispenser.launch");
+            az = a("entity.donkey.ambient");
+            aA = a("entity.donkey.angry");
+            aB = a("entity.donkey.chest");
+            aC = a("entity.donkey.death");
+            aD = a("entity.donkey.hurt");
+            aE = a("entity.egg.throw");
+            aF = a("entity.elder_guardian.ambient");
+            aG = a("entity.elder_guardian.ambient_land");
+            aH = a("entity.elder_guardian.curse");
+            aI = a("entity.elder_guardian.death");
+            aJ = a("entity.elder_guardian.death_land");
+            aK = a("entity.elder_guardian.flop");
+            aL = a("entity.elder_guardian.hurt");
+            aM = a("entity.elder_guardian.hurt_land");
+            aN = a("item.elytra.flying");
+            aO = a("block.enchantment_table.use");
+            aP = a("block.enderchest.close");
+            aQ = a("block.enderchest.open");
+            aR = a("entity.enderdragon.ambient");
+            aS = a("entity.enderdragon.death");
+            aT = a("entity.enderdragon_fireball.explode");
+            aU = a("entity.enderdragon.flap");
+            aV = a("entity.enderdragon.growl");
+            aW = a("entity.enderdragon.hurt");
+            aX = a("entity.enderdragon.shoot");
+            aY = a("entity.endereye.launch");
+            aZ = a("entity.endermen.ambient");
+            ba = a("entity.endermen.death");
+            bb = a("entity.endermen.hurt");
+            bc = a("entity.endermen.scream");
+            bd = a("entity.endermen.stare");
+            be = a("entity.endermen.teleport");
+            bf = a("entity.endermite.ambient");
+            bg = a("entity.endermite.death");
+            bh = a("entity.endermite.hurt");
+            bi = a("entity.endermite.step");
+            bj = a("entity.enderpearl.throw");
+            bk = a("block.end_gateway.spawn");
+            bl = a("entity.evocation_fangs.attack");
+            bm = a("entity.evocation_illager.ambient");
+            bn = a("entity.evocation_illager.cast_spell");
+            bo = a("entity.evocation_illager.death");
+            bp = a("entity.evocation_illager.hurt");
+            bq = a("entity.evocation_illager.prepare_attack");
+            br = a("entity.evocation_illager.prepare_summon");
+            bs = a("entity.evocation_illager.prepare_wololo");
+            bt = a("entity.experience_bottle.throw");
+            bu = a("entity.experience_orb.pickup");
+            bv = a("block.fence_gate.close");
+            bw = a("block.fence_gate.open");
+            bx = a("item.firecharge.use");
+            by = a("entity.firework.blast");
+            bz = a("entity.firework.blast_far");
+            bA = a("entity.firework.large_blast");
+            bB = a("entity.firework.large_blast_far");
+            bC = a("entity.firework.launch");
+            bD = a("entity.firework.shoot");
+            bE = a("entity.firework.twinkle");
+            bF = a("entity.firework.twinkle_far");
+            bG = a("block.fire.ambient");
+            bH = a("block.fire.extinguish");
+            bI = a("item.flintandsteel.use");
+            bJ = a("block.furnace.fire_crackle");
+            bK = a("entity.generic.big_fall");
+            bL = a("entity.generic.burn");
+            bM = a("entity.generic.death");
+            bN = a("entity.generic.drink");
+            bO = a("entity.generic.eat");
+            bP = a("entity.generic.explode");
+            bQ = a("entity.generic.extinguish_fire");
+            bR = a("entity.generic.hurt");
+            bS = a("entity.generic.small_fall");
+            bT = a("entity.generic.splash");
+            bU = a("entity.generic.swim");
+            bV = a("entity.ghast.ambient");
+            bW = a("entity.ghast.death");
+            bX = a("entity.ghast.hurt");
+            bY = a("entity.ghast.scream");
+            bZ = a("entity.ghast.shoot");
+            ca = a("entity.ghast.warn");
+            cb = a("block.glass.break");
+            cc = a("block.glass.fall");
+            cd = a("block.glass.hit");
+            ce = a("block.glass.place");
+            cf = a("block.glass.step");
+            cg = a("block.grass.break");
+            ch = a("block.grass.fall");
+            ci = a("block.grass.hit");
+            cj = a("block.grass.place");
+            ck = a("block.grass.step");
+            cl = a("block.gravel.break");
+            cm = a("block.gravel.fall");
+            cn = a("block.gravel.hit");
+            co = a("block.gravel.place");
+            cp = a("block.gravel.step");
+            cq = a("entity.guardian.ambient");
+            cr = a("entity.guardian.ambient_land");
+            cs = a("entity.guardian.attack");
+            ct = a("entity.guardian.death");
+            cu = a("entity.guardian.death_land");
+            cv = a("entity.guardian.flop");
+            cw = a("entity.guardian.hurt");
+            cx = a("entity.guardian.hurt_land");
+            cy = a("item.hoe.till");
+            cz = a("entity.horse.ambient");
+            cA = a("entity.horse.angry");
+            cB = a("entity.horse.armor");
+            cC = a("entity.horse.breathe");
+            cD = a("entity.horse.death");
+            cE = a("entity.horse.eat");
+            cF = a("entity.horse.gallop");
+            cG = a("entity.horse.hurt");
+            cH = a("entity.horse.jump");
+            cI = a("entity.horse.land");
+            cJ = a("entity.horse.saddle");
+            cK = a("entity.horse.step");
+            cL = a("entity.horse.step_wood");
+            cM = a("entity.hostile.big_fall");
+            cN = a("entity.hostile.death");
+            cO = a("entity.hostile.hurt");
+            cP = a("entity.hostile.small_fall");
+            cQ = a("entity.hostile.splash");
+            cR = a("entity.hostile.swim");
+            cS = a("entity.husk.ambient");
+            cT = a("entity.husk.death");
+            cU = a("entity.husk.hurt");
+            cV = a("entity.husk.step");
+            cW = a("entity.irongolem.attack");
+            cX = a("entity.irongolem.death");
+            cY = a("entity.irongolem.hurt");
+            cZ = a("entity.irongolem.step");
+            da = a("block.iron_door.close");
+            db = a("block.iron_door.open");
+            dc = a("block.iron_trapdoor.close");
+            dd = a("block.iron_trapdoor.open");
+            de = a("entity.itemframe.add_item");
+            df = a("entity.itemframe.break");
+            dg = a("entity.itemframe.place");
+            dh = a("entity.itemframe.remove_item");
+            di = a("entity.itemframe.rotate_item");
+            dj = a("entity.item.break");
+            dk = a("entity.item.pickup");
+            dl = a("block.ladder.break");
+            dm = a("block.ladder.fall");
+            dn = a("block.ladder.hit");
+            do = a("block.ladder.place");
+            dp = a("block.ladder.step");
+            dq = a("block.lava.ambient");
+            dr = a("block.lava.extinguish");
+            ds = a("block.lava.pop");
+            dt = a("entity.leashknot.break");
+            du = a("entity.leashknot.place");
+            dv = a("block.lever.click");
+            dw = a("entity.lightning.impact");
+            dx = a("entity.lightning.thunder");
+            dy = a("entity.lingeringpotion.throw");
+            dz = a("entity.llama.ambient");
+            dA = a("entity.llama.angry");
+            dB = a("entity.llama.chest");
+            dC = a("entity.llama.death");
+            dD = a("entity.llama.eat");
+            dE = a("entity.llama.hurt");
+            dF = a("entity.llama.spit");
+            dG = a("entity.llama.step");
+            dH = a("entity.llama.swag");
+            dI = a("entity.magmacube.death");
+            dJ = a("entity.magmacube.hurt");
+            dK = a("entity.magmacube.jump");
+            dL = a("entity.magmacube.squish");
+            dM = a("block.metal.break");
+            dN = a("block.metal.fall");
+            dO = a("block.metal.hit");
+            dP = a("block.metal.place");
+            BLOCK_METAL_PRESSUREPLATE_CLICK_OFF = a("block.metal_pressureplate.click_off");
+            dR = a("block.metal_pressureplate.click_on");
+            dS = a("block.metal.step");
+            dT = a("entity.minecart.inside");
+            dU = a("entity.minecart.riding");
+            dV = a("entity.mooshroom.shear");
+            dW = a("entity.mule.ambient");
+            dX = a("entity.mule.chest");
+            dY = a("entity.mule.death");
+            dZ = a("entity.mule.hurt");
+            ea = a("music.creative");
+            eb = a("music.credits");
+            ec = a("music.dragon");
+            ed = a("music.end");
+            ee = a("music.game");
+            ef = a("music.menu");
+            eg = a("music.nether");
+            eh = a("block.note.basedrum");
+            ei = a("block.note.bass");
+            ej = a("block.note.harp");
+            ek = a("block.note.hat");
+            el = a("block.note.pling");
+            em = a("block.note.snare");
+            en = a("entity.painting.break");
+            eo = a("entity.painting.place");
+            ep = a("entity.pig.ambient");
+            eq = a("entity.pig.death");
+            er = a("entity.pig.hurt");
+            es = a("entity.pig.saddle");
+            et = a("entity.pig.step");
+            eu = a("block.piston.contract");
+            ev = a("block.piston.extend");
+            ENTITY_PLAYER_ATTACK_CRIT = a("entity.player.attack.crit");
+            ex = a("entity.player.attack.knockback");
+            ey = a("entity.player.attack.nodamage");
+            ez = a("entity.player.attack.strong");
+            eA = a("entity.player.attack.sweep");
+            eB = a("entity.player.attack.weak");
+            eC = a("entity.player.big_fall");
+            eD = a("entity.player.breath");
+            eE = a("entity.player.burp");
+            eF = a("entity.player.death");
+            ENTITY_PLAYER_HURT = a("entity.player.hurt");
+            eH = a("entity.player.levelup");
+            eI = a("entity.player.small_fall");
+            eJ = a("entity.player.splash");
+            eK = a("entity.player.swim");
+            eL = a("entity.polar_bear.ambient");
+            eM = a("entity.polar_bear.baby_ambient");
+            eN = a("entity.polar_bear.death");
+            eO = a("entity.polar_bear.hurt");
+            eP = a("entity.polar_bear.step");
+            eQ = a("entity.polar_bear.warning");
+            eR = a("block.portal.ambient");
+            eS = a("block.portal.travel");
+            eT = a("block.portal.trigger");
+            eU = a("entity.rabbit.ambient");
+            eV = a("entity.rabbit.attack");
+            eW = a("entity.rabbit.death");
+            eX = a("entity.rabbit.hurt");
+            eY = a("entity.rabbit.jump");
+            eZ = a("record.11");
+            fa = a("record.13");
+            fb = a("record.blocks");
+            fc = a("record.cat");
+            fd = a("record.chirp");
+            fe = a("record.far");
+            ff = a("record.mall");
+            fg = a("record.mellohi");
+            fh = a("record.stal");
+            fi = a("record.strad");
+            fj = a("record.wait");
+            fk = a("record.ward");
+            fl = a("block.redstone_torch.burnout");
+            fm = a("block.sand.break");
+            fn = a("block.sand.fall");
+            fo = a("block.sand.hit");
+            fp = a("block.sand.place");
+            fq = a("block.sand.step");
+            fr = a("entity.sheep.ambient");
+            fs = a("entity.sheep.death");
+            ft = a("entity.sheep.hurt");
+            fu = a("entity.sheep.shear");
+            fv = a("entity.sheep.step");
+            fw = a("item.shield.block");
+            fx = a("item.shield.break");
+            fy = a("item.shovel.flatten");
+            fz = a("entity.shulker.ambient");
+            fA = a("block.shulker_box.close");
+            fB = a("block.shulker_box.open");
+            fC = a("entity.shulker_bullet.hit");
+            fD = a("entity.shulker_bullet.hurt");
+            fE = a("entity.shulker.close");
+            fF = a("entity.shulker.death");
+            fG = a("entity.shulker.hurt");
+            fH = a("entity.shulker.hurt_closed");
+            fI = a("entity.shulker.open");
+            fJ = a("entity.shulker.shoot");
+            fK = a("entity.shulker.teleport");
+            fL = a("entity.silverfish.ambient");
+            fM = a("entity.silverfish.death");
+            fN = a("entity.silverfish.hurt");
+            fO = a("entity.silverfish.step");
+            fP = a("entity.skeleton.ambient");
+            fQ = a("entity.skeleton.death");
+            fR = a("entity.skeleton_horse.ambient");
+            fS = a("entity.skeleton_horse.death");
+            fT = a("entity.skeleton_horse.hurt");
+            fU = a("entity.skeleton.hurt");
+            fV = a("entity.skeleton.shoot");
+            fW = a("entity.skeleton.step");
+            fX = a("entity.slime.attack");
+            fY = a("block.slime.break");
+            fZ = a("entity.slime.death");
+            ga = a("block.slime.fall");
+            gb = a("block.slime.hit");
+            gc = a("entity.slime.hurt");
+            gd = a("entity.slime.jump");
+            ge = a("block.slime.place");
+            gf = a("entity.slime.squish");
+            gg = a("block.slime.step");
+            gh = a("entity.small_magmacube.death");
+            gi = a("entity.small_magmacube.hurt");
+            gj = a("entity.small_magmacube.squish");
+            gk = a("entity.small_slime.death");
+            gl = a("entity.small_slime.hurt");
+            gm = a("entity.small_slime.jump");
+            gn = a("entity.small_slime.squish");
+            go = a("entity.snowball.throw");
+            gp = a("entity.snowman.ambient");
+            gq = a("entity.snowman.death");
+            gr = a("entity.snowman.hurt");
+            gs = a("entity.snowman.shoot");
+            gt = a("block.snow.break");
+            gu = a("block.snow.fall");
+            gv = a("block.snow.hit");
+            gw = a("block.snow.place");
+            gx = a("block.snow.step");
+            gy = a("entity.spider.ambient");
+            gz = a("entity.spider.death");
+            gA = a("entity.spider.hurt");
+            gB = a("entity.spider.step");
+            gC = a("entity.splash_potion.break");
+            gD = a("entity.splash_potion.throw");
+            gE = a("entity.squid.ambient");
+            gF = a("entity.squid.death");
+            gG = a("entity.squid.hurt");
+            gH = a("block.stone.break");
+            gI = a("block.stone_button.click_off");
+            gJ = a("block.stone_button.click_on");
+            gK = a("block.stone.fall");
+            gL = a("block.stone.hit");
+            gM = a("block.stone.place");
+            gN = a("block.stone_pressureplate.click_off");
+            gO = a("block.stone_pressureplate.click_on");
+            gP = a("block.stone.step");
+            gQ = a("entity.stray.ambient");
+            gR = a("entity.stray.death");
+            gS = a("entity.stray.hurt");
+            gT = a("entity.stray.step");
+            gU = a("enchant.thorns.hit");
+            gV = a("entity.tnt.primed");
+            gW = a("item.totem.use");
+            gX = a("block.tripwire.attach");
+            gY = a("block.tripwire.click_off");
+            gZ = a("block.tripwire.click_on");
+            ha = a("block.tripwire.detach");
+            hb = a("ui.button.click");
+            hc = a("entity.vex.ambient");
+            hd = a("entity.vex.charge");
+            he = a("entity.vex.death");
+            hf = a("entity.vex.hurt");
+            hg = a("entity.villager.ambient");
+            hh = a("entity.villager.death");
+            hi = a("entity.villager.hurt");
+            hj = a("entity.villager.no");
+            hk = a("entity.villager.trading");
+            hl = a("entity.villager.yes");
+            hm = a("entity.vindication_illager.ambient");
+            hn = a("entity.vindication_illager.death");
+            ho = a("entity.vindication_illager.hurt");
+            hp = a("block.waterlily.place");
+            hq = a("block.water.ambient");
+            hr = a("weather.rain");
+            hs = a("weather.rain.above");
+            ht = a("entity.witch.ambient");
+            hu = a("entity.witch.death");
+            hv = a("entity.witch.drink");
+            hw = a("entity.witch.hurt");
+            hx = a("entity.witch.throw");
+            hy = a("entity.wither.ambient");
+            hz = a("entity.wither.break_block");
+            hA = a("entity.wither.death");
+            hB = a("entity.wither.hurt");
+            hC = a("entity.wither.shoot");
+            hD = a("entity.wither_skeleton.ambient");
+            hE = a("entity.wither_skeleton.death");
+            hF = a("entity.wither_skeleton.hurt");
+            hG = a("entity.wither_skeleton.step");
+            hH = a("entity.wither.spawn");
+            hI = a("entity.wolf.ambient");
+            hJ = a("entity.wolf.death");
+            hK = a("entity.wolf.growl");
+            hL = a("entity.wolf.howl");
+            hM = a("entity.wolf.hurt");
+            hN = a("entity.wolf.pant");
+            hO = a("entity.wolf.shake");
+            hP = a("entity.wolf.step");
+            hQ = a("entity.wolf.whine");
+            hR = a("block.wooden_door.close");
+            hS = a("block.wooden_door.open");
+            hT = a("block.wooden_trapdoor.close");
+            hU = a("block.wooden_trapdoor.open");
+            hV = a("block.wood.break");
+            hW = a("block.wood_button.click_off");
+            hX = a("block.wood_button.click_on");
+            hY = a("block.wood.fall");
+            hZ = a("block.wood.hit");
+            ia = a("block.wood.place");
+            ib = a("block.wood_pressureplate.click_off");
+            ic = a("block.wood_pressureplate.click_on");
+            id = a("block.wood.step");
+            ie = a("entity.zombie.ambient");
+            if = a("entity.zombie.attack_door_wood");
+            ig = a("entity.zombie.attack_iron_door");
+            ih = a("entity.zombie.break_door_wood");
+            ii = a("entity.zombie.death");
+            ij = a("entity.zombie_horse.ambient");
+            ik = a("entity.zombie_horse.death");
+            il = a("entity.zombie_horse.hurt");
+            im = a("entity.zombie.hurt");
+            in = a("entity.zombie.infect");
+            io = a("entity.zombie_pig.ambient");
+            ip = a("entity.zombie_pig.angry");
+            iq = a("entity.zombie_pig.death");
+            ir = a("entity.zombie_pig.hurt");
+            is = a("entity.zombie.step");
+            it = a("entity.zombie_villager.ambient");
+            iu = a("entity.zombie_villager.converted");
+            iv = a("entity.zombie_villager.cure");
+            iw = a("entity.zombie_villager.death");
+            ix = a("entity.zombie_villager.hurt");
+            iy = a("entity.zombie_villager.step");
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/ThreadWatchdog.java b/src/main/java/net/minecraft/server/ThreadWatchdog.java
new file mode 100644
index 0000000..da6702c
--- /dev/null
+++ b/src/main/java/net/minecraft/server/ThreadWatchdog.java
@@ -0,0 +1,93 @@
+package net.minecraft.server;
+
+import java.io.File;
+import java.lang.management.ManagementFactory;
+import java.lang.management.ThreadInfo;
+import java.lang.management.ThreadMXBean;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.Timer;
+import java.util.TimerTask;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+
+public class ThreadWatchdog implements Runnable {
+
+    private static final Logger a = LogManager.getLogger();
+    private final DedicatedServer b;
+    private final long c;
+
+    public ThreadWatchdog(DedicatedServer dedicatedserver) {
+        this.b = dedicatedserver;
+        this.c = dedicatedserver.aQ();
+    }
+
+    public void run() {
+        while (this.b.isRunning()) {
+            long i = this.b.aH();
+            long j = MinecraftServer.aw();
+            long k = j - i;
+
+            if (k > this.c) {
+                ThreadWatchdog.a.fatal("A single server tick took {} seconds (should be max {})", new Object[] { String.format("%.2f", new Object[] { Float.valueOf((float) k / 1000.0F)}), String.format("%.2f", new Object[] { Float.valueOf(0.05F)})});
+                ThreadWatchdog.a.fatal("Considering it to be crashed, server will forcibly shutdown.");
+                ThreadMXBean threadmxbean = ManagementFactory.getThreadMXBean();
+                ThreadInfo[] athreadinfo = threadmxbean.dumpAllThreads(true, true);
+                StringBuilder stringbuilder = new StringBuilder();
+                Error error = new Error();
+                ThreadInfo[] athreadinfo1 = athreadinfo;
+                int l = athreadinfo.length;
+
+                for (int i1 = 0; i1 < l; ++i1) {
+                    ThreadInfo threadinfo = athreadinfo1[i1];
+
+                    if (threadinfo.getThreadId() == this.b.aI().getId()) {
+                        error.setStackTrace(threadinfo.getStackTrace());
+                    }
+
+                    stringbuilder.append(threadinfo);
+                    stringbuilder.append("\n");
+                }
+
+                CrashReport crashreport = new CrashReport("Watching Server", error);
+
+                this.b.b(crashreport);
+                CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Thread Dump");
+
+                crashreportsystemdetails.a("Threads", (Object) stringbuilder);
+                File file = new File(new File(this.b.A(), "crash-reports"), "crash-" + (new SimpleDateFormat("yyyy-MM-dd_HH.mm.ss")).format(new Date()) + "-server.txt");
+
+                if (crashreport.a(file)) {
+                    ThreadWatchdog.a.error("This crash report has been saved to: {}", new Object[] { file.getAbsolutePath()});
+                } else {
+                    ThreadWatchdog.a.error("We were unable to save this crash report to disk.");
+                }
+
+                this.a();
+            }
+
+            try {
+                Thread.sleep(i + this.c - j);
+            } catch (InterruptedException interruptedexception) {
+                ;
+            }
+        }
+
+    }
+
+    private void a() {
+        try {
+            Timer timer = new Timer();
+
+            timer.schedule(new TimerTask() {
+                public void run() {
+                    Runtime.getRuntime().halt(1);
+                }
+            }, 10000L);
+            System.exit(1);
+        } catch (Throwable throwable) {
+            Runtime.getRuntime().halt(1);
+        }
+
+    }
+}
diff --git a/src/main/java/net/minecraft/server/TileEntitySkull.java b/src/main/java/net/minecraft/server/TileEntitySkull.java
new file mode 100644
index 0000000..6e91a22
--- /dev/null
+++ b/src/main/java/net/minecraft/server/TileEntitySkull.java
@@ -0,0 +1,152 @@
+package net.minecraft.server;
+
+import com.google.common.collect.Iterables;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.minecraft.MinecraftSessionService;
+import com.mojang.authlib.properties.Property;
+import java.util.UUID;
+import javax.annotation.Nullable;
+
+public class TileEntitySkull extends TileEntity implements ITickable {
+
+    private int a;
+    public int rotation;
+    private GameProfile g;
+    private int h;
+    private boolean i;
+    private static UserCache j;
+    private static MinecraftSessionService k;
+
+    public TileEntitySkull() {}
+
+    public static void a(UserCache usercache) {
+        TileEntitySkull.j = usercache;
+    }
+
+    public static void a(MinecraftSessionService minecraftsessionservice) {
+        TileEntitySkull.k = minecraftsessionservice;
+    }
+
+    public NBTTagCompound save(NBTTagCompound nbttagcompound) {
+        super.save(nbttagcompound);
+        nbttagcompound.setByte("SkullType", (byte) (this.a & 255));
+        nbttagcompound.setByte("Rot", (byte) (this.rotation & 255));
+        if (this.g != null) {
+            NBTTagCompound nbttagcompound1 = new NBTTagCompound();
+
+            GameProfileSerializer.serialize(nbttagcompound1, this.g);
+            nbttagcompound.set("Owner", nbttagcompound1);
+        }
+
+        return nbttagcompound;
+    }
+
+    public void a(NBTTagCompound nbttagcompound) {
+        super.a(nbttagcompound);
+        this.a = nbttagcompound.getByte("SkullType");
+        this.rotation = nbttagcompound.getByte("Rot");
+        if (this.a == 3) {
+            if (nbttagcompound.hasKeyOfType("Owner", 10)) {
+                this.g = GameProfileSerializer.deserialize(nbttagcompound.getCompound("Owner"));
+            } else if (nbttagcompound.hasKeyOfType("ExtraType", 8)) {
+                String s = nbttagcompound.getString("ExtraType");
+
+                if (!UtilColor.b(s)) {
+                    this.g = new GameProfile((UUID) null, s);
+                    this.h();
+                }
+            }
+        }
+
+    }
+
+    public void F_() {
+        if (this.a == 5) {
+            if (this.world.isBlockIndirectlyPowered(this.position)) {
+                this.i = true;
+                ++this.h;
+            } else {
+                this.i = false;
+            }
+        }
+
+    }
+
+    @Nullable
+    public GameProfile getGameProfile() {
+        return this.g;
+    }
+
+    @Nullable
+    public PacketPlayOutTileEntityData getUpdatePacket() {
+        return new PacketPlayOutTileEntityData(this.position, 4, this.d());
+    }
+
+    public NBTTagCompound d() {
+        return this.save(new NBTTagCompound());
+    }
+
+    public void setSkullType(int i) {
+        this.a = i;
+        this.g = null;
+    }
+
+    public void setGameProfile(@Nullable GameProfile gameprofile) {
+        this.a = 3;
+        this.g = gameprofile;
+        this.h();
+    }
+
+    private void h() {
+        this.g = b(this.g);
+        this.update();
+    }
+
+    public static GameProfile b(GameProfile gameprofile) {
+        if (gameprofile != null && !UtilColor.b(gameprofile.getName())) {
+            if (gameprofile.isComplete() && gameprofile.getProperties().containsKey("textures")) {
+                return gameprofile;
+            } else if (TileEntitySkull.j != null && TileEntitySkull.k != null) {
+                GameProfile gameprofile1 = TileEntitySkull.j.getProfile(gameprofile.getName());
+
+                if (gameprofile1 == null) {
+                    return gameprofile;
+                } else {
+                    Property property = (Property) Iterables.getFirst(gameprofile1.getProperties().get("textures"), (Object) null);
+
+                    if (property == null) {
+                        gameprofile1 = TileEntitySkull.k.fillProfileProperties(gameprofile1, true);
+                    }
+
+                    return gameprofile1;
+                }
+            } else {
+                return gameprofile;
+            }
+        } else {
+            return gameprofile;
+        }
+    }
+
+    public int getSkullType() {
+        return this.a;
+    }
+
+    public void setRotation(int i) {
+        this.rotation = i;
+    }
+
+    public void a(EnumBlockMirror enumblockmirror) {
+        if (this.world != null && this.world.getType(this.getPosition()).get(BlockSkull.FACING) == EnumDirection.UP) {
+            this.rotation = enumblockmirror.a(this.rotation, 16);
+        }
+
+    }
+
+    public void a(EnumBlockRotation enumblockrotation) {
+        if (this.world != null && this.world.getType(this.getPosition()).get(BlockSkull.FACING) == EnumDirection.UP) {
+            this.rotation = enumblockrotation.a(this.rotation, 16);
+        }
+
+    }
+}
diff --git a/src/main/java/net/minecraft/server/WhiteList.java b/src/main/java/net/minecraft/server/WhiteList.java
new file mode 100644
index 0000000..85085d5
--- /dev/null
+++ b/src/main/java/net/minecraft/server/WhiteList.java
@@ -0,0 +1,58 @@
+package net.minecraft.server;
+
+import com.google.gson.JsonObject;
+import com.mojang.authlib.GameProfile;
+import java.io.File;
+import java.util.Iterator;
+
+public class WhiteList extends JsonList<GameProfile, WhiteListEntry> {
+
+    public WhiteList(File file) {
+        super(file);
+    }
+
+    protected JsonListEntry<GameProfile> a(JsonObject jsonobject) {
+        return new WhiteListEntry(jsonobject);
+    }
+
+    public boolean isWhitelisted(GameProfile gameprofile) {
+        return this.d(gameprofile);
+    }
+
+    public String[] getEntries() {
+        String[] astring = new String[this.e().size()];
+        int i = 0;
+
+        WhiteListEntry whitelistentry;
+
+        for (Iterator iterator = this.e().values().iterator(); iterator.hasNext(); astring[i++] = ((GameProfile) whitelistentry.getKey()).getName()) {
+            whitelistentry = (WhiteListEntry) iterator.next();
+        }
+
+        return astring;
+    }
+
+    protected String b(GameProfile gameprofile) {
+        return gameprofile.getId().toString();
+    }
+
+    public GameProfile a(String s) {
+        Iterator iterator = this.e().values().iterator();
+
+        WhiteListEntry whitelistentry;
+
+        do {
+            if (!iterator.hasNext()) {
+                return null;
+            }
+
+            whitelistentry = (WhiteListEntry) iterator.next();
+        } while (!s.equalsIgnoreCase(((GameProfile) whitelistentry.getKey()).getName()));
+
+        return (GameProfile) whitelistentry.getKey();
+    }
+
+    protected String a(Object object) {
+        return this.b((GameProfile) object);
+    }
+}
