From: mrapple <tony@oc.tc>
Date: Sat, 17 Nov 2012 12:41:06 -0600
Subject: [PATCH] Make AsyncPlayerPreLoginEvent more versatile


diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -72,6 +72,12 @@ public class LoginListener implements PacketLoginInListener, ITickable {
     }
 
     public void disconnect(String s) {
+        // SportBukkit start - postpone disconnect until after pre-login event
+        if(!this.preLoginEventFired) {
+            this.disconnectReason = s;
+            return;
+        }
+        // SportBukkit end
         try {
             LoginListener.c.info("Disconnecting {}: {}", new Object[] { this.d(), s});
             ChatComponentText chatcomponenttext = new ChatComponentText(s);
@@ -85,9 +91,11 @@ public class LoginListener implements PacketLoginInListener, ITickable {
     }
 
     public void b() {
+        /* SportBukkit - moved to PacketLoginInStart handler
         if (!this.i.isComplete()) {
             this.i = this.a(this.i);
         }
+        */
 
         // CraftBukkit start - fire PlayerLoginEvent
         EntityPlayer s = this.server.getPlayerList().attemptLogin(this, this.i, hostname);
@@ -137,7 +145,15 @@ public class LoginListener implements PacketLoginInListener, ITickable {
             this.g = LoginListener.EnumProtocolState.KEY;
             this.networkManager.sendPacket(new PacketLoginOutEncryptionBegin("", this.server.O().getPublic(), this.e));
         } else {
-            this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+            // SportBukkit start - call pre-login event in offline mode
+            new Thread("User Authenticator #" + LoginListener.b.incrementAndGet()) {
+                public void run() {
+                    LoginListener.this.i = LoginListener.this.a(LoginListener.this.i);
+                    LoginListener.c.info("UUID (offline) of player " + LoginListener.this.i.getName() + " is " + LoginListener.this.i.getId());
+                    callPreLoginEvent();
+                }
+            }.start();
+            // SportBukkit end
         }
 
     }
@@ -161,49 +177,11 @@ public class LoginListener implements PacketLoginInListener, ITickable {
 
                         LoginListener.this.i = LoginListener.this.server.az().hasJoinedServer(new GameProfile((UUID) null, gameprofile.getName()), s, this.a());
                         if (LoginListener.this.i != null) {
-                            // CraftBukkit start - fire PlayerPreLoginEvent
-                            if (!networkManager.isConnected()) {
-                                return;
-                            }
-
-                            String playerName = i.getName();
-                            java.net.InetAddress address = ((java.net.InetSocketAddress) networkManager.getSocketAddress()).getAddress();
-                            java.util.UUID uniqueId = i.getId();
-                            final org.bukkit.craftbukkit.CraftServer server = LoginListener.this.server.server;
-
-                            AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
-                            server.getPluginManager().callEvent(asyncEvent);
-
-                            if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
-                                final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
-                                if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
-                                    event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
-                                }
-                                Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
-                                    @Override
-                                    protected PlayerPreLoginEvent.Result evaluate() {
-                                        server.getPluginManager().callEvent(event);
-                                        return event.getResult();
-                                    }};
-
-                                LoginListener.this.server.processQueue.add(waitable);
-                                if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
-                                    disconnect(event.getKickMessage());
-                                    return;
-                                }
-                            } else {
-                                if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
-                                    disconnect(asyncEvent.getKickMessage());
-                                    return;
-                                }
-                            }
-                            // CraftBukkit end
-                            LoginListener.c.info("UUID of player {} is {}", new Object[] { LoginListener.this.i.getName(), LoginListener.this.i.getId()});
-                            LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+                            if (!networkManager.isConnected()) return; // SportBukkit - ensure player is still connected
+                            LoginListener.c.info("UUID of player " + LoginListener.this.i.getName() + " is " + LoginListener.this.i.getId());
                         } else if (LoginListener.this.server.R()) {
                             LoginListener.c.warn("Failed to verify username but will let them in anyway!");
                             LoginListener.this.i = LoginListener.this.a(gameprofile);
-                            LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
                         } else {
                             LoginListener.this.disconnect("Failed to verify username!");
                             LoginListener.c.error("Username \'{}\' tried to join with an invalid session", new Object[] { gameprofile.getName()});
@@ -212,7 +190,6 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                         if (LoginListener.this.server.R()) {
                             LoginListener.c.warn("Authentication servers are down but will let them in anyway!");
                             LoginListener.this.i = LoginListener.this.a(gameprofile);
-                            LoginListener.this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
                         } else {
                             LoginListener.this.disconnect("Authentication servers are down. Please try again later, sorry!");
                             LoginListener.c.error("Couldn\'t verify username because servers are unavailable");
@@ -223,7 +200,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                         server.server.getLogger().log(java.util.logging.Level.WARNING, "Exception verifying " + gameprofile.getName(), exception);
                         // CraftBukkit end
                     }
-
+                    callPreLoginEvent(); // SportBukkit
                 }
 
                 @Nullable
@@ -236,6 +213,58 @@ public class LoginListener implements PacketLoginInListener, ITickable {
         }
     }
 
+    // SportBukkit start
+    private volatile String disconnectReason;
+    private volatile boolean preLoginEventFired;
+
+    void callPreLoginEvent() {
+        String playerName = i.getName();
+        java.net.InetAddress address = ((java.net.InetSocketAddress) networkManager.getSocketAddress()).getAddress();
+        java.util.UUID uniqueId = i.getId();
+        final org.bukkit.craftbukkit.CraftServer server = LoginListener.this.server.server;
+        AsyncPlayerPreLoginEvent asyncEvent = new AsyncPlayerPreLoginEvent(playerName, address, uniqueId);
+
+        if(this.disconnectReason != null) {
+            asyncEvent.disallow(AsyncPlayerPreLoginEvent.Result.KICK_VERIFY, this.disconnectReason);
+        }
+
+        server.getPluginManager().callEvent(asyncEvent);
+        this.preLoginEventFired = true;
+
+        if (PlayerPreLoginEvent.getHandlerList().getRegisteredListeners().length != 0) {
+            final PlayerPreLoginEvent event = new PlayerPreLoginEvent(playerName, address, uniqueId);
+            if (asyncEvent.getResult() != PlayerPreLoginEvent.Result.ALLOWED) {
+                event.disallow(asyncEvent.getResult(), asyncEvent.getKickMessage());
+            }
+            Waitable<PlayerPreLoginEvent.Result> waitable = new Waitable<PlayerPreLoginEvent.Result>() {
+                @Override
+                protected PlayerPreLoginEvent.Result evaluate() {
+                    server.getPluginManager().callEvent(event);
+                    return event.getResult();
+                }};
+
+            LoginListener.this.server.processQueue.add(waitable);
+            try {
+                if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
+                    disconnect(event.getKickMessage());
+                    return;
+                }
+            } catch(Exception e) {
+                disconnect("Internal server error");
+                server.getLogger().log(java.util.logging.Level.SEVERE, "Exception waiting for PlayerPreLoginEvent while verifying " + playerName, e);
+                return;
+            }
+        } else {
+            if (asyncEvent.getLoginResult() != AsyncPlayerPreLoginEvent.Result.ALLOWED) {
+                disconnect(asyncEvent.getKickMessage());
+                return;
+            }
+        }
+
+        this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
+    }
+    // SportBukkit end
+
     protected GameProfile a(GameProfile gameprofile) {
         UUID uuid = UUID.nameUUIDFromBytes(("OfflinePlayer:" + gameprofile.getName()).getBytes(Charsets.UTF_8));
 
