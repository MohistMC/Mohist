From: Jedediah Smith <jedediah@silencegreys.com>
Date: Fri, 2 Dec 2016 01:48:56 -0500
Subject: [PATCH] New event API


diff --git a/src/main/java/net/minecraft/server/PlayerList.java b/src/main/java/net/minecraft/server/PlayerList.java
--- a/src/main/java/net/minecraft/server/PlayerList.java
+++ b/src/main/java/net/minecraft/server/PlayerList.java
@@ -55,7 +55,7 @@ public abstract class PlayerList {
     private static final SimpleDateFormat g = new SimpleDateFormat("yyyy-MM-dd \'at\' HH:mm:ss z");
     private final MinecraftServer server;
     public final List<EntityPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
-    private final Map<UUID, EntityPlayer> j = Maps.newHashMap();
+    private final Map<UUID, EntityPlayer> j = Maps.newHashMap(); public Map<UUID, EntityPlayer> playersById() { return j; } // SportBukkit - accessor
     private final GameProfileBanList k;
     private final IpBanList l;
     private final OpList operators;
@@ -74,7 +74,7 @@ public abstract class PlayerList {
 
     public PlayerList(MinecraftServer minecraftserver) {
         this.cserver = minecraftserver.server = new CraftServer(minecraftserver, this);
-        minecraftserver.console = org.bukkit.craftbukkit.command.ColouredConsoleSender.getInstance();
+        this.cserver.getConsoleSender();
         minecraftserver.reader.addCompleter(new org.bukkit.craftbukkit.command.ConsoleCommandCompleter(minecraftserver.server));
         // CraftBukkit end
 
diff --git a/src/main/java/org/bukkit/CraftBukkitRuntime.java b/src/main/java/org/bukkit/CraftBukkitRuntime.java
--- a/src/main/java/org/bukkit/CraftBukkitRuntime.java
+++ b/src/main/java/org/bukkit/CraftBukkitRuntime.java
@@ -1,5 +1,8 @@
 package org.bukkit;
 
+import javax.annotation.Nullable;
+
+import com.google.inject.Injector;
 import net.minecraft.server.DispenserRegistry;
 import org.bukkit.block.BlockFactory;
 import org.bukkit.craftbukkit.block.CraftBlockFactory;
@@ -28,6 +31,8 @@ public class CraftBukkitRuntime implements BukkitRuntime {
         }
     }
 
+    protected @Nullable Injector injector;
+
     private final CraftBlockFactory blockFactory = new CraftBlockFactory();
     private final CraftVectorFactory vectorFactory = new CraftVectorFactory();
 
@@ -39,6 +44,14 @@ public class CraftBukkitRuntime implements BukkitRuntime {
     }
 
     @Override
+    public Injector injector() {
+        if(injector == null) {
+            throw new IllegalStateException("Injector has not been created yet");
+        }
+        return injector;
+    }
+
+    @Override
     public Key key(String prefix, String id) {
         return CraftKey.get(prefix, id);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -23,6 +23,9 @@ import java.util.regex.Pattern;
 
 import javax.imageio.ImageIO;
 
+import com.google.common.collect.Maps;
+import com.google.inject.Guice;
+import com.google.inject.Stage;
 import net.minecraft.server.*;
 
 import org.bukkit.BanList;
@@ -33,6 +36,7 @@ import org.bukkit.GameMode;
 import org.bukkit.Location;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.Server;
+import org.bukkit.ServerInstanceModule;
 import org.bukkit.UnsafeValues;
 import org.bukkit.Warning.WarningState;
 import org.bukkit.World;
@@ -53,6 +57,7 @@ import org.bukkit.configuration.file.YamlConfiguration;
 import org.bukkit.configuration.serialization.ConfigurationSerialization;
 import org.bukkit.conversations.Conversable;
 import org.bukkit.craftbukkit.boss.CraftBossBar;
+import org.bukkit.craftbukkit.command.ColouredConsoleSender;
 import org.bukkit.craftbukkit.command.VanillaCommandWrapper;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
 import org.bukkit.craftbukkit.generator.CraftChunkData;
@@ -75,9 +80,12 @@ import org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager;
 import org.bukkit.craftbukkit.util.CraftIconCache;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.craftbukkit.util.DatFileFilter;
+import org.bukkit.craftbukkit.util.CaseInsensitiveNameMap;
 import org.bukkit.craftbukkit.util.Versioning;
 import org.bukkit.craftbukkit.util.permissions.CraftDefaultPermissions;
 import org.bukkit.entity.Player;
+import org.bukkit.event.EventBus;
+import org.bukkit.event.SimpleEventBus;
 import org.bukkit.event.inventory.InventoryType;
 import org.bukkit.event.player.PlayerChatTabCompleteEvent;
 import org.bukkit.event.world.WorldInitEvent;
@@ -120,9 +128,7 @@ import com.avaje.ebean.config.ServerConfig;
 import com.avaje.ebean.config.dbplatform.SQLitePlatform;
 import com.avaje.ebeaninternal.server.lib.sql.TransactionIsolation;
 import com.google.common.base.Charsets;
-import com.google.common.base.Function;
 import com.google.common.collect.ImmutableList;
-import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import com.google.common.collect.MapMaker;
 import com.mojang.authlib.GameProfile;
@@ -148,9 +154,13 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     private final SimpleHelpMap helpMap = new SimpleHelpMap(this);
     private final StandardMessenger messenger = new StandardMessenger();
     private final PluginManager pluginManager = new SimplePluginManager(this, commandMap);
+    private final EventBus eventBus;
     protected final MinecraftServer console;
     protected final DedicatedPlayerList playerList;
     private final Map<String, World> worlds = new LinkedHashMap<String, World>();
+    private final Map<String, World> worldsView = new CaseInsensitiveNameMap<>(worlds.values(), World::getName);
+    private final Map<UUID, World> worldsById = new LinkedHashMap<>();
+    private final Map<UUID, World> worldsByIdView = Collections.unmodifiableMap(worldsById);
     private YamlConfiguration configuration;
     private YamlConfiguration commandsConfiguration;
     private final Yaml yaml = new Yaml(new SafeConstructor());
@@ -166,6 +176,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     public int chunkGCLoadThresh = 0;
     private File container;
     private WarningState warningState = WarningState.DEFAULT;
+    private boolean pluginProfiling;
     private final BooleanWrapper online = new BooleanWrapper();
     public CraftScoreboardManager scoreboardManager;
     public boolean playerCommandState;
@@ -175,6 +186,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     private final Pattern validUserPattern = Pattern.compile("^[a-zA-Z0-9_]{2,16}$");
     private final UUID invalidUserUUID = UUID.nameUUIDFromBytes("InvalidUsername".getBytes(Charsets.UTF_8));
     private final List<CraftPlayer> playerView;
+    private final Map<UUID, Player> playersById;
     public int reloadCount;
     public boolean bungee = false;
     public static final com.google.gson.Gson gson = new com.google.gson.Gson();
@@ -190,13 +202,10 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
     public CraftServer(MinecraftServer console, PlayerList playerList) {
         this.console = console;
+        this.eventBus = new SimpleEventBus(this.console.primaryThread, pluginManager);
         this.playerList = (DedicatedPlayerList) playerList;
-        this.playerView = Collections.unmodifiableList(Lists.transform(playerList.players, new Function<EntityPlayer, CraftPlayer>() {
-            @Override
-            public CraftPlayer apply(EntityPlayer player) {
-                return player.getBukkitEntity();
-            }
-        }));
+        this.playerView = Collections.unmodifiableList(Lists.transform(playerList.players, EntityPlayer::getBukkitEntity));
+        this.playersById = Collections.unmodifiableMap(Maps.transformValues(playerList.playersById(), EntityPlayer::getBukkitEntity));
         this.serverVersion = CraftServer.class.getPackage().getImplementationVersion();
         online.value = console.getPropertyManager().getBoolean("online-mode", true);
 
@@ -253,7 +262,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
         saveCommandsConfig();
         bungee = configuration.getBoolean("settings.bungeecord");
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
-        ((SimplePluginManager) pluginManager).useTimings(configuration.getBoolean("settings.plugin-profiling"));
+        pluginProfiling = configuration.getBoolean("settings.plugin-profiling");
         monsterSpawn = configuration.getInt("spawn-limits.monsters");
         animalSpawn = configuration.getInt("spawn-limits.animals");
         waterAnimalSpawn = configuration.getInt("spawn-limits.water-animals");
@@ -309,6 +318,17 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
         if (pluginFolder.exists()) {
             Plugin[] plugins = pluginManager.loadPlugins(pluginFolder);
+
+            final Stage stage = console.options.valueOf(Main.GUICE_STAGE_OPTION);
+            logger.info("Creating injector in stage " + stage);
+
+            try {
+                injector = Guice.createInjector(stage, new ServerInstanceModule(this, Arrays.asList(plugins)));
+            } catch(RuntimeException ex) {
+                logger.log(Level.SEVERE, "Injector creation failed, server will shut down", ex);
+                throw ex;
+            }
+
             for (Plugin plugin : plugins) {
                 try {
                     String message = String.format("Loading %s", plugin.getDescription().getFullName());
@@ -410,6 +430,11 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     }
 
     @Override
+    public Map<UUID, Player> playersById() {
+        return playersById;
+    }
+
+    @Override
     @Deprecated
     public Player getPlayer(final String name, final CommandSender viewer) {
         Validate.notNull(name, "Name cannot be null");
@@ -656,10 +681,25 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     }
 
     @Override
+    public EventBus eventBus() {
+        return eventBus;
+    }
+
+    @Override
     public List<World> getWorlds() {
         return new ArrayList<World>(worlds.values());
     }
 
+    @Override
+    public Map<String, World> worldsByName() {
+        return worldsView;
+    }
+
+    @Override
+    public Map<UUID, World> worldsById() {
+        return worldsByIdView;
+    }
+
     public DedicatedPlayerList getHandle() {
         return playerList;
     }
@@ -1053,6 +1093,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
             }
         }
 
+        worldsById.remove(world.getUID());
         worlds.remove(world.getName().toLowerCase(java.util.Locale.ENGLISH));
         console.worlds.remove(console.worlds.indexOf(handle));
 
@@ -1114,6 +1155,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
             System.out.println("World " + world.getName() + " is a duplicate of another world and has been prevented from loading. Please delete the uid.dat file from " + world.getName() + "'s world directory if you want to be able to load the duplicate world.");
             return;
         }
+        worldsById.put(world.getUID(), world);
         worlds.put(world.getName().toLowerCase(java.util.Locale.ENGLISH), world);
     }
 
@@ -1507,6 +1549,9 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
     @Override
     public ConsoleCommandSender getConsoleSender() {
+        if(console.console == null) {
+            console.console = new ColouredConsoleSender();
+        }
         return console.console;
     }
 
@@ -1652,6 +1697,11 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
         return warningState;
     }
 
+    @Override
+    public boolean pluginProfiling() {
+        return pluginProfiling;
+    }
+
     public List<String> tabComplete(net.minecraft.server.ICommandListener sender, String message, BlockPosition pos) {
         if (!(sender instanceof EntityPlayer)) {
             return ImmutableList.of();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -7,16 +7,20 @@ import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
-import java.util.TimeZone;
-import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+
+import com.google.inject.Stage;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
+import joptsimple.OptionSpec;
 import net.minecraft.server.MinecraftServer;
 import org.fusesource.jansi.AnsiConsole;
 
 public class Main {
+
+    public static OptionSpec<Stage> GUICE_STAGE_OPTION;
+
     public static boolean useJline = true;
     public static boolean useConsole = true;
 
@@ -118,6 +122,11 @@ public class Main {
                 acceptsAll(asList("v", "version"), "Show the CraftBukkit Version");
 
                 acceptsAll(asList("demo"), "Demo mode");
+
+                GUICE_STAGE_OPTION = acceptsAll(asList("stage"), "Guice run stage (development/production)")
+                        .withRequiredArg()
+                        .ofType(com.google.inject.Stage.class)
+                        .defaultsTo(com.google.inject.Stage.PRODUCTION);
             }
         };
 
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java b/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
--- a/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ColouredConsoleSender.java
@@ -7,9 +7,7 @@ import org.fusesource.jansi.Ansi;
 import org.fusesource.jansi.Ansi.Attribute;
 import jline.Terminal;
 
-import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
-import org.bukkit.command.ConsoleCommandSender;
 import org.bukkit.craftbukkit.CraftServer;
 
 public class ColouredConsoleSender extends CraftConsoleCommandSender {
@@ -17,7 +15,7 @@ public class ColouredConsoleSender extends CraftConsoleCommandSender {
     private final Map<ChatColor, String> replacements = new EnumMap<ChatColor, String>(ChatColor.class);
     private final ChatColor[] colors = ChatColor.values();
 
-    protected ColouredConsoleSender() {
+    public ColouredConsoleSender() {
         super();
         this.terminal = ((CraftServer) getServer()).getReader().getTerminal();
 
@@ -63,12 +61,4 @@ public class ColouredConsoleSender extends CraftConsoleCommandSender {
             super.sendMessage(message);
         }
     }
-
-    public static ConsoleCommandSender getInstance() {
-        if (Bukkit.getConsoleSender() != null) {
-            return Bukkit.getConsoleSender();
-        } else {
-            return new ColouredConsoleSender();
-        }
-    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/CraftScheduler.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.scheduler;
 
+import java.time.Duration;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.Iterator;
@@ -492,4 +493,11 @@ public class CraftScheduler implements BukkitScheduler {
     public BukkitTask runTaskTimerAsynchronously(Plugin plugin, BukkitRunnable task, long delay, long period) throws IllegalArgumentException {
         return runTaskTimerAsynchronously(plugin, (Runnable) task, delay, period);
     }
+
+    private static final Duration TICK = Duration.ofMillis(50);
+
+    @Override
+    public Duration tickDuration() {
+        return TICK;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CaseInsensitiveNameMap.java b/src/main/java/org/bukkit/craftbukkit/util/CaseInsensitiveNameMap.java
new file mode 100644
index 0000000..539bc84
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/util/CaseInsensitiveNameMap.java
@@ -0,0 +1,78 @@
+package org.bukkit.craftbukkit.util;
+
+import java.util.AbstractMap;
+import java.util.AbstractSet;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.Set;
+import java.util.function.Function;
+
+import com.google.common.collect.Iterators;
+import com.google.common.collect.Maps;
+
+public class CaseInsensitiveNameMap<V> extends AbstractMap<String, V> {
+
+    private final Collection<V> values;
+    private final Function<V, String> nameGetter;
+    private final Set<Entry<String, V>> entries;
+
+    public CaseInsensitiveNameMap(Collection<V> values, Function<V, String> nameGetter) {
+        this.values = values;
+        this.nameGetter = nameGetter;
+
+        this.entries = new AbstractSet<Entry<String, V>>() {
+            @Override
+            public Iterator<Entry<String, V>> iterator() {
+                return Iterators.transform(
+                    values.iterator(),
+                    value -> Maps.immutableEntry(nameGetter.apply(value), value)
+                );
+            }
+
+            @Override
+            public int size() {
+                return values.size();
+            }
+        };
+    }
+
+    @Override
+    public Set<Entry<String, V>> entrySet() {
+        return entries;
+    }
+
+    @Override
+    public Collection<V> values() {
+        return values;
+    }
+
+    @Override
+    public int size() {
+        return values.size();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return values.isEmpty();
+    }
+
+    @Override
+    public boolean containsValue(Object value) {
+        return values.contains(value);
+    }
+
+    @Override
+    public boolean containsKey(Object key) {
+        return get(key) != null;
+    }
+
+    @Override
+    public V get(Object key) {
+        if(!(key instanceof String)) return null;
+        final String name = (String) key;
+        for(V value : values) {
+            if(name.equalsIgnoreCase(nameGetter.apply(value))) return value;
+        }
+        return null;
+    }
+}
