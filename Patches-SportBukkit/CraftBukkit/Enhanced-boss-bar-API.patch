From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 5 Mar 2016 01:41:17 -0500
Subject: [PATCH] Enhanced boss bar API


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1773,7 +1773,7 @@ public final class CraftServer implements Server {
     }
 
     @Override
-    public BossBar createBossBar(String title, BarColor color, BarStyle style, BarFlag... flags) {
+    public BossBar createBossBar(BaseComponent title, BarColor color, BarStyle style, BarFlag... flags) {
         return new CraftBossBar(title, color, style, flags);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
--- a/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
+++ b/src/main/java/org/bukkit/craftbukkit/boss/CraftBossBar.java
@@ -1,7 +1,12 @@
 package org.bukkit.craftbukkit.boss;
 
+import java.util.EnumSet;
+import java.util.List;
+import java.util.Set;
+
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableList;
+import net.md_5.bungee.api.chat.BaseComponent;
 import net.minecraft.server.BossBattle;
 import net.minecraft.server.BossBattleServer;
 import net.minecraft.server.EntityPlayer;
@@ -11,32 +16,36 @@ import org.bukkit.boss.BarFlag;
 import org.bukkit.boss.BarStyle;
 import org.bukkit.boss.BossBar;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.bukkit.craftbukkit.util.CraftChatMessage;
+import org.bukkit.craftbukkit.util.BungeeChatUtils;
 import org.bukkit.entity.Player;
 
-import java.util.EnumSet;
-import java.util.List;
-import java.util.Set;
+import static com.google.common.base.Preconditions.checkNotNull;
 
 public class CraftBossBar implements BossBar {
 
     private final BossBattleServer handle;
+    private BaseComponent title;
+    private double progress;
     private final Set<BarFlag> flags;
     private BarColor color;
     private BarStyle style;
+    private PacketPlayOutBoss.Action dirty;
+    private boolean autoUpdate = true;
 
-    public CraftBossBar(String title, BarColor color, BarStyle style, BarFlag... flags) {
+    public CraftBossBar(BaseComponent title, BarColor color, BarStyle style, BarFlag... flags) {
+        this.title = checkNotNull(title);
         this.flags = flags.length > 0 ? EnumSet.of(flags[0], flags) : EnumSet.noneOf(BarFlag.class);
-        this.color = color;
-        this.style = style;
+        this.color = checkNotNull(color);
+        this.style = checkNotNull(style);
 
         handle = new BossBattleServer(
-                CraftChatMessage.fromString(title, true)[0],
+                BungeeChatUtils.toNms(title),
                 convertColor(color),
                 convertStyle(style)
         );
 
         updateFlags();
+        this.progress = handle.getProgress();
     }
 
     private BossBattle.BarColor convertColor(BarColor color) {
@@ -66,15 +75,35 @@ public class CraftBossBar implements BossBar {
         handle.c(hasFlag(BarFlag.CREATE_FOG));
     }
 
+    private void markDirty(PacketPlayOutBoss.Action action) {
+        if(dirty == null) {
+            dirty = action;
+        } else {
+            dirty = PacketPlayOutBoss.Action.ADD;
+        }
+
+        if(autoUpdate) sendUpdate();
+    }
+
+    private void sendUpdate() {
+        if(dirty != null) {
+            handle.sendUpdate(dirty);
+            dirty = null;
+        }
+    }
+
     @Override
-    public String getTitle() {
-        return CraftChatMessage.fromComponent(handle.e());
+    public BaseComponent getTitle() {
+        return title;
     }
 
     @Override
-    public void setTitle(String title) {
-        handle.title = CraftChatMessage.fromString(title, true)[0];
-        handle.sendUpdate(PacketPlayOutBoss.Action.UPDATE_NAME);
+    public void setTitle(BaseComponent title) {
+        if(!this.title.equals(title)) {
+            this.title = title;
+            handle.title = BungeeChatUtils.toNms(title);
+            markDirty(PacketPlayOutBoss.Action.UPDATE_NAME);
+        }
     }
 
     @Override
@@ -84,9 +113,11 @@ public class CraftBossBar implements BossBar {
 
     @Override
     public void setColor(BarColor color) {
-        this.color = color;
-        handle.color = convertColor(color);
-        handle.sendUpdate(PacketPlayOutBoss.Action.UPDATE_STYLE);
+        if(!this.color.equals(color)) {
+            this.color = color;
+            handle.color = convertColor(color);
+            markDirty(PacketPlayOutBoss.Action.UPDATE_STYLE);
+        }
     }
 
     @Override
@@ -96,21 +127,37 @@ public class CraftBossBar implements BossBar {
 
     @Override
     public void setStyle(BarStyle style) {
-        this.style = style;
-        handle.style = convertStyle(style);
-        handle.sendUpdate(PacketPlayOutBoss.Action.UPDATE_STYLE);
+        if(!this.style.equals(style)) {
+            this.style = style;
+            handle.style = convertStyle(style);
+            markDirty(PacketPlayOutBoss.Action.UPDATE_STYLE);
+        }
+    }
+
+    @Override
+    public void setFlags(Set<BarFlag> flags) {
+        if(!this.flags.equals(flags)) {
+            this.flags.clear();
+            this.flags.addAll(flags);
+            updateFlags();
+            markDirty(PacketPlayOutBoss.Action.UPDATE_PROPERTIES);
+        }
     }
 
     @Override
     public void addFlag(BarFlag flag) {
-        flags.remove(flag);
-        updateFlags();
+        if(flags.remove(flag)) {
+            updateFlags();
+            markDirty(PacketPlayOutBoss.Action.UPDATE_PROPERTIES);
+        }
     }
 
     @Override
     public void removeFlag(BarFlag flag) {
-        flags.add(flag);
-        updateFlags();
+        if(flags.add(flag)) {
+            updateFlags();
+            markDirty(PacketPlayOutBoss.Action.UPDATE_PROPERTIES);
+        }
     }
 
     @Override
@@ -121,7 +168,11 @@ public class CraftBossBar implements BossBar {
     @Override
     public void setProgress(double progress) {
     	Preconditions.checkArgument(progress >= 0.0 && progress <= 1.0, "Progress must be between 0.0 and 1.0 (%s)", progress);
-        handle.setProgress((float) progress);
+        if(this.progress != progress) {
+            this.progress = progress;
+            handle.a((float) progress);
+            markDirty(PacketPlayOutBoss.Action.UPDATE_PCT);
+        }
     }
 
     @Override
@@ -166,6 +217,7 @@ public class CraftBossBar implements BossBar {
     @Override
     public void hide() {
         handle.setVisible(false);
+        dirty = null;
     }
 
     @Override
@@ -173,5 +225,21 @@ public class CraftBossBar implements BossBar {
         for (Player player : getPlayers()) {
             removePlayer(player);
         }
+        dirty = null;
+    }
+
+    @Override
+    public void update(BaseComponent title, double progress, BarColor color, BarStyle style, Set<BarFlag> flags) {
+        autoUpdate = false;
+        try {
+            setTitle(title);
+            setProgress(progress);
+            setColor(color);
+            setStyle(style);
+            setFlags(flags);
+            sendUpdate();
+        } finally {
+            autoUpdate = true;
+        }
     }
 }
