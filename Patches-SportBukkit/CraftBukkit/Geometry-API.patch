From: Jedediah Smith <jedediah@silencegreys.com>
Date: Fri, 18 Nov 2016 04:34:02 -0500
Subject: [PATCH] Geometry API


diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -8,8 +8,93 @@ import javax.annotation.concurrent.Immutable;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// SportBukkit start - implement Vec3
+import org.bukkit.geometry.MutableVec3;
+import org.bukkit.geometry.MutableVec3Coarse;
+import org.bukkit.geometry.Vec3Coarse;
+import org.bukkit.geometry.Vec3;
+import org.bukkit.util.ImVector;
+
 @Immutable
-public class BlockPosition extends BaseBlockPosition {
+public class BlockPosition extends BaseBlockPosition implements Vec3Coarse<BlockPosition> {
+
+    public static BlockPosition of(int x, int y, int z) {
+        if(x == 0 && y == 0 && z == 0) return ZERO;
+        return new BlockPosition(x, y, z);
+    }
+
+    public static BlockPosition of(Vec3 that) {
+        return that instanceof BlockPosition
+               ? (BlockPosition) that
+               : new BlockPosition(that.coarseX(), that.coarseY(), that.coarseZ());
+    }
+
+    public static BlockPosition copyOf(Vec3 that) {
+        return that instanceof BlockPosition && !that.isMutable()
+               ? (BlockPosition) that
+               : new BlockPosition(that.coarseX(), that.coarseY(), that.coarseZ());
+    }
+
+    @Override
+    public BlockPosition copy() {
+        return this;
+    }
+
+    @Override
+    public MutableVec3 mutableCopy() {
+        return new MutableBlockPosition(this);
+    }
+
+    @Override
+    public Vec3 fineCopy() {
+        return ImVector.cornerOf(this);
+    }
+
+    @Override
+    public Vec3 fineOf(double x, double y, double z) {
+        return ImVector.of(x, y, z);
+    }
+
+    @Override
+    public Vec3 fineZero() {
+        return ImVector.ofZero();
+    }
+
+    @Override
+    public BlockPosition coarseOf(int x, int y, int z) {
+        return new BlockPosition(x, y, z);
+    }
+
+    @Override
+    public BlockPosition coarseZero() {
+        return ZERO;
+    }
+
+    @Override
+    public boolean equals(Object obj) {
+        return this == obj || (obj instanceof Vec3 && equals((Vec3) obj));
+    }
+
+    @Override
+    public int hashCode() {
+        return coarseHashCode();
+    }
+
+    @Override
+    public int coarseX() {
+        return getX();
+    }
+
+    @Override
+    public int coarseY() {
+        return getY();
+    }
+
+    @Override
+    public int coarseZ() {
+        return getZ();
+    }
+    // SportBukkit end
 
     private static final Logger b = LogManager.getLogger();
     public static final BlockPosition ZERO = new BlockPosition(0, 0, 0);
@@ -51,11 +136,11 @@ public class BlockPosition extends BaseBlockPosition {
     }
 
     public BlockPosition a(BaseBlockPosition baseblockposition) {
-        return this.a(baseblockposition.getX(), baseblockposition.getY(), baseblockposition.getZ());
+        return baseblockposition.getX() == 0 && baseblockposition.getY() == 0 && baseblockposition.getZ() == 0 ? this : new BlockPosition(this.getX() + baseblockposition.getX(), this.getY() + baseblockposition.getY(), this.getZ() + baseblockposition.getZ());
     }
 
     public BlockPosition b(BaseBlockPosition baseblockposition) {
-        return this.a(-baseblockposition.getX(), -baseblockposition.getY(), -baseblockposition.getZ());
+        return baseblockposition.getX() == 0 && baseblockposition.getY() == 0 && baseblockposition.getZ() == 0 ? this : new BlockPosition(this.getX() - baseblockposition.getX(), this.getY() - baseblockposition.getY(), this.getZ() - baseblockposition.getZ());
     }
 
     public BlockPosition up() {
@@ -114,23 +199,6 @@ public class BlockPosition extends BaseBlockPosition {
         return i == 0 ? this : new BlockPosition(this.getX() + enumdirection.getAdjacentX() * i, this.getY() + enumdirection.getAdjacentY() * i, this.getZ() + enumdirection.getAdjacentZ() * i);
     }
 
-    public BlockPosition a(EnumBlockRotation enumblockrotation) {
-        switch (enumblockrotation) {
-        case NONE:
-        default:
-            return this;
-
-        case CLOCKWISE_90:
-            return new BlockPosition(-this.getZ(), this.getY(), this.getX());
-
-        case CLOCKWISE_180:
-            return new BlockPosition(-this.getX(), this.getY(), -this.getZ());
-
-        case COUNTERCLOCKWISE_90:
-            return new BlockPosition(this.getZ(), this.getY(), -this.getX());
-        }
-    }
-
     public BlockPosition c(BaseBlockPosition baseblockposition) {
         return new BlockPosition(this.getY() * baseblockposition.getZ() - this.getZ() * baseblockposition.getY(), this.getZ() * baseblockposition.getX() - this.getX() * baseblockposition.getZ(), this.getX() * baseblockposition.getY() - this.getY() * baseblockposition.getX());
     }
@@ -334,7 +402,55 @@ public class BlockPosition extends BaseBlockPosition {
         }
     }
 
-    public static class MutableBlockPosition extends BlockPosition {
+    // SportBukkit start - implement MutableVec3
+    public static class MutableBlockPosition extends BlockPosition implements MutableVec3Coarse<BlockPosition, MutableBlockPosition> {
+        @Override
+        public Vec3 unmodifiable() {
+            return new BlockPosition(0, 0, 0) {
+                @Override public BlockPosition copy() {
+                    return MutableBlockPosition.this.copy();
+                }
+
+                @Override public int getX() {
+                    return MutableBlockPosition.this.getX();
+                }
+
+                @Override public int getY() {
+                    return MutableBlockPosition.this.getY();
+                }
+
+                @Override public int getZ() {
+                    return MutableBlockPosition.this.getZ();
+                }
+            };
+        }
+
+        @Override
+        public MutableBlockPosition setX(int x) {
+            this.b = x;
+            return this;
+        }
+
+        @Override
+        public MutableBlockPosition setY(int y) {
+            this.c = y;
+            return this;
+        }
+
+        @Override
+        public MutableBlockPosition setZ(int z) {
+            this.d = z;
+            return this;
+        }
+
+        @Override
+        public MutableBlockPosition set(int x, int y, int z) {
+            this.b = x;
+            this.c = y;
+            this.d = z;
+            return this;
+        }
+        // SportBukkit end
 
         protected int b;
         protected int c;
@@ -355,22 +471,6 @@ public class BlockPosition extends BaseBlockPosition {
             this.d = k;
         }
 
-        public BlockPosition a(double d0, double d1, double d2) {
-            return super.a(d0, d1, d2).h();
-        }
-
-        public BlockPosition a(int i, int j, int k) {
-            return super.a(i, j, k).h();
-        }
-
-        public BlockPosition shift(EnumDirection enumdirection, int i) {
-            return super.shift(enumdirection, i).h();
-        }
-
-        public BlockPosition a(EnumBlockRotation enumblockrotation) {
-            return super.a(enumblockrotation).h();
-        }
-
         public int getX() {
             return this.b;
         }
@@ -383,7 +483,6 @@ public class BlockPosition extends BaseBlockPosition {
             return this.d;
         }
 
-        public BlockPosition.MutableBlockPosition set(int x, int y, int z) { return c(x, y, z); } // SportBukkit - alias
         public BlockPosition.MutableBlockPosition c(int i, int j, int k) {
             this.b = i;
             this.c = j;
diff --git a/src/main/java/org/bukkit/CraftBukkitRuntime.java b/src/main/java/org/bukkit/CraftBukkitRuntime.java
--- a/src/main/java/org/bukkit/CraftBukkitRuntime.java
+++ b/src/main/java/org/bukkit/CraftBukkitRuntime.java
@@ -2,12 +2,14 @@ package org.bukkit;
 
 import net.minecraft.server.DispenserRegistry;
 import org.bukkit.craftbukkit.inventory.CraftItemFactory;
-import org.bukkit.craftbukkit.potion.CraftPotionEffectRegistry;
 import org.bukkit.craftbukkit.potion.CraftPotionBrewRegistry;
+import org.bukkit.craftbukkit.potion.CraftPotionEffectRegistry;
 import org.bukkit.craftbukkit.registry.CraftKey;
-import org.bukkit.potion.PotionEffectRegistry;
+import org.bukkit.craftbukkit.util.CraftVectorFactory;
 import org.bukkit.potion.PotionBrewRegistry;
+import org.bukkit.potion.PotionEffectRegistry;
 import org.bukkit.registry.Key;
+import org.bukkit.geometry.VectorFactory;
 
 public class CraftBukkitRuntime implements BukkitRuntime {
 
@@ -24,6 +26,8 @@ public class CraftBukkitRuntime implements BukkitRuntime {
         }
     }
 
+    private final CraftVectorFactory vectorFactory = new CraftVectorFactory();
+
     private final PotionBrewRegistry potionBrewRegistry = new CraftPotionBrewRegistry();
     private final PotionEffectRegistry potionEffectRegistry = new CraftPotionEffectRegistry();
 
@@ -42,6 +46,11 @@ public class CraftBukkitRuntime implements BukkitRuntime {
     }
 
     @Override
+    public VectorFactory vectors() {
+        return vectorFactory;
+    }
+
+    @Override
     public CraftItemFactory getItemFactory() {
         return CraftItemFactory.instance();
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1090,12 +1090,16 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
     @Override
     public World getWorld(UUID uid) {
-        for (World world : worlds.values()) {
-            if (world.getUID().equals(uid)) {
-                return world;
-            }
+        return worldsById.get(uid);
+    }
+
+    @Override
+    public World world(UUID uid) {
+        final World world = getWorld(uid);
+        if(world == null) {
+            throw new IllegalStateException("No loaded world with UUID " + uid);
         }
-        return null;
+        return world;
     }
 
     public void addWorld(World world) {
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftVectorFactory.java b/src/main/java/org/bukkit/craftbukkit/util/CraftVectorFactory.java
new file mode 100644
index 0000000..287c095
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftVectorFactory.java
@@ -0,0 +1,49 @@
+package org.bukkit.craftbukkit.util;
+
+import net.minecraft.server.BlockPosition;
+import org.bukkit.util.ImVector;
+import org.bukkit.geometry.MutableVec3;
+import org.bukkit.util.NumberConversions;
+import org.bukkit.geometry.Vec3;
+import org.bukkit.util.Vector;
+import org.bukkit.geometry.VectorFactory;
+
+public class CraftVectorFactory implements VectorFactory {
+
+    @Override
+    public Vec3 coarse(int x, int y, int z) {
+        return BlockPosition.of(x, y, z);
+    }
+
+    @Override
+    public Vec3 coarse(double x, double y, double z) {
+        return BlockPosition.of(NumberConversions.floor(x),
+                                NumberConversions.floor(y),
+                                NumberConversions.floor(z));
+    }
+
+    @Override
+    public Vec3 fine(int x, int y, int z) {
+        return ImVector.of(x, y, z);
+    }
+
+    @Override
+    public Vec3 fine(double x, double y, double z) {
+        return ImVector.of(x, y, z);
+    }
+
+    @Override
+    public Vec3 coarseZero() {
+        return BlockPosition.ZERO;
+    }
+
+    @Override
+    public MutableVec3 coarseMutable(int x, int y, int z) {
+        return new BlockPosition.MutableBlockPosition(x, y, z);
+    }
+
+    @Override
+    public MutableVec3 fineMutable(double x, double y, double z) {
+        return new Vector(x, y, z);
+    }
+}
diff --git a/src/test/java/org/bukkit/block/BlockFaceTest.java b/src/test/java/org/bukkit/block/BlockFaceTest.java
new file mode 100644
index 0000000..023f7db
--- /dev/null
+++ b/src/test/java/org/bukkit/block/BlockFaceTest.java
@@ -0,0 +1,59 @@
+package org.bukkit.block;
+
+import org.bukkit.support.BukkitRuntimeTest;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class BlockFaceTest extends BukkitRuntimeTest {
+
+    @Test
+    public void lookupByYaw() throws Exception {
+        assertEquals(BlockFace.SOUTH, BlockFace.byBlockYaw(0));
+        assertEquals(BlockFace.WEST, BlockFace.byBlockYaw(4));
+        assertEquals(BlockFace.NORTH, BlockFace.byBlockYaw(8));
+        assertEquals(BlockFace.EAST, BlockFace.byBlockYaw(12));
+
+        for(int i = 0; i < 16; i++) {
+            final BlockFace face = BlockFace.byBlockYaw(i);
+            assertEquals(i, face.blockYaw());
+        }
+    }
+
+    @Test
+    public void lookupByDirection() throws Exception {
+        // vertical
+        assertEquals(BlockFace.SELF, BlockFace.byDirection(0, 0, 0));
+        assertEquals(BlockFace.DOWN, BlockFace.byDirection(0, -1, 0));
+        assertEquals(BlockFace.UP, BlockFace.byDirection(0, 1, 0));
+
+        // cardinals
+        assertEquals(BlockFace.WEST, BlockFace.byDirection(-1, 0, 0));
+        assertEquals(BlockFace.EAST, BlockFace.byDirection(1, 0, 0));
+        assertEquals(BlockFace.NORTH, BlockFace.byDirection(0, 0, -1));
+        assertEquals(BlockFace.SOUTH, BlockFace.byDirection(0, 0, 1));
+
+        // diagonals
+        assertEquals(BlockFace.NORTH_WEST, BlockFace.byDirection(-1, 0, -1));
+        assertEquals(BlockFace.NORTH_EAST, BlockFace.byDirection(1, 0, -1));
+        assertEquals(BlockFace.SOUTH_WEST, BlockFace.byDirection(-1, 0, 1));
+        assertEquals(BlockFace.SOUTH_EAST, BlockFace.byDirection(1, 0, 1));
+
+        // Z major
+        assertEquals(BlockFace.NORTH_NORTH_WEST, BlockFace.byDirection(-1, 0, -2));
+        assertEquals(BlockFace.NORTH_NORTH_EAST, BlockFace.byDirection(1, 0, -2));
+        assertEquals(BlockFace.SOUTH_SOUTH_WEST, BlockFace.byDirection(-1, 0, 2));
+        assertEquals(BlockFace.SOUTH_SOUTH_EAST, BlockFace.byDirection(1, 0, 2));
+
+        // X major
+        assertEquals(BlockFace.WEST_NORTH_WEST, BlockFace.byDirection(-2, 0, -1));
+        assertEquals(BlockFace.EAST_NORTH_EAST, BlockFace.byDirection(2, 0, -1));
+        assertEquals(BlockFace.WEST_SOUTH_WEST, BlockFace.byDirection(-2, 0, 1));
+        assertEquals(BlockFace.EAST_SOUTH_EAST, BlockFace.byDirection(2, 0, 1));
+
+        for(BlockFace face : BlockFace.values()) {
+            assertTrue(face.coarseEquals(face.normal()));
+            assertEquals(face, BlockFace.byDirection(face.normal()));
+        }
+    }
+}
diff --git a/src/test/java/org/bukkit/block/BlockReflectionTest.java b/src/test/java/org/bukkit/block/BlockReflectionTest.java
new file mode 100644
index 0000000..12ccd1a
--- /dev/null
+++ b/src/test/java/org/bukkit/block/BlockReflectionTest.java
@@ -0,0 +1,30 @@
+package org.bukkit.block;
+
+import org.bukkit.geometry.BlockReflection;
+import org.bukkit.support.BukkitRuntimeTest;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class BlockReflectionTest extends BukkitRuntimeTest {
+
+    static String swap(String in, String a, String b) {
+        return in.replace(a, "*")
+                 .replace(b, a)
+                 .replace("*", b);
+    }
+
+    void applyToFace(BlockReflection reflection, String here, String there) {
+        for(BlockFace face : BlockFace.values()) {
+            BlockFace expected = BlockFace.valueOf(swap(face.name(), here, there));
+            BlockFace actual = reflection.transform().apply(face);
+            assertEquals(expected, actual);
+        }
+    }
+
+    @Test
+    public void applyToFace() throws Exception {
+        applyToFace(BlockReflection.NORTH_SOUTH, "NORTH", "SOUTH");
+        applyToFace(BlockReflection.EAST_WEST, "EAST", "WEST");
+    }
+}
diff --git a/src/test/java/org/bukkit/block/BlockRotationTest.java b/src/test/java/org/bukkit/block/BlockRotationTest.java
new file mode 100644
index 0000000..663fca4
--- /dev/null
+++ b/src/test/java/org/bukkit/block/BlockRotationTest.java
@@ -0,0 +1,52 @@
+package org.bukkit.block;
+
+import org.bukkit.Bukkit;
+import org.bukkit.geometry.Axis;
+import org.bukkit.geometry.BlockRotation;
+import org.bukkit.geometry.VectorFactory;
+import org.bukkit.support.BukkitRuntimeTest;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class BlockRotationTest extends BukkitRuntimeTest {
+    @Test
+    public void applyToVector() throws Exception {
+        VectorFactory V = Bukkit.vectors();
+        assertEquals(V.coarse( 0, 0,  1), BlockRotation.turns(1).transform().apply(V.coarse(1, 0, 0)));
+        assertEquals(V.coarse(-1, 0,  0), BlockRotation.turns(1).transform().apply(V.coarse(0, 0, 1)));
+        assertEquals(V.coarse( 0, 0, -1), BlockRotation.turns(1).transform().apply(V.coarse(-1, 0, 0)));
+        assertEquals(V.coarse( 1, 0,  0), BlockRotation.turns(1).transform().apply(V.coarse(0, 0, -1)));
+    }
+
+    @Test
+    public void applyToFace() throws Exception {
+        for(int turns = 1; turns < 4; turns++) {
+            for(BlockFace face : BlockFace.values()) {
+                BlockFace expected = face.isHorizontal() ? BlockFace.byBlockYaw(face.blockYaw() + turns * 4)
+                                                         : face;
+                BlockFace actual = BlockRotation.turns(turns).transform().apply(face);
+                assertEquals(expected, actual);
+            }
+        }
+    }
+
+    @Test
+    public void applytoAxis() throws Exception {
+        assertEquals(Axis.X, BlockRotation.NONE.apply(Axis.X));
+        assertEquals(Axis.Y, BlockRotation.NONE.apply(Axis.Y));
+        assertEquals(Axis.Z, BlockRotation.NONE.apply(Axis.Z));
+
+        assertEquals(Axis.Z, BlockRotation.CLOCKWISE_90.apply(Axis.X));
+        assertEquals(Axis.Y, BlockRotation.CLOCKWISE_90.apply(Axis.Y));
+        assertEquals(Axis.X, BlockRotation.CLOCKWISE_90.apply(Axis.Z));
+
+        assertEquals(Axis.X, BlockRotation.CLOCKWISE_180.apply(Axis.X));
+        assertEquals(Axis.Y, BlockRotation.CLOCKWISE_180.apply(Axis.Y));
+        assertEquals(Axis.Z, BlockRotation.CLOCKWISE_180.apply(Axis.Z));
+
+        assertEquals(Axis.Z, BlockRotation.COUNTERCLOCKWISE_90.apply(Axis.X));
+        assertEquals(Axis.Y, BlockRotation.COUNTERCLOCKWISE_90.apply(Axis.Y));
+        assertEquals(Axis.X, BlockRotation.COUNTERCLOCKWISE_90.apply(Axis.Z));
+    }
+}
diff --git a/src/test/java/org/bukkit/block/TransformTest.java b/src/test/java/org/bukkit/block/TransformTest.java
new file mode 100644
index 0000000..2ab7fa7
--- /dev/null
+++ b/src/test/java/org/bukkit/block/TransformTest.java
@@ -0,0 +1,217 @@
+package org.bukkit.block;
+
+import java.util.Random;
+
+import net.minecraft.server.BlockPosition;
+import org.bukkit.geometry.Axis;
+import org.bukkit.geometry.BlockRotoflection;
+import org.bukkit.geometry.BlockReflection;
+import org.bukkit.geometry.BlockRotation;
+import org.bukkit.geometry.CoarseTransform;
+import org.bukkit.geometry.Transform;
+import org.bukkit.geometry.Vec3;
+import org.bukkit.support.BukkitRuntimeTest;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class TransformTest extends BukkitRuntimeTest {
+
+    Random random = new Random();
+
+    Vec3 rand() {
+        return new BlockPosition(random.nextInt(2000) - 1000,
+                                 random.nextInt(2000) - 1000,
+                                 random.nextInt(2000) - 1000);
+    }
+
+    @Test
+    public void identity() throws Exception {
+        Vec3 p = rand();
+        assertEquals(p, Transform.identity().apply(p));
+    }
+
+    @Test
+    public void inverseIdentity() throws Exception {
+        Vec3 p = rand();
+        assertEquals(Transform.identity(), Transform.identity().inverse());
+        assertEquals(p, Transform.identity().inverse().apply(p));
+    }
+
+    @Test
+    public void compoundIdentity() throws Exception {
+        Vec3 p = rand();
+        assertEquals(Transform.identity(), Transform.identity().andThen(Transform.identity()));
+        assertEquals(Transform.identity(), Transform.identity().compose(Transform.identity()));
+        assertEquals(p, Transform.identity().andThen(Transform.identity()).apply(p));
+        assertEquals(p, Transform.identity().compose(Transform.identity()).apply(p));
+    }
+
+    @Test
+    public void translation() throws Exception {
+        Vec3 p = rand();
+        Vec3 t = rand();
+        assertEquals(p.plus(t),
+                     CoarseTransform.translation(t).apply(p));
+    }
+
+    @Test
+    public void inverseTranslation() throws Exception {
+        Vec3 p = rand();
+        Vec3 t = rand();
+        assertEquals(p.plus(t.negate()),
+                     CoarseTransform.translation(t).inverse().apply(p));
+    }
+
+    @Test
+    public void compoundTranslation() throws Exception {
+        Vec3 p = rand();
+        Vec3 t1 = rand();
+        Vec3 t2 = rand();
+
+        assertEquals(CoarseTransform.translation(t1.plus(t2)),
+                     CoarseTransform.translation(t1).andThen(CoarseTransform.translation(t2)));
+
+        assertEquals(p.plus(t1).plus(t2),
+                     CoarseTransform.translation(t1).andThen(CoarseTransform.translation(t2)).apply(p));
+
+        assertEquals(CoarseTransform.translation(t1.plus(t2)),
+                     CoarseTransform.translation(t1).compose(CoarseTransform.translation(t2)));
+    }
+
+    @Test
+    public void rotation() throws Exception {
+        Vec3 p = rand();
+        Vec3 q;
+
+        q = CoarseTransform.rotation(0).apply(p);
+        assertEquals(p, q);
+
+        q = CoarseTransform.rotation(1).apply(p);
+        assertEquals(p.coarseX(), q.coarseZ());
+        assertEquals(p.coarseY(), q.coarseY());
+        assertEquals(p.coarseZ(), -q.coarseX());
+
+        q = CoarseTransform.rotation(2).apply(p);
+        assertEquals(p.coarseX(), -q.coarseX());
+        assertEquals(p.coarseY(), q.coarseY());
+        assertEquals(p.coarseZ(), -q.coarseZ());
+
+        q = CoarseTransform.rotation(3).apply(p);
+        assertEquals(p.coarseX(), -q.coarseZ());
+        assertEquals(p.coarseY(), q.coarseY());
+        assertEquals(p.coarseZ(), q.coarseX());
+    }
+
+    @Test
+    public void negativeRotation() throws Exception {
+        Vec3 p = rand();
+
+        assertEquals(CoarseTransform.rotation(1).apply(p),
+                     CoarseTransform.rotation(1 - 4).apply(p));
+    }
+
+    @Test
+    public void wrappedRotation() throws Exception {
+        Vec3 p = rand();
+
+        assertEquals(CoarseTransform.rotation(1).apply(p),
+                     CoarseTransform.rotation(1 + 4).apply(p));
+    }
+
+    @Test
+    public void inverseRotation() throws Exception {
+        Vec3 p = rand();
+
+        assertEquals(CoarseTransform.rotation(-1).apply(p),
+                     CoarseTransform.rotation(1).inverse().apply(p));
+    }
+
+    @Test
+    public void compoundRotation() throws Exception {
+        Vec3 p = rand();
+
+        assertEquals(CoarseTransform.rotation(2).apply(p),
+                     CoarseTransform.rotation(1).andThen(CoarseTransform.rotation(1)).apply(p));
+
+        assertEquals(CoarseTransform.rotation(2).apply(p),
+                     CoarseTransform.rotation(1).compose(CoarseTransform.rotation(1)).apply(p));
+    }
+
+    @Test
+    public void compoundTransform() throws Exception {
+        Vec3 p = rand();
+        Transform t = CoarseTransform.translation(rand());
+        Transform r = CoarseTransform.rotation(random.nextInt(4));
+
+        assertEquals(t.apply(r.apply(p)),
+                     t.compose(r).apply(p));
+
+        assertEquals(r.apply(t.apply(p)),
+                     r.compose(t).apply(p));
+
+        assertEquals(r.apply(t.apply(p)),
+                     t.andThen(r).apply(p));
+
+        assertEquals(t.apply(r.apply(p)),
+                     r.andThen(t).apply(p));
+    }
+
+    @Test
+    public void manyTransforms() throws Exception {
+        Vec3 p = rand();
+        Vec3 q = p;
+        Transform a = Transform.identity();
+        Transform b = Transform.identity();
+        Transform z;
+
+        for(int i = 0; i < 10; i++) {
+            z = i % 2 == 0 ? CoarseTransform.translation(rand())
+                           : CoarseTransform.rotation(random.nextInt(4));
+
+            q = z.apply(q);
+            a = z.compose(a);
+            b = b.andThen(z);
+
+            assertEquals(q, a.apply(p));
+            assertEquals(q, b.apply(p));
+        }
+    }
+
+    @Test
+    public void detectIdentityOrientation() throws Exception {
+        assertEquals(BlockRotoflection.identity(), Transform.identity().orientation());
+    }
+
+    @Test
+    public void detectReflection() throws Exception {
+        assertEquals(BlockRotoflection.of(BlockReflection.X),
+                     CoarseTransform.reflection(Axis.X).orientation());
+
+        assertEquals(BlockRotoflection.of(BlockReflection.X, BlockRotation.CLOCKWISE_180),
+                     CoarseTransform.reflection(Axis.Z).orientation());
+
+        assertEquals(BlockRotoflection.of(BlockReflection.NONE, BlockRotation.CLOCKWISE_180),
+                     CoarseTransform.reflection(Axis.X).andThen(CoarseTransform.reflection(Axis.Z)).orientation());
+    }
+
+    @Test
+    public void detectRotation() throws Exception {
+        assertEquals(BlockRotoflection.of(BlockRotation.CLOCKWISE_90), CoarseTransform.rotation(1).orientation());
+        assertEquals(BlockRotoflection.of(BlockRotation.CLOCKWISE_180), CoarseTransform.rotation(2).orientation());
+        assertEquals(BlockRotoflection.of(BlockRotation.CLOCKWISE_270), CoarseTransform.rotation(3).orientation());
+
+        assertEquals(BlockRotoflection.of(BlockRotation.COUNTERCLOCKWISE_90), CoarseTransform.rotation(-1).orientation());
+        assertEquals(BlockRotoflection.of(BlockRotation.COUNTERCLOCKWISE_180), CoarseTransform.rotation(-2).orientation());
+        assertEquals(BlockRotoflection.of(BlockRotation.COUNTERCLOCKWISE_270), CoarseTransform.rotation(-3).orientation());
+    }
+
+    @Test
+    public void detectReflectionAndRotation() throws Exception {
+        assertEquals(BlockRotoflection.of(BlockReflection.X, BlockRotation.CLOCKWISE_90),
+                     CoarseTransform.reflection(Axis.X).andThen(CoarseTransform.rotation(1)).orientation());
+
+        assertEquals(BlockRotoflection.of(BlockReflection.Z, BlockRotation.COUNTERCLOCKWISE_90),
+                     CoarseTransform.reflection(Axis.X).andThen(CoarseTransform.rotation(1)).orientation());
+    }
+}
diff --git a/src/test/java/org/bukkit/support/BukkitRuntimeTest.java b/src/test/java/org/bukkit/support/BukkitRuntimeTest.java
new file mode 100644
index 0000000..30e5c74
--- /dev/null
+++ b/src/test/java/org/bukkit/support/BukkitRuntimeTest.java
@@ -0,0 +1,26 @@
+package org.bukkit.support;
+
+import org.bukkit.Bukkit;
+import org.bukkit.CraftBukkitRuntime;
+import org.junit.After;
+import org.junit.Before;
+
+public class BukkitRuntimeTest {
+
+    private boolean setRuntime;
+
+    @Before
+    public final void initRuntime() throws Exception {
+        setRuntime = Bukkit.getRuntime() == null;
+        if(setRuntime) {
+            CraftBukkitRuntime.load();
+        }
+    }
+
+    @After
+    public final void clearRuntime() throws Exception {
+        if(setRuntime) {
+            Bukkit.setRuntime(null);
+        }
+    }
+}
diff --git a/src/test/java/org/bukkit/util/VectorEqualityTest.java b/src/test/java/org/bukkit/util/VectorEqualityTest.java
new file mode 100644
index 0000000..f404478
--- /dev/null
+++ b/src/test/java/org/bukkit/util/VectorEqualityTest.java
@@ -0,0 +1,26 @@
+package org.bukkit.util;
+
+import net.minecraft.server.BlockPosition;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+import static tc.oc.test.Assert.*;
+
+public class VectorEqualityTest {
+
+    @Test
+    public void coarseEquality() throws Exception {
+        assertMutuallyEqual(new BlockPosition(1, 2, 3), new BlockVector(1, 2, 3));
+        assertMutuallyEqual(new BlockPosition(1, 2, 3), new BlockVector(1.5, 2.5, 3.5));
+    }
+
+    @Test
+    public void coarseInequality() throws Exception {
+        // Coarse vectors with different values
+        assertMutuallyUnequal(new BlockPosition(1, 2, 3), new BlockVector(4, 5, 6));
+
+        // Mix coarse and fine vectors
+        assertMutuallyUnequal(new BlockPosition(1, 2, 3), new Vector(1, 2, 3));
+        assertMutuallyUnequal(new BlockVector(1, 2, 3), new Vector(1, 2, 3));
+    }
+}
diff --git a/src/test/java/org/bukkit/util/VectorFactoryTest.java b/src/test/java/org/bukkit/util/VectorFactoryTest.java
new file mode 100644
index 0000000..c130ede
--- /dev/null
+++ b/src/test/java/org/bukkit/util/VectorFactoryTest.java
@@ -0,0 +1,59 @@
+package org.bukkit.util;
+
+import org.bukkit.Bukkit;
+import org.bukkit.geometry.Vec3;
+import org.bukkit.geometry.VectorFactory;
+import org.bukkit.support.BukkitRuntimeTest;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class VectorFactoryTest extends BukkitRuntimeTest {
+
+    VectorFactory V;
+
+    @Before
+    public final void initVectorFactory() throws Exception {
+        V = Bukkit.vectors();
+    }
+
+    void assertCoarse(int x, int y, int z, Vec3 v) {
+        assertTrue(v + " should be coarse", v.isCoarse());
+        assertFalse(v + " should not be fine", v.isFine());
+
+        assertEquals(x, v.coarseX());
+        assertEquals(y, v.coarseY());
+        assertEquals(z, v.coarseZ());
+    }
+
+    void assertFine(double x, double y, double z, Vec3 v) {
+        assertTrue(v + " should be fine", v.isFine());
+        assertFalse(v + " should not be coarse", v.isCoarse());
+
+        assertEquals(x, v.fineX(), 0D);
+        assertEquals(y, v.fineY(), 0D);
+        assertEquals(z, v.fineZ(), 0D);
+    }
+
+    @Test
+    public void immutable() throws Exception {
+        assertCoarse(1, 2, 3, V.coarse(1, 2, 3));
+        assertCoarse(0, 0, 0, V.coarseZero());
+        assertFine(1.5, 2.5, 3.5, V.fine(1.5, 2.5, 3.5));
+        assertFine(0, 0, 0, V.fineZero());
+    }
+
+    @Test
+    public void mutable() throws Exception {
+        Vec3 v;
+
+        v = V.coarseMutable(1, 2, 3);
+        assertCoarse(1, 2, 3, v);
+        assertTrue(v.isMutable());
+
+        v = V.fineMutable(1.5, 2.5, 3.5);
+        assertFine(1.5, 2.5, 3.5, v);
+        assertTrue(v.isMutable());
+    }
+}
diff --git a/src/test/java/org/bukkit/util/VectorMixedResolutionArithmeticTest.java b/src/test/java/org/bukkit/util/VectorMixedResolutionArithmeticTest.java
new file mode 100644
index 0000000..9da3b8e
--- /dev/null
+++ b/src/test/java/org/bukkit/util/VectorMixedResolutionArithmeticTest.java
@@ -0,0 +1,55 @@
+package org.bukkit.util;
+
+import org.bukkit.Bukkit;
+import org.bukkit.geometry.Vec3;
+import org.bukkit.geometry.VectorFactory;
+import org.bukkit.support.BukkitRuntimeTest;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class VectorMixedResolutionArithmeticTest extends BukkitRuntimeTest {
+
+    VectorFactory V;
+
+    @Before
+    public void setUp() throws Exception {
+        V = Bukkit.vectors();
+    }
+
+    @Test
+    public void addLessThanOne() throws Exception {
+        final Vec3 v = V.coarse(1, 2, 3);
+        assertEquals(v, v.plus(0.5));
+        assertEquals(v.minus(1), v.plus(-0.5));
+        assertEquals(v.minus(1), v.minus(0.5));
+        assertEquals(v, v.minus(-0.5));
+
+        assertEquals(v, v.mutableCopy().add(0.5));
+        assertEquals(v.minus(1), v.mutableCopy().add(-0.5));
+        assertEquals(v.minus(1), v.mutableCopy().subtract(0.5));
+        assertEquals(v, v.mutableCopy().subtract(-0.5));
+    }
+
+    @Test
+    public void addMoreThanOne() throws Exception {
+        final Vec3 v = V.coarse(1, 2, 3);
+        assertEquals(v.plus(1), v.plus(1.5));
+        assertEquals(v.minus(2), v.plus(-1.5));
+        assertEquals(v.minus(2), v.minus(1.5));
+        assertEquals(v.plus(1), v.minus(-1.5));
+
+        assertEquals(v.plus(1), v.mutableCopy().add(1.5));
+        assertEquals(v.minus(2), v.mutableCopy().add(-1.5));
+        assertEquals(v.minus(2), v.mutableCopy().subtract(1.5));
+        assertEquals(v.plus(1), v.mutableCopy().subtract(-1.5));
+    }
+
+    @Test
+    public void multiply() throws Exception {
+        final Vec3 v = V.coarse(100, 200, 300);
+        assertEquals(V.coarse(50, 100, 150), v.times(0.5));
+        assertEquals(V.coarse(-50, -100, -150), v.times(-0.5));
+    }
+}
