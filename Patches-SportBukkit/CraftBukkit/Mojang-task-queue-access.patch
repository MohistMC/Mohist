From: Jedediah Smith <jedediah@silencegreys.com>
Date: Fri, 5 Aug 2016 10:46:15 -0400
Subject: [PATCH] Mojang task queue access


diff --git a/src/main/java/net/minecraft/server/DedicatedServer.java b/src/main/java/net/minecraft/server/DedicatedServer.java
--- a/src/main/java/net/minecraft/server/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/DedicatedServer.java
@@ -358,7 +358,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
 
     public void D() { // CraftBukkit - fix decompile error
         super.D();
-        this.aM();
+        // this.aM(); // SportBukkit - moved to processTasks()
     }
 
     public boolean getAllowNether() {
@@ -383,6 +383,15 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         this.serverCommandQueue.add(new ServerCommand(s, icommandlistener));
     }
 
+    // SportBukkit start
+    @Override
+    protected void processTasks() {
+        super.processTasks();
+        processCommands();
+    }
+    // SportBukkit end
+
+    public void processCommands() { aM(); } // SportBukkit - alias
     public void aM() {
         while (!this.serverCommandQueue.isEmpty()) {
             ServerCommand servercommand = (ServerCommand) this.serverCommandQueue.remove(0);
@@ -646,7 +655,7 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
                 return remoteControlCommandListener.getMessages();
             }
         };
-        processQueue.add(waitable);
+        addMainThreadTask(waitable);
         try {
             return waitable.get();
         } catch (java.util.concurrent.ExecutionException e) {
diff --git a/src/main/java/net/minecraft/server/LoginListener.java b/src/main/java/net/minecraft/server/LoginListener.java
--- a/src/main/java/net/minecraft/server/LoginListener.java
+++ b/src/main/java/net/minecraft/server/LoginListener.java
@@ -243,7 +243,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
                     return event.getResult();
                 }};
 
-            LoginListener.this.server.processQueue.add(waitable);
+            LoginListener.this.server.addMainThreadTask(waitable);
             try {
                 if (waitable.get() != PlayerPreLoginEvent.Result.ALLOWED) {
                     disconnect(event.getKickMessage());
@@ -261,6 +261,7 @@ public class LoginListener implements PacketLoginInListener, ITickable {
             }
         }
 
+        server.setSuspended(false);
         this.g = LoginListener.EnumProtocolState.READY_TO_ACCEPT;
     }
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -48,6 +48,11 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.Main;
 // CraftBukkit end
 
+// SportBukkit start
+import java.time.Instant;
+import java.util.Deque;
+// SportBukkit end
+
 public abstract class MinecraftServer implements Runnable, ICommandListener, IAsyncTaskHandler, IMojangStatistics {
 
     public static final Logger LOGGER = LogManager.getLogger();
@@ -101,6 +106,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     private final UserCache Y;
     private long Z;
     protected final Queue<FutureTask<?>> j = Queues.newArrayDeque();
+    protected final Deque<FutureTask<?>> taskQueue = (Deque<FutureTask<?>>) j; // SportBukkit - alias and downcast
     private Thread serverThread;
     void setLastTickStart(long millis) { ab = millis; } // SportBukkit - alias
     private long ab = aw();
@@ -114,7 +120,7 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
     public ConsoleReader reader;
     public static int currentTick = (int) (System.currentTimeMillis() / 50);
     public final Thread primaryThread;
-    public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+    //public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>(); SportBukkit - use Mojang's task queue
     public int autosavePeriod;
     // CraftBukkit end
     // SportBukkit start
@@ -710,19 +716,25 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         this.methodProfiler.a("jobs");
         Queue queue = this.j;
 
+        // SportBukkit start - don't lock the task queue while running tasks
+        processTasks();
+        /*
         synchronized (this.j) {
             while (!this.j.isEmpty()) {
                 SystemUtils.a((FutureTask) this.j.poll(), MinecraftServer.LOGGER);
             }
         }
+        */
+        // SportBukkit end
 
         this.methodProfiler.c("levels");
 
         // CraftBukkit start
         // Run tasks that are waiting on processing
-        while (!processQueue.isEmpty()) {
-            processQueue.remove().run();
-        }
+        // SportBukkit - use Mojang's task queue
+        //while (!processQueue.isEmpty()) {
+        //    processQueue.remove().run();
+        //}
 
         org.bukkit.craftbukkit.chunkio.ChunkIOExecutor.tick();
 
@@ -1473,6 +1485,47 @@ public abstract class MinecraftServer implements Runnable, ICommandListener, IAs
         return Thread.currentThread() == this.serverThread;
     }
 
+    // SportBukkit start
+    public void addMainThreadTask(FutureTask<?> task) {
+        addMainThreadTask(false, task);
+    }
+
+    public void addMainThreadTask(boolean priority, FutureTask<?> task) {
+        synchronized(taskQueue) {
+            if(priority) {
+                taskQueue.addFirst(task);
+            } else {
+                taskQueue.addLast(task);
+            }
+        }
+    }
+
+    public void addMainThreadTask(Runnable task) {
+        addMainThreadTask(false, task);
+    }
+
+    public <T> ListenableFuture<T> addMainThreadTask(boolean priority, Runnable task) {
+        final ListenableFutureTask<T> future = ListenableFutureTask.create(task, null);
+        addMainThreadTask(priority, future);
+        return future;
+    }
+
+    protected void processTasks() {
+        if(!isMainThread()) throw new IllegalStateException("Tasks must be processed on the main thread");
+        for(;;) {
+            final FutureTask<?> task;
+            synchronized(taskQueue) {
+                task = taskQueue.poll();
+            }
+            if(task == null) {
+                break;
+            } else {
+                SystemUtils.a(task, MinecraftServer.LOGGER);
+            }
+        }
+    }
+    // SportBukkit end
+
     public int aG() {
         return 256;
     }
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1332,7 +1332,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                             }
                         };
 
-                        this.minecraftServer.processQueue.add(waitable);
+                        this.minecraftServer.addMainThreadTask(waitable); // SportBukkit
 
                         try {
                             waitable.get();
@@ -1387,7 +1387,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         }
                     };
 
-                    this.minecraftServer.processQueue.add(waitable);
+                    this.minecraftServer.addMainThreadTask(waitable); // SportBukkit
 
                     try {
                         waitable.get();
@@ -1447,7 +1447,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                         return null;
                     }};
                 if (async) {
-                    minecraftServer.processQueue.add(waitable);
+                    minecraftServer.addMainThreadTask(waitable); // SportBukkit
                 } else {
                     waitable.run();
                 }
diff --git a/src/main/java/net/minecraft/server/ServerConnection.java b/src/main/java/net/minecraft/server/ServerConnection.java
--- a/src/main/java/net/minecraft/server/ServerConnection.java
+++ b/src/main/java/net/minecraft/server/ServerConnection.java
@@ -119,14 +119,8 @@ public class ServerConnection {
         }
 
         for(;;) {
-            for(Iterator<ChannelFuture> iter = futures.iterator(); iter.hasNext();) {
-                if(iter.next().isDone()) iter.remove();
-            }
-
-            while(!f.processQueue.isEmpty()) {
-                f.processQueue.remove().run();
-            }
-
+            futures.removeIf(java.util.concurrent.Future::isDone);
+            f.processTasks();
             if(futures.isEmpty()) break;
 
             try {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -95,6 +95,7 @@ import org.bukkit.inventory.ShapedRecipe;
 import org.bukkit.inventory.ShapelessRecipe;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.permissions.Permission;
+import org.bukkit.plugin.IllegalPluginAccessException;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginLoadOrder;
 import org.bukkit.plugin.PluginManager;
@@ -1811,4 +1812,44 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
     public Set<Integer> getProtocolVersions() {
         return ImmutableSet.of(315);
     }
+
+    @Override
+    public void postToMainThread(Plugin plugin, boolean priority, Runnable task) {
+        getHandle().getServer().addMainThreadTask(priority, wrapTask(plugin, task));
+    }
+
+    @Override
+    public boolean runOnMainThread(Plugin plugin, boolean priority, Runnable task) {
+        task = wrapTask(plugin, task);
+
+        if(getHandle().getServer().isMainThread()) {
+            task.run();
+            return true;
+        } else {
+            postToMainThread(plugin, priority, task);
+            return false;
+        }
+    }
+
+    private Runnable wrapTask(final Plugin plugin, final Runnable task) {
+        if(!plugin.isEnabled()) {
+            throw new IllegalPluginAccessException("Plugin attempted to register task while disabled");
+        }
+
+        class Wrapped implements Runnable {
+            @Override public void run() {
+                try {
+                    task.run();
+                } catch(Throwable throwable) {
+                    plugin.getLogger().log(
+                        Level.SEVERE,
+                        "Exception running task from plugin " + plugin.getDescription().getFullName(),
+                        throwable
+                    );
+                }
+            }
+        }
+
+        return task instanceof Wrapped ? task : new Wrapped();
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java b/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
--- a/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
+++ b/src/main/java/org/bukkit/craftbukkit/command/ConsoleCommandCompleter.java
@@ -30,7 +30,7 @@ public class ConsoleCommandCompleter implements Completer {
                 return tabEvent.isCancelled() ? Collections.EMPTY_LIST : tabEvent.getCompletions();
             }
         };
-        this.server.getServer().processQueue.add(waitable);
+        this.server.getServer().addMainThreadTask(waitable);
         try {
             List<String> offers = waitable.get();
             if (offers == null) {
