From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 18 Jun 2016 08:18:33 -0400
Subject: [PATCH] Block physics API


diff --git a/src/main/java/net/minecraft/server/World.java b/src/main/java/net/minecraft/server/World.java
--- a/src/main/java/net/minecraft/server/World.java
+++ b/src/main/java/net/minecraft/server/World.java
@@ -392,6 +392,15 @@ public abstract class World implements IBlockAccess {
     }
     // CraftBukkit end
 
+    // SportBukkit start - add method that just does the physics
+    public void updatePhysicsAndRedstone(BlockPosition blockposition, IBlockData oldBlock, IBlockData newBlock) {
+        this.update(blockposition, oldBlock.getBlock(), true);
+        if (newBlock.getBlock().isComplexRedstone(newBlock)) { // Do it this way to avoid the obfuscation
+            this.updateAdjacentComparators(blockposition, newBlock.getBlock());
+        }
+    }
+    // SportBukkit end
+
     public boolean setAir(BlockPosition blockposition) {
         return this.setTypeAndData(blockposition, Blocks.AIR.getBlockData(), 3);
     }
@@ -513,6 +522,7 @@ public abstract class World implements IBlockAccess {
 
     }
 
+    public void applySelfPhysics(BlockPosition target, Block cause, BlockPosition source) { a(target, cause, source); } // SportBukkit - method alias
     public void a(BlockPosition blockposition, final Block block, BlockPosition blockposition1) {
         if (!this.isClientSide) {
             IBlockData iblockdata = this.getType(blockposition);
@@ -2978,7 +2988,14 @@ public abstract class World implements IBlockAccess {
         while (iterator.hasNext()) {
             EnumDirection enumdirection = (EnumDirection) iterator.next();
             BlockPosition blockposition1 = blockposition.shift(enumdirection);
+            // SportBukkit start - extract method
+            updateComparator(blockposition1, block, enumdirection, blockposition);
+        }
+    }
 
+    public void updateComparator(BlockPosition blockposition1, Block block, EnumDirection enumdirection, BlockPosition blockposition) {
+        {
+            // SportBukkit end
             if (this.isLoaded(blockposition1)) {
                 IBlockData iblockdata = this.getType(blockposition1);
 
diff --git a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
--- a/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
+++ b/src/main/java/org/bukkit/craftbukkit/block/CraftBlock.java
@@ -20,6 +20,7 @@ import org.bukkit.craftbukkit.CraftChunk;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.material.MaterialData;
 import org.bukkit.metadata.MetadataValue;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.util.BlockVector;
@@ -561,4 +562,38 @@ public class CraftBlock implements Block {
     public RayBlockIntersection rayTrace(Location start, double distance) {
         return rayTrace(start.toVector(), start.toVector().add(start.getDirection().multiply(distance)));
     }
+
+    public net.minecraft.server.Chunk nmsChunk() {
+        return chunk.getHandle();
+    }
+
+    public net.minecraft.server.World nmsWorld() {
+        return nmsChunk().getWorld();
+    }
+
+    public BlockPosition nmsPosition() {
+        return new BlockPosition(x, y, z);
+    }
+
+    @Override
+    public void simulateNeighborChange(BlockFace neighbor, MaterialData before, MaterialData after) {
+        final net.minecraft.server.World world = nmsWorld();
+        final BlockPosition pos = nmsPosition();
+        final BlockPosition neighborPos = pos.plus(neighbor.normal());
+
+        // This is supposed to be functionally equivalent to updatePhysicsAndRedstone,
+        // which uses the before state as the source rather than the after state
+        // (for unknown reasons), so we do the same here.
+        world.applySelfPhysics(pos, CraftMagicNumbers.getBlock(before.getItemType()), neighborPos);
+
+        final net.minecraft.server.Block afterBlock = CraftMagicNumbers.getBlock(after.getItemType());
+        if(afterBlock.isComplexRedstone(CraftMagicNumbers.getBlockData(after))) { // Avoided IBlockProperties.n() due to renaming risk
+            world.updateComparator(pos, afterBlock, blockFaceToNotch(neighbor.getOppositeFace()), neighborPos);
+        }
+    }
+
+    @Override
+    public void simulateChangeForNeighbors(MaterialData before, MaterialData after) {
+        nmsWorld().updatePhysicsAndRedstone(nmsPosition(), CraftMagicNumbers.getBlockData(before), CraftMagicNumbers.getBlockData(after));
+    }
 }
