From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sun, 28 Sep 2014 05:48:35 -0400
Subject: [PATCH] Simple bulk block replacement


diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -106,6 +106,7 @@ public class Block {
         return this.p;
     }
 
+    public Material getMaterial(IBlockData data) { return q(data); } // SportBukkit - alias
     @Deprecated
     public Material q(IBlockData iblockdata) {
         return this.material;
diff --git a/src/main/java/net/minecraft/server/BlockPosition.java b/src/main/java/net/minecraft/server/BlockPosition.java
--- a/src/main/java/net/minecraft/server/BlockPosition.java
+++ b/src/main/java/net/minecraft/server/BlockPosition.java
@@ -383,6 +383,7 @@ public class BlockPosition extends BaseBlockPosition {
             return this.d;
         }
 
+        public BlockPosition.MutableBlockPosition set(int x, int y, int z) { return c(x, y, z); } // SportBukkit - alias
         public BlockPosition.MutableBlockPosition c(int i, int j, int k) {
             this.b = i;
             this.c = j;
diff --git a/src/main/java/net/minecraft/server/Chunk.java b/src/main/java/net/minecraft/server/Chunk.java
--- a/src/main/java/net/minecraft/server/Chunk.java
+++ b/src/main/java/net/minecraft/server/Chunk.java
@@ -697,6 +697,7 @@ public class Chunk {
         }
     }
 
+    public void removeTileEntity(BlockPosition pos) { d(pos); } // SportBukkit - alias
     public void d(BlockPosition blockposition) {
         if (this.j) {
             TileEntity tileentity = (TileEntity) this.tileEntities.remove(blockposition);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -6,12 +6,15 @@ import java.util.Arrays;
 import net.minecraft.server.*;
 
 import org.bukkit.Chunk;
+import org.bukkit.Material;
 import org.bukkit.World;
 import org.bukkit.block.Block;
 import org.bukkit.block.BlockState;
 import org.bukkit.craftbukkit.block.CraftBlock;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Entity;
 import org.bukkit.ChunkSnapshot;
+import org.bukkit.material.MaterialData;
 
 public class CraftChunk implements Chunk {
     private WeakReference<net.minecraft.server.Chunk> weakChunk;
@@ -282,6 +285,35 @@ public class CraftChunk implements Chunk {
         return new CraftChunkSnapshot(x, z, world.getName(), world.getFullTime(), blockIDs, blockData, skyLight, emitLight, empty, new int[256], biome, biomeTemp, biomeRain);
     }
 
+    @Override
+    public int replaceMaterial(Material original, MaterialData replacement) {
+        if(!original.isBlock()) throw new IllegalArgumentException(original + " is not a block");
+
+        final net.minecraft.server.Chunk chunk = this.getHandle();
+        final net.minecraft.server.Block originalBlock = CraftMagicNumbers.getBlock(original);
+        final IBlockData replacementData = CraftMagicNumbers.getBlockData(replacement);
+        final BlockPosition.MutableBlockPosition pos = new BlockPosition.MutableBlockPosition();
+        int count = 0;
+
+        for(ChunkSection section : chunk.getSections()) {
+            if(section != null) {
+                for(int x = 0; x < 16; x++) {
+                    for(int y = 0; y < 16; y++) {
+                        for(int z = 0; z < 16; z++) {
+                            if(section.getType(x, y, z).getBlock().equals(originalBlock)) {
+                                chunk.removeTileEntity(pos.set(x, y + section.getYPosition(), z));
+                                section.setType(x, y, z, replacementData);
+                                count++;
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+        return count;
+    }
+
     private static float[] getTemperatures(WorldChunkManager chunkmanager, int chunkX, int chunkZ) {
         BiomeBase[] biomes = chunkmanager.getBiomes(null, chunkX, chunkZ, 16, 16);
         float[] temps = new float[biomes.length];
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.util;
 
+import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Lists;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -10,6 +11,7 @@ import java.util.logging.Logger;
 
 import net.minecraft.server.Block;
 import net.minecraft.server.Blocks;
+import net.minecraft.server.IBlockData;
 import net.minecraft.server.Item;
 import net.minecraft.server.MinecraftKey;
 import net.minecraft.server.MojangsonParseException;
@@ -24,6 +26,7 @@ import org.bukkit.UnsafeValues;
 import org.bukkit.craftbukkit.CraftStatistic;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.material.MaterialData;
 import org.bukkit.util.StringUtil;
 
 @SuppressWarnings("deprecation")
@@ -95,6 +98,27 @@ public final class CraftMagicNumbers implements UnsafeValues {
         return block;
     }
 
+    public static IBlockData getBlockData(MaterialData material) {
+        return getBlock(material.getItemType()).fromLegacyData(material.getData());
+    }
+
+    public static Set<IBlockData> getBlockData(Set<MaterialData> materials) {
+        ImmutableSet.Builder<IBlockData> nms = ImmutableSet.builder();
+        for(MaterialData bukkit : materials) {
+            nms.add(getBlockData(bukkit));
+        }
+        return nms.build();
+    }
+
+    public static MaterialData nmsBlockStateToMaterialData(IBlockData data) {
+        final Block block = data.getBlock();
+        final int legacyId = getId(block);
+        final byte legacyData = (byte) block.toLegacyData(data);
+        final Material material = Material.getMaterial(legacyId);
+        return material == null ? new MaterialData(legacyId, legacyData)
+                                : material.getNewData(legacyData);
+    }
+
     @Override
     public Material getMaterialFromInternalName(String name) {
         return getMaterial((Item) Item.REGISTRY.get(new MinecraftKey(name)));
