From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sun, 20 Nov 2016 09:44:03 -0500
Subject: [PATCH] Legacy protocol support


diff --git a/src/main/java/net/minecraft/server/Block.java b/src/main/java/net/minecraft/server/Block.java
--- a/src/main/java/net/minecraft/server/Block.java
+++ b/src/main/java/net/minecraft/server/Block.java
@@ -36,6 +36,15 @@ public class Block {
     private IBlockData blockData;
     private String name;
 
+    // SportBukkit start - minimum protocol version
+    private int proto;
+    public int proto() { return proto; }
+    public Block proto(int p) {
+        this.proto = p;
+        return this;
+    }
+    // SportBukkit end
+
     public static int getId(Block block) {
         return Block.REGISTRY.a(block); // CraftBukkit - decompile error
     }
@@ -843,12 +852,12 @@ public class Block {
         a(210, "repeating_command_block", (new BlockCommand(MaterialMapColor.z)).j().b(6000000.0F).c("repeatingCommandBlock"));
         a(211, "chain_command_block", (new BlockCommand(MaterialMapColor.C)).j().b(6000000.0F).c("chainCommandBlock"));
         a(212, "frosted_ice", (new BlockIceFrost()).c(0.5F).d(3).a(SoundEffectType.f).c("frostedIce"));
-        a(213, "magma", (new BlockMagma()).c(0.5F).a(SoundEffectType.d).c("magma"));
-        a(214, "nether_wart_block", (new Block(Material.GRASS, MaterialMapColor.D)).a(CreativeModeTab.b).c(1.0F).a(SoundEffectType.a).c("netherWartBlock"));
-        a(215, "red_nether_brick", (new BlockNetherbrick()).c(2.0F).b(10.0F).a(SoundEffectType.d).c("redNetherBrick").a(CreativeModeTab.b));
-        a(216, "bone_block", (new BlockBone()).c("boneBlock"));
-        a(217, "structure_void", (new BlockStructureVoid()).c("structureVoid"));
-        a(218, "observer", (new BlockObserver()).c(3.0F).c("observer"));
+        a(213, "magma", (new BlockMagma()).c(0.5F).a(SoundEffectType.d).c("magma").proto(201)); // SportBukkit - proto
+        a(214, "nether_wart_block", (new Block(Material.GRASS, MaterialMapColor.D)).a(CreativeModeTab.b).c(1.0F).a(SoundEffectType.a).c("netherWartBlock").proto(201)); // SportBukkit - proto
+        a(215, "red_nether_brick", (new BlockNetherbrick()).c(2.0F).b(10.0F).a(SoundEffectType.d).c("redNetherBrick").a(CreativeModeTab.b).proto(201)); // SportBukkit - proto
+        a(216, "bone_block", (new BlockBone()).c("boneBlock").proto(201)); // SportBukkit - proto
+        a(217, "structure_void", (new BlockStructureVoid()).c("structureVoid").proto(201)); // SportBukkit - proto
+        a(218, "observer", (new BlockObserver()).c(3.0F).c("observer").proto(315)); // SportBukkit - proto
         a(219, "white_shulker_box", (new BlockShulkerBox(EnumColor.WHITE)).c(2.0F).a(SoundEffectType.d).c("shulkerBoxWhite"));
         a(220, "orange_shulker_box", (new BlockShulkerBox(EnumColor.ORANGE)).c(2.0F).a(SoundEffectType.d).c("shulkerBoxOrange"));
         a(221, "magenta_shulker_box", (new BlockShulkerBox(EnumColor.MAGENTA)).c(2.0F).a(SoundEffectType.d).c("shulkerBoxMagenta"));
diff --git a/src/main/java/net/minecraft/server/BlockShulkerBox.java b/src/main/java/net/minecraft/server/BlockShulkerBox.java
--- a/src/main/java/net/minecraft/server/BlockShulkerBox.java
+++ b/src/main/java/net/minecraft/server/BlockShulkerBox.java
@@ -7,6 +7,7 @@ public class BlockShulkerBox extends BlockTileEntity {
 
     public BlockShulkerBox(EnumColor enumcolor) {
         super(Material.STONE, MaterialMapColor.b);
+        proto(307); // SportBukkit
         this.b = enumcolor;
         this.a(CreativeModeTab.c);
         this.y(this.blockStateList.getBlockData().set(BlockShulkerBox.a, EnumDirection.UP));
diff --git a/src/main/java/net/minecraft/server/DataWatcher.java b/src/main/java/net/minecraft/server/DataWatcher.java
--- a/src/main/java/net/minecraft/server/DataWatcher.java
+++ b/src/main/java/net/minecraft/server/DataWatcher.java
@@ -16,12 +16,17 @@ import org.apache.commons.lang3.ObjectUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// SportBukkit start
+import org.bukkit.craftbukkit.protocol.MetadataKey;
+import com.google.common.collect.Range;
+// SportBukkit end
+
 public class DataWatcher {
 
     private static final Logger a = LogManager.getLogger();
     private static final Map<Class<? extends Entity>, Integer> b = Maps.newHashMap();
-    private final Entity c;
-    private final Map<Integer, DataWatcher.Item<?>> d = Maps.newHashMap();
+    private final Entity c; public Entity getEntity() { return c; } // SportBukkit - alias
+    private final Map<DataWatcherObject<?>, DataWatcher.Item<?>> d = Maps.newHashMap(); // SportBukkit - use DWO as key instead of integer ID (because ID depends on proto)
     private final ReadWriteLock e = new ReentrantReadWriteLock();
     private boolean f = true;
     private boolean g;
@@ -31,6 +36,8 @@ public class DataWatcher {
     }
 
     public static <T> DataWatcherObject<T> a(Class<? extends Entity> oclass, DataWatcherSerializer<T> datawatcherserializer) {
+        if(true) return MetadataKey.auto(oclass, datawatcherserializer, Range.all()); // SportBukkit - use our own ID allocator
+
         if (DataWatcher.a.isDebugEnabled()) {
             try {
                 Class oclass1 = Class.forName(Thread.currentThread().getStackTrace()[2].getClassName());
@@ -71,6 +78,7 @@ public class DataWatcher {
     }
 
     public <T> void register(DataWatcherObject<T> datawatcherobject, Object t0) { // CraftBukkit T -> Object
+        registerObject(datawatcherobject, t0); if(true) return; // SportBukkit - these checks don't work, and they were useless anyway
         int i = datawatcherobject.a();
 
         if (i > 254) {
@@ -85,10 +93,10 @@ public class DataWatcher {
     }
 
     private <T> void registerObject(DataWatcherObject<T> datawatcherobject, Object t0) { // CraftBukkit Object
-        DataWatcher.Item datawatcher_item = new DataWatcher.Item(datawatcherobject, t0);
+        DataWatcher.Item datawatcher_item = new DataWatcher.Item(getEntity().getClass(), datawatcherobject, t0); // SportBukkit - add entity
 
         this.e.writeLock().lock();
-        this.d.put(Integer.valueOf(datawatcherobject.a()), datawatcher_item);
+        this.d.put(datawatcherobject, datawatcher_item); // SportBukkit - use DWO as key
         this.f = false;
         this.e.writeLock().unlock();
     }
@@ -99,7 +107,7 @@ public class DataWatcher {
         DataWatcher.Item datawatcher_item;
 
         try {
-            datawatcher_item = (DataWatcher.Item) this.d.get(Integer.valueOf(datawatcherobject.a()));
+            datawatcher_item = (DataWatcher.Item) this.d.get(datawatcherobject); // SportBukkit - use DWO as key
         } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.a(throwable, "Getting synched entity data");
             CrashReportSystemDetails crashreportsystemdetails = crashreport.a("Synched entity data");
@@ -213,6 +221,15 @@ public class DataWatcher {
     }
 
     private static <T> void a(PacketDataSerializer packetdataserializer, DataWatcher.Item<T> datawatcher_item) throws IOException {
+        // SportBukkit start - protocol translation
+        // Note that ALL keys in SB are MetadataKeys, but we do this check in case some plugins use DWO.
+        // Such plugins may want to consider using MetadataKey in order to support translation.
+        if(datawatcher_item.key() instanceof MetadataKey) {
+            ((MetadataKey<T>) datawatcher_item.key()).send(packetdataserializer, datawatcher_item);
+            return;
+        }
+        // SportBukkit end
+
         DataWatcherObject datawatcherobject = datawatcher_item.a();
         int i = DataWatcherRegistry.b(datawatcherobject.b());
 
@@ -248,7 +265,7 @@ public class DataWatcher {
                 throw new DecoderException("Unknown serializer type " + i);
             }
 
-            arraylist.add(new DataWatcher.Item(datawatcherserializer.a(short0), datawatcherserializer.a(packetdataserializer)));
+            throw new UnsupportedOperationException(); // arraylist.add(new DataWatcher.Item(datawatcherserializer.a(short0), datawatcherserializer.a(packetdataserializer))); // SportBukkit - deserializing metadata is not supported
         }
 
         return arraylist;
@@ -274,11 +291,16 @@ public class DataWatcher {
 
     public static class Item<T> {
 
-        private final DataWatcherObject<T> a;
-        private T b;
+        private final DataWatcherObject<T> a; public DataWatcherObject<T> key() { return a; } // SportBukkit - alias
+        private T b; public T value() { return b; } // SportBukkit - alias
         private boolean c;
 
-        public Item(DataWatcherObject<T> datawatcherobject, T t0) {
+        // SportBukkit start - add entity field
+        public final Class<? extends Entity> entityClass;
+
+        public Item(Class<? extends Entity> entityClass, DataWatcherObject<T> datawatcherobject, T t0) {
+            this.entityClass = entityClass;
+            // SportBukkit end
             this.a = datawatcherobject;
             this.b = t0;
             this.c = true;
@@ -306,14 +328,14 @@ public class DataWatcher {
 
         // SportBukkit start - Make an independent copy of the item
         public Item<T> deepCopy() {
-            T value = this.b();
+            T value = value();
 
             // All the metadata types are immutable except ItemStack, which we have to clone.
             if(value instanceof ItemStack) {
                 value = (T) ((ItemStack) value).cloneItemStack();
             }
 
-            final Item<T> copy = new Item<>(this.a(), value);
+            final Item<T> copy = new Item<>(entityClass, key(), value);
             copy.a(this.c());
             return copy;
         }
diff --git a/src/main/java/net/minecraft/server/Entity.java b/src/main/java/net/minecraft/server/Entity.java
--- a/src/main/java/net/minecraft/server/Entity.java
+++ b/src/main/java/net/minecraft/server/Entity.java
@@ -24,6 +24,7 @@ import org.bukkit.PoseFlag;
 import org.bukkit.Server;
 import org.bukkit.TravelAgent;
 import org.bukkit.block.BlockFace;
+import org.bukkit.craftbukkit.protocol.MetadataKey;
 import org.bukkit.entity.Hanging;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
@@ -46,6 +47,11 @@ import org.bukkit.event.entity.EntityPortalEvent;
 import org.bukkit.plugin.PluginManager;
 // CraftBukkit end
 
+// SportBukkit start
+import com.google.common.collect.Range;
+// SportBukkit end
+
+
 public abstract class Entity implements ICommandListener {
 
     // CraftBukkit start
@@ -125,7 +131,7 @@ public abstract class Entity implements ICommandListener {
     private static final DataWatcherObject<String> aA = DataWatcher.a(Entity.class, DataWatcherRegistry.d);
     private static final DataWatcherObject<Boolean> aB = DataWatcher.a(Entity.class, DataWatcherRegistry.h);
     private static final DataWatcherObject<Boolean> aC = DataWatcher.a(Entity.class, DataWatcherRegistry.h);
-    private static final DataWatcherObject<Boolean> aD = DataWatcher.a(Entity.class, DataWatcherRegistry.h);
+    private static final DataWatcherObject<Boolean> aD = MetadataKey.auto(Entity.class, DataWatcherRegistry.h, Range.atLeast(201)); // SportBukkit - no gravity flag
     public boolean aa;
     public int ab;
     public int ac;
diff --git a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
--- a/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
+++ b/src/main/java/net/minecraft/server/EntityAreaEffectCloud.java
@@ -15,14 +15,19 @@ import org.bukkit.entity.LivingEntity; // CraftBukkit
 import java.util.Map.Entry;
 import javax.annotation.Nullable;
 
+// SportBukkit start
+import com.google.common.collect.Range;
+import org.bukkit.craftbukkit.protocol.MetadataKey;
+// SportBukkit end
+
 public class EntityAreaEffectCloud extends Entity {
 
     private static final DataWatcherObject<Float> a = DataWatcher.a(EntityAreaEffectCloud.class, DataWatcherRegistry.c);
     private static final DataWatcherObject<Integer> b = DataWatcher.a(EntityAreaEffectCloud.class, DataWatcherRegistry.b);
     private static final DataWatcherObject<Boolean> c = DataWatcher.a(EntityAreaEffectCloud.class, DataWatcherRegistry.h);
     private static final DataWatcherObject<Integer> d = DataWatcher.a(EntityAreaEffectCloud.class, DataWatcherRegistry.b);
-    private static final DataWatcherObject<Integer> e = DataWatcher.a(EntityAreaEffectCloud.class, DataWatcherRegistry.b);
-    private static final DataWatcherObject<Integer> f = DataWatcher.a(EntityAreaEffectCloud.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Integer> e = MetadataKey.auto(EntityAreaEffectCloud.class, DataWatcherRegistry.b, Range.lessThan(201)); // SportBukkit
+    private static final DataWatcherObject<Integer> f = MetadataKey.auto(EntityAreaEffectCloud.class, DataWatcherRegistry.b, Range.lessThan(201)); // SportBukkit
     private PotionRegistry potionRegistry;
     public List<MobEffect> effects;
     private final Map<Entity, Integer> at;
diff --git a/src/main/java/net/minecraft/server/EntityFireworks.java b/src/main/java/net/minecraft/server/EntityFireworks.java
--- a/src/main/java/net/minecraft/server/EntityFireworks.java
+++ b/src/main/java/net/minecraft/server/EntityFireworks.java
@@ -3,10 +3,15 @@ package net.minecraft.server;
 import java.util.Iterator;
 import java.util.List;
 
+// SportBukkit start
+import com.google.common.collect.Range;
+import org.bukkit.craftbukkit.protocol.MetadataKey;
+// SportBukkit end
+
 public class EntityFireworks extends Entity {
 
     public static final DataWatcherObject<ItemStack> FIREWORK_ITEM = DataWatcher.a(EntityFireworks.class, DataWatcherRegistry.f);
-    private static final DataWatcherObject<Integer> b = DataWatcher.a(EntityFireworks.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Integer> b = MetadataKey.auto(EntityFireworks.class, DataWatcherRegistry.b, Range.atLeast(316)); // SportBukkit - boosting entity ID
     public int ticksFlown; // SportBukkit - private -> public
     public int expectedLifespan;
     private EntityLiving e;
diff --git a/src/main/java/net/minecraft/server/EntityHorse.java b/src/main/java/net/minecraft/server/EntityHorse.java
--- a/src/main/java/net/minecraft/server/EntityHorse.java
+++ b/src/main/java/net/minecraft/server/EntityHorse.java
@@ -6,8 +6,8 @@ import javax.annotation.Nullable;
 public class EntityHorse extends EntityHorseAbstract {
 
     private static final UUID bG = UUID.fromString("556E1665-8B10-40C8-8F9D-CF9B1667F295");
-    private static final DataWatcherObject<Integer> bH = DataWatcher.a(EntityHorse.class, DataWatcherRegistry.b);
-    private static final DataWatcherObject<Integer> bI = DataWatcher.a(EntityHorse.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Integer> bH = META_HORSE_VARIANT; // SportBukkit
+    private static final DataWatcherObject<Integer> bI = META_ARMOR; // SportBukkit
     private static final String[] bJ = new String[] { "textures/entity/horse/horse_white.png", "textures/entity/horse/horse_creamy.png", "textures/entity/horse/horse_chestnut.png", "textures/entity/horse/horse_brown.png", "textures/entity/horse/horse_black.png", "textures/entity/horse/horse_gray.png", "textures/entity/horse/horse_darkbrown.png"};
     private static final String[] bK = new String[] { "hwh", "hcr", "hch", "hbr", "hbl", "hgr", "hdb"};
     private static final String[] bL = new String[] { null, "textures/entity/horse/horse_markings_white.png", "textures/entity/horse/horse_markings_whitefield.png", "textures/entity/horse/horse_markings_whitedots.png", "textures/entity/horse/horse_markings_blackdots.png"};
@@ -21,8 +21,10 @@ public class EntityHorse extends EntityHorseAbstract {
 
     protected void i() {
         super.i();
-        this.datawatcher.register(EntityHorse.bH, Integer.valueOf(0));
-        this.datawatcher.register(EntityHorse.bI, Integer.valueOf(EnumHorseArmor.NONE.a()));
+        // SportBukkit start - registered already in superclass
+        //this.datawatcher.register(EntityHorse.bH, Integer.valueOf(0));
+        //this.datawatcher.register(EntityHorse.bI, Integer.valueOf(EnumHorseArmor.NONE.a()));
+        // SportBukkit end
     }
 
     public static void a(DataConverterManager dataconvertermanager) {
diff --git a/src/main/java/net/minecraft/server/EntityHorseAbstract.java b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
--- a/src/main/java/net/minecraft/server/EntityHorseAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseAbstract.java
@@ -8,8 +8,48 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 import org.bukkit.event.entity.EntityRegainHealthEvent.RegainReason; // CraftBukkit
 
+// SportBukkit start
+import com.google.common.collect.Range;
+import org.bukkit.craftbukkit.protocol.MetadataKey;
+// SportBukkit end
+
 public abstract class EntityHorseAbstract extends EntityAnimal implements IInventoryListener, IJumpable {
 
+    // SportBukkit start
+    public static final MetadataKey<Byte> META_HORSE_FLAGS = MetadataKey
+        .builder(EntityHorseAbstract.class, DataWatcherRegistry.a)
+        .id(Range.lessThan(201), 12)
+        .id(Range.atLeast(201), 13)
+        .build();
+
+    public static final MetadataKey<Optional<UUID>> META_OWNER = MetadataKey
+        .builder(EntityHorseAbstract.class, DataWatcherRegistry.m)
+        .id(Range.lessThan(201), 15)
+        .id(Range.closedOpen(201, 301), 16)
+        .id(Range.atLeast(315), 14)
+        .build();
+
+    public static final MetadataKey<Integer> META_HORSE_TYPE = MetadataKey
+        .builder(EntityHorseAbstract.class, DataWatcherRegistry.b)
+        .id(Range.lessThan(201), 13)
+        .id(Range.closedOpen(201, 301), 14)
+        .build();
+
+    public static final MetadataKey<Integer> META_HORSE_VARIANT = MetadataKey
+        .builder(EntityHorseAbstract.class, DataWatcherRegistry.b)
+        .id(Range.lessThan(201), 14)
+        .id(Range.closedOpen(201, 301), 15)
+        .id(Range.atLeast(301), EntityHorse.class, 15)
+        .build();
+
+    public static final MetadataKey<Integer> META_ARMOR = MetadataKey
+        .builder(EntityHorseAbstract.class, DataWatcherRegistry.b)
+        .id(Range.lessThan(201), 16)
+        .id(Range.closedOpen(201, 301), 17)
+        .id(Range.atLeast(301), EntityHorse.class, 16)
+        .build();
+    // SportBukkit end
+
     private static final Predicate<Entity> bG = new Predicate() {
         public boolean a(@Nullable Entity entity) {
             return entity instanceof EntityHorseAbstract && ((EntityHorseAbstract) entity).hasReproduced();
@@ -20,8 +60,8 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         }
     };
     public static final IAttribute attributeJumpStrength = (new AttributeRanged((IAttribute) null, "horse.jumpStrength", 0.7D, 0.0D, 2.0D)).a("Jump Strength").a(true);
-    private static final DataWatcherObject<Byte> bH = DataWatcher.a(EntityHorseAbstract.class, DataWatcherRegistry.a);
-    private static final DataWatcherObject<Optional<UUID>> bI = DataWatcher.a(EntityHorseAbstract.class, DataWatcherRegistry.m);
+    private static final DataWatcherObject<Byte> bH = META_HORSE_FLAGS; // SportBukkit
+    private static final DataWatcherObject<Optional<UUID>> bI = META_OWNER; // SportBukkit
     private int bJ;
     private int bK;
     private int bL;
@@ -64,6 +104,24 @@ public abstract class EntityHorseAbstract extends EntityAnimal implements IInven
         super.i();
         this.datawatcher.register(EntityHorseAbstract.bH, Byte.valueOf((byte) 0));
         this.datawatcher.register(EntityHorseAbstract.bI, Optional.absent());
+
+        // SportBukkit start
+        final int typeId;
+        if(this instanceof EntityHorseDonkey) {
+            typeId = 1;
+        } else if(this instanceof EntityHorseMule) {
+            typeId = 2;
+        } else if(this instanceof EntityHorseZombie) {
+            typeId = 3;
+        } else if(this instanceof EntityHorseSkeleton) {
+            typeId = 4;
+        } else {
+            typeId = 0;
+        }
+        this.datawatcher.register(META_HORSE_TYPE, typeId);
+        this.datawatcher.register(META_HORSE_VARIANT, 0);
+        this.datawatcher.register(META_ARMOR, 0);
+        // SportBukkit end
     }
 
     protected boolean g(int i) {
diff --git a/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java b/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
--- a/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
+++ b/src/main/java/net/minecraft/server/EntityHorseChestedAbstract.java
@@ -1,8 +1,18 @@
 package net.minecraft.server;
 
+// SportBukkit start
+import com.google.common.collect.Range;
+import org.bukkit.craftbukkit.protocol.MetadataKey;
+// SportBukkit end
+
 public abstract class EntityHorseChestedAbstract extends EntityHorseAbstract {
 
-    private static final DataWatcherObject<Boolean> bG = DataWatcher.a(EntityHorseChestedAbstract.class, DataWatcherRegistry.h);
+    // SportBukkit start
+    private static final DataWatcherObject<Boolean> bG = MetadataKey
+        .builder(EntityHorseChestedAbstract.class, DataWatcherRegistry.h)
+        .id(Range.atLeast(301), 15)
+        .build();
+    // SportBukkit end
 
     public EntityHorseChestedAbstract(World world) {
         super(world);
diff --git a/src/main/java/net/minecraft/server/EntityLightning.java b/src/main/java/net/minecraft/server/EntityLightning.java
--- a/src/main/java/net/minecraft/server/EntityLightning.java
+++ b/src/main/java/net/minecraft/server/EntityLightning.java
@@ -65,9 +65,9 @@ public class EntityLightning extends EntityWeather {
                     double deltaLength = Math.sqrt(distanceSquared);
                     double relativeX = player.locX + (deltaX / deltaLength) * viewDistance;
                     double relativeZ = player.locZ + (deltaZ / deltaLength) * viewDistance;
-                    player.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(SoundEffects.dx, SoundCategory.WEATHER, relativeX, this.locY, relativeZ, 10000.0F, pitch));
+                    player.playerConnection.sendPacket(new PacketPlayOutCustomSoundEffect("entity.lightning.thunder", SoundCategory.WEATHER, relativeX, this.locY, relativeZ, 10000.0F, pitch)); // SportBukkit - use named sounds
                 } else {
-                    player.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(SoundEffects.dx, SoundCategory.WEATHER, this.locX, this.locY, this.locZ, 10000.0F, pitch));
+                    player.playerConnection.sendPacket(new PacketPlayOutCustomSoundEffect("entity.lightning.thunder", SoundCategory.WEATHER, this.locX, this.locY, this.locZ, 10000.0F, pitch)); // SportBukkit - use named sounds
                 }
             }
             // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/EntityLlama.java b/src/main/java/net/minecraft/server/EntityLlama.java
--- a/src/main/java/net/minecraft/server/EntityLlama.java
+++ b/src/main/java/net/minecraft/server/EntityLlama.java
@@ -4,11 +4,30 @@ import com.google.common.base.Predicate;
 import java.util.Iterator;
 import javax.annotation.Nullable;
 
+// SportBukkit start
+import com.google.common.collect.Range;
+import org.bukkit.craftbukkit.protocol.MetadataKey;
+// SportBukkit end
+
 public class EntityLlama extends EntityHorseChestedAbstract implements IRangedEntity {
 
-    private static final DataWatcherObject<Integer> bG = DataWatcher.a(EntityLlama.class, DataWatcherRegistry.b);
-    private static final DataWatcherObject<Integer> bH = DataWatcher.a(EntityLlama.class, DataWatcherRegistry.b);
-    private static final DataWatcherObject<Integer> bI = DataWatcher.a(EntityLlama.class, DataWatcherRegistry.b);
+    // SportBukkit start
+    private static final DataWatcherObject<Integer> bG = MetadataKey
+        .builder(EntityLlama.class, DataWatcherRegistry.b)
+        .id(Range.atLeast(301), 16)
+        .build();
+
+    private static final DataWatcherObject<Integer> bH = MetadataKey
+        .builder(EntityLlama.class, DataWatcherRegistry.b)
+        .id(Range.atLeast(301), 17)
+        .build();
+
+    private static final DataWatcherObject<Integer> bI = MetadataKey
+        .builder(EntityLlama.class, DataWatcherRegistry.b)
+        .id(Range.atLeast(301), 18)
+        .build();
+    // SportBukkit end
+
     private boolean bJ;
     @Nullable
     private EntityLlama bK;
diff --git a/src/main/java/net/minecraft/server/EntityPig.java b/src/main/java/net/minecraft/server/EntityPig.java
--- a/src/main/java/net/minecraft/server/EntityPig.java
+++ b/src/main/java/net/minecraft/server/EntityPig.java
@@ -7,10 +7,15 @@ import javax.annotation.Nullable;
 
 import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
 
+// SportBukkit start
+import org.bukkit.craftbukkit.protocol.MetadataKey;
+import com.google.common.collect.Range;
+// SportBukkit end
+
 public class EntityPig extends EntityAnimal {
 
     private static final DataWatcherObject<Boolean> bw = DataWatcher.a(EntityPig.class, DataWatcherRegistry.h);
-    private static final DataWatcherObject<Integer> bx = DataWatcher.a(EntityPig.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Integer> bx = MetadataKey.auto(EntityPig.class, DataWatcherRegistry.b, Range.atLeast(316)); // SportBukkit - total boost time
     private static final Set<Item> by = Sets.newHashSet(new Item[] { Items.CARROT, Items.POTATO, Items.BEETROOT});
     private boolean bA;
     private int bB;
diff --git a/src/main/java/net/minecraft/server/EntityPlayer.java b/src/main/java/net/minecraft/server/EntityPlayer.java
--- a/src/main/java/net/minecraft/server/EntityPlayer.java
+++ b/src/main/java/net/minecraft/server/EntityPlayer.java
@@ -902,7 +902,7 @@ public class EntityPlayer extends EntityHuman implements ICrafting {
 
                 if (itileinventory.isLocked() && !this.a(itileinventory.getLock()) && !this.isSpectator()) {
                     this.playerConnection.sendPacket(new PacketPlayOutChat(new ChatMessage("container.isLocked", new Object[] { iinventory.getScoreboardDisplayName()}), (byte) 2));
-                    this.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(SoundEffects.Y, SoundCategory.BLOCKS, this.locX, this.locY, this.locZ, 1.0F, 1.0F));
+                    this.playerConnection.sendPacket(new PacketPlayOutCustomSoundEffect(SoundEffects.Y, SoundCategory.BLOCKS, this.locX, this.locY, this.locZ, 1.0F, 1.0F)); // SportBukkit - use named sounds
                     iinventory.closeContainer(this); // CraftBukkit
                     return;
                 }
diff --git a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
--- a/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
+++ b/src/main/java/net/minecraft/server/EntitySkeletonAbstract.java
@@ -4,9 +4,29 @@ import java.util.Calendar;
 import javax.annotation.Nullable;
 import org.bukkit.event.entity.EntityCombustEvent; // CraftBukkit
 
+// SportBukkit start
+import org.bukkit.craftbukkit.protocol.MetadataKey;
+import com.google.common.collect.Range;
+// SportBukkit end
+
 public abstract class EntitySkeletonAbstract extends EntityMonster implements IRangedEntity {
 
-    private static final DataWatcherObject<Boolean> a = DataWatcher.a(EntitySkeletonAbstract.class, DataWatcherRegistry.h);
+    // SportBukkit start
+    public static final MetadataKey<Integer> META_SKELETON_TYPE = MetadataKey
+        .builder(EntitySkeletonAbstract.class, DataWatcherRegistry.b)
+        .id(Range.lessThan(201), 11)
+        .id(Range.closedOpen(201, 301), 12)
+        .build();
+
+    public static final MetadataKey<Boolean> META_SWINGING_ARMS = MetadataKey
+        .builder(EntitySkeletonAbstract.class, DataWatcherRegistry.h)
+        .id(Range.lessThan(201), 12)
+        .id(Range.closedOpen(201, 301), 13)
+        .id(Range.atLeast(301), 12)
+        .build();
+    // SportBukkit end
+
+    private static final DataWatcherObject<Boolean> a = META_SWINGING_ARMS; // SportBukkit
     private final PathfinderGoalBowShoot b = new PathfinderGoalBowShoot(this, 1.0D, 20, 15.0F);
     private final PathfinderGoalMeleeAttack c = new PathfinderGoalMeleeAttack(this, 1.2D, false) { // CraftBukkit - decompile error
         public void d() {
@@ -47,6 +67,18 @@ public abstract class EntitySkeletonAbstract extends EntityMonster implements IR
     protected void i() {
         super.i();
         this.datawatcher.register(EntitySkeletonAbstract.a, Boolean.valueOf(false));
+
+        // SportBukkit start
+        final int skeletonType;
+        if(this instanceof EntitySkeletonStray) {
+            skeletonType = 2;
+        } else if(this instanceof EntitySkeletonWither) {
+            skeletonType = 1;
+        } else {
+            skeletonType = 0;
+        }
+        this.datawatcher.register(META_SKELETON_TYPE, skeletonType);
+        // SportBukkit end
     }
 
     protected void a(BlockPosition blockposition, Block block) {
diff --git a/src/main/java/net/minecraft/server/EntityZombie.java b/src/main/java/net/minecraft/server/EntityZombie.java
--- a/src/main/java/net/minecraft/server/EntityZombie.java
+++ b/src/main/java/net/minecraft/server/EntityZombie.java
@@ -12,14 +12,55 @@ import org.bukkit.event.entity.EntityCombustEvent;
 import org.bukkit.event.entity.EntityTargetEvent;
 //CraftBukkit end
 
+// SportBukkit start
+import com.google.common.collect.Range;
+import org.bukkit.craftbukkit.protocol.MetadataKey;
+// SportBukkit end
+
 public class EntityZombie extends EntityMonster {
 
+    // SportBukkit start
+    public static final MetadataKey<Boolean> META_BABY = MetadataKey
+        .builder(EntityZombie.class, DataWatcherRegistry.h)
+        .id(Range.lessThan(201), 11)
+        .id(Range.atLeast(201), 12)
+        .build();
+
+    public static final MetadataKey<Integer> META_TYPE = MetadataKey
+        .builder(EntityZombie.class, DataWatcherRegistry.b)
+        .id(Range.lessThan(201), 12)
+        .id(Range.closedOpen(201, 301), 13)
+        .build();
+
+    public static final MetadataKey<Boolean> META_HANDS_UP = MetadataKey
+        .builder(EntityZombie.class, DataWatcherRegistry.h)
+        .id(Range.lessThan(201), 14)
+        .id(Range.closedOpen(201, 301), 15)
+        .id(Range.atLeast(301), 14)
+        .build();
+
+    public static final MetadataKey<Boolean> META_CONVERTING = MetadataKey
+        .builder(EntityZombie.class, DataWatcherRegistry.h)
+        .id(Range.lessThan(201), 13)
+        .id(Range.closedOpen(201, 301), 14)
+        .id(Range.atLeast(301), EntityZombieVillager.class, 15)
+        .build();
+
+    public static final MetadataKey<Integer> META_PROFESSION = MetadataKey
+        .builder(EntityZombie.class, DataWatcherRegistry.b)
+        .id(Range.lessThan(201), 12)
+        .id(Range.closedOpen(201, 301), 13)
+        .id(Range.atLeast(301), EntityZombieVillager.class, 16)
+        .transform(Range.lessThan(301), pro -> pro + 1)
+        .build();
+    // SportBukkit end
+
     protected static final IAttribute a = (new AttributeRanged((IAttribute) null, "zombie.spawnReinforcements", 0.0D, 0.0D, 1.0D)).a("Spawn Reinforcements Chance");
     private static final UUID b = UUID.fromString("B9766B59-9566-4402-BC1F-2EE2A276D836");
     private static final AttributeModifier c = new AttributeModifier(EntityZombie.b, "Baby speed boost", 0.5D, 1);
-    private static final DataWatcherObject<Boolean> bw = DataWatcher.a(EntityZombie.class, DataWatcherRegistry.h);
-    private static final DataWatcherObject<Integer> bx = DataWatcher.a(EntityZombie.class, DataWatcherRegistry.b);
-    private static final DataWatcherObject<Boolean> by = DataWatcher.a(EntityZombie.class, DataWatcherRegistry.h);
+    private static final DataWatcherObject<Boolean> bw = META_BABY; // SportBukkit
+    private static final DataWatcherObject<Integer> bx = META_TYPE; // SportBukkit
+    private static final DataWatcherObject<Boolean> by = META_HANDS_UP ; // SportBukkit
     private final PathfinderGoalBreakDoor bz = new PathfinderGoalBreakDoor(this);
     private boolean bA;
     private float bB = -1.0F;
@@ -62,6 +103,11 @@ public class EntityZombie extends EntityMonster {
         this.getDataWatcher().register(EntityZombie.bw, Boolean.valueOf(false));
         this.getDataWatcher().register(EntityZombie.bx, Integer.valueOf(0));
         this.getDataWatcher().register(EntityZombie.by, Boolean.valueOf(false));
+
+        // SportBukkit start
+        this.getDataWatcher().register(META_CONVERTING, false);
+        this.getDataWatcher().register(META_PROFESSION, 0);
+        // SportBukkit end
     }
 
     public void a(boolean flag) {
diff --git a/src/main/java/net/minecraft/server/EntityZombieVillager.java b/src/main/java/net/minecraft/server/EntityZombieVillager.java
--- a/src/main/java/net/minecraft/server/EntityZombieVillager.java
+++ b/src/main/java/net/minecraft/server/EntityZombieVillager.java
@@ -4,8 +4,8 @@ import javax.annotation.Nullable;
 
 public class EntityZombieVillager extends EntityZombie {
 
-    private static final DataWatcherObject<Boolean> b = DataWatcher.a(EntityZombieVillager.class, DataWatcherRegistry.h);
-    private static final DataWatcherObject<Integer> c = DataWatcher.a(EntityZombieVillager.class, DataWatcherRegistry.b);
+    private static final DataWatcherObject<Boolean> b = META_CONVERTING; // SportBukkit
+    private static final DataWatcherObject<Integer> c = META_PROFESSION; // SportBukkit
     private int conversionTime;
     private int lastTick = MinecraftServer.currentTick; // CraftBukkit - add field
 
@@ -15,8 +15,10 @@ public class EntityZombieVillager extends EntityZombie {
 
     protected void i() {
         super.i();
-        this.datawatcher.register(EntityZombieVillager.b, Boolean.valueOf(false));
-        this.datawatcher.register(EntityZombieVillager.c, Integer.valueOf(0));
+        // SportBukkit start - registered already in superclass
+        //this.datawatcher.register(EntityZombieVillager.b, Boolean.valueOf(false));
+        //this.datawatcher.register(EntityZombieVillager.c, Integer.valueOf(0));
+        // SportBukkit end
     }
 
     public void setProfession(int i) {
diff --git a/src/main/java/net/minecraft/server/EnumProtocol.java b/src/main/java/net/minecraft/server/EnumProtocol.java
--- a/src/main/java/net/minecraft/server/EnumProtocol.java
+++ b/src/main/java/net/minecraft/server/EnumProtocol.java
@@ -8,6 +8,16 @@ import java.util.Map;
 import javax.annotation.Nullable;
 import org.apache.logging.log4j.LogManager;
 
+// SportBukkit start
+import com.google.common.base.Predicate;
+import com.google.common.collect.HashBasedTable;
+import com.google.common.collect.Range;
+import com.google.common.collect.Table;
+
+import org.bukkit.craftbukkit.protocol.PacketPlayOutUpdateSign;
+import org.bukkit.craftbukkit.protocol.Protocol;
+// SportBukkit end
+
 public enum EnumProtocol {
 
     HANDSHAKING(-1) {;
@@ -86,6 +96,7 @@ public enum EnumProtocol {
         this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutSpawnPosition.class);
         this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutUpdateTime.class);
         this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutTitle.class);
+        register(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutUpdateSign.class, Range.lessThan(110)); // SportBukkit
         this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutNamedSoundEffect.class);
         this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutPlayerListHeaderFooter.class);
         this.a(EnumProtocolDirection.CLIENTBOUND, PacketPlayOutCollect.class);
@@ -144,20 +155,33 @@ public enum EnumProtocol {
     private static final EnumProtocol[] e = new EnumProtocol[4];
     private static final Map<Class<? extends Packet<?>>, EnumProtocol> f = Maps.newHashMap();
     private final int g;
-    private final Map<EnumProtocolDirection, BiMap<Integer, Class<? extends Packet<?>>>> h;
+    // SportBukkit start - multi-protocol
+    //private final Map<EnumProtocolDirection, BiMap<Integer, Class<? extends Packet<?>>>> h;
+    public final Table<Integer, EnumProtocolDirection, BiMap<Integer, Class<? extends Packet<?>>>> h = HashBasedTable.create();
+    // SportBukkit end
 
     private EnumProtocol(int i) {
-        this.h = Maps.newEnumMap(EnumProtocolDirection.class);
+        //this.h = Maps.newEnumMap(EnumProtocolDirection.class); // SportBukkit
         this.g = i;
     }
 
     protected EnumProtocol a(EnumProtocolDirection enumprotocoldirection, Class<? extends Packet<?>> oclass) {
-        BiMap<Integer, Class<? extends Packet<?>>> object = (BiMap) this.h.get(enumprotocoldirection); // SportBukkit - fix decomp error
+        // SportBukkit start - multi-protocol
+        return register(enumprotocoldirection, oclass, Range.all());
+    }
 
-        if (object == null) {
+    protected EnumProtocol register(EnumProtocolDirection direction, Class<? extends Packet<?>> packet, Predicate<Integer> protos) {
+        Protocol.supported(protos).forEach(proto -> register(direction, packet, proto));
+        return this;
+    }
+
+    protected EnumProtocol register(EnumProtocolDirection enumprotocoldirection, Class<? extends Packet<?>> oclass, int proto) {
+        BiMap<Integer, Class<? extends Packet<?>>> object = h.get(proto, enumprotocoldirection);
+        if(object == null) {
             object = HashBiMap.create();
-            this.h.put(enumprotocoldirection, object);
+            h.put(proto, enumprotocoldirection, object);
         }
+        // SportBukkit end
 
         if (((BiMap) object).containsValue(oclass)) {
             String s = enumprotocoldirection + " packet " + oclass + " is already known to ID " + ((BiMap) object).inverse().get(oclass);
@@ -170,13 +194,33 @@ public enum EnumProtocol {
         }
     }
 
-    public Integer a(EnumProtocolDirection enumprotocoldirection, Packet<?> packet) {
-        return (Integer) ((BiMap) this.h.get(enumprotocoldirection)).inverse().get(packet.getClass());
+    // SportBukkit start - multi-protocol
+    public BiMap<Integer, Class<? extends Packet<?>>> packets(EnumProtocolDirection direction, int proto) {
+        final BiMap<Integer, Class<? extends Packet<?>>> map = h.get(proto, direction);
+        if(map == null) {
+            throw new IllegalArgumentException("No packet map for protocol " + proto + " " + this + " " + direction);
+        }
+        return map;
+    }
+
+    public int packetId(EnumProtocolDirection direction, Class<? extends Packet<?>> packet, int proto) {
+        final Integer id = packets(direction, proto).inverse().get(packet);
+        if(id == null) {
+            throw new IllegalArgumentException("No ID for packet " + packet.getSimpleName() + " in proto " + proto + " " + this + " " + direction);
+        }
+        return id;
+    }
+
+    public Integer a(EnumProtocolDirection enumprotocoldirection, Packet<?> packet, int proto) {
+        return packets(enumprotocoldirection, proto).inverse().get(packet.getClass());
+        // return (Integer) ((BiMap) this.h.get(enumprotocoldirection)).inverse().get(packet.getClass());
     }
 
     @Nullable
-    public Packet<?> a(EnumProtocolDirection enumprotocoldirection, int i) throws IllegalAccessException, InstantiationException {
-        Class oclass = (Class) ((BiMap) this.h.get(enumprotocoldirection)).get(Integer.valueOf(i));
+    public Packet<?> a(EnumProtocolDirection enumprotocoldirection, int i, int proto) throws IllegalAccessException, InstantiationException {
+        final Class<? extends Packet<?>> oclass = packets(enumprotocoldirection, proto).get(i);
+        // Class oclass = (Class) ((BiMap) this.h.get(enumprotocoldirection)).get(Integer.valueOf(i));
+        // SportBukkit end
 
         return oclass == null ? null : (Packet) oclass.newInstance();
     }
@@ -210,14 +254,15 @@ public enum EnumProtocol {
             }
 
             EnumProtocol.e[k - -1] = enumprotocol;
-            Iterator iterator = enumprotocol.h.keySet().iterator();
+            for(int proto : Protocol.SUPPORTED) { // SportBukkit - multi-protocol
+            Iterator iterator = enumprotocol.h.columnKeySet().iterator(); // SportBukkit
 
             while (iterator.hasNext()) {
                 EnumProtocolDirection enumprotocoldirection = (EnumProtocolDirection) iterator.next();
 
                 Class oclass;
 
-                for (Iterator iterator1 = ((BiMap) enumprotocol.h.get(enumprotocoldirection)).values().iterator(); iterator1.hasNext(); EnumProtocol.f.put(oclass, enumprotocol)) {
+                for (Iterator iterator1 = ((BiMap) enumprotocol.h.get(proto, enumprotocoldirection)).values().iterator(); iterator1.hasNext(); EnumProtocol.f.put(oclass, enumprotocol)) { // SportBukkit
                     oclass = (Class) iterator1.next();
                     if (EnumProtocol.f.containsKey(oclass) && EnumProtocol.f.get(oclass) != enumprotocol) {
                         throw new Error("Packet " + oclass + " is already assigned to protocol " + EnumProtocol.f.get(oclass) + " - can\'t reassign to " + enumprotocol);
@@ -229,6 +274,7 @@ public enum EnumProtocol {
                         throw new Error("Packet " + oclass + " fails instantiation checks! " + oclass);
                     }
                 }
+            } // SportBukkit
             }
         }
 
diff --git a/src/main/java/net/minecraft/server/HandshakeListener.java b/src/main/java/net/minecraft/server/HandshakeListener.java
--- a/src/main/java/net/minecraft/server/HandshakeListener.java
+++ b/src/main/java/net/minecraft/server/HandshakeListener.java
@@ -65,7 +65,7 @@ public class HandshakeListener implements PacketHandshakingInListener {
                 chatcomponenttext = new ChatComponentText("Outdated server! I\'m still on 1.11.1");
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
-            } else if (packethandshakinginsetprotocol.b() < 316) {
+            } else if (packethandshakinginsetprotocol.b() < 107) { // SportBukkit - legacy protocol support
                 chatcomponenttext = new ChatComponentText("Outdated client! Please use 1.11.1");
                 this.b.sendPacket(new PacketLoginOutDisconnect(chatcomponenttext));
                 this.b.close(chatcomponenttext);
diff --git a/src/main/java/net/minecraft/server/Item.java b/src/main/java/net/minecraft/server/Item.java
--- a/src/main/java/net/minecraft/server/Item.java
+++ b/src/main/java/net/minecraft/server/Item.java
@@ -32,6 +32,15 @@ public class Item {
     private Item craftingResult;
     private String name;
 
+    // SportBukkit start - minimum protocol version
+    private int proto;
+    public int proto() { return proto; }
+    public Item proto(int p) {
+        this.proto = p;
+        return this;
+    }
+    // SportBukkit end
+
     public static int getId(Item item) {
         return item == null ? 0 : Item.REGISTRY.a(item); // SportBukkit - fix decomp error
     }
@@ -508,7 +517,7 @@ public class Item {
         a(Blocks.dy, (Item) (new ItemShulkerBox(Blocks.dy)));
         a(Blocks.dz, (Item) (new ItemShulkerBox(Blocks.dz)));
         a(Blocks.dA, (Item) (new ItemShulkerBox(Blocks.dA)));
-        b(Blocks.STRUCTURE_BLOCK);
+        /* b(Blocks.STRUCTURE_BLOCK); */ a(Blocks.STRUCTURE_BLOCK, new ItemBlock(Blocks.STRUCTURE_BLOCK).proto(201)); // SportBukkit - proto (block was in 1.9, but not an item until 1.10)
         a(256, "iron_shovel", (new ItemSpade(Item.EnumToolMaterial.IRON)).c("shovelIron"));
         a(257, "iron_pickaxe", (new ItemPickaxe(Item.EnumToolMaterial.IRON)).c("pickaxeIron"));
         a(258, "iron_axe", (new ItemAxe(Item.EnumToolMaterial.IRON)).c("hatchetIron"));
@@ -706,9 +715,9 @@ public class Item {
         a(446, "jungle_boat", new ItemBoat(EntityBoat.EnumBoatType.JUNGLE));
         a(447, "acacia_boat", new ItemBoat(EntityBoat.EnumBoatType.ACACIA));
         a(448, "dark_oak_boat", new ItemBoat(EntityBoat.EnumBoatType.DARK_OAK));
-        a(449, "totem_of_undying", (new Item()).c("totem").d(1).a(CreativeModeTab.j));
-        a(450, "shulker_shell", (new Item()).c("shulkerShell").a(CreativeModeTab.l));
-        a(452, "iron_nugget", (new Item()).c("ironNugget").a(CreativeModeTab.l));
+        a(449, "totem_of_undying", (new Item()).c("totem").d(1).a(CreativeModeTab.j).proto(307)); // SportBukkit - proto
+        a(450, "shulker_shell", (new Item()).c("shulkerShell").a(CreativeModeTab.l).proto(307)); // SportBukkit - proto
+        a(452, "iron_nugget", (new Item()).c("ironNugget").a(CreativeModeTab.l).proto(316)); // SportBukkit - proto
         a(2256, "record_13", (new ItemRecord("13", SoundEffects.fa)).c("record"));
         a(2257, "record_cat", (new ItemRecord("cat", SoundEffects.fc)).c("record"));
         a(2258, "record_blocks", (new ItemRecord("blocks", SoundEffects.fb)).c("record"));
diff --git a/src/main/java/net/minecraft/server/ItemBlock.java b/src/main/java/net/minecraft/server/ItemBlock.java
--- a/src/main/java/net/minecraft/server/ItemBlock.java
+++ b/src/main/java/net/minecraft/server/ItemBlock.java
@@ -8,6 +8,7 @@ public class ItemBlock extends Item {
 
     public ItemBlock(Block block) {
         this.a = block;
+        proto(block.proto()); // SportBukkit - copy proto from block to item
     }
 
     public EnumInteractionResult a(EntityHuman entityhuman, World world, BlockPosition blockposition, EnumHand enumhand, EnumDirection enumdirection, float f, float f1, float f2) {
diff --git a/src/main/java/net/minecraft/server/NetworkManager.java b/src/main/java/net/minecraft/server/NetworkManager.java
--- a/src/main/java/net/minecraft/server/NetworkManager.java
+++ b/src/main/java/net/minecraft/server/NetworkManager.java
@@ -28,6 +28,8 @@ import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
 import org.apache.logging.log4j.MarkerManager;
 
+import org.bukkit.craftbukkit.protocol.Protocol; // SportBukkit
+
 public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
 
     private static final Logger g = LogManager.getLogger();
@@ -70,7 +72,7 @@ public class NetworkManager extends SimpleChannelInboundHandler<Packet<?>> {
     public java.util.UUID spoofedUUID;
     public com.mojang.authlib.properties.Property[] spoofedProfile;
     // SportBukkit End
-    public int protocolVersion; // SportBukkit
+    public int protocolVersion = Protocol.LATEST; // SportBukkit
     private PacketListener m;
     private IChatBaseComponent n;
     private boolean o;
diff --git a/src/main/java/net/minecraft/server/PacketDataSerializer.java b/src/main/java/net/minecraft/server/PacketDataSerializer.java
--- a/src/main/java/net/minecraft/server/PacketDataSerializer.java
+++ b/src/main/java/net/minecraft/server/PacketDataSerializer.java
@@ -22,9 +22,12 @@ import java.util.UUID;
 import javax.annotation.Nullable;
 
 import org.bukkit.craftbukkit.inventory.CraftItemStack; // CraftBukkit
+import org.bukkit.craftbukkit.protocol.Protocol; // SportBukkit
 
 public class PacketDataSerializer extends ByteBuf {
 
+    public int protocolVersion = Protocol.LATEST; // SportBukkit
+
     private final ByteBuf a;
 
     public PacketDataSerializer(ByteBuf bytebuf) {
@@ -116,6 +119,7 @@ public class PacketDataSerializer extends ByteBuf {
         return BlockPosition.fromLong(this.readLong());
     }
 
+    public PacketDataSerializer writeBlockPosition(BlockPosition pos) { return a(pos); } // SportBukkit - alias
     public PacketDataSerializer a(BlockPosition blockposition) {
         this.writeLong(blockposition.asLong());
         return this;
@@ -125,6 +129,7 @@ public class PacketDataSerializer extends ByteBuf {
         return IChatBaseComponent.ChatSerializer.a(this.e(32767));
     }
 
+    public PacketDataSerializer writeChatComponent(IChatBaseComponent chat) { return a(chat); } // SportBukkit - alias
     public PacketDataSerializer a(IChatBaseComponent ichatbasecomponent) {
         return this.a(IChatBaseComponent.ChatSerializer.a(ichatbasecomponent));
     }
@@ -133,10 +138,12 @@ public class PacketDataSerializer extends ByteBuf {
         return ((T[]) oclass.getEnumConstants())[this.g()]; // CraftBukkit - fix decompile error
     }
 
+    public PacketDataSerializer writeOrdinal(Enum<?> e) { return a(e); } // SportBukkit - alias
     public PacketDataSerializer a(Enum<?> oenum) {
         return this.d(oenum.ordinal());
     }
 
+    public int readVarInt() { return g(); } // SportBukkit - alias
     public int g() {
         int i = 0;
         int j = 0;
@@ -181,6 +188,7 @@ public class PacketDataSerializer extends ByteBuf {
         return new UUID(this.readLong(), this.readLong());
     }
 
+    public PacketDataSerializer writeVarInt(int i) { return d(i); } // SportBukkit - alias
     public PacketDataSerializer d(int i) {
         while ((i & -128) != 0) {
             this.writeByte(i & 127 | 128);
@@ -236,6 +244,10 @@ public class PacketDataSerializer extends ByteBuf {
     public PacketDataSerializer a(ItemStack itemstack) {
         if (itemstack.isEmpty() || itemstack.getItem() == null) { // CraftBukkit - NPE fix itemstack.getItem()
             this.writeShort(-1);
+        // SportBukkit start - legacy clients will crash if they get an unknown item
+        } else if(protocolVersion < itemstack.getItem().proto()) {
+            this.writeShort(-1);
+        // SportBukkit end
         } else {
             this.writeShort(Item.getId(itemstack.getItem()));
             this.writeByte(itemstack.getCount());
diff --git a/src/main/java/net/minecraft/server/PacketDecoder.java b/src/main/java/net/minecraft/server/PacketDecoder.java
--- a/src/main/java/net/minecraft/server/PacketDecoder.java
+++ b/src/main/java/net/minecraft/server/PacketDecoder.java
@@ -24,7 +24,12 @@ public class PacketDecoder extends ByteToMessageDecoder {
         if (bytebuf.readableBytes() != 0) {
             PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
             int i = packetdataserializer.g();
-            Packet packet = ((EnumProtocol) channelhandlercontext.channel().attr(NetworkManager.c).get()).a(this.c, i);
+
+            // SportBukkit start
+            final NetworkManager networkManager = channelhandlercontext.pipeline().get(NetworkManager.class);
+            packetdataserializer.protocolVersion = networkManager.protocolVersion;
+            Packet packet = ((EnumProtocol) channelhandlercontext.channel().attr(NetworkManager.c).get()).a(this.c, i, networkManager.protocolVersion);
+            // SportBukkit end
 
             if (packet == null) {
                 throw new IOException("Bad packet id " + i);
diff --git a/src/main/java/net/minecraft/server/PacketEncoder.java b/src/main/java/net/minecraft/server/PacketEncoder.java
--- a/src/main/java/net/minecraft/server/PacketEncoder.java
+++ b/src/main/java/net/minecraft/server/PacketEncoder.java
@@ -20,7 +20,10 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
     }
 
     protected void a(ChannelHandlerContext channelhandlercontext, Packet<?> packet, ByteBuf bytebuf) throws Exception {
-        Integer integer = ((EnumProtocol) channelhandlercontext.channel().attr(NetworkManager.c).get()).a(this.c, packet);
+        // SportBukiit start
+        final NetworkManager networkManager = channelhandlercontext.pipeline().get(NetworkManager.class);
+        Integer integer = ((EnumProtocol) channelhandlercontext.channel().attr(NetworkManager.c).get()).a(this.c, packet, networkManager.protocolVersion);
+        // SportBukiit end
 
         if (PacketEncoder.a.isDebugEnabled()) {
             PacketEncoder.a.debug(PacketEncoder.b, "OUT: [{}:{}] {}", new Object[] { channelhandlercontext.channel().attr(NetworkManager.c).get(), integer, packet.getClass().getName()});
@@ -30,6 +33,7 @@ public class PacketEncoder extends MessageToByteEncoder<Packet<?>> {
             throw new IOException("Can\'t serialize unregistered packet");
         } else {
             PacketDataSerializer packetdataserializer = new PacketDataSerializer(bytebuf);
+            packetdataserializer.protocolVersion = networkManager.protocolVersion; // SportBukkit - set proto
 
             packetdataserializer.d(integer.intValue());
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java b/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
--- a/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInResourcePackStatus.java
@@ -13,10 +13,20 @@ public class PacketPlayInResourcePackStatus implements Packet<PacketListenerPlay
     }
 
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 204) {
+            packetdataserializer.e(40);
+        }
+        // SportBukkit end
         this.status = (PacketPlayInResourcePackStatus.EnumResourcePackStatus) packetdataserializer.a(PacketPlayInResourcePackStatus.EnumResourcePackStatus.class);
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 204) {
+            packetdataserializer.a("0123456789012345678901234567890123456789");
+        }
+        // SportBukkit end
         packetdataserializer.a((Enum) this.status);
     }
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayInUseItem.java b/src/main/java/net/minecraft/server/PacketPlayInUseItem.java
--- a/src/main/java/net/minecraft/server/PacketPlayInUseItem.java
+++ b/src/main/java/net/minecraft/server/PacketPlayInUseItem.java
@@ -17,18 +17,34 @@ public class PacketPlayInUseItem implements Packet<PacketListenerPlayIn> {
         this.a = packetdataserializer.e();
         this.b = (EnumDirection) packetdataserializer.a(EnumDirection.class);
         this.c = (EnumHand) packetdataserializer.a(EnumHand.class);
-        this.d = packetdataserializer.readFloat();
-        this.e = packetdataserializer.readFloat();
-        this.f = packetdataserializer.readFloat();
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 309) {
+            this.d = (float) packetdataserializer.readUnsignedByte() / 16.0F;
+            this.e = (float) packetdataserializer.readUnsignedByte() / 16.0F;
+            this.f = (float) packetdataserializer.readUnsignedByte() / 16.0F;
+        } else {
+            this.d = packetdataserializer.readFloat();
+            this.e = packetdataserializer.readFloat();
+            this.f = packetdataserializer.readFloat();
+        }
+        // SportBukkit end
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
         packetdataserializer.a(this.a);
         packetdataserializer.a((Enum) this.b);
         packetdataserializer.a((Enum) this.c);
-        packetdataserializer.writeFloat(this.d);
-        packetdataserializer.writeFloat(this.e);
-        packetdataserializer.writeFloat(this.f);
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 309) {
+            packetdataserializer.writeByte((int) (this.d * 16.0F));
+            packetdataserializer.writeByte((int) (this.e * 16.0F));
+            packetdataserializer.writeByte((int) (this.f * 16.0F));
+        } else {
+            packetdataserializer.writeFloat(this.d);
+            packetdataserializer.writeFloat(this.e);
+            packetdataserializer.writeFloat(this.f);
+        }
+        // SportBukkit end
     }
 
     public void a(PacketListenerPlayIn packetlistenerplayin) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutCollect.java b/src/main/java/net/minecraft/server/PacketPlayOutCollect.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutCollect.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutCollect.java
@@ -19,13 +19,21 @@ public class PacketPlayOutCollect implements Packet<PacketListenerPlayOut> {
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.a = packetdataserializer.g();
         this.b = packetdataserializer.g();
-        this.c = packetdataserializer.g();
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion >= 301) {
+            this.c = packetdataserializer.readVarInt();
+        }
+        // SportBukkit end
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
         packetdataserializer.d(this.a);
         packetdataserializer.d(this.b);
-        packetdataserializer.d(this.c);
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion >= 301) {
+            packetdataserializer.writeVarInt(this.c);
+        }
+        // SportBukkit end
     }
 
     public void a(PacketListenerPlayOut packetlistenerplayout) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutCustomSoundEffect.java b/src/main/java/net/minecraft/server/PacketPlayOutCustomSoundEffect.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutCustomSoundEffect.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutCustomSoundEffect.java
@@ -15,6 +15,19 @@ public class PacketPlayOutCustomSoundEffect implements Packet<PacketListenerPlay
 
     public PacketPlayOutCustomSoundEffect() {}
 
+    // SportBukkit start - Add constructor that takes a SoundEffect.
+    // To make legacy support easy, we use this packet for ALL sounds,
+    // replacing all uses of PacketPlayOutNamedSoundEffect which,
+    // contrary to what its name would suggest, does NOT use names at all,
+    // but rather unstable numeric IDs that change between protocol versions.
+    // This packet DOES use names, and as far as I can tell, it can play all
+    // the same sounds as PacketPlayOutNamedSoundEffect, so there is no reason
+    // to ever use the latter.
+    public PacketPlayOutCustomSoundEffect(SoundEffect s, SoundCategory soundcategory, double d0, double d1, double d2, float f, float f1) {
+        this(SoundEffect.a.b(s).a(), soundcategory, d0, d1, d2, f, f1);
+    }
+    // SportBukkit end
+
     public PacketPlayOutCustomSoundEffect(String s, SoundCategory soundcategory, double d0, double d1, double d2, float f, float f1) {
         Validate.notNull(s, "name", new Object[0]);
         this.a = s;
@@ -33,7 +46,13 @@ public class PacketPlayOutCustomSoundEffect implements Packet<PacketListenerPlay
         this.d = packetdataserializer.readInt();
         this.e = packetdataserializer.readInt();
         this.f = packetdataserializer.readFloat();
-        this.g = packetdataserializer.readFloat();
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 201) {
+            this.g = ((float) packetdataserializer.readUnsignedByte()) / 63f;
+        } else {
+            this.g = packetdataserializer.readFloat();
+        }
+        // SportBukkit end
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
@@ -43,7 +62,13 @@ public class PacketPlayOutCustomSoundEffect implements Packet<PacketListenerPlay
         packetdataserializer.writeInt(this.d);
         packetdataserializer.writeInt(this.e);
         packetdataserializer.writeFloat(this.f);
-        packetdataserializer.writeFloat(this.g);
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 201) {
+            packetdataserializer.writeByte((byte) (this.g * 63f));
+        } else {
+            packetdataserializer.writeFloat(this.g);
+        }
+        // SportBukkit end
     }
 
     public void a(PacketListenerPlayOut packetlistenerplayout) {
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutLogin.java b/src/main/java/net/minecraft/server/PacketPlayOutLogin.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutLogin.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutLogin.java
@@ -54,7 +54,13 @@ public class PacketPlayOutLogin implements Packet<PacketListenerPlayOut> {
         }
 
         packetdataserializer.writeByte(i);
-        packetdataserializer.writeInt(this.d);
+        // SportBukkit start
+        if (packetdataserializer.protocolVersion < 108) {
+            packetdataserializer.writeByte(this.d);
+        } else {
+            packetdataserializer.writeInt(this.d);
+        }
+        // SportBukkit end
         packetdataserializer.writeByte(this.e.a());
         packetdataserializer.writeByte(this.f);
         packetdataserializer.a(this.g.name());
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutMapChunk.java
@@ -75,6 +75,7 @@ public class PacketPlayOutMapChunk implements Packet<PacketListenerPlayOut> {
         packetdataserializer.d(this.c);
         packetdataserializer.d(this.d.length);
         packetdataserializer.writeBytes(this.d);
+        if(packetdataserializer.protocolVersion < 110) return; // SportBukkit
         packetdataserializer.d(this.e.size());
         Iterator iterator = this.e.iterator();
 
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutSpawnEntityLiving.java
@@ -94,7 +94,13 @@ public class PacketPlayOutSpawnEntityLiving implements Packet<PacketListenerPlay
     public void a(PacketDataSerializer packetdataserializer) throws IOException {
         this.a = packetdataserializer.g();
         this.b = packetdataserializer.i();
-        this.c = packetdataserializer.g();
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 301) {
+            this.c = packetdataserializer.readByte();
+        } else {
+            this.c = packetdataserializer.readVarInt();
+        }
+        // SportBukkit end
         this.d = packetdataserializer.readDouble();
         this.e = packetdataserializer.readDouble();
         this.f = packetdataserializer.readDouble();
@@ -110,7 +116,13 @@ public class PacketPlayOutSpawnEntityLiving implements Packet<PacketListenerPlay
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
         packetdataserializer.d(this.a);
         packetdataserializer.a(this.b);
-        packetdataserializer.d(this.c);
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 301) {
+            packetdataserializer.writeByte(this.c);
+        } else {
+            packetdataserializer.writeVarInt(this.c);
+        }
+        // SportBukkit end
         packetdataserializer.writeDouble(this.d);
         packetdataserializer.writeDouble(this.e);
         packetdataserializer.writeDouble(this.f);
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java b/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTileEntityData.java
@@ -2,6 +2,8 @@ package net.minecraft.server;
 
 import java.io.IOException;
 
+import org.bukkit.craftbukkit.protocol.PacketPlayOutUpdateSign; // SportBukkit
+
 public class PacketPlayOutTileEntityData implements Packet<PacketListenerPlayOut> {
 
     private BlockPosition a;
@@ -23,6 +25,20 @@ public class PacketPlayOutTileEntityData implements Packet<PacketListenerPlayOut
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
+        // SportBukkit start - Sign Update packet replaced with TileEntityData packet
+        if(b == 9 && packetdataserializer.protocolVersion < 110) {
+            // Fake a sign update packet by backing up and rewriting the packet ID
+            packetdataserializer.writerIndex(packetdataserializer.writerIndex() - 1);
+            packetdataserializer.writeVarInt(EnumProtocol.PLAY.packetId(EnumProtocolDirection.CLIENTBOUND,
+                                                                        PacketPlayOutUpdateSign.class,
+                                                                        packetdataserializer.protocolVersion));
+            packetdataserializer.writeBlockPosition(this.a);
+            for(int line = 0; line < 4; line++) {
+                packetdataserializer.writeChatComponent(IChatBaseComponent.ChatSerializer.a(c.getString("Text" + (line + 1))));
+            }
+            return;
+        }
+        // SportBukkit end
         packetdataserializer.a(this.a);
         packetdataserializer.writeByte((byte) this.b);
         packetdataserializer.a(this.c);
diff --git a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
--- a/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
+++ b/src/main/java/net/minecraft/server/PacketPlayOutTitle.java
@@ -57,7 +57,14 @@ public class PacketPlayOutTitle implements Packet<PacketListenerPlayOut> {
     }
 
     public void b(PacketDataSerializer packetdataserializer) throws IOException {
-        packetdataserializer.a((Enum) this.a);
+        // SportBukkit start
+        if(packetdataserializer.protocolVersion < 305 && this.a.ordinal() >= 2) {
+            // ACTIONBAR doesn't exist
+            packetdataserializer.writeVarInt(this.a.ordinal() - 1);
+        } else {
+            packetdataserializer.writeOrdinal(this.a);
+        }
+        // SportBukkit end
         if (this.a == PacketPlayOutTitle.EnumTitleAction.TITLE || this.a == PacketPlayOutTitle.EnumTitleAction.SUBTITLE || this.a == PacketPlayOutTitle.EnumTitleAction.ACTIONBAR) {
             // SportBukkit start
             if(this.components != null) {
diff --git a/src/main/java/net/minecraft/server/PlayerChunk.java b/src/main/java/net/minecraft/server/PlayerChunk.java
--- a/src/main/java/net/minecraft/server/PlayerChunk.java
+++ b/src/main/java/net/minecraft/server/PlayerChunk.java
@@ -36,6 +36,33 @@ public class PlayerChunk {
     };
     // CraftBukkit end
 
+    // SportBukkit start
+    private List<Packet> getTileEntityPackets(int sectionMask) {
+        final List<Packet> packets = new java.util.ArrayList<Packet>();
+        for(TileEntity tile : chunk.getTileEntities().values()) {
+            if((sectionMask & (1 << (tile.getPosition().getY() >> 4))) != 0) {
+                final Packet packet = tile.getUpdatePacket();
+                if(packet != null) packets.add(packet);
+            }
+        }
+        return packets;
+    }
+
+    private void sendLegacyTileEntityUpdates(int sectionMask, java.util.Collection<EntityPlayer> players) {
+        if(sectionMask == 0 || players.isEmpty()) return;
+        List<Packet> packets = null;
+        for(EntityPlayer viewer : players) {
+            if(viewer.protocolVersion < 110) {
+                if(packets == null) {
+                    packets = getTileEntityPackets(sectionMask);
+                    if(packets.isEmpty()) return;
+                }
+                for(Packet packet : packets) viewer.playerConnection.sendPacket(packet);
+            }
+        }
+    }
+    // SportBukkit end
+
     public PlayerChunk(PlayerChunkMap playerchunkmap, int i, int j) {
         this.playerChunkMap = playerchunkmap;
         this.location = new ChunkCoordIntPair(i, j);
@@ -138,6 +165,7 @@ public class PlayerChunk {
                 this.playerChunkMap.getWorld().getTracker().a(entityplayer, this.chunk);
             }
 
+            sendLegacyTileEntityUpdates(0xffff, this.c); // SportBukkit
             return true;
         }
     }
@@ -146,6 +174,7 @@ public class PlayerChunk {
         if (this.done) {
             entityplayer.playerConnection.sendPacket(new PacketPlayOutMapChunk(this.chunk, '\uffff'));
             this.playerChunkMap.getWorld().getTracker().a(entityplayer, this.chunk);
+            sendLegacyTileEntityUpdates(0xffff, java.util.Collections.singleton(entityplayer)); // SportBukkit
         }
     }
 
@@ -209,6 +238,7 @@ public class PlayerChunk {
                     }
                 } else if (this.dirtyCount == 64) {
                     this.a((Packet) (new PacketPlayOutMapChunk(this.chunk, this.h)));
+                    sendLegacyTileEntityUpdates(this.h, this.c); // SportBukkit
                 } else {
                     this.a((Packet) (new PacketPlayOutMultiBlockChange(this.dirtyCount, this.dirtyBlocks, this.chunk)));
 
diff --git a/src/main/java/net/minecraft/server/PlayerConnection.java b/src/main/java/net/minecraft/server/PlayerConnection.java
--- a/src/main/java/net/minecraft/server/PlayerConnection.java
+++ b/src/main/java/net/minecraft/server/PlayerConnection.java
@@ -1249,7 +1249,7 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                                 PacketPlayOutEntityMetadata replacedMetadataPacket = new PacketPlayOutEntityMetadata();
                                 replacedMetadataPacket.a = metadataPacket.a;
                                 replacedMetadataPacket.b = new ArrayList(metadataPacket.b);
-                                final DataWatcher.Item replacementItem = new DataWatcher.Item(flagsItem.a(), (byte) (entityFlags & ~0x20));
+                                final DataWatcher.Item replacementItem = new DataWatcher.Item(flagsItem.entityClass, flagsItem.a(), (byte) (entityFlags & ~0x20));
                                 replacementItem.a(flagsItem.c());
                                 replacedMetadataPacket.b.set(i, replacementItem); // Clear invisibility
 
@@ -2596,10 +2596,13 @@ public class PlayerConnection implements PacketListenerPlayIn, ITickable {
                                 tileentitystructure.b(EnumBlockRotation.valueOf(s6));
                                 tileentitystructure.b(packetdataserializer.e(128));
                                 tileentitystructure.a(packetdataserializer.readBoolean());
+                                if(packetdataserializer.protocolVersion >= 201) { // SportBukkit - legacy proto translation
                                 tileentitystructure.e(packetdataserializer.readBoolean());
                                 tileentitystructure.f(packetdataserializer.readBoolean());
+                                if(packetdataserializer.protocolVersion >= 202) { // SportBukkit
                                 tileentitystructure.a(MathHelper.a(packetdataserializer.readFloat(), 0.0F, 1.0F));
                                 tileentitystructure.a(packetdataserializer.h());
+                                }} // SportBukkit
                                 String s7 = tileentitystructure.a();
 
                                 if (b1 == 2) {
diff --git a/src/main/java/net/minecraft/server/WorldManager.java b/src/main/java/net/minecraft/server/WorldManager.java
--- a/src/main/java/net/minecraft/server/WorldManager.java
+++ b/src/main/java/net/minecraft/server/WorldManager.java
@@ -36,7 +36,7 @@ public class WorldManager implements IWorldAccess {
 
     public void a(@Nullable EntityHuman entityhuman, SoundEffect soundeffect, SoundCategory soundcategory, double d0, double d1, double d2, float f, float f1) {
         // CraftBukkit - this.world.dimension
-        this.a.getPlayerList().sendPacketNearby(entityhuman, d0, d1, d2, f > 1.0F ? (double) (16.0F * f) : 16.0D, this.world.dimension, new PacketPlayOutNamedSoundEffect(soundeffect, soundcategory, d0, d1, d2, f, f1));
+        this.a.getPlayerList().sendPacketNearby(entityhuman, d0, d1, d2, f > 1.0F ? (double) (16.0F * f) : 16.0D, this.world.dimension, new PacketPlayOutCustomSoundEffect(soundeffect, soundcategory, d0, d1, d2, f, f1)); // SportBukkit - Used named sounds
     }
 
     public void a(int i, int j, int k, int l, int i1, int j1) {}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -77,6 +77,7 @@ import org.bukkit.craftbukkit.metadata.EntityMetadataStore;
 import org.bukkit.craftbukkit.metadata.PlayerMetadataStore;
 import org.bukkit.craftbukkit.metadata.WorldMetadataStore;
 import org.bukkit.craftbukkit.potion.CraftPotionBrewer;
+import org.bukkit.craftbukkit.protocol.Protocol;
 import org.bukkit.craftbukkit.scheduler.CraftScheduler;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager;
 import org.bukkit.craftbukkit.util.CraftIconCache;
@@ -1878,7 +1879,7 @@ public final class CraftServer extends CraftBukkitRuntime implements Server {
 
     @Override
     public Set<Integer> getProtocolVersions() {
-        return ImmutableSet.of(315);
+        return Protocol.SUPPORTED;
     }
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -552,7 +552,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         }
 
         float f = (float) Math.pow(2.0D, (note - 12.0D) / 12.0D);
-        getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(CraftSound.getSoundEffect("block.note." + instrumentName), net.minecraft.server.SoundCategory.MUSIC, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f));
+        getHandle().playerConnection.sendPacket(new PacketPlayOutCustomSoundEffect(CraftSound.getSoundEffect("block.note." + instrumentName), net.minecraft.server.SoundCategory.MUSIC, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f));
     }
 
     @Override
@@ -578,7 +578,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
                 break;
         }
         float f = (float) Math.pow(2.0D, (note.getId() - 12.0D) / 12.0D);
-        getHandle().playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(CraftSound.getSoundEffect("block.note." + instrumentName), net.minecraft.server.SoundCategory.MUSIC, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f));
+        getHandle().playerConnection.sendPacket(new PacketPlayOutCustomSoundEffect(CraftSound.getSoundEffect("block.note." + instrumentName), net.minecraft.server.SoundCategory.MUSIC, loc.getBlockX(), loc.getBlockY(), loc.getBlockZ(), 3.0f, f));
     }
 
     @Override
@@ -595,7 +595,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void playSound(Location loc, Sound sound, org.bukkit.SoundCategory category, float volume, float pitch) {
         if (loc == null || sound == null || category == null || getHandle().playerConnection == null) return;
 
-        PacketPlayOutNamedSoundEffect packet = new PacketPlayOutNamedSoundEffect(CraftSound.getSoundEffect(CraftSound.getSound(sound)), net.minecraft.server.SoundCategory.valueOf(category.name()), loc.getX(), loc.getY(), loc.getZ(), volume, pitch);
+        PacketPlayOutCustomSoundEffect packet = new PacketPlayOutCustomSoundEffect(CraftSound.getSoundEffect(CraftSound.getSound(sound)), net.minecraft.server.SoundCategory.valueOf(category.name()), loc.getX(), loc.getY(), loc.getZ(), volume, pitch);
         getHandle().playerConnection.sendPacket(packet);
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/protocol/MetadataKey.java b/src/main/java/org/bukkit/craftbukkit/protocol/MetadataKey.java
new file mode 100644
index 0000000..0948a3c
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/protocol/MetadataKey.java
@@ -0,0 +1,214 @@
+package org.bukkit.craftbukkit.protocol;
+
+import java.util.OptionalInt;
+import java.util.Set;
+import java.util.function.UnaryOperator;
+
+import com.google.common.collect.HashBasedTable;
+import com.google.common.collect.HashMultimap;
+import com.google.common.collect.ImmutableListMultimap;
+import com.google.common.collect.ImmutableTable;
+import com.google.common.collect.ListMultimap;
+import com.google.common.collect.Range;
+import com.google.common.collect.SetMultimap;
+import com.google.common.collect.Table;
+import io.netty.handler.codec.EncoderException;
+import net.minecraft.server.DataWatcher;
+import net.minecraft.server.DataWatcherObject;
+import net.minecraft.server.DataWatcherRegistry;
+import net.minecraft.server.DataWatcherSerializer;
+import net.minecraft.server.Entity;
+import net.minecraft.server.PacketDataSerializer;
+
+/**
+ * Replacement for DataWatcherObject that supports multiple protocol versions.
+ * A single key can have different IDs for each protocol, or be completely absent
+ * from some protocols. It can also have transforms applied for certain protocols.
+ *
+ * Note that ALL metadata uses this class.
+ */
+public class MetadataKey<T> extends DataWatcherObject<T> {
+
+    // proto -> entity -> count
+    private static final Table<Integer, Class<? extends Entity>, Integer> AUTO_IDS = HashBasedTable.create();
+    private static final SetMultimap<Integer, Class<? extends Entity>> EXPLICIT_IDS = HashMultimap.create();
+
+    private static int autoId(int proto, Class<? extends Entity> entity) {
+        for(Class<? extends Entity> e : EXPLICIT_IDS.get(proto)) {
+            if(e.isAssignableFrom(entity)) {
+                throw new IllegalStateException(
+                    "Cannot generate auto ID for entity " + entity.getSimpleName() +
+                    " in protocol " + proto +
+                    " after explicit ID has been defined for entity " + e.getSimpleName()
+                );
+            }
+        }
+        return autoIdNoCheck(proto, entity);
+    }
+
+    private static int autoIdNoCheck(int proto, Class<? extends Entity> entity) {
+        for(Class<?> cls = entity; Entity.class.isAssignableFrom(cls); cls = cls.getSuperclass()) {
+            final Integer count = AUTO_IDS.get(proto, cls);
+            if(count != null) return count + 1;
+        }
+        return 0;
+    }
+
+    public static <T> MetadataKey<T> auto(Class<? extends Entity> entity, DataWatcherSerializer<T> type, Range<Integer> protos) {
+        return auto(entity, type, Protocol.supported(protos));
+    }
+
+    public static <T> MetadataKey<T> auto(Class<? extends Entity> entity, DataWatcherSerializer<T> type, Set<Integer> protos) {
+        final ImmutableTable.Builder<Integer, Class<? extends Entity>, Integer> ids = ImmutableTable.builder();
+        for(Integer proto : protos) {
+            final int id = autoId(proto, entity);
+            AUTO_IDS.put(proto, entity, id);
+            ids.put(proto, entity, id);
+        }
+        return new MetadataKey<>(type, ids.build(), ImmutableListMultimap.of());
+    }
+
+    private final Table<Integer, Class<? extends Entity>, Integer> ids;
+    private final ListMultimap<Integer, UnaryOperator<T>> transforms;
+
+    private MetadataKey(DataWatcherSerializer<T> type, Table<Integer, Class<? extends Entity>, Integer> ids, ListMultimap<Integer, UnaryOperator<T>> transforms) {
+        super(-1, type);
+        this.ids = ids;
+        this.transforms = transforms;
+
+        //log("MetadataKey");
+        //ids.columnMap().forEach((entity, idmap) -> {
+        //    log("  " + entity.getSimpleName());
+        //    idmap.forEach((proto, id) -> {
+        //        log("    " + proto + " -> " + id);
+        //    });
+        //});
+    }
+
+    private static void log(String s) {
+        System.out.println(s);
+    }
+
+    @Override
+    public boolean equals(Object that) {
+        return this == that;
+    }
+
+    @Override
+    public int hashCode() {
+        return System.identityHashCode(this);
+    }
+
+    @Override
+    public int a() {
+        throw new UnsupportedOperationException();
+    }
+
+    public OptionalInt id(int proto, Class<? extends Entity> entity) {
+        for(Class<?> cls = entity; Entity.class.isAssignableFrom(cls); cls = cls.getSuperclass()) {
+            final Integer id = ids.get(proto, cls);
+            if(id != null) return OptionalInt.of(id);
+        }
+        return OptionalInt.empty();
+    }
+
+    public DataWatcherSerializer<T> type() {
+        return b();
+    }
+
+    public int typeId() {
+        final int typeId = DataWatcherRegistry.b(type());
+        if (typeId < 0) {
+            throw new EncoderException("Unknown serializer type " + type());
+        }
+        return typeId;
+    }
+
+    public void send(PacketDataSerializer serializer, DataWatcher.Item<T> item) {
+        id(serializer.protocolVersion, item.entityClass).ifPresent(id -> {
+            T value = item.value();
+            for(UnaryOperator<T> transform : transforms.get(serializer.protocolVersion)) {
+                value = transform.apply(value);
+            }
+            serializer.writeByte(id);
+            serializer.writeVarInt(typeId());
+            type().a(serializer, item.value());
+        });
+    }
+
+    public static <T> Builder<T> builder(Class<? extends Entity> entity, DataWatcherSerializer<T> type) {
+        return new Builder<>(entity, type);
+    }
+
+    public static class Builder<T> {
+
+        private final Class<? extends Entity> entity;
+        private final DataWatcherSerializer<T> type;
+        private final ImmutableTable.Builder<Integer, Class<? extends Entity>, Integer> ids = ImmutableTable.builder();
+        private final ImmutableListMultimap.Builder<Integer, UnaryOperator<T>> transforms = ImmutableListMultimap.builder();
+
+        public Builder(Class<? extends Entity> entity, DataWatcherSerializer<T> type) {
+            this.type = type;
+            this.entity = entity;
+        }
+
+        public MetadataKey<T> build() {
+            final ImmutableTable<Integer, Class<? extends Entity>, Integer> ids = this.ids.build();
+            ids.rowMap().forEach((proto, column) -> {
+                column.forEach((entity, id) -> {
+                    final int autoId = autoIdNoCheck(proto, entity);
+                    if(id < autoId) {
+                        throw new IllegalStateException(
+                            "Explicit ID " + id +
+                            " is below last auto ID " + autoId +
+                            " for entity " + entity.getSimpleName() +
+                            " in protocol " + proto
+                        );
+                    }
+                    EXPLICIT_IDS.put(proto, entity);
+                });
+            });
+            return new MetadataKey<>(type, ids, transforms.build());
+        }
+
+        public Builder<T> id(int proto, Class<? extends Entity> entity, int id) {
+            ids.put(proto, entity, id);
+            return this;
+        }
+
+        public Builder<T> id(int proto, int id) {
+            return id(proto, entity, id);
+        }
+
+        public Builder<T> id(Set<Integer> protos, Class<? extends Entity> entity, int id) {
+            protos.forEach(proto -> id(proto, entity, id));
+            return this;
+        }
+
+        public Builder<T> id(Set<Integer> protos, int id) {
+            return id(protos, entity, id);
+        }
+
+        public Builder<T> id(Range<Integer> protos, Class<? extends Entity> entity, int id) {
+            return id(Protocol.supported(protos), entity, id);
+        }
+
+        public Builder<T> id(Range<Integer> protos, int id) {
+            return id(protos, entity, id);
+        }
+
+        public Builder<T> transform(int proto, UnaryOperator<T> transform) {
+            transforms.put(proto, transform);
+            return this;
+        }
+
+        public Builder<T> transform(Set<Integer> protos, UnaryOperator<T> transform) {
+            protos.forEach(proto -> transform(proto, transform));
+            return this;
+        }
+
+        public Builder<T> transform(Range<Integer> protos, UnaryOperator<T> transform) {
+            return transform(Protocol.supported(protos), transform);
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/protocol/PacketPlayOutUpdateSign.java b/src/main/java/org/bukkit/craftbukkit/protocol/PacketPlayOutUpdateSign.java
new file mode 100644
index 0000000..0f86fb7
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/protocol/PacketPlayOutUpdateSign.java
@@ -0,0 +1,17 @@
+package org.bukkit.craftbukkit.protocol;
+
+import java.io.IOException;
+
+import net.minecraft.server.Packet;
+import net.minecraft.server.PacketDataSerializer;
+import net.minecraft.server.PacketListenerPlayOut;
+
+/**
+ * This packet is used only as a placeholder. It is never instantiated,
+ * except once in EnumProtocol as a check.
+ */
+public class PacketPlayOutUpdateSign implements Packet<PacketListenerPlayOut> {
+    @Override public void a(PacketDataSerializer packetdataserializer) throws IOException {}
+    @Override public void b(PacketDataSerializer packetdataserializer) throws IOException {}
+    @Override public void a(PacketListenerPlayOut t0) {}
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/protocol/Protocol.java b/src/main/java/org/bukkit/craftbukkit/protocol/Protocol.java
new file mode 100644
index 0000000..ff6f2d9
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/protocol/Protocol.java
@@ -0,0 +1,22 @@
+package org.bukkit.craftbukkit.protocol;
+
+import java.util.Set;
+import java.util.function.Predicate;
+
+import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Sets;
+
+public class Protocol {
+
+    public static final int LATEST = 316;
+    public static final Set<Integer> SUPPORTED = ImmutableSet.of(107, 108, 109, 110, 201, 202, 203, 204, 205, 210, 315, 316);
+
+    public static Set<Integer> supported(Predicate<Integer> filter) {
+        return supported((com.google.common.base.Predicate<Integer>) filter::test);
+    }
+
+    public static Set<Integer> supported(com.google.common.base.Predicate<Integer> filter) {
+        return Sets.filter(SUPPORTED, filter);
+    }
+
+}
