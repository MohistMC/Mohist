From: Jedediah Smith <jedediah@silencegreys.com>
Date: Thu, 10 Mar 2016 15:10:05 -0500
Subject: [PATCH] Registration API


diff --git a/src/main/java/org/bukkit/CraftBukkitRuntime.java b/src/main/java/org/bukkit/CraftBukkitRuntime.java
new file mode 100644
index 0000000..a9a30e8
--- /dev/null
+++ b/src/main/java/org/bukkit/CraftBukkitRuntime.java
@@ -0,0 +1,41 @@
+package org.bukkit;
+
+import net.minecraft.server.DispenserRegistry;
+import org.bukkit.craftbukkit.inventory.CraftItemFactory;
+import org.bukkit.craftbukkit.registry.CraftKey;
+import org.bukkit.registry.Key;
+
+public class CraftBukkitRuntime implements BukkitRuntime {
+
+    public static CraftBukkitRuntime load() {
+        final BukkitRuntime runtime = Bukkit.getRuntime();
+        if(runtime == null) {
+            CraftBukkitRuntime craftBukkitRuntime = new CraftBukkitRuntime();
+            Bukkit.setRuntime(craftBukkitRuntime);
+            return craftBukkitRuntime;
+        } else if(runtime instanceof CraftBukkitRuntime) {
+            return (CraftBukkitRuntime) runtime;
+        } else {
+            throw new IllegalStateException("Bukkit runtime is already set to " + runtime.getClass().getName());
+        }
+    }
+
+    public CraftBukkitRuntime() {
+        DispenserRegistry.c();
+    }
+
+    @Override
+    public Key key(String prefix, String id) {
+        return CraftKey.get(prefix, id);
+    }
+
+    @Override
+    public Key key(String key) {
+        return CraftKey.get(key);
+    }
+
+    @Override
+    public CraftItemFactory getItemFactory() {
+        return CraftItemFactory.instance();
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -28,6 +28,7 @@ import net.minecraft.server.*;
 import org.bukkit.BanList;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
+import org.bukkit.CraftBukkitRuntime;
 import org.bukkit.GameMode;
 import org.bukkit.Location;
 import org.bukkit.OfflinePlayer;
@@ -134,7 +135,7 @@ import org.bukkit.event.server.TabCompleteEvent;
 import net.md_5.bungee.api.chat.BaseComponent;
 import tc.oc.minecraft.api.plugin.PluginFinder;
 
-public final class CraftServer implements Server {
+public final class CraftServer extends CraftBukkitRuntime implements Server {
     private static final Player[] EMPTY_PLAYER_ARRAY = new Player[0];
     private final String serverName = "SportBukkit";
     private final String serverVersion;
diff --git a/src/main/java/org/bukkit/craftbukkit/registry/CraftKey.java b/src/main/java/org/bukkit/craftbukkit/registry/CraftKey.java
new file mode 100644
index 0000000..701bab7
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/registry/CraftKey.java
@@ -0,0 +1,62 @@
+package org.bukkit.craftbukkit.registry;
+
+import net.minecraft.server.MinecraftKey;
+import org.bukkit.registry.Key;
+
+public class CraftKey implements Key {
+
+    private final MinecraftKey handle;
+
+    private CraftKey(MinecraftKey handle) {
+        this.handle = handle;
+    }
+
+    @Override
+    public String prefix() {
+        return handle.b();
+    }
+
+    @Override
+    public String id() {
+        return handle.a();
+    }
+
+    @Override
+    public int hashCode() {
+        return handle.hashCode();
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        return this == o || (
+            o instanceof Key &&
+            prefix().equals(((Key) o).prefix()) &&
+            id().equals(((Key) o).id())
+        );
+    }
+
+    @Override
+    public String toString() {
+        return handle.toString();
+    }
+
+    public static MinecraftKey toNms(Key key) {
+        if(key instanceof CraftKey) {
+            return ((CraftKey) key).handle;
+        } else {
+            return new MinecraftKey(key.prefix(), key.id());
+        }
+    }
+
+    public static Key get(MinecraftKey nms) {
+        return new CraftKey(nms);
+    }
+
+    public static Key get(String prefix, String id) {
+        return get(new MinecraftKey(prefix, id));
+    }
+
+    public static Key get(String key) {
+        return get(new MinecraftKey(key));
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/registry/CraftRegistry.java b/src/main/java/org/bukkit/craftbukkit/registry/CraftRegistry.java
new file mode 100644
index 0000000..7f07bd3
--- /dev/null
+++ b/src/main/java/org/bukkit/craftbukkit/registry/CraftRegistry.java
@@ -0,0 +1,101 @@
+package org.bukkit.craftbukkit.registry;
+
+import java.util.AbstractSet;
+import java.util.Iterator;
+import java.util.NoSuchElementException;
+import java.util.Set;
+
+import com.google.common.base.Function;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
+import com.google.common.collect.Iterators;
+import net.minecraft.server.MinecraftKey;
+import net.minecraft.server.RegistryMaterials;
+import org.bukkit.registry.Key;
+import org.bukkit.registry.Registerable;
+import org.bukkit.registry.Registry;
+
+public abstract class CraftRegistry<V extends Registerable, M> implements Registry<V> {
+
+    private final Class<V> type;
+    private final RegistryMaterials<MinecraftKey, M> handle;
+
+    private final LoadingCache<M, V> bukkitCache = CacheBuilder.newBuilder().build(new CacheLoader<M, V>() {
+        @Override
+        public V load(M nms) throws Exception {
+            return createBukkit(nms);
+        }
+    });
+
+    public CraftRegistry(Class<V> type, RegistryMaterials<MinecraftKey, M> handle) {
+        this.type = type;
+        this.handle = handle;
+    }
+
+    protected abstract V createBukkit(M nms);
+
+    public final V toBukkit(M nms) {
+        return bukkitCache.getUnchecked(nms);
+    }
+
+    protected RegistryMaterials<MinecraftKey, M> handle() {
+        return handle;
+    }
+
+    @Override
+    public V need(Key key) throws NoSuchElementException {
+        final V value = get(key);
+        if(value == null) {
+            throw new NoSuchElementException("No " + type.getName() + " with key " + key);
+        }
+        return value;
+    }
+
+    @Override
+    public V get(Key key) {
+        final M nms = handle.get(CraftKey.toNms(key));
+        return nms == null ? null : bukkitCache.getUnchecked(nms);
+    }
+
+    @Override
+    public boolean containsKey(Key key) {
+        return handle.d(CraftKey.toNms(key));
+    }
+
+    @Override
+    public Set<Key> keySet() {
+        return new AbstractSet<Key>() {
+            @Override
+            public boolean contains(Object o) {
+                return o instanceof Key &&
+                       handle.keySet().contains(CraftKey.toNms((Key) o));
+            }
+
+            @Override
+            public Iterator<Key> iterator() {
+                return Iterators.transform(handle.keySet().iterator(), new Function<MinecraftKey, Key>() {
+                    @Override
+                    public Key apply(MinecraftKey nms) {
+                        return CraftKey.get(nms);
+                    }
+                });
+            }
+
+            @Override
+            public int size() {
+                return handle.keySet().size();
+            }
+        };
+    }
+
+    @Override
+    public Iterator<V> iterator() {
+        return Iterators.transform(handle.iterator(), new Function<M, V>() {
+            @Override
+            public V apply(M nms) {
+                return createBukkit(nms);
+            }
+        });
+    }
+}
diff --git a/src/test/java/org/bukkit/support/DummyServer.java b/src/test/java/org/bukkit/support/DummyServer.java
--- a/src/test/java/org/bukkit/support/DummyServer.java
+++ b/src/test/java/org/bukkit/support/DummyServer.java
@@ -1,79 +1,84 @@
-package org.bukkit.support;
-
-import java.lang.reflect.InvocationHandler;
-import java.lang.reflect.Method;
-import java.lang.reflect.Proxy;
-import java.util.HashMap;
-import java.util.logging.Logger;
-
-import org.bukkit.Bukkit;
-import org.bukkit.Server;
-import org.bukkit.craftbukkit.inventory.CraftItemFactory;
-import org.bukkit.craftbukkit.util.Versioning;
-
-public class DummyServer implements InvocationHandler {
-    private static interface MethodHandler {
-        Object handle(DummyServer server, Object[] args);
-    }
-    private static final HashMap<Method, MethodHandler> methods = new HashMap<Method, MethodHandler>();
-    static {
-        try {
-            methods.put(
-                    Server.class.getMethod("getItemFactory"),
-                    new MethodHandler() {
-                        public Object handle(DummyServer server, Object[] args) {
-                            return CraftItemFactory.instance();
-                        }
-                    }
-                );
-            methods.put(
-                    Server.class.getMethod("getName"),
-                    new MethodHandler() {
-                        public Object handle(DummyServer server, Object[] args) {
-                            return DummyServer.class.getName();
-                        }
-                    }
-                );
-            methods.put(
-                    Server.class.getMethod("getVersion"),
-                    new MethodHandler() {
-                        public Object handle(DummyServer server, Object[] args) {
-                            return DummyServer.class.getPackage().getImplementationVersion();
-                        }
-                    }
-                );
-            methods.put(
-                    Server.class.getMethod("getBukkitVersion"),
-                    new MethodHandler() {
-                        public Object handle(DummyServer server, Object[] args) {
-                            return Versioning.getBukkitVersion();
-                        }
-                    }
-                );
-            methods.put(
-                    Server.class.getMethod("getLogger"),
-                    new MethodHandler() {
-                        final Logger logger = Logger.getLogger(DummyServer.class.getCanonicalName());
-                        public Object handle(DummyServer server, Object[] args) {
-                            return logger;
-                        }
-                    }
-                );
-            Bukkit.setServer(Proxy.getProxyClass(Server.class.getClassLoader(), Server.class).asSubclass(Server.class).getConstructor(InvocationHandler.class).newInstance(new DummyServer()));
-        } catch (Throwable t) {
-            throw new Error(t);
-        }
-    }
-
-    public static void setup() {}
-
-    private DummyServer() {};
-
-    public Object invoke(Object proxy, Method method, Object[] args) {
-        MethodHandler handler = methods.get(method);
-        if (handler != null) {
-            return handler.handle(this, args);
-        }
-        throw new UnsupportedOperationException(String.valueOf(method));
-    }
-}
+package org.bukkit.support;
+
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
+import java.lang.reflect.Proxy;
+import java.util.HashMap;
+import java.util.logging.Logger;
+
+import org.bukkit.Bukkit;
+import org.bukkit.BukkitRuntime;
+import org.bukkit.CraftBukkitRuntime;
+import org.bukkit.Server;
+import org.bukkit.craftbukkit.inventory.CraftItemFactory;
+import org.bukkit.craftbukkit.util.Versioning;
+
+public class DummyServer implements InvocationHandler {
+    private static interface MethodHandler {
+        Object handle(DummyServer server, Object[] args);
+    }
+    private static final HashMap<Method, MethodHandler> methods = new HashMap<Method, MethodHandler>();
+    static {
+        try {
+            methods.put(
+                    Server.class.getMethod("getItemFactory"),
+                    new MethodHandler() {
+                        public Object handle(DummyServer server, Object[] args) {
+                            return CraftItemFactory.instance();
+                        }
+                    }
+                );
+            methods.put(
+                    Server.class.getMethod("getName"),
+                    new MethodHandler() {
+                        public Object handle(DummyServer server, Object[] args) {
+                            return DummyServer.class.getName();
+                        }
+                    }
+                );
+            methods.put(
+                    Server.class.getMethod("getVersion"),
+                    new MethodHandler() {
+                        public Object handle(DummyServer server, Object[] args) {
+                            return DummyServer.class.getPackage().getImplementationVersion();
+                        }
+                    }
+                );
+            methods.put(
+                    Server.class.getMethod("getBukkitVersion"),
+                    new MethodHandler() {
+                        public Object handle(DummyServer server, Object[] args) {
+                            return Versioning.getBukkitVersion();
+                        }
+                    }
+                );
+            methods.put(
+                    Server.class.getMethod("getLogger"),
+                    new MethodHandler() {
+                        final Logger logger = Logger.getLogger(DummyServer.class.getCanonicalName());
+                        public Object handle(DummyServer server, Object[] args) {
+                            return logger;
+                        }
+                    }
+                );
+            Bukkit.setServer(Proxy.getProxyClass(Server.class.getClassLoader(), Server.class).asSubclass(Server.class).getConstructor(InvocationHandler.class).newInstance(new DummyServer()));
+        } catch (Throwable t) {
+            throw new Error(t);
+        }
+    }
+
+    public static void setup() {}
+
+    private final BukkitRuntime runtime = new CraftBukkitRuntime();
+
+    private DummyServer() {};
+
+    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+        MethodHandler handler = methods.get(method);
+        if (handler != null) {
+            return handler.handle(this, args);
+        } else {
+            return method.invoke(runtime, args);
+        }
+    }
+}
