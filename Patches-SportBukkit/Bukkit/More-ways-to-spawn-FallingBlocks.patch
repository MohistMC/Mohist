From: Jedediah Smith <jedediah@silencegreys.com>
Date: Wed, 7 Dec 2016 04:08:39 -0500
Subject: [PATCH] More ways to spawn FallingBlocks


diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -792,7 +792,25 @@ public interface World extends PluginMessageRecipient, Metadatable, Physical {
      * @throws IllegalArgumentException if {@link Location} or {@link
      *     MaterialData} are null or {@link Material} of the {@link MaterialData} is not a block
      */
-    public FallingBlock spawnFallingBlock(Location location, MaterialData data) throws IllegalArgumentException;
+    default FallingBlock spawnFallingBlock(Location location, MaterialData data) throws IllegalArgumentException {
+        return spawnFallingBlock(location.position(), data);
+    }
+
+    /**
+     * Spawn a {@link FallingBlock} entity at the given position in this world.
+     *
+     * @see #spawnFallingBlock(Location, MaterialData)
+     */
+    FallingBlock spawnFallingBlock(Vec3 position, MaterialData data) throws IllegalArgumentException;
+
+    /**
+     * Spawn a {@link FallingBlock} entity at the given coarse position in this world.
+     * The spawned entity will initially be aligned with the block grid,
+     * as a naturally falling block would be.
+     *
+     * @see #spawnFallingBlock(Location, MaterialData)
+     */
+    FallingBlock spawnFallingBlockAligned(Vec3 position, MaterialData data) throws IllegalArgumentException;
 
     /**
      * Spawn a {@link FallingBlock} entity at the given {@link Location} of
@@ -811,7 +829,12 @@ public interface World extends PluginMessageRecipient, Metadatable, Physical {
      * @deprecated Magic value
      */
     @Deprecated
-    public FallingBlock spawnFallingBlock(Location location, Material material, byte data) throws IllegalArgumentException;
+    default FallingBlock spawnFallingBlock(Location location, Material material, byte data) throws IllegalArgumentException {
+        return spawnFallingBlock(location.position(), material, data);
+    }
+
+    @Deprecated
+    FallingBlock spawnFallingBlock(Vec3 position, Material material, byte data) throws IllegalArgumentException;
 
     /**
      * Spawn a {@link FallingBlock} entity at the given {@link Location} of
@@ -827,7 +850,12 @@ public interface World extends PluginMessageRecipient, Metadatable, Physical {
      * @deprecated Magic value
      */
     @Deprecated
-    public FallingBlock spawnFallingBlock(Location location, int blockId, byte blockData) throws IllegalArgumentException;
+    default FallingBlock spawnFallingBlock(Location location, int blockId, byte blockData) throws IllegalArgumentException {
+        return spawnFallingBlock(location.position(), blockId, blockData);
+    }
+
+    @Deprecated
+    FallingBlock spawnFallingBlock(Vec3 position, int blockId, byte blockData) throws IllegalArgumentException;
 
     /**
      * Plays an effect to all players within a default radius around a given
diff --git a/src/main/java/org/bukkit/block/BlockState.java b/src/main/java/org/bukkit/block/BlockState.java
--- a/src/main/java/org/bukkit/block/BlockState.java
+++ b/src/main/java/org/bukkit/block/BlockState.java
@@ -5,6 +5,7 @@ import org.bukkit.Locatable;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.World;
+import org.bukkit.entity.FallingBlock;
 import org.bukkit.geometry.BlockRotoflection;
 import org.bukkit.geometry.BlockReflection;
 import org.bukkit.geometry.BlockRotation;
@@ -262,4 +263,23 @@ public interface BlockState extends Metadatable, Locatable {
     boolean isPlaced();
 
     boolean hasPosition();
+
+    /**
+     * Spawn a {@link FallingBlock} entity with a position and material matching this block state.
+     *
+     * The entity is spawned in the {@link World} returned from {@link #getWorld()}.
+     *
+     * @throws IllegalStateException if this block state does not belong to a world
+     */
+    default FallingBlock spawnFallingBlock() {
+        return spawnFallingBlock(getWorld());
+    }
+
+    /**
+     * Spawn a {@link FallingBlock} entity in the given {@link World},
+     * with a position and material matching this block state.
+     */
+    default FallingBlock spawnFallingBlock(World world) {
+        return world.spawnFallingBlockAligned(getPosition(), getMaterialData());
+    }
 }
