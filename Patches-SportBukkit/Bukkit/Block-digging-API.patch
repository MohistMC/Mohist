From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 9 May 2015 14:30:04 -0400
Subject: [PATCH] Block digging API


diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1608,4 +1608,15 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      */
     public boolean teleportRelative(org.bukkit.util.Vector deltaPos, float deltaYaw, float deltaPitch, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause);
     public boolean teleportRelative(org.bukkit.util.Vector deltaPos, float deltaYaw, float deltaPitch);
+
+    /**
+     * Is the player digging a block?
+     */
+    public boolean isDigging();
+
+    /**
+     * Return the {@link org.bukkit.block.Block} that the player is currently digging,
+     * or null if they are not digging any block.
+     */
+    public org.bukkit.block.Block getDiggingBlock();
 }
diff --git a/src/main/java/org/bukkit/event/block/BlockUndamageEvent.java b/src/main/java/org/bukkit/event/block/BlockUndamageEvent.java
new file mode 100644
index 0000000..4d28dc7
--- /dev/null
+++ b/src/main/java/org/bukkit/event/block/BlockUndamageEvent.java
@@ -0,0 +1,40 @@
+package org.bukkit.event.block;
+
+import org.bukkit.block.Block;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+
+/**
+ * Called when a player stops digging a block WITHOUT breaking it. This is the
+ * counterpart to {@link BlockDamageEvent}, which fires when the player starts
+ * digging. This event will not be called if the player completes the dig and
+ * breaks the block. It will also not be called if the block breaks instantly
+ * when the player starts digging.
+ */
+public class BlockUndamageEvent extends BlockEvent {
+    private static final HandlerList handlers = new HandlerList();
+    private final Player player;
+
+    public BlockUndamageEvent(final Player player, final Block block) {
+        super(block);
+        this.player = player;
+    }
+
+    /**
+     * Gets the player damaging the block involved in this event.
+     *
+     * @return The player damaging the block involved in this event
+     */
+    public Player getPlayer() {
+        return player;
+    }
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
