From: Jedediah Smith <jedediah@silencegreys.com>
Date: Thu, 4 Feb 2016 04:59:45 -0500
Subject: [PATCH] Implement minecraft-api


diff --git a/pom.xml b/pom.xml
--- a/pom.xml
+++ b/pom.xml
@@ -95,10 +95,8 @@
         </dependency>
         <dependency>
             <groupId>tc.oc</groupId>
-            <artifactId>bungeecord-chat</artifactId>
+            <artifactId>minecraft-api</artifactId>
             <version>1.11-SNAPSHOT</version>
-            <type>jar</type>
-            <scope>compile</scope>
         </dependency>
 
         <!-- testing -->
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -52,7 +52,7 @@ import org.bukkit.inventory.meta.ItemMeta;
 /**
  * Represents a server implementation.
  */
-public interface Server extends PluginMessageRecipient {
+public interface Server extends PluginMessageRecipient, tc.oc.minecraft.api.server.LocalServer {
 
     /**
      * Used for all administrative messages, such as an operator using a
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -3,7 +3,7 @@ package org.bukkit.command;
 import org.bukkit.Server;
 import org.bukkit.permissions.Permissible;
 
-public interface CommandSender extends Permissible {
+public interface CommandSender extends Permissible, tc.oc.minecraft.api.command.CommandSender {
 
     /**
      * Sends this sender a message
@@ -38,4 +38,9 @@ public interface CommandSender extends Permissible {
      * {@link org.bukkit.entity.Player}s to support fake names.
      */
     public String getName(CommandSender viewer);
+
+    @Override
+    default String getName(tc.oc.minecraft.api.command.CommandSender viewer) {
+        return getName((CommandSender) viewer);
+    }
 }
diff --git a/src/main/java/org/bukkit/command/ConsoleCommandSender.java b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
--- a/src/main/java/org/bukkit/command/ConsoleCommandSender.java
+++ b/src/main/java/org/bukkit/command/ConsoleCommandSender.java
@@ -2,5 +2,5 @@ package org.bukkit.command;
 
 import org.bukkit.conversations.Conversable;
 
-public interface ConsoleCommandSender extends CommandSender, Conversable {
+public interface ConsoleCommandSender extends CommandSender, Conversable, tc.oc.minecraft.api.command.ConsoleCommandSender {
 }
diff --git a/src/main/java/org/bukkit/configuration/Configuration.java b/src/main/java/org/bukkit/configuration/Configuration.java
--- a/src/main/java/org/bukkit/configuration/Configuration.java
+++ b/src/main/java/org/bukkit/configuration/Configuration.java
@@ -5,7 +5,7 @@ import java.util.Map;
 /**
  * Represents a source of configurable options and settings
  */
-public interface Configuration extends ConfigurationSection {
+public interface Configuration extends ConfigurationSection, tc.oc.minecraft.api.configuration.Configuration {
     /**
      * Sets the default value of the given path as provided.
      * <p>
diff --git a/src/main/java/org/bukkit/configuration/ConfigurationSection.java b/src/main/java/org/bukkit/configuration/ConfigurationSection.java
--- a/src/main/java/org/bukkit/configuration/ConfigurationSection.java
+++ b/src/main/java/org/bukkit/configuration/ConfigurationSection.java
@@ -12,7 +12,7 @@ import org.bukkit.inventory.ItemStack;
 /**
  * Represents a section of a {@link Configuration}
  */
-public interface ConfigurationSection {
+public interface ConfigurationSection extends tc.oc.minecraft.api.configuration.ConfigurationSection {
     /**
      * Gets a set containing all keys in this section.
      * <p>
@@ -767,6 +767,8 @@ public interface ConfigurationSection {
      */
     public boolean isColor(String path);
 
+    ConfigurationSection getSection(String path);
+
     /**
      * Gets the requested ConfigurationSection by path.
      * <p>
@@ -825,4 +827,6 @@ public interface ConfigurationSection {
      * @throws IllegalArgumentException Thrown if path is null.
      */
     public void addDefault(String path, Object value);
+
+    ConfigurationSection needSection(String path) throws tc.oc.minecraft.api.configuration.InvalidConfigurationException;
 }
diff --git a/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java b/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
--- a/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
+++ b/src/main/java/org/bukkit/configuration/InvalidConfigurationException.java
@@ -4,7 +4,7 @@ package org.bukkit.configuration;
  * Exception thrown when attempting to load an invalid {@link Configuration}
  */
 @SuppressWarnings("serial")
-public class InvalidConfigurationException extends Exception {
+public class InvalidConfigurationException extends tc.oc.minecraft.api.configuration.InvalidConfigurationException {
 
     /**
      * Creates a new instance of InvalidConfigurationException without a
diff --git a/src/main/java/org/bukkit/configuration/MemorySection.java b/src/main/java/org/bukkit/configuration/MemorySection.java
--- a/src/main/java/org/bukkit/configuration/MemorySection.java
+++ b/src/main/java/org/bukkit/configuration/MemorySection.java
@@ -14,11 +14,12 @@ import org.bukkit.Color;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.inventory.ItemStack;
 import org.bukkit.util.Vector;
+import tc.oc.minecraft.api.configuration.AbstractConfigurationSection;
 
 /**
  * A type of {@link ConfigurationSection} that is stored in memory.
  */
-public class MemorySection implements ConfigurationSection {
+public class MemorySection extends AbstractConfigurationSection implements ConfigurationSection {
     protected final Map<String, Object> map = new LinkedHashMap<String, Object>();
     private final Configuration root;
     private final ConfigurationSection parent;
@@ -68,6 +69,11 @@ public class MemorySection implements ConfigurationSection {
         this.fullPath = createPath(parent, path);
     }
 
+    @Override
+    public java.util.Collection<String> getKeys() {
+        return getKeys(false);
+    }
+
     public Set<String> getKeys(boolean deep) {
         Set<String> result = new LinkedHashSet<String>();
 
@@ -683,6 +689,17 @@ public class MemorySection implements ConfigurationSection {
         return val instanceof Color;
     }
 
+    @Override
+    public ConfigurationSection getSection(String path) {
+        final ConfigurationSection section = getConfigurationSection(path);
+        return section != null ? section : createSection(path);
+    }
+
+    @Override
+    public ConfigurationSection needSection(String path) throws tc.oc.minecraft.api.configuration.InvalidConfigurationException {
+        return needType(path, ConfigurationSection.class);
+    }
+
     public ConfigurationSection getConfigurationSection(String path) {
         Object val = get(path, null);
         if (val != null) {
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -29,7 +29,7 @@ import org.bukkit.util.RayBlockIntersection;
 /**
  * Represents a player, connected or not
  */
-public interface Player extends HumanEntity, Conversable, CommandSender, OfflinePlayer, PluginMessageRecipient {
+public interface Player extends HumanEntity, Conversable, CommandSender, OfflinePlayer, PluginMessageRecipient, tc.oc.minecraft.api.entity.Player {
 
     /**
      * Set a fake name for this player when viewed by the given player.
diff --git a/src/main/java/org/bukkit/event/Listener.java b/src/main/java/org/bukkit/event/Listener.java
--- a/src/main/java/org/bukkit/event/Listener.java
+++ b/src/main/java/org/bukkit/event/Listener.java
@@ -3,4 +3,4 @@ package org.bukkit.event;
 /**
  * Simple interface for tagging all EventListeners
  */
-public interface Listener {}
+public interface Listener extends tc.oc.minecraft.api.event.Listener {}
diff --git a/src/main/java/org/bukkit/permissions/Permissible.java b/src/main/java/org/bukkit/permissions/Permissible.java
--- a/src/main/java/org/bukkit/permissions/Permissible.java
+++ b/src/main/java/org/bukkit/permissions/Permissible.java
@@ -7,7 +7,7 @@ import org.bukkit.plugin.Plugin;
 /**
  * Represents an object that may be assigned permissions
  */
-public interface Permissible extends ServerOperator {
+public interface Permissible extends ServerOperator, tc.oc.minecraft.api.permissions.Permissible {
 
     /**
      * Checks if this object contains an override for the specified
diff --git a/src/main/java/org/bukkit/plugin/Plugin.java b/src/main/java/org/bukkit/plugin/Plugin.java
--- a/src/main/java/org/bukkit/plugin/Plugin.java
+++ b/src/main/java/org/bukkit/plugin/Plugin.java
@@ -16,7 +16,7 @@ import com.avaje.ebean.EbeanServer;
  * <p>
  * The use of {@link PluginBase} is recommended for actual Implementation
  */
-public interface Plugin extends TabExecutor {
+public interface Plugin extends TabExecutor, tc.oc.minecraft.api.plugin.Plugin, tc.oc.minecraft.api.configuration.Configurable {
     /**
      * Returns the folder that the plugin data's files are located in. The
      * folder may not yet exist.
diff --git a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
--- a/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
+++ b/src/main/java/org/bukkit/plugin/PluginDescriptionFile.java
@@ -174,7 +174,7 @@ import com.google.common.collect.ImmutableSet;
  *      inferno.burningdeaths: true
  *</pre></blockquote>
  */
-public final class PluginDescriptionFile {
+public final class PluginDescriptionFile implements tc.oc.minecraft.api.plugin.PluginDescription {
     private static final ThreadLocal<Yaml> YAML = new ThreadLocal<Yaml>() {
         @Override
         protected Yaml initialValue() {
diff --git a/src/main/java/org/bukkit/plugin/PluginLogger.java b/src/main/java/org/bukkit/plugin/PluginLogger.java
--- a/src/main/java/org/bukkit/plugin/PluginLogger.java
+++ b/src/main/java/org/bukkit/plugin/PluginLogger.java
@@ -40,7 +40,7 @@ public class PluginLogger extends Logger {
      * @param context A reference to the plugin
      */
     public PluginLogger(Plugin context) {
-        super(context.getClass().getCanonicalName(), null);
+        super(context.getDescription().getMain(), null);
         String prefix = context.getDescription().getPrefix();
         pluginName = prefix != null ? new StringBuilder().append("[").append(prefix).append("] ").toString() : "[" + context.getDescription().getName() + "] ";
         setParent(context.getServer().getLogger());
diff --git a/src/main/java/org/bukkit/plugin/PluginManager.java b/src/main/java/org/bukkit/plugin/PluginManager.java
--- a/src/main/java/org/bukkit/plugin/PluginManager.java
+++ b/src/main/java/org/bukkit/plugin/PluginManager.java
@@ -8,11 +8,13 @@ import org.bukkit.event.EventPriority;
 import org.bukkit.event.Listener;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.permissions.Permission;
+import tc.oc.minecraft.api.event.EventBus;
+import tc.oc.minecraft.api.plugin.PluginFinder;
 
 /**
  * Handles all plugin management from the Server
  */
-public interface PluginManager {
+public interface PluginManager extends PluginFinder, EventBus {
 
     /**
      * Registers the specified plugin loader
diff --git a/src/main/java/org/bukkit/plugin/SimplePluginManager.java b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
--- a/src/main/java/org/bukkit/plugin/SimplePluginManager.java
+++ b/src/main/java/org/bukkit/plugin/SimplePluginManager.java
@@ -365,6 +365,11 @@ public final class SimplePluginManager implements PluginManager {
         return plugins.toArray(new Plugin[0]);
     }
 
+    @Override
+    public Collection<? extends Plugin> getAllPlugins() {
+        return java.util.Arrays.asList(getPlugins());
+    }
+
     /**
      * Checks if the given plugin is enabled or not
      * <p>
@@ -537,6 +542,21 @@ public final class SimplePluginManager implements PluginManager {
         }
     }
 
+    @Override
+    public void registerListener(tc.oc.minecraft.api.plugin.Plugin plugin, tc.oc.minecraft.api.event.Listener listener) {
+        registerEvents((Listener) listener, (Plugin) plugin);
+    }
+
+    @Override
+    public void unregisterListener(tc.oc.minecraft.api.event.Listener listener) {
+        HandlerList.unregisterAll((Listener) listener);
+    }
+
+    @Override
+    public void unregisterListeners(tc.oc.minecraft.api.plugin.Plugin plugin) {
+        HandlerList.unregisterAll((Plugin) plugin);
+    }
+
     public void registerEvents(Listener listener, Plugin plugin) {
         if (!plugin.isEnabled()) {
             throw new IllegalPluginAccessException("Plugin attempted to register " + listener + " while not enabled");
