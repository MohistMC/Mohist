From: Jedediah Smith <jedediah@silencegreys.com>
Date: Wed, 16 Mar 2016 21:20:38 -0400
Subject: [PATCH] Block images


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -33,6 +33,7 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.inventory.Merchant;
 import org.bukkit.inventory.Recipe;
 import org.bukkit.map.MapView;
+import org.bukkit.block.BlockFactory;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginManager;
@@ -1269,6 +1270,7 @@ public final class Bukkit {
         return runtime().key(id);
     }
 
+    public static BlockFactory blocks() { return runtime().blocks(); }
     public static VectorFactory vectors() { return runtime().vectors(); }
 
     public static PotionBrewRegistry potionRegistry() {
diff --git a/src/main/java/org/bukkit/BukkitRuntime.java b/src/main/java/org/bukkit/BukkitRuntime.java
--- a/src/main/java/org/bukkit/BukkitRuntime.java
+++ b/src/main/java/org/bukkit/BukkitRuntime.java
@@ -1,9 +1,10 @@
 package org.bukkit;
 
+import org.bukkit.block.BlockFactory;
 import org.bukkit.inventory.ItemFactory;
 import org.bukkit.inventory.meta.ItemMeta;
-import org.bukkit.potion.PotionEffectRegistry;
 import org.bukkit.potion.PotionBrewRegistry;
+import org.bukkit.potion.PotionEffectRegistry;
 import org.bukkit.registry.Key;
 import org.bukkit.geometry.VectorFactory;
 
@@ -15,6 +16,8 @@ public interface BukkitRuntime {
 
     VectorFactory vectors();
 
+    BlockFactory blocks();
+
     /**
      * Gets the instance of the item factory (for {@link ItemMeta}).
      *
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -1,12 +1,20 @@
 package org.bukkit;
 
 import java.io.File;
+
+import org.bukkit.block.BlockImage;
+import org.bukkit.geometry.CoarseTransform;
+import org.bukkit.material.MaterialData;
+import org.bukkit.geometry.Vec3;
+import org.bukkit.region.BlockRegion;
 import org.bukkit.generator.ChunkGenerator;
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Set;
 import java.util.UUID;
+import java.util.function.Predicate;
 
 import org.bukkit.block.Biome;
 import org.bukkit.block.Block;
@@ -36,6 +44,8 @@ public interface World extends PluginMessageRecipient, Metadatable, Physical {
      */
     public Block getBlockAt(int x, int y, int z);
 
+    Block getBlockAt(Vec3 position);
+
     /**
      * Gets the {@link Block} at the given {@link Location}
      *
@@ -73,6 +83,30 @@ public interface World extends PluginMessageRecipient, Metadatable, Physical {
     public int getBlockTypeIdAt(Location location);
 
     /**
+     * Test if the block at the given position in this world is made of the given material.
+     */
+    boolean hasMaterialAt(MaterialData material, Vec3 position);
+
+    /**
+     * Test if the block at the given position in this world is made of any of the given materials.
+     */
+    boolean hasMaterialAt(Set<MaterialData> materials, Vec3 position);
+
+    /**
+     * Return a {@link Predicate} that tests if the block at a given position in this world is made of the given material.
+     *
+     * The returned predicate may be more efficient for repeated use than calling {@link #hasMaterialAt(MaterialData, Vec3)} multiple times.
+     */
+    Predicate<Vec3> hasMaterialAt(MaterialData material);
+
+    /**
+     * Return a {@link Predicate} that tests if the block at a given position in this world is made of the given material.
+     *
+     * The returned predicate may be more efficient for repeated use than calling {@link #hasMaterialAt(Set, Vec3)} multiple times.
+     */
+    Predicate<Vec3> hasMaterialAt(Set<MaterialData> materials);
+
+    /**
      * Gets the y coordinate of the lowest block at this position such that the
      * block and all blocks above it are transparent for lighting purposes.
      *
@@ -140,6 +174,10 @@ public interface World extends PluginMessageRecipient, Metadatable, Physical {
      */
     public Chunk getChunkAt(int x, int z);
 
+    default Chunk getChunkAt(Vec3 position) {
+        return getChunkAt(position.coarseX() >> 4, position.coarseZ() >> 4);
+    }
+
     /**
      * Gets the {@link Chunk} at the given {@link Location}
      *
@@ -916,6 +954,10 @@ public interface World extends PluginMessageRecipient, Metadatable, Physical {
      */
     Biome getBiome(int x, int z);
 
+    default Biome getBiome(Vec3 position) {
+        return getBiome(position.coarseX(), position.coarseZ());
+    }
+
     /**
      * Sets the biome for the given block coordinates
      *
@@ -925,6 +967,10 @@ public interface World extends PluginMessageRecipient, Metadatable, Physical {
      */
     void setBiome(int x, int z, Biome bio);
 
+    default void setBiome(Vec3 position, Biome biome) {
+        setBiome(position.coarseX(), position.coarseZ(), biome);
+    }
+
     /**
      * Gets the temperature for the given block coordinates.
      * <p>
@@ -937,6 +983,10 @@ public interface World extends PluginMessageRecipient, Metadatable, Physical {
      */
     public double getTemperature(int x, int z);
 
+    default double getTemperature(Vec3 position) {
+        return getTemperature(position.coarseX(), position.coarseZ());
+    }
+
     /**
      * Gets the humidity for the given block coordinates.
      * <p>
@@ -949,6 +999,10 @@ public interface World extends PluginMessageRecipient, Metadatable, Physical {
      */
     public double getHumidity(int x, int z);
 
+    default double getHumidity(Vec3 position) {
+        return getHumidity(position.coarseX(), position.coarseZ());
+    }
+
     /**
      * Gets the maximum height of this world.
      * <p>
@@ -1509,6 +1563,37 @@ public interface World extends PluginMessageRecipient, Metadatable, Physical {
      */
     public <T> void spawnParticle(Particle particle, double x, double y, double z, int count, double offsetX, double offsetY, double offsetZ, double extra, T data);
 
+    /**
+     * Copy block states in the specified region to a saved image.
+     * @return A copy of the specified block states
+     */
+    BlockImage copyBlocks(BlockRegion region, boolean includeAir, boolean clearSource);
+
+    default BlockImage copyBlocks(BlockRegion region, boolean includeAir) {
+        return copyBlocks(region, includeAir, false);
+    }
+
+    default BlockImage copyBlocks(BlockRegion region) {
+        return copyBlocks(region, true);
+    }
+
+    int pasteBlocks(BlockImage image, CoarseTransform transform);
+
+    /**
+     * Copy block states in the given saved image to the given position
+     * in this world.
+     * @param image Block image to copy
+     * @param offset Offset of copied blocks from their original position in the image.
+     * @return The number of blocks in this world affected by the operation.
+     */
+    int pasteBlocks(BlockImage image, Vec3 offset);
+
+    /**
+     * Copy block states in the given saved image to their original position.
+     * @param image Block image to copy
+     * @return The number of blocks in this world affected by the operation.
+     */
+    int pasteBlocks(BlockImage image);
 
     /**
      * Represents various map environment types that a world may be
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -11,6 +11,7 @@ import org.bukkit.inventory.ItemStack;
 import org.bukkit.material.MaterialData;
 import org.bukkit.metadata.Metadatable;
 import org.bukkit.util.RayBlockIntersection;
+import org.bukkit.geometry.Vec3;
 import org.bukkit.util.Vector;
 
 /**
@@ -118,6 +119,8 @@ public interface Block extends Metadatable, Locatable {
      */
     World getWorld();
 
+    Vec3 getPosition();
+
     /**
      * Gets the x-coordinate of this block
      *
diff --git a/src/main/java/org/bukkit/block/BlockFactory.java b/src/main/java/org/bukkit/block/BlockFactory.java
new file mode 100644
index 0000000..4968dd1
--- /dev/null
+++ b/src/main/java/org/bukkit/block/BlockFactory.java
@@ -0,0 +1,21 @@
+package org.bukkit.block;
+
+import org.bukkit.geometry.BlockRotoflection;
+import org.bukkit.geometry.BlockReflection;
+import org.bukkit.geometry.BlockRotation;
+import org.bukkit.geometry.CoarseTransform;
+import org.bukkit.material.MaterialData;
+
+/**
+ * Construct and transform block {@link MaterialData}
+ */
+public interface BlockFactory {
+
+    MaterialData reflect(MaterialData material, BlockReflection reflection);
+
+    MaterialData rotate(MaterialData material, BlockRotation rotation);
+
+    MaterialData transform(MaterialData material, BlockRotoflection transform);
+
+    MaterialData transform(MaterialData material, CoarseTransform transform);
+}
diff --git a/src/main/java/org/bukkit/block/BlockImage.java b/src/main/java/org/bukkit/block/BlockImage.java
new file mode 100644
index 0000000..defd64c
--- /dev/null
+++ b/src/main/java/org/bukkit/block/BlockImage.java
@@ -0,0 +1,65 @@
+package org.bukkit.block;
+
+import org.bukkit.Location;
+import org.bukkit.World;
+import org.bukkit.geometry.BlockRotoflection;
+import org.bukkit.geometry.CoarseTransform;
+import org.bukkit.geometry.Transform;
+import org.bukkit.material.MaterialData;
+import org.bukkit.region.BlockRegion;
+import org.bukkit.geometry.Vec3;
+
+/**
+ * A set of saved block states.
+ *
+ * The blocks do not belong to any world. Block state, tile entity data,
+ * and tile ticks can all be captured in the image.
+ *
+ * TODO: Provide a way to actually get {@link BlockState}s from one of these.
+ */
+public interface BlockImage {
+
+    /**
+     * The set of blocks included in this image. Any blocks excluded from the image
+     * (e.g. air blocks) will also be exlcuded from this region.
+     */
+    BlockRegion region();
+
+    MaterialData materialAt(Vec3 pos);
+
+    int paste(World world, CoarseTransform transform);
+
+    default int paste(World world) {
+        return paste(world, Transform.identity());
+    }
+
+    default boolean pasteBlock(Vec3 pos, World world) {
+        return pasteBlock(pos, world, pos);
+    }
+
+    default boolean pasteBlock(Vec3 pos, World world, CoarseTransform transform) {
+        return pasteBlock(pos, world, transform.apply(pos), transform.orientation());
+    }
+
+    boolean pasteBlock(Vec3 from, World world, Vec3 to, BlockRotoflection orientation);
+
+    default boolean pasteBlock(Vec3 from, World world, Vec3 to) {
+        return pasteBlock(from, world, to, BlockRotoflection.identity());
+    }
+
+    default boolean pasteBlock(Vec3 from, Location to) {
+        return pasteBlock(from, to.getWorld(), to.toVector());
+    }
+
+    default boolean pasteBlock(Vec3 from, Block to) {
+        return pasteBlock(from, to.getWorld(), to.getPosition());
+    }
+
+    default BlockImage transform(CoarseTransform transform) {
+        return new TransformedBlockImage(this, transform);
+    }
+
+    static BlockImage empty() {
+        return EmptyBlockImage.INSTANCE;
+    }
+}
diff --git a/src/main/java/org/bukkit/block/BlockState.java b/src/main/java/org/bukkit/block/BlockState.java
--- a/src/main/java/org/bukkit/block/BlockState.java
+++ b/src/main/java/org/bukkit/block/BlockState.java
@@ -5,8 +5,13 @@ import org.bukkit.Locatable;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.World;
+import org.bukkit.geometry.BlockRotoflection;
+import org.bukkit.geometry.BlockReflection;
+import org.bukkit.geometry.BlockRotation;
+import org.bukkit.geometry.CoarseTransform;
 import org.bukkit.material.MaterialData;
 import org.bukkit.metadata.Metadatable;
+import org.bukkit.geometry.Vec3;
 
 /**
  * Represents a captured state of a block, which will not change
@@ -54,6 +59,14 @@ public interface BlockState extends Metadatable, Locatable {
      */
     void setMaterialData(MaterialData materialData);
 
+    void reflect(BlockReflection reflection);
+
+    void rotate(BlockRotation rotation);
+
+    void reorient(BlockRotoflection orientation);
+
+    void reorient(CoarseTransform transform);
+
     /**
      * Gets the metadata for this block
      *
@@ -95,6 +108,12 @@ public interface BlockState extends Metadatable, Locatable {
      */
     World getWorld();
 
+    World tryWorld();
+
+    Vec3 getPosition();
+
+    Vec3 tryPosition();
+
     /**
      * Gets the x-coordinate of this block
      *
@@ -241,4 +260,6 @@ public interface BlockState extends Metadatable, Locatable {
      *         or 'virtual' (e.g. on an itemstack)
      */
     boolean isPlaced();
+
+    boolean hasPosition();
 }
diff --git a/src/main/java/org/bukkit/block/EmptyBlockImage.java b/src/main/java/org/bukkit/block/EmptyBlockImage.java
new file mode 100644
index 0000000..fc3f166
--- /dev/null
+++ b/src/main/java/org/bukkit/block/EmptyBlockImage.java
@@ -0,0 +1,40 @@
+package org.bukkit.block;
+
+import org.bukkit.World;
+import org.bukkit.geometry.BlockRotoflection;
+import org.bukkit.geometry.CoarseTransform;
+import org.bukkit.geometry.Vec3;
+import org.bukkit.material.MaterialData;
+import org.bukkit.region.BlockRegion;
+
+public class EmptyBlockImage implements BlockImage {
+
+    static final EmptyBlockImage INSTANCE = new EmptyBlockImage();
+
+    private EmptyBlockImage() {}
+
+    @Override
+    public BlockRegion region() {
+        return BlockRegion.empty();
+    }
+
+    @Override
+    public MaterialData materialAt(Vec3 pos) {
+        return null;
+    }
+
+    @Override
+    public int paste(World world, CoarseTransform transform) {
+        return 0;
+    }
+
+    @Override
+    public boolean pasteBlock(Vec3 from, World world, Vec3 to, BlockRotoflection orientation) {
+        return false;
+    }
+
+    @Override
+    public BlockImage transform(CoarseTransform transform) {
+        return this;
+    }
+}
diff --git a/src/main/java/org/bukkit/block/TransformedBlockImage.java b/src/main/java/org/bukkit/block/TransformedBlockImage.java
new file mode 100644
index 0000000..db43c72
--- /dev/null
+++ b/src/main/java/org/bukkit/block/TransformedBlockImage.java
@@ -0,0 +1,49 @@
+package org.bukkit.block;
+
+import org.bukkit.World;
+import org.bukkit.geometry.BlockRotoflection;
+import org.bukkit.geometry.CoarseTransform;
+import org.bukkit.geometry.Vec3;
+import org.bukkit.material.MaterialData;
+import org.bukkit.region.BlockRegion;
+
+public class TransformedBlockImage implements BlockImage {
+
+    private final BlockImage original;
+    private final CoarseTransform transform;
+    private final CoarseTransform inverse;
+
+    public TransformedBlockImage(BlockImage original, CoarseTransform transform) {
+        this.original = original;
+        this.transform = transform;
+        this.inverse = transform.inverse();
+    }
+
+    @Override
+    public BlockRegion region() {
+        return original.region().transform(transform);
+    }
+
+    @Override
+    public MaterialData materialAt(Vec3 pos) {
+        return original.materialAt(inverse.apply(pos));
+    }
+
+    @Override
+    public int paste(World world, CoarseTransform transform) {
+        return original.paste(world, this.transform.andThen(transform));
+    }
+
+    @Override
+    public boolean pasteBlock(Vec3 from, World world, Vec3 to, BlockRotoflection orientation) {
+        return pasteBlock(from, world, CoarseTransform.translation(to).andThen(orientation.transform()));
+    }
+
+    @Override
+    public BlockImage transform(CoarseTransform transform) {
+        if(transform.isIdentity()) return this;
+        transform = this.transform.andThen(transform);
+        if(transform.isIdentity()) return original;
+        return new TransformedBlockImage(original, transform);
+    }
+}
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -11,6 +11,7 @@ import org.bukkit.World;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.geometry.Cuboid;
 import org.bukkit.metadata.Metadatable;
+import org.bukkit.geometry.Cuboid;
 import org.bukkit.util.Vector;
 
 import java.util.List;
diff --git a/src/main/java/org/bukkit/material/Alignable.java b/src/main/java/org/bukkit/material/Alignable.java
--- a/src/main/java/org/bukkit/material/Alignable.java
+++ b/src/main/java/org/bukkit/material/Alignable.java
@@ -1,6 +1,6 @@
 package org.bukkit.material;
 
-import org.bukkit.util.Axis;
+import org.bukkit.geometry.Axis;
 
 public interface Alignable {
 
diff --git a/src/main/java/org/bukkit/material/Lever.java b/src/main/java/org/bukkit/material/Lever.java
--- a/src/main/java/org/bukkit/material/Lever.java
+++ b/src/main/java/org/bukkit/material/Lever.java
@@ -2,7 +2,7 @@ package org.bukkit.material;
 
 import org.bukkit.block.BlockFace;
 import org.bukkit.Material;
-import org.bukkit.util.Axis;
+import org.bukkit.geometry.Axis;
 
 /**
  * Represents a lever
