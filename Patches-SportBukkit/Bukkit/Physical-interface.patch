From: Jedediah Smith <jedediah@silencegreys.com>
Date: Fri, 3 Jul 2015 01:08:40 -0400
Subject: [PATCH] Physical interface


diff --git a/src/main/java/org/bukkit/Chunk.java b/src/main/java/org/bukkit/Chunk.java
--- a/src/main/java/org/bukkit/Chunk.java
+++ b/src/main/java/org/bukkit/Chunk.java
@@ -10,7 +10,7 @@ import java.util.Set;
 /**
  * Represents a chunk of blocks
  */
-public interface Chunk {
+public interface Chunk extends Physical {
 
     /**
      * Gets the X-coordinate of this chunk
diff --git a/src/main/java/org/bukkit/Locatable.java b/src/main/java/org/bukkit/Locatable.java
new file mode 100644
index 0000000..1cb686d
--- /dev/null
+++ b/src/main/java/org/bukkit/Locatable.java
@@ -0,0 +1,5 @@
+package org.bukkit;
+
+public interface Locatable extends Physical {
+    Location getLocation();
+}
diff --git a/src/main/java/org/bukkit/Location.java b/src/main/java/org/bukkit/Location.java
--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -12,7 +12,7 @@ import org.bukkit.util.Vector;
 /**
  * Represents a 3-dimensional position in a world
  */
-public class Location implements Cloneable, ConfigurationSerializable {
+public class Location implements Cloneable, ConfigurationSerializable, Physical {
     private World world;
     private double x;
     private double y;
diff --git a/src/main/java/org/bukkit/Physical.java b/src/main/java/org/bukkit/Physical.java
new file mode 100644
index 0000000..24a58ff
--- /dev/null
+++ b/src/main/java/org/bukkit/Physical.java
@@ -0,0 +1,14 @@
+package org.bukkit;
+
+/**
+ * Common interface for any type of object that can be associated with a specific world.
+ * This interface makes no guarantees about the mutability or nullability of the world.
+ */
+public interface Physical {
+
+    /**
+     * Return the world this object is associated with. May return null if the world
+     * is not available (i.e. not loaded), or this object does not have a world.
+     */
+    World getWorld();
+}
diff --git a/src/main/java/org/bukkit/World.java b/src/main/java/org/bukkit/World.java
--- a/src/main/java/org/bukkit/World.java
+++ b/src/main/java/org/bukkit/World.java
@@ -13,7 +13,6 @@ import org.bukkit.block.Block;
 import org.bukkit.entity.*;
 import org.bukkit.generator.BlockPopulator;
 import org.bukkit.inventory.ItemStack;
-import org.bukkit.material.MaterialData;
 import org.bukkit.metadata.Metadatable;
 import org.bukkit.plugin.messaging.PluginMessageRecipient;
 import org.bukkit.util.Consumer;
@@ -23,7 +22,7 @@ import org.bukkit.util.Vector;
 /**
  * Represents a world, which may contain entities, chunks and blocks
  */
-public interface World extends PluginMessageRecipient, Metadatable {
+public interface World extends PluginMessageRecipient, Metadatable, Physical {
 
     /**
      * Gets the {@link Block} at the given coordinates
diff --git a/src/main/java/org/bukkit/block/Block.java b/src/main/java/org/bukkit/block/Block.java
--- a/src/main/java/org/bukkit/block/Block.java
+++ b/src/main/java/org/bukkit/block/Block.java
@@ -3,6 +3,7 @@ package org.bukkit.block;
 import java.util.Collection;
 
 import org.bukkit.Chunk;
+import org.bukkit.Locatable;
 import org.bukkit.Material;
 import org.bukkit.World;
 import org.bukkit.Location;
@@ -17,7 +18,7 @@ import org.bukkit.util.Vector;
  * concurrently to your own handling of it; use block.getState() to get a
  * snapshot state of a block which will not be modified.
  */
-public interface Block extends Metadatable {
+public interface Block extends Metadatable, Locatable {
 
     /**
      * Gets the metadata for this block
diff --git a/src/main/java/org/bukkit/block/BlockState.java b/src/main/java/org/bukkit/block/BlockState.java
--- a/src/main/java/org/bukkit/block/BlockState.java
+++ b/src/main/java/org/bukkit/block/BlockState.java
@@ -1,6 +1,7 @@
 package org.bukkit.block;
 
 import org.bukkit.Chunk;
+import org.bukkit.Locatable;
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.World;
@@ -16,7 +17,7 @@ import org.bukkit.metadata.Metadatable;
  * change the state of the block and you will not know, or they may change the
  * block to another type entirely, causing your BlockState to become invalid.
  */
-public interface BlockState extends Metadatable {
+public interface BlockState extends Metadatable, Locatable {
 
     /**
      * Gets the block represented by this BlockState
diff --git a/src/main/java/org/bukkit/block/DoubleChest.java b/src/main/java/org/bukkit/block/DoubleChest.java
--- a/src/main/java/org/bukkit/block/DoubleChest.java
+++ b/src/main/java/org/bukkit/block/DoubleChest.java
@@ -1,5 +1,6 @@
 package org.bukkit.block;
 
+import org.bukkit.Locatable;
 import org.bukkit.Location;
 import org.bukkit.World;
 import org.bukkit.inventory.DoubleChestInventory;
@@ -9,7 +10,7 @@ import org.bukkit.inventory.InventoryHolder;
 /**
  * Represents a double chest.
  */
-public class DoubleChest implements InventoryHolder {
+public class DoubleChest implements InventoryHolder, Locatable {
     private DoubleChestInventory inventory;
 
     public DoubleChest(DoubleChestInventory chest) {
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1,5 +1,6 @@
 package org.bukkit.entity;
 
+import org.bukkit.Locatable;
 import org.bukkit.Location;
 import org.bukkit.EntityEffect;
 import org.bukkit.Nameable;
@@ -18,7 +19,7 @@ import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 /**
  * Represents a base entity in the world
  */
-public interface Entity extends Metadatable, CommandSender, Nameable {
+public interface Entity extends Metadatable, CommandSender, Nameable, Locatable {
 
     /**
      * Gets the entity's current position
diff --git a/src/main/java/org/bukkit/event/block/BlockEvent.java b/src/main/java/org/bukkit/event/block/BlockEvent.java
--- a/src/main/java/org/bukkit/event/block/BlockEvent.java
+++ b/src/main/java/org/bukkit/event/block/BlockEvent.java
@@ -1,12 +1,14 @@
 package org.bukkit.event.block;
 
+import org.bukkit.World;
+import org.bukkit.Physical;
 import org.bukkit.block.Block;
 import org.bukkit.event.Event;
 
 /**
  * Represents a block related event.
  */
-public abstract class BlockEvent extends Event {
+public abstract class BlockEvent extends Event implements Physical {
     protected Block block;
 
     public BlockEvent(final Block theBlock) {
@@ -21,4 +23,9 @@ public abstract class BlockEvent extends Event {
     public final Block getBlock() {
         return block;
     }
+
+    @Override
+    public World getWorld() {
+        return getBlock().getWorld();
+    }
 }
diff --git a/src/main/java/org/bukkit/event/entity/EntityEvent.java b/src/main/java/org/bukkit/event/entity/EntityEvent.java
--- a/src/main/java/org/bukkit/event/entity/EntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/EntityEvent.java
@@ -1,5 +1,7 @@
 package org.bukkit.event.entity;
 
+import org.bukkit.World;
+import org.bukkit.Physical;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.EntityType;
 import org.bukkit.event.Event;
@@ -7,7 +9,7 @@ import org.bukkit.event.Event;
 /**
  * Represents an Entity-related event
  */
-public abstract class EntityEvent extends Event {
+public abstract class EntityEvent extends Event implements Physical {
     protected Entity entity;
 
     public EntityEvent(final Entity what) {
@@ -31,4 +33,9 @@ public abstract class EntityEvent extends Event {
     public EntityType getEntityType() {
         return entity.getType();
     }
+
+    @Override
+    public World getWorld() {
+        return getEntity().getWorld();
+    }
 }
diff --git a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
--- a/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
+++ b/src/main/java/org/bukkit/event/entity/PlayerLeashEntityEvent.java
@@ -1,5 +1,7 @@
 package org.bukkit.event.entity;
 
+import org.bukkit.World;
+import org.bukkit.Physical;
 import org.bukkit.entity.Entity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
@@ -9,7 +11,7 @@ import org.bukkit.event.HandlerList;
 /**
  * Called immediately prior to a creature being leashed by a player.
  */
-public class PlayerLeashEntityEvent extends Event implements Cancellable {
+public class PlayerLeashEntityEvent extends Event implements Cancellable, Physical {
     private static final HandlerList handlers = new HandlerList();
     private final Entity leashHolder;
     private final Entity entity;
@@ -50,6 +52,11 @@ public class PlayerLeashEntityEvent extends Event implements Cancellable {
     }
 
     @Override
+    public World getWorld() {
+        return getEntity().getWorld();
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/hanging/HangingEvent.java b/src/main/java/org/bukkit/event/hanging/HangingEvent.java
--- a/src/main/java/org/bukkit/event/hanging/HangingEvent.java
+++ b/src/main/java/org/bukkit/event/hanging/HangingEvent.java
@@ -1,15 +1,16 @@
 package org.bukkit.event.hanging;
 
 import org.bukkit.entity.Hanging;
-import org.bukkit.event.Event;
+import org.bukkit.event.entity.EntityEvent;
 
 /**
  * Represents a hanging entity-related event.
  */
-public abstract class HangingEvent extends Event {
+public abstract class HangingEvent extends EntityEvent {
     protected Hanging hanging;
 
     protected HangingEvent(final Hanging painting) {
+        super(painting);
         this.hanging = painting;
     }
 
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
--- a/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryEvent.java
@@ -3,6 +3,8 @@ package org.bukkit.event.inventory;
 
 import java.util.List;
 
+import org.bukkit.World;
+import org.bukkit.Physical;
 import org.bukkit.event.HandlerList;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.Event;
@@ -12,7 +14,7 @@ import org.bukkit.inventory.InventoryView;
 /**
  * Represents a player related inventory event
  */
-public class InventoryEvent extends Event {
+public class InventoryEvent extends Event implements Physical {
     private static final HandlerList handlers = new HandlerList();
     protected InventoryView transaction;
 
@@ -49,6 +51,11 @@ public class InventoryEvent extends Event {
     }
 
     @Override
+    public World getWorld() {
+        return getInventory().getWorld();
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
--- a/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryMoveItemEvent.java
@@ -1,6 +1,8 @@
 package org.bukkit.event.inventory;
 
 import org.apache.commons.lang.Validate;
+import org.bukkit.World;
+import org.bukkit.Physical;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
 import org.bukkit.event.HandlerList;
@@ -23,7 +25,7 @@ import org.bukkit.inventory.ItemStack;
  * has not been modified, the source inventory slot will be restored to its
  * former state. Otherwise any additional items will be discarded.
  */
-public class InventoryMoveItemEvent extends Event implements Cancellable {
+public class InventoryMoveItemEvent extends Event implements Cancellable, Physical {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
     private final Inventory sourceInventory;
@@ -89,6 +91,11 @@ public class InventoryMoveItemEvent extends Event implements Cancellable {
         return didSourceInitiate ? sourceInventory : destinationInventory;
     }
 
+    @Override
+    public World getWorld() {
+        return getInitiator().getWorld();
+    }
+
     public boolean isCancelled() {
         return cancelled;
     }
diff --git a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
--- a/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
+++ b/src/main/java/org/bukkit/event/inventory/InventoryPickupItemEvent.java
@@ -1,5 +1,7 @@
 package org.bukkit.event.inventory;
 
+import org.bukkit.World;
+import org.bukkit.Physical;
 import org.bukkit.entity.Item;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.Event;
@@ -9,7 +11,7 @@ import org.bukkit.inventory.Inventory;
 /**
  * Called when a hopper or hopper minecart picks up a dropped item.
  */
-public class InventoryPickupItemEvent extends Event implements Cancellable {
+public class InventoryPickupItemEvent extends Event implements Cancellable, Physical {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancelled;
     private final Inventory inventory;
@@ -39,6 +41,11 @@ public class InventoryPickupItemEvent extends Event implements Cancellable {
         return item;
     }
 
+    @Override
+    public World getWorld() {
+        return getInventory().getHolder().getWorld();
+    }
+
     public boolean isCancelled() {
         return cancelled;
     }
diff --git a/src/main/java/org/bukkit/event/player/PlayerEvent.java b/src/main/java/org/bukkit/event/player/PlayerEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerEvent.java
@@ -1,12 +1,14 @@
 package org.bukkit.event.player;
 
+import org.bukkit.World;
+import org.bukkit.Physical;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Event;
 
 /**
  * Represents a player related event
  */
-public abstract class PlayerEvent extends Event {
+public abstract class PlayerEvent extends Event implements Physical {
     protected Player player;
 
     public PlayerEvent(final Player who) {
@@ -27,4 +29,9 @@ public abstract class PlayerEvent extends Event {
     public final Player getPlayer() {
         return player;
     }
+
+    @Override
+    public World getWorld() {
+        return getPlayer().getWorld();
+    }
 }
diff --git a/src/main/java/org/bukkit/event/server/MapInitializeEvent.java b/src/main/java/org/bukkit/event/server/MapInitializeEvent.java
--- a/src/main/java/org/bukkit/event/server/MapInitializeEvent.java
+++ b/src/main/java/org/bukkit/event/server/MapInitializeEvent.java
@@ -1,12 +1,14 @@
 package org.bukkit.event.server;
 
+import org.bukkit.World;
+import org.bukkit.Physical;
 import org.bukkit.event.HandlerList;
 import org.bukkit.map.MapView;
 
 /**
  * Called when a map is initialized.
  */
-public class MapInitializeEvent extends ServerEvent {
+public class MapInitializeEvent extends ServerEvent implements Physical {
     private static final HandlerList handlers = new HandlerList();
     private final MapView mapView;
 
@@ -24,6 +26,11 @@ public class MapInitializeEvent extends ServerEvent {
     }
 
     @Override
+    public World getWorld() {
+        return getMap().getWorld();
+    }
+
+    @Override
     public HandlerList getHandlers() {
         return handlers;
     }
diff --git a/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java b/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
--- a/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
+++ b/src/main/java/org/bukkit/event/vehicle/VehicleEvent.java
@@ -1,12 +1,14 @@
 package org.bukkit.event.vehicle;
 
+import org.bukkit.World;
+import org.bukkit.Physical;
 import org.bukkit.entity.Vehicle;
 import org.bukkit.event.Event;
 
 /**
  * Represents a vehicle-related event.
  */
-public abstract class VehicleEvent extends Event {
+public abstract class VehicleEvent extends Event implements Physical {
     protected Vehicle vehicle;
 
     public VehicleEvent(final Vehicle vehicle) {
@@ -21,4 +23,9 @@ public abstract class VehicleEvent extends Event {
     public final Vehicle getVehicle() {
         return vehicle;
     }
+
+    @Override
+    public World getWorld() {
+        return getVehicle().getWorld();
+    }
 }
diff --git a/src/main/java/org/bukkit/event/weather/WeatherEvent.java b/src/main/java/org/bukkit/event/weather/WeatherEvent.java
--- a/src/main/java/org/bukkit/event/weather/WeatherEvent.java
+++ b/src/main/java/org/bukkit/event/weather/WeatherEvent.java
@@ -1,12 +1,13 @@
 package org.bukkit.event.weather;
 
 import org.bukkit.World;
+import org.bukkit.Physical;
 import org.bukkit.event.Event;
 
 /**
  * Represents a Weather-related event
  */
-public abstract class WeatherEvent extends Event {
+public abstract class WeatherEvent extends Event implements Physical {
     protected World world;
 
     public WeatherEvent(final World where) {
diff --git a/src/main/java/org/bukkit/event/world/WorldEvent.java b/src/main/java/org/bukkit/event/world/WorldEvent.java
--- a/src/main/java/org/bukkit/event/world/WorldEvent.java
+++ b/src/main/java/org/bukkit/event/world/WorldEvent.java
@@ -1,12 +1,13 @@
 package org.bukkit.event.world;
 
 import org.bukkit.World;
+import org.bukkit.Physical;
 import org.bukkit.event.Event;
 
 /**
  * Represents events within a world
  */
-public abstract class WorldEvent extends Event {
+public abstract class WorldEvent extends Event implements Physical {
     private final World world;
 
     public WorldEvent(final World world) {
diff --git a/src/main/java/org/bukkit/inventory/Inventory.java b/src/main/java/org/bukkit/inventory/Inventory.java
--- a/src/main/java/org/bukkit/inventory/Inventory.java
+++ b/src/main/java/org/bukkit/inventory/Inventory.java
@@ -6,6 +6,7 @@ import java.util.ListIterator;
 
 import org.bukkit.Location;
 import org.bukkit.Material;
+import org.bukkit.Physical;
 import org.bukkit.entity.HumanEntity;
 import org.bukkit.event.inventory.InventoryType;
 
@@ -13,7 +14,7 @@ import org.bukkit.event.inventory.InventoryType;
  * Interface to the various inventories. Behavior relating to {@link
  * Material#AIR} is unspecified.
  */
-public interface Inventory extends Iterable<ItemStack> {
+public interface Inventory extends Iterable<ItemStack>, Physical {
 
     /**
      * Returns the size of the inventory
diff --git a/src/main/java/org/bukkit/inventory/InventoryHolder.java b/src/main/java/org/bukkit/inventory/InventoryHolder.java
--- a/src/main/java/org/bukkit/inventory/InventoryHolder.java
+++ b/src/main/java/org/bukkit/inventory/InventoryHolder.java
@@ -1,6 +1,8 @@
 package org.bukkit.inventory;
 
-public interface InventoryHolder {
+import org.bukkit.Physical;
+
+public interface InventoryHolder extends Physical {
 
     /**
      * Get the object's inventory.
diff --git a/src/main/java/org/bukkit/map/MapView.java b/src/main/java/org/bukkit/map/MapView.java
--- a/src/main/java/org/bukkit/map/MapView.java
+++ b/src/main/java/org/bukkit/map/MapView.java
@@ -2,11 +2,12 @@ package org.bukkit.map;
 
 import java.util.List;
 import org.bukkit.World;
+import org.bukkit.Physical;
 
 /**
  * Represents a map item.
  */
-public interface MapView {
+public interface MapView extends Physical {
 
     /**
      * An enum representing all possible scales a map can be set to.
diff --git a/src/main/java/org/bukkit/projectiles/ProjectileSource.java b/src/main/java/org/bukkit/projectiles/ProjectileSource.java
--- a/src/main/java/org/bukkit/projectiles/ProjectileSource.java
+++ b/src/main/java/org/bukkit/projectiles/ProjectileSource.java
@@ -1,12 +1,13 @@
 package org.bukkit.projectiles;
 
+import org.bukkit.Physical;
 import org.bukkit.entity.Projectile;
 import org.bukkit.util.Vector;
 
 /**
  * Represents a valid source of a projectile.
  */
-public interface ProjectileSource {
+public interface ProjectileSource extends Physical {
 
     /**
      * Launches a {@link Projectile} from the ProjectileSource.
