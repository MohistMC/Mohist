From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 7 Jan 2017 00:25:37 -0500
Subject: [PATCH] Reduce ItemStack copying


diff --git a/src/main/java/org/bukkit/inventory/CraftingInventory.java b/src/main/java/org/bukkit/inventory/CraftingInventory.java
--- a/src/main/java/org/bukkit/inventory/CraftingInventory.java
+++ b/src/main/java/org/bukkit/inventory/CraftingInventory.java
@@ -1,5 +1,8 @@
 package org.bukkit.inventory;
 
+import java.util.Arrays;
+import java.util.List;
+
 /**
  * Interface to the crafting inventories
  */
@@ -33,7 +36,11 @@ public interface CraftingInventory extends Inventory {
      * @throws IllegalArgumentException if the length of contents is greater
      *     than the size of the crafting matrix.
      */
-    void setMatrix(ItemStack[] contents);
+    void setMatrix(List<ItemStack> contents);
+
+    default void setMatrix(ItemStack[] contents) {
+        setMatrix(Arrays.asList(contents));
+    }
 
     /**
      * Get the current recipe formed on the crafting inventory, if any.
diff --git a/src/main/java/org/bukkit/inventory/Inventory.java b/src/main/java/org/bukkit/inventory/Inventory.java
--- a/src/main/java/org/bukkit/inventory/Inventory.java
+++ b/src/main/java/org/bukkit/inventory/Inventory.java
@@ -1,8 +1,10 @@
 package org.bukkit.inventory;
 
+import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.ListIterator;
+import java.util.function.Predicate;
 
 import net.md_5.bungee.api.chat.BaseComponent;
 import org.bukkit.Location;
@@ -136,7 +138,11 @@ public interface Inventory extends Iterable<ItemStack>, Physical {
      *
      * @return An array of ItemStacks from the inventory.
      */
-    public ItemStack[] getContents();
+    List<ItemStack> contents();
+
+    default ItemStack[] getContents() {
+        return itemListToArray(contents());
+    }
 
     /**
      * Completely replaces the inventory's contents. Removes all existing
@@ -147,7 +153,11 @@ public interface Inventory extends Iterable<ItemStack>, Physical {
      * @throws IllegalArgumentException If the array has more items than the
      *     inventory.
      */
-    public void setContents(ItemStack[] items) throws IllegalArgumentException;
+    public void setContents(List<ItemStack> items) throws IllegalArgumentException;
+
+    default void setContents(ItemStack[] items) throws IllegalArgumentException {
+        setContents(Arrays.asList(items));
+    }
 
     /**
      * Return the contents from the section of the inventory where items can
@@ -160,7 +170,13 @@ public interface Inventory extends Iterable<ItemStack>, Physical {
      *
      * @return inventory storage contents
      */
-    public ItemStack[] getStorageContents();
+    default List<ItemStack> storage() {
+        return contents();
+    }
+
+    default ItemStack[] getStorageContents() {
+        return itemListToArray(storage());
+    }
 
     /**
      * Put the given ItemStacks into the storage slots
@@ -337,6 +353,8 @@ public interface Inventory extends Iterable<ItemStack>, Physical {
      */
     public int firstEmpty();
 
+    void removeIf(Predicate<? super ItemStack> filter);
+
     /**
      * Removes all stacks in the inventory matching the given materialId.
      *
@@ -432,4 +450,8 @@ public interface Inventory extends Iterable<ItemStack>, Physical {
      * @return location or null if not applicable.
      */
     public Location getLocation();
+
+    static ItemStack[] itemListToArray(List<ItemStack> items) {
+        return items.toArray(new ItemStack[items.size()]);
+    }
 }
diff --git a/src/main/java/org/bukkit/inventory/PlayerInventory.java b/src/main/java/org/bukkit/inventory/PlayerInventory.java
--- a/src/main/java/org/bukkit/inventory/PlayerInventory.java
+++ b/src/main/java/org/bukkit/inventory/PlayerInventory.java
@@ -1,5 +1,7 @@
 package org.bukkit.inventory;
 
+import java.util.List;
+
 import org.bukkit.entity.HumanEntity;
 
 /**
@@ -12,18 +14,25 @@ public interface PlayerInventory extends Inventory {
      *
      * @return All the ItemStacks from the armor slots
      */
-    public ItemStack[] getArmorContents();
+    List<ItemStack> armor();
+
+    default ItemStack[] getArmorContents() {
+        return Inventory.itemListToArray(armor());
+    }
 
     /**
      * Get all additional ItemStacks stored in this inventory.
      * <br>
      * NB: What defines an extra slot is up to the implementation, however it
-     * will not be contained within {@link #getStorageContents()} or
-     * {@link #getArmorContents()}
+     * will not be contained within {@link #storage()} or {@link #armor()}
      *
      * @return All additional ItemStacks
      */
-    public ItemStack[] getExtraContents();
+    List<ItemStack> extra();
+
+    default ItemStack[] getExtraContents() {
+        return Inventory.itemListToArray(extra());
+    }
 
     /**
      * Return the ItemStack from the helmet slot
