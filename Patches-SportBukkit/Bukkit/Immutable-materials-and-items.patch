From: Jedediah Smith <jedediah@silencegreys.com>
Date: Wed, 4 Jan 2017 14:01:56 -0500
Subject: [PATCH] Immutable materials and items


diff --git a/src/main/java/org/bukkit/inventory/ImItemStack.java b/src/main/java/org/bukkit/inventory/ImItemStack.java
new file mode 100644
index 0000000..17feb00
--- /dev/null
+++ b/src/main/java/org/bukkit/inventory/ImItemStack.java
@@ -0,0 +1,94 @@
+package org.bukkit.inventory;
+
+import java.util.Map;
+import javax.annotation.Nullable;
+
+import org.bukkit.Material;
+import org.bukkit.enchantments.Enchantment;
+import org.bukkit.inventory.meta.ItemMeta;
+import org.bukkit.material.MaterialData;
+
+public class ImItemStack extends ItemStack {
+
+    public static ImItemStack of(Material material) {
+        return of(material, (short) 0);
+    }
+
+    public static ImItemStack of(Material material, int damage) {
+        return of(material, damage, 1);
+    }
+
+    public static ImItemStack of(Material material, int damage, int amount) {
+        return of(material, damage, amount, null);
+    }
+
+    public static ImItemStack of(Material material, int damage, int amount, @Nullable ItemMeta meta) {
+        return new ImItemStack(material, damage, amount, meta);
+    }
+
+    public static ImItemStack of(MaterialData material) {
+        return of(material, 1);
+    }
+
+    public static ImItemStack of(MaterialData material, int amount) {
+        return of(material, amount, null);
+    }
+
+    public static ImItemStack of(MaterialData material, int amount, @Nullable ItemMeta meta) {
+        return new ImItemStack(material, amount, meta);
+    }
+
+    public static ImItemStack copyOf(ItemStack stack) {
+        return stack instanceof ImItemStack ? (ImItemStack) stack : new ImItemStack(stack);
+    }
+
+    ImItemStack(Material material, int damage, int amount, @Nullable ItemMeta meta) {
+        super(material, checkAmount(material, amount), checkDamage(material, damage), null);
+        if(meta != null) {
+            super.setItemMeta(meta);
+        }
+    }
+
+    ImItemStack(MaterialData material, int amount, @Nullable ItemMeta meta) {
+        super(material.getItemType(), checkAmount(material.getItemType(), amount), (short) 0, null);
+        super.setData(material);
+        if(meta != null) {
+            super.setItemMeta(meta);
+        }
+    }
+
+    ImItemStack(ItemStack stack) {
+        super(stack);
+    }
+
+    @Override
+    public boolean isMutable() {
+        return false;
+    }
+
+    @Override
+    public ImItemStack immutableCopy() {
+        return this;
+    }
+
+    @Override
+    public ItemStack clone() {
+        return new ItemStack(this);
+    }
+
+    private UnsupportedOperationException ex() {
+        return new UnsupportedOperationException("This " + ItemStack.class.getSimpleName() + " is immutable");
+    }
+
+    @Override public void setType(Material type) { throw ex(); }
+    @Override public void setTypeId(int type) { throw ex(); }
+    @Override public void setAmount(int amount) { throw ex(); }
+    @Override public void setData(MaterialData data) { throw ex(); }
+    @Override public void setDurability(short durability) { throw ex(); }
+    @Override public void addEnchantments(Map<Enchantment, Integer> enchantments) { throw ex(); }
+    @Override public void addEnchantment(Enchantment ench, int level) { throw ex(); }
+    @Override public void addUnsafeEnchantments(Map<Enchantment, Integer> enchantments) { throw ex(); }
+    @Override public void addUnsafeEnchantment(Enchantment ench, int level) { throw ex(); }
+    @Override public int removeEnchantment(Enchantment ench) { throw ex(); }
+    @Override public boolean setItemMeta(ItemMeta itemMeta) { throw ex(); }
+}
diff --git a/src/main/java/org/bukkit/inventory/ItemStack.java b/src/main/java/org/bukkit/inventory/ItemStack.java
--- a/src/main/java/org/bukkit/inventory/ItemStack.java
+++ b/src/main/java/org/bukkit/inventory/ItemStack.java
@@ -3,6 +3,8 @@ package org.bukkit.inventory;
 import com.google.common.collect.ImmutableMap;
 import java.util.LinkedHashMap;
 import java.util.Map;
+import java.util.function.Consumer;
+import javax.annotation.Nullable;
 
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
@@ -105,10 +107,13 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
     public ItemStack(final int type, final int amount, final short damage, final Byte data) {
         this.type = type;
         this.amount = amount;
-        this.durability = damage;
-        if (data != null) {
+        if(data == null) {
+            this.durability = damage;
+        } else {
+            if(damage != 0 && damage != data) {
+                throw new IllegalArgumentException("Item cannot have both damage and data value");
+            }
             createData(data);
-            this.durability = data;
         }
     }
 
@@ -124,6 +129,15 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         this(type.getId(), amount, damage, data);
     }
 
+    public ItemStack(MaterialData material) {
+        this(material, 1);
+    }
+
+    public ItemStack(MaterialData material, int amount) {
+        this(material.getItemTypeId(), checkAmount(material.getItemType(), amount), (short) 0, null);
+        setData(material);
+    }
+
     /**
      * Creates a new item stack derived from the specified stack
      *
@@ -199,7 +213,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         if (this.meta != null) {
             this.meta = Bukkit.getItemFactory().asMetaFor(meta, getType0());
         }
-        createData((byte) 0);
+        createData((byte) durability);
     }
 
     /**
@@ -228,7 +242,7 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
     public MaterialData getData() {
         Material mat = getType();
         if (data == null && mat != null && mat.getData() != null) {
-            data = mat.getNewData((byte) this.getDurability());
+            data = mat.getNewData((byte) durability);
         }
 
         return data;
@@ -251,6 +265,14 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
                 throw new IllegalArgumentException("Provided data is not of type " + mat.getData().getName() + ", found " + data.getClass().getName());
             }
         }
+        if(this.data != null && this.data.getItemType().getMaxDurability() == 0) {
+            this.durability = this.data.getData();
+        }
+    }
+
+    public void setMaterial(MaterialData data) {
+        setType(data.getItemType());
+        setData(data);
     }
 
     /**
@@ -260,6 +282,9 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
      */
     public void setDurability(final short durability) {
         this.durability = durability;
+        if(data != null && data.getItemType().getMaxDurability() == 0) {
+            data.setData((byte) durability);
+        }
     }
 
     /**
@@ -294,6 +319,10 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
         } else {
             this.data = mat.getNewData(data);
         }
+
+        if(this.data.getItemType().getMaxDurability() == 0) {
+            this.durability = data;
+        }
     }
 
     @Override
@@ -608,4 +637,113 @@ public class ItemStack implements Cloneable, ConfigurationSerializable {
 
         return true;
     }
+
+    public boolean isMutable() {
+        return true;
+    }
+
+    public boolean isImmutable() {
+        return !isMutable();
+    }
+
+    public ImItemStack immutableCopy() {
+        return ImItemStack.copyOf(this);
+    }
+
+    protected static short checkDamage(Material material, int damage) {
+        if(damage != 0 && material.getMaxDurability() == 0) {
+            throw new IllegalArgumentException("Material " + material + " does not support damage/durability");
+        }
+        if(damage < Short.MIN_VALUE || damage > Short.MAX_VALUE) {
+            throw new IllegalArgumentException("Damage value " + damage + " is outside the valid range");
+        }
+        return (short) damage;
+    }
+
+    protected static int checkAmount(Material material, int amount) {
+        if(amount < Byte.MIN_VALUE || amount > Byte.MAX_VALUE) {
+            throw new IllegalArgumentException("Amount " + amount + " is outside the valid range");
+        }
+        return amount;
+    }
+
+    public static Builder builder(Material material) {
+        return builder(material, 0);
+    }
+
+    public static Builder builder(Material material, int damage) {
+        Validate.notNull(material);
+        return new Builder(null, material, damage);
+    }
+
+    public static Builder builder(MaterialData material) {
+        Validate.notNull(material);
+        return new Builder(material, null, 0);
+    }
+
+    public static class Builder {
+
+        private final @Nullable MaterialData data;
+        private final @Nullable Material material;
+        private final short damage;
+
+        private int amount = 1;
+        private @Nullable ItemMeta meta = null;
+
+        private Builder(@Nullable MaterialData data, @Nullable Material material, int damage) {
+            this.material = material;
+            this.data = data;
+            this.damage = checkDamage(material(), damage);
+        }
+
+        private Material material() {
+            return material != null ? material : data.getItemType();
+        }
+
+        private void checkMeta(@Nullable ItemMeta meta) {
+            final Material material = material();
+            if(material != null && meta != null && !Bukkit.getItemFactory().isApplicable(meta, material)) {
+                throw new IllegalArgumentException(meta.getClass().getSimpleName() + " is not applicable to material " + material);
+            }
+        }
+
+        public Builder amount(int amount) {
+            this.amount = checkAmount(material(), amount);
+            return this;
+        }
+
+        public Builder meta(@Nullable ItemMeta meta) {
+            checkMeta(meta);
+            this.meta = meta;
+            return this;
+        }
+
+        public Builder meta(Consumer<? super ItemMeta> block) {
+            return meta(ItemMeta.class, block);
+        }
+
+        public <T extends ItemMeta> Builder meta(Class<T> type, Consumer<? super T> block) {
+            final ItemMeta meta = Bukkit.getItemFactory().getItemMeta(material());
+            if(!type.isInstance(meta)) {
+                throw new IllegalArgumentException(type.getSimpleName() + " is not applicable to material " + material());
+            }
+            block.accept((T) meta);
+            this.meta = meta;
+            return this;
+        }
+
+        public ImItemStack immutable() {
+            return data != null ? ImItemStack.of(data, amount, meta)
+                                : ImItemStack.of(material, damage, amount, meta);
+        }
+
+        public ItemStack mutable() {
+            final ItemStack stack = data != null ? new ItemStack(data, amount)
+                                                 : new ItemStack(material, amount, damage);
+            if(meta != null) {
+                stack.setItemMeta(meta);
+            }
+            return stack;
+        }
+    }
 }
diff --git a/src/main/java/org/bukkit/material/MaterialData.java b/src/main/java/org/bukkit/material/MaterialData.java
--- a/src/main/java/org/bukkit/material/MaterialData.java
+++ b/src/main/java/org/bukkit/material/MaterialData.java
@@ -9,6 +9,7 @@ import org.bukkit.Material;
 public class MaterialData implements Cloneable {
     private final int type;
     private byte data = 0;
+    private boolean mutable = true;
 
     /**
      * @param type the raw type id
@@ -63,6 +64,7 @@ public class MaterialData implements Cloneable {
      */
     @Deprecated
     public void setData(byte data) {
+        assertMutable();
         this.data = data;
     }
 
@@ -92,7 +94,7 @@ public class MaterialData implements Cloneable {
      * @return New ItemStack containing a copy of this MaterialData
      */
     public ItemStack toItemStack() {
-        return new ItemStack(type, 0, data);
+        return toItemStack(1);
     }
 
     /**
@@ -102,7 +104,11 @@ public class MaterialData implements Cloneable {
      * @return New ItemStack containing a copy of this MaterialData
      */
     public ItemStack toItemStack(int amount) {
-        return new ItemStack(type, amount, data);
+        return new ItemStack(this, amount);
+    }
+
+    public ItemStack.Builder buildItemStack() {
+        return ItemStack.builder(this);
     }
 
     @Override
@@ -129,9 +135,39 @@ public class MaterialData implements Cloneable {
     @Override
     public MaterialData clone() {
         try {
-            return (MaterialData) super.clone();
+            final MaterialData clone = (MaterialData) super.clone();
+            clone.mutable = true;
+            return clone;
         } catch (CloneNotSupportedException e) {
             throw new Error(e);
         }
     }
+
+    public boolean isMutable() {
+        return mutable;
+    }
+
+    public boolean isImmutable() {
+        return !mutable;
+    }
+
+    protected void assertMutable() {
+        if(isImmutable()) {
+            throw new UnsupportedOperationException("This " + getClass().getSimpleName() + " is immutable");
+        }
+    }
+
+    public MaterialData immutable() {
+        mutable = false;
+        return this;
+    }
+
+    public MaterialData immutableCopy() {
+        if(isImmutable()) return this;
+        try {
+            return ((MaterialData) super.clone()).immutable();
+        } catch(CloneNotSupportedException e) {
+            throw new Error(e);
+        }
+    }
 }
diff --git a/src/test/java/org/bukkit/materials/MaterialDataTest.java b/src/test/java/org/bukkit/materials/MaterialDataTest.java
--- a/src/test/java/org/bukkit/materials/MaterialDataTest.java
+++ b/src/test/java/org/bukkit/materials/MaterialDataTest.java
@@ -10,10 +10,12 @@ import org.bukkit.TreeSpecies;
 import org.bukkit.block.BlockFace;
 import org.bukkit.material.Crops;
 import org.bukkit.material.Comparator;
+import org.bukkit.material.Crops;
 import org.bukkit.material.Diode;
 import org.bukkit.material.Door;
 import org.bukkit.material.Hopper;
 import org.bukkit.material.Leaves;
+import org.bukkit.material.MaterialData;
 import org.bukkit.material.Mushroom;
 import org.bukkit.material.NetherWarts;
 import org.bukkit.material.Sapling;
@@ -23,6 +25,9 @@ import org.bukkit.material.WoodenStep;
 import org.bukkit.material.types.MushroomBlockTexture;
 import org.junit.Test;
 
+import static tc.oc.test.Assert.*;
+import static org.junit.Assert.*;
+
 public class MaterialDataTest {
 
     @Test
@@ -430,4 +435,42 @@ public class MaterialDataTest {
             }
         }
     }
+
+    @Test
+    public void testMutableByDefault() {
+        MaterialData md = new MaterialData(Material.AIR);
+        assertTrue(md.isMutable());
+        assertFalse(md.isImmutable());
+    }
+
+    @Test
+    public void testMakeImmutable() {
+        MaterialData original = new MaterialData(Material.AIR);
+        MaterialData immutable = original.immutable();
+        assertSame(original, immutable);
+        assertFalse(immutable.isMutable());
+        assertTrue(immutable.isImmutable());
+    }
+
+    @Test
+    public void testImmutableCopy() {
+        MaterialData original = new MaterialData(Material.AIR);
+        MaterialData immutable = original.immutableCopy();
+        assertNotSame(original, immutable);
+        assertMutuallyEqual(original, immutable);
+        assertFalse(immutable.isMutable());
+        assertTrue(immutable.isImmutable());
+    }
+
+    @Test
+    public void testImmutableCannotBeModified() throws Throwable {
+        MaterialData md = new MaterialData(Material.AIR).immutable();
+        assertThrows(UnsupportedOperationException.class, () -> md.setData((byte) 0));
+    }
+
+    @Test
+    public void testCloneOfImmutableIsMutable() {
+        MaterialData md = new MaterialData(Material.AIR).immutable();
+        assertTrue(md.clone().isMutable());
+    }
 }
