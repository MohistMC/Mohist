From: Jedediah Smith <jedediah@silencegreys.com>
Date: Wed, 16 Mar 2016 21:24:15 -0400
Subject: [PATCH] Velocity API


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -366,6 +366,13 @@ public final class Bukkit {
     }
 
     /**
+     * @see Server#getLegacyKnockback()
+     */
+    public static boolean getLegacyKnockback() {
+        return server.getLegacyKnockback();
+    }
+
+    /**
      * Gets default ticks per animal spawns value.
      * <p>
      * <b>Example Usage:</b>
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -279,6 +279,11 @@ public interface Server extends PluginMessageRecipient, BukkitRuntime, tc.oc.min
     public boolean getWaterPushesTNT();
 
     /**
+     * Recreate knockback mechanics from Minecraft 1.8
+     */
+    public boolean getLegacyKnockback();
+
+    /**
      * Gets default ticks per animal spawns value.
      * <p>
      * <b>Example Usage:</b>
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -54,6 +54,48 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
     public Vector getVelocity();
 
     /**
+     * Apply an impulse to this entity, i.e. a relative change in velocity.
+     *
+     * The given vector is added to the current velocity, and the entity's new
+     * velocity is synced to players in visible range.
+     *
+     * If this entity is a player, the impulse is sent directly to them,
+     * and will be applied by their client at the moment they receive it.
+     * This results in more accurate physics, from the player's perspective,
+     * particularly with high-latency connections. However, their final
+     * velocity is more difficult to predict from the server.
+     */
+    void applyImpulse(Vector impulse);
+    void applyImpulse(Vector impulse, boolean relative);
+
+    /**
+     * Set the knockback reduction for this entity.
+     *
+     * Set this to 0 for standard knockback mechanics.
+     * Set this to 1 to disable all knockback effects.
+     * Values between 0 and 1 reduce knockback impulses proportionally.
+     */
+    void setKnockbackReduction(float n);
+
+    /**
+     * Get this entity's knockback reduction
+     *
+     * @see #setKnockbackReduction(float)
+     */
+    float getKnockbackReduction();
+
+    /**
+     * Get the velocity of this entity, preferring an inferred value, if there is one.
+     *
+     * For {@link Player}s, this velocity is partly derived from positions reported by
+     * the client. This can be much more accurate than the velocity stored on the
+     * server, which is not affected by player movement at all.
+     *
+     * For all other entities, this returns the same value as {@link #getVelocity()}.
+     */
+    Vector getPredictedVelocity();
+
+    /**
      * Returns true if the entity is supported by a block. This value is a
      * state updated by the server and is not recalculated unless the entity
      * moves.
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -25,6 +25,7 @@ import org.bukkit.map.MapView;
 import org.bukkit.plugin.messaging.PluginMessageRecipient;
 import org.bukkit.scoreboard.Scoreboard;
 import org.bukkit.util.RayBlockIntersection;
+import org.bukkit.util.Vector;
 
 /**
  * Represents a player, connected or not
@@ -1657,4 +1658,12 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
      * @return Information about the targeted block, or null if no blocks were found
      */
     RayBlockIntersection getTargetedBlock(boolean nonSolids, boolean liquids);
+
+    Vector getClientVelocity();
+
+    Vector getUnackedImpulse();
+
+    boolean hasUnackedVelocity();
+
+
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerKnockbackEvent.java b/src/main/java/org/bukkit/event/player/PlayerKnockbackEvent.java
new file mode 100644
index 0000000..7411633
--- /dev/null
+++ b/src/main/java/org/bukkit/event/player/PlayerKnockbackEvent.java
@@ -0,0 +1,26 @@
+package org.bukkit.event.player;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.bukkit.util.Vector;
+
+/**
+ * Called when a player is knocked back by an attack or injury.
+ */
+public class PlayerKnockbackEvent extends PlayerVelocityEvent {
+
+    private final Entity damager;
+
+    public PlayerKnockbackEvent(Player player, Entity damager, Vector velocity, boolean impulse) {
+        super(player, velocity, impulse);
+        this.damager = damager;
+    }
+
+    /**
+     * The entity that is knocking the player back, or null if the knockback
+     * is not caused by an entity.
+     */
+    public Entity getDamager() {
+        return damager;
+    }
+}
diff --git a/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java b/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerVelocityEvent.java
@@ -6,16 +6,18 @@ import org.bukkit.event.HandlerList;
 import org.bukkit.util.Vector;
 
 /**
- * Called when the velocity of a player changes.
+ * Called when an impulse is applied to a player.
  */
 public class PlayerVelocityEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
-    private Vector velocity;
+    private final Vector velocity;
+    private final boolean impulse;
 
-    public PlayerVelocityEvent(final Player player, final Vector velocity) {
+    public PlayerVelocityEvent(final Player player, Vector velocity, boolean impulse) {
         super(player);
         this.velocity = velocity;
+        this.impulse = impulse;
     }
 
     public boolean isCancelled() {
@@ -26,22 +28,16 @@ public class PlayerVelocityEvent extends PlayerEvent implements Cancellable {
         this.cancel = cancel;
     }
 
-    /**
-     * Gets the velocity vector that will be sent to the player
-     *
-     * @return Vector the player will get
-     */
+    public boolean isImpulse() {
+        return impulse;
+    }
+
     public Vector getVelocity() {
         return velocity;
     }
 
-    /**
-     * Sets the velocity vector that will be sent to the player
-     *
-     * @param velocity The velocity vector that will be sent to the player
-     */
     public void setVelocity(Vector velocity) {
-        this.velocity = velocity;
+        this.velocity.set(velocity);
     }
 
     @Override
