From: Jedediah Smith <jedediah@silencegreys.com>
Date: Fri, 1 Jul 2016 03:36:15 -0400
Subject: [PATCH] Add PoseFlag and EntityLocation


diff --git a/src/main/java/org/bukkit/EntityLocation.java b/src/main/java/org/bukkit/EntityLocation.java
new file mode 100644
index 0000000..d9fbf35
--- /dev/null
+++ b/src/main/java/org/bukkit/EntityLocation.java
@@ -0,0 +1,104 @@
+package org.bukkit;
+
+import java.util.EnumSet;
+import java.util.Set;
+
+import org.bukkit.util.EnumUtils;
+import org.bukkit.util.Vector;
+
+public class EntityLocation extends Location {
+
+    private final Vector velocity;
+    private final Set<PoseFlag> poseFlags;
+
+    /**
+     * Create a new EntityLocation from the given values.
+     *
+     * Note that velocity and poseFlags are NOT copied.
+     */
+    public EntityLocation(World world, double x, double y, double z, float yaw, float pitch, Vector velocity, Set<PoseFlag> poseFlags) {
+        super(world, x, y, z, yaw, pitch);
+        this.velocity = velocity;
+        this.poseFlags = poseFlags;
+
+    }
+
+    public EntityLocation(World world, Vector position, float yaw, float pitch, Vector velocity, Set<PoseFlag> poseFlags) {
+        this(world, position.getX(), position.getY(), position.getZ(), yaw, pitch, velocity, poseFlags);
+    }
+
+    /**
+     * Create a new EntityLocation from the given values.
+     *
+     * Only the position and angles are copied from the location argument,
+     * even if it is another EntityLocation.
+     *
+     * Note that velocity and poseFlags are NOT copied.
+     */
+    public EntityLocation(Location location, Vector velocity, Set<PoseFlag> poseFlags) {
+        this(location.getWorld(), location.getX(), location.getY(), location.getZ(), location.getYaw(), location.getPitch(), velocity, poseFlags);
+    }
+
+    /**
+     * Create a new EntityLocation from the given values, with zero velocity and no {@link PoseFlag}s.
+     */
+    public EntityLocation(World world, double x, double y, double z, float yaw, float pitch) {
+        this(world, x, y, z, yaw, pitch, new Vector(), EnumSet.noneOf(PoseFlag.class));
+    }
+
+    public static EntityLocation coerce(Location value, EntityLocation defaults) {
+        if(value instanceof EntityLocation) {
+            return (EntityLocation) value;
+        } else {
+            return new EntityLocation(value, defaults.velocity(), defaults.poseFlags());
+        }
+    }
+
+    public static EntityLocation copyOf(Location location, Vector velocity, Set<PoseFlag> poseFlags) {
+        return new EntityLocation(location, new Vector(velocity), EnumUtils.copySet(PoseFlag.class, poseFlags));
+    }
+
+    public static EntityLocation copyOf(EntityLocation that) {
+        return copyOf(that, that.velocity(), that.poseFlags());
+    }
+
+    /**
+     * Mutable velocity vector.
+     *
+     * Changes to the returned object are reflected in this {@link EntityLocation},
+     * and vice-versa.
+     */
+    public Vector velocity() {
+        return velocity;
+    }
+
+    /**
+     * A mutable set of {@link PoseFlag}s.
+     *
+     * Changes to the returned object are reflected in this {@link EntityLocation},
+     * and vice-versa.
+     */
+    public Set<PoseFlag> poseFlags() {
+        return poseFlags;
+    }
+
+    @Override
+    public String toString() {
+        return getClass().getSimpleName() +
+               "{world=" + getWorld() +
+               " x=" + getX() +
+               " y=" + getY() +
+               " z=" + getZ() +
+               " pitch=" + getPitch() +
+               " yaw=" + getYaw() +
+               " velocity=" + velocity() +
+               " poseFlags=" + poseFlags() +
+               '}';
+    }
+
+    @Override
+    public EntityLocation clone() {
+        // Can't call super.clone(), because we have final fields
+        return copyOf(this);
+    }
+}
diff --git a/src/main/java/org/bukkit/PoseFlag.java b/src/main/java/org/bukkit/PoseFlag.java
new file mode 100644
index 0000000..4d8fbee
--- /dev/null
+++ b/src/main/java/org/bukkit/PoseFlag.java
@@ -0,0 +1,41 @@
+package org.bukkit;
+
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Player;
+
+public enum PoseFlag {
+    /** @see Entity#isOnGround() */
+    GROUNDED,
+
+    /** @see Entity#isDead() */
+    DEAD,
+
+    /** @see HumanEntity#isSleeping() */
+    SLEEPING,
+
+    /** @see Player#isSneaking() */
+    SNEAKING,
+
+    /** @see Player#isSprinting() */
+    SPRINTING,
+
+    /** @see HumanEntity#isBlocking() */
+    BLOCKING,
+
+    /** @see Player#isDigging() */
+    DIGGING,
+
+    /** @see LivingEntity#isGliding() */
+    GLIDING,
+
+    /** @see Player#isFlying() */
+    FLYING,
+
+    /** @see LivingEntity#isLeashed() */
+    LEASHED,
+
+    /** @see Entity#isInsideVehicle() */
+    RIDING;
+}
diff --git a/src/main/java/org/bukkit/entity/Entity.java b/src/main/java/org/bukkit/entity/Entity.java
--- a/src/main/java/org/bukkit/entity/Entity.java
+++ b/src/main/java/org/bukkit/entity/Entity.java
@@ -1,9 +1,11 @@
 package org.bukkit.entity;
 
+import org.bukkit.EntityLocation;
 import org.bukkit.Locatable;
 import org.bukkit.Location;
 import org.bukkit.EntityEffect;
 import org.bukkit.Nameable;
+import org.bukkit.PoseFlag;
 import org.bukkit.Server;
 import org.bukkit.World;
 import org.bukkit.event.entity.EntityDamageEvent;
@@ -29,6 +31,8 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
      */
     public Location getLocation();
 
+    EntityLocation getEntityLocation();
+
     /**
      * Stores the entity's current position in the provided Location object.
      * <p>
@@ -41,6 +45,11 @@ public interface Entity extends Metadatable, CommandSender, Nameable, Locatable
     public Location getLocation(Location loc);
 
     /**
+     * The set of {@link PoseFlag}s describing this entity's current state
+     */
+    Set<PoseFlag> getPoseFlags();
+
+    /**
      * Sets this entity's velocity
      *
      * @param velocity New velocity to travel with
diff --git a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerMoveEvent.java
@@ -1,24 +1,35 @@
 package org.bukkit.event.player;
 
 import com.google.common.base.Preconditions;
+import org.bukkit.EntityLocation;
 import org.bukkit.Location;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
 
+import static com.google.common.base.Preconditions.checkNotNull;
+
 /**
  * Holds information for player movement events
  */
 public class PlayerMoveEvent extends PlayerActionBase implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean cancel = false;
-    private Location from;
-    private Location to;
+    private EntityLocation from;
+    private EntityLocation to;
 
-    public PlayerMoveEvent(final Player player, final Location from, final Location to) {
+    public PlayerMoveEvent(final Player player, final EntityLocation from, final EntityLocation to) {
         super(player);
-        this.from = from;
-        this.to = to;
+        this.from = checkNotNull(from);
+        this.to = checkNotNull(to);
+    }
+
+    public PlayerMoveEvent(final Player player, final Location from, final Location to) {
+        this(
+            player,
+            EntityLocation.coerce(from, player.getEntityLocation()),
+            EntityLocation.coerce(to, player.getEntityLocation())
+        );
     }
 
     /**
@@ -58,6 +69,10 @@ public class PlayerMoveEvent extends PlayerActionBase implements Cancellable {
         return from;
     }
 
+    public EntityLocation getEntityFrom() {
+        return from;
+    }
+
     /**
      * Sets the location to mark as where the player moved from
      *
@@ -65,7 +80,7 @@ public class PlayerMoveEvent extends PlayerActionBase implements Cancellable {
      */
     public void setFrom(Location from) {
         validateLocation(from);
-        this.from = from;
+        this.from = EntityLocation.coerce(from, this.from);
     }
 
     /**
@@ -77,6 +92,10 @@ public class PlayerMoveEvent extends PlayerActionBase implements Cancellable {
         return to;
     }
 
+    public EntityLocation getEntityTo() {
+        return to;
+    }
+
     /**
      * Sets the location that this player will move to
      *
@@ -84,7 +103,7 @@ public class PlayerMoveEvent extends PlayerActionBase implements Cancellable {
      */
     public void setTo(Location to) {
         validateLocation(to);
-        this.to = to;
+        this.to = EntityLocation.coerce(to, this.to);
     }
 
     private void validateLocation(Location loc) {
diff --git a/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java b/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
--- a/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerPortalEvent.java
@@ -1,5 +1,7 @@
 package org.bukkit.event.player;
 
+import javax.annotation.Nullable;
+
 import org.bukkit.Location;
 import org.bukkit.TravelAgent;
 import org.bukkit.entity.Player;
@@ -9,6 +11,11 @@ import org.bukkit.event.HandlerList;
  * Called when a player is about to teleport because it is in contact with a
  * portal.
  * <p>
+ * The player will exit the portal at the {@link #getTo()} location, which can
+ * be altered by event handlers through {@link #setTo(Location)}. If the portal
+ * is not going to teleport the player, then {@link #getTo()} will be the same
+ * as {@link #getFrom()}, and the event will be initially set to cancelled.
+ * <p>
  * For other entities see {@link org.bukkit.event.entity.EntityPortalEvent}
  */
 public class PlayerPortalEvent extends PlayerTeleportEvent {
@@ -16,14 +23,14 @@ public class PlayerPortalEvent extends PlayerTeleportEvent {
     protected boolean useTravelAgent = true;
     protected TravelAgent travelAgent;
 
-    public PlayerPortalEvent(final Player player, final Location from, final Location to, final TravelAgent pta) {
-        super(player, from, to);
-        this.travelAgent = pta;
+    public PlayerPortalEvent(final Player player, final Location from, final @Nullable Location to, final TravelAgent pta) {
+        this(player, from, to, pta, TeleportCause.UNKNOWN);
     }
 
-    public PlayerPortalEvent(Player player, Location from, Location to, TravelAgent pta, TeleportCause cause) {
-        super(player, from, to, cause);
+    public PlayerPortalEvent(Player player, Location from, @Nullable Location to, TravelAgent pta, TeleportCause cause) {
+        super(player, from, to != null ? to : from, cause);
         this.travelAgent = pta;
+        setCancelled(to == null);
     }
 
     /**
diff --git a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
--- a/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
+++ b/src/test/java/org/bukkit/plugin/TimedRegisteredListenerTest.java
@@ -9,9 +9,8 @@ import org.bukkit.event.EventPriority;
 import org.bukkit.event.Listener;
 import org.bukkit.event.block.BlockBreakEvent;
 import org.bukkit.event.player.PlayerActionBase;
-import org.bukkit.event.player.PlayerEvent;
+import org.bukkit.event.player.PlayerAnimationEvent;
 import org.bukkit.event.player.PlayerInteractEvent;
-import org.bukkit.event.player.PlayerMoveEvent;
 import org.junit.Test;
 
 public class TimedRegisteredListenerTest {
@@ -25,7 +24,7 @@ public class TimedRegisteredListenerTest {
         TestPlugin plugin = new TestPlugin("Test");
 
         PlayerInteractEvent interactEvent = new PlayerInteractEvent(null, null, null, null, null);
-        PlayerMoveEvent moveEvent = new PlayerMoveEvent(null, null, null);
+        PlayerAnimationEvent animationEvent = new PlayerAnimationEvent(null);
         BlockBreakEvent breakEvent = new BlockBreakEvent(null, null);
 
         TimedRegisteredListener trl = new TimedRegisteredListener(listener, executor, EventPriority.NORMAL, plugin, false);
@@ -37,7 +36,7 @@ public class TimedRegisteredListenerTest {
         trl.callEvent(interactEvent);
         assertThat(trl.getEventClass(), is((Object) PlayerInteractEvent.class));
         // Ensure that the closest superclass of the two events is chosen
-        trl.callEvent(moveEvent);
+        trl.callEvent(animationEvent);
         assertThat(trl.getEventClass(), is((Object) PlayerActionBase.class));
         // As above, so below
         trl.callEvent(breakEvent);
@@ -51,7 +50,7 @@ public class TimedRegisteredListenerTest {
         trl.callEvent(breakEvent);
         assertThat(trl.getEventClass(), is((Object) BlockBreakEvent.class));
         // Test moving up the class hierarchy by more than one class at a time
-        trl.callEvent(moveEvent);
+        trl.callEvent(animationEvent);
         assertThat(trl.getEventClass(), is((Object) Event.class));
     }
 }
