From: Jedediah Smith <jedediah@silencegreys.com>
Date: Thu, 23 Jan 2014 00:17:31 -0500
Subject: [PATCH] Fake name and skin API


diff --git a/src/main/java/org/bukkit/Bukkit.java b/src/main/java/org/bukkit/Bukkit.java
--- a/src/main/java/org/bukkit/Bukkit.java
+++ b/src/main/java/org/bukkit/Bukkit.java
@@ -437,6 +437,27 @@ public final class Bukkit {
     }
 
     /**
+     * @see Server#getPlayer(String, CommandSender)
+     */
+    public static Player getPlayer(String name, CommandSender viewer) {
+        return server.getPlayer(name, viewer);
+    }
+
+    /**
+     * @see Server#getPlayerExact(String, CommandSender)
+     */
+    public static Player getPlayerExact(String name, CommandSender viewer) {
+        return server.getPlayerExact(name, viewer);
+    }
+
+    /**
+     * @see Server#matchPlayer(String, CommandSender)
+     */
+    public static List<Player> matchPlayer(String name, CommandSender viewer) {
+        return server.matchPlayer(name, viewer);
+    }
+
+    /**
      * Gets the plugin manager for interfacing with plugins.
      *
      * @return a plugin manager for this Server instance
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -363,7 +363,22 @@ public interface Server extends PluginMessageRecipient {
     public Player getPlayer(UUID id);
 
     /**
-     * Gets the plugin manager for interfacing with plugins.
+     * Fake name aware version of {@link #getPlayer(String)}
+     */
+    public Player getPlayer(String name, CommandSender viewer);
+
+    /**
+     * Fake name aware version of {@link #getPlayerExact(String)}
+     */
+    public Player getPlayerExact(String name, CommandSender viewer);
+
+    /**
+     * Fake name aware version of {@link #matchPlayer(String)}
+     */
+    public List<Player> matchPlayer(String name, CommandSender viewer);
+
+    /**
+     * Gets the PluginManager for interfacing with plugins
      *
      * @return a plugin manager for this Server instance
      */
diff --git a/src/main/java/org/bukkit/Skin.java b/src/main/java/org/bukkit/Skin.java
new file mode 100644
index 0000000..5dc9cef
--- /dev/null
+++ b/src/main/java/org/bukkit/Skin.java
@@ -0,0 +1,76 @@
+package org.bukkit;
+
+
+/**
+ * A self-contained skin
+ */
+public class Skin {
+    // NOTE: ordinals must match bit positions in packet data
+    public static enum Part {
+        CAPE,
+        JACKET,
+        LEFT_SLEEVE,
+        RIGHT_SLEEVE,
+        LEFT_PANTS_LEG,
+        RIGHT_PANTS_LEG,
+        HAT
+    }
+
+    public static final Skin EMPTY = new Skin(null, null);
+
+    private final String data;
+    private final String signature;
+
+    public Skin(String data, String signature) {
+        this.data = data;
+        this.signature = signature;
+    }
+
+    /**
+     * Return the base64 encoded data for this skin, or null if this
+     * is the empty skin i.e. Steve/Alex
+     */
+    public String getData() {
+        return data;
+    }
+
+    /**
+     * Return the base64 encoded signature for this skin, or null if
+     * this skin has no signature
+     */
+    public String getSignature() {
+        return signature;
+    }
+
+    /**
+     * Return true if this is the empty skin i.e. Steve/Alex
+     */
+    public boolean isEmpty() {
+        return this.data == null;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if(this == o) {
+            return true;
+        }
+        if(!(o instanceof Skin)) {
+            return false;
+        }
+        Skin skin = (Skin) o;
+        if(data != null ? !data.equals(skin.data) : skin.data != null) {
+            return false;
+        }
+        if(signature != null ? !signature.equals(skin.signature) : skin.signature != null) {
+            return false;
+        }
+        return true;
+    }
+
+    @Override
+    public int hashCode() {
+        int result = data != null ? data.hashCode() : 0;
+        result = 31 * result + (signature != null ? signature.hashCode() : 0);
+        return result;
+    }
+}
diff --git a/src/main/java/org/bukkit/command/Command.java b/src/main/java/org/bukkit/command/Command.java
--- a/src/main/java/org/bukkit/command/Command.java
+++ b/src/main/java/org/bukkit/command/Command.java
@@ -103,7 +103,7 @@ public abstract class Command {
 
         ArrayList<String> matchedPlayers = new ArrayList<String>();
         for (Player player : sender.getServer().getOnlinePlayers()) {
-            String name = player.getName();
+            String name = player.getName(sender);
             if ((senderPlayer == null || senderPlayer.canSee(player)) && StringUtil.startsWithIgnoreCase(name, lastWord)) {
                 matchedPlayers.add(name);
             }
diff --git a/src/main/java/org/bukkit/command/CommandSender.java b/src/main/java/org/bukkit/command/CommandSender.java
--- a/src/main/java/org/bukkit/command/CommandSender.java
+++ b/src/main/java/org/bukkit/command/CommandSender.java
@@ -32,4 +32,10 @@ public interface CommandSender extends Permissible {
      * @return Name of the sender
      */
     public String getName();
+
+    /**
+     * Return this sender's name as viewed by the given sender. Used by
+     * {@link org.bukkit.entity.Player}s to support fake names.
+     */
+    public String getName(CommandSender viewer);
 }
diff --git a/src/main/java/org/bukkit/command/defaults/ListCommand.java b/src/main/java/org/bukkit/command/defaults/ListCommand.java
--- a/src/main/java/org/bukkit/command/defaults/ListCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/ListCommand.java
@@ -36,7 +36,7 @@ public class ListCommand extends VanillaCommand {
                 online.append(", ");
             }
 
-            online.append(player.getDisplayName());
+            online.append(player.getDisplayName(sender instanceof Player ? (Player) sender : null));
         }
 
         sender.sendMessage("There are " + players.size() + "/" + Bukkit.getMaxPlayers() + " players online:\n" + online.toString());
diff --git a/src/main/java/org/bukkit/command/defaults/TellCommand.java b/src/main/java/org/bukkit/command/defaults/TellCommand.java
--- a/src/main/java/org/bukkit/command/defaults/TellCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/TellCommand.java
@@ -25,7 +25,8 @@ public class TellCommand extends VanillaCommand {
             return false;
         }
 
-        Player player = Bukkit.getPlayerExact(args[0]);
+        Player viewer = sender instanceof Player ? (Player) sender : null;
+        Player player = Bukkit.getPlayerExact(args[0], viewer);
 
         // If a player is hidden from the sender pretend they are offline
         if (player == null || (sender instanceof Player && !((Player) sender).canSee(player))) {
diff --git a/src/main/java/org/bukkit/entity/Player.java b/src/main/java/org/bukkit/entity/Player.java
--- a/src/main/java/org/bukkit/entity/Player.java
+++ b/src/main/java/org/bukkit/entity/Player.java
@@ -1,6 +1,7 @@
 package org.bukkit.entity;
 
 import java.net.InetSocketAddress;
+import java.util.Set;
 
 import org.bukkit.Achievement;
 import org.bukkit.ChatColor;
@@ -12,6 +13,7 @@ import org.bukkit.Material;
 import org.bukkit.Note;
 import org.bukkit.OfflinePlayer;
 import org.bukkit.Particle;
+import org.bukkit.Skin;
 import org.bukkit.Sound;
 import org.bukkit.SoundCategory;
 import org.bukkit.Statistic;
@@ -28,6 +30,60 @@ import org.bukkit.scoreboard.Scoreboard;
 public interface Player extends HumanEntity, Conversable, CommandSender, OfflinePlayer, PluginMessageRecipient {
 
     /**
+     * Set a fake name for this player when viewed by the given player.
+     * If the name is null then the fake name is cleared.
+     */
+    public void setFakeName(CommandSender viewer, String name);
+
+    /**
+     * Return this player's fake name for the given viewer,
+     * or null if no fake name is set for that viewer
+     */
+    public String getFakeName(CommandSender viewer);
+
+    /**
+     * Test if this player has a fake name set for the given viewer
+     */
+    public boolean hasFakeName(CommandSender viewer);
+
+    /**
+     * Clear this player's fake names for all viewers
+     */
+    public void clearFakeNames();
+
+    /**
+     * Set a fake display name for this player when viewed by the given player.
+     * If the name is null then the fake name is cleared.
+     */
+    public void setFakeDisplayName(CommandSender viewer, String name);
+
+    /**
+     * Return this player's fake display name for the given viewer,
+     * or null if no fake name is set for that viewer
+     */
+    public String getFakeDisplayName(CommandSender viewer);
+
+    /**
+     * Test if this player has a fake display name set for the given viewer
+     */
+    public boolean hasFakeDisplayName(CommandSender viewer);
+
+    /**
+     * Clear this player's fake display names for all viewers
+     */
+    public void clearFakeDisplayNames();
+
+    /**
+     * Return this player's list name as viewed by the given player, fake or not
+     */
+    public String getPlayerListName(CommandSender viewer);
+
+    /**
+     * Return this player's display name as viewed by the given player, fake or not
+     */
+    public String getDisplayName(CommandSender viewer);
+
+    /**
      * Gets the "friendly" name to display of this player. This may include
      * color.
      * <p>
@@ -80,6 +136,74 @@ public interface Player extends HumanEntity, Conversable, CommandSender, Offline
     public void setPlayerListName(String name);
 
     /**
+     * Test if this Player has a fake skin set for the given viewer
+     */
+    public boolean hasFakeSkin(CommandSender viewer);
+
+    /**
+     * Return the {@link Skin} that the given viewer sees on this player,
+     * or null if the viewer can see this player's real skin.
+     */
+    public Skin getFakeSkin(CommandSender viewer);
+
+    /**
+     * Set the {@link Skin} that the given viewer will see on this player.
+     * If null is given for the skin, any fake skin for the given viewer
+     * will be removed and they will see this player's real skin.
+     */
+    public void setFakeSkin(CommandSender viewer, Skin newSkin);
+
+    /**
+     * Clear any fake {@link org.bukkit.Skin}s set on this player, so that all other
+     * players will see this player's real skin.
+     */
+    public void clearFakeSkins();
+
+    /**
+     * Return the player's real {@link Skin} i.e. the one they have
+     * uploaded to their Minecraft account.
+     */
+    public Skin getRealSkin();
+
+    /**
+     * Return this player's current global {@link Skin}, which is what
+     * other players see as long as there is no fake skin set for them.
+     */
+    public Skin getSkin();
+
+    /**
+     * Return the {@link Skin} that the given viewer sees on this player,
+     * which may be either their current global skin or a fake skin.
+     */
+    public Skin getSkin(CommandSender viewer);
+
+    /**
+     * Set this player's {@link Skin}, which will be visible to
+     * all players who do not have a fake skin set. Passing null
+     * as the skin will reset the player's skin to their real one.
+     */
+    public void setSkin(Skin newSkin);
+
+    /**
+     * Get the set of skin parts that are currently visible on the player
+     */
+    public Set<Skin.Part> getSkinParts();
+
+    /**
+     * Simultaneously set this player's fake name and {@link Skin} for the given viewer.
+     * This method only refreshes the player entity once, whereas calling
+     * {@link #setFakeName} and {@link #setFakeSkin} seperately would refresh it twice.
+     */
+    public void setFakeNameAndSkin(CommandSender viewer, String name, Skin skin);
+
+    /**
+     * Simultaneously clear any fake names or {@link Skin}s set on this player.
+     * This method only refreshes the player entity once, whereas calling
+     * {@link #clearFakeNames} and {@link #clearFakeSkins} seperately would refresh it twice.
+     */
+    public void clearFakeNamesAndSkins();
+
+    /**
      * Set the target of the player's compass.
      *
      * @param loc Location to point to
diff --git a/src/main/java/org/bukkit/event/player/PlayerSkinPartsChangeEvent.java b/src/main/java/org/bukkit/event/player/PlayerSkinPartsChangeEvent.java
new file mode 100644
index 0000000..a222f21
--- /dev/null
+++ b/src/main/java/org/bukkit/event/player/PlayerSkinPartsChangeEvent.java
@@ -0,0 +1,32 @@
+package org.bukkit.event.player;
+
+import org.bukkit.Skin;
+import org.bukkit.entity.Player;
+import org.bukkit.event.HandlerList;
+
+import java.util.Set;
+
+public class PlayerSkinPartsChangeEvent extends PlayerEvent {
+
+    private final Set<Skin.Part> parts;
+
+    public PlayerSkinPartsChangeEvent(Player who, Set<Skin.Part> parts) {
+        super(who);
+        this.parts = parts;
+    }
+
+    public Set<Skin.Part> getParts() {
+        return parts;
+    }
+
+    private static final HandlerList handlers = new HandlerList();
+
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
