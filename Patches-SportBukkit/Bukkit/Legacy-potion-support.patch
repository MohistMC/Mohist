From: Jedediah Smith <jedediah@silencegreys.com>
Date: Sat, 19 Mar 2016 00:45:13 -0400
Subject: [PATCH] Legacy potion support


diff --git a/src/main/java/org/bukkit/potion/Potion.java b/src/main/java/org/bukkit/potion/Potion.java
--- a/src/main/java/org/bukkit/potion/Potion.java
+++ b/src/main/java/org/bukkit/potion/Potion.java
@@ -6,6 +6,7 @@ import org.apache.commons.lang.Validate;
 import org.bukkit.Material;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.inventory.ItemStack;
+import org.bukkit.inventory.meta.ItemMeta;
 import org.bukkit.inventory.meta.PotionMeta;
 
 /**
@@ -271,7 +272,7 @@ public class Potion {
         }
         ItemStack itemStack = new ItemStack(material, amount);
         PotionMeta meta = (PotionMeta) itemStack.getItemMeta();
-        meta.setBasePotionData(new PotionData(type, level == 2, extended));
+        meta.setBasePotionData(new PotionData(type, extended, level == 2));
         itemStack.setItemMeta(meta);
         return itemStack;
     }
@@ -283,6 +284,7 @@ public class Potion {
     private static final int SPLASH_BIT = 0x4000;
     private static final int TIER_BIT = 0x20;
     private static final int TIER_SHIFT = 5;
+    private static final int NAME_MASK = 0x10;
 
     /**
      *
@@ -290,10 +292,22 @@ public class Potion {
      * @return the produced potion
      */
     public static Potion fromDamage(int damage) {
+        final int level = ((damage & TIER_BIT) >> TIER_SHIFT) + 1;
+
         PotionType type;
         switch (damage & POTION_BIT) {
             case 0:
-                type = PotionType.WATER;
+                switch(damage & NAME_MASK) {
+                    default:
+                        type = damage == 0 ? PotionType.WATER : PotionType.MUNDANE;
+                        break;
+                    case 16:
+                        type = PotionType.AWKWARD;
+                        break;
+                    case 32:
+                        type = PotionType.THICK;
+                        break;
+                }
                 break;
             case 1:
                 type = PotionType.REGEN;
@@ -337,28 +351,29 @@ public class Potion {
             default:
                 type = PotionType.WATER;
         }
-        Potion potion;
-        if (type == null || type == PotionType.WATER) {
-            potion = new Potion(PotionType.WATER);
-        } else {
-            int level = (damage & TIER_BIT) >> TIER_SHIFT;
-            level++;
-            potion = new Potion(type, level);
-        }
+
+        Potion potion = new Potion(type, type.isUpgradeable() ? level : 1);
+
         if ((damage & SPLASH_BIT) > 0) {
             potion = potion.splash();
         }
-        if ((damage & EXTENDED_BIT) > 0) {
+        if ((damage & EXTENDED_BIT) > 0 && type.isExtendable()) {
             potion = potion.extend();
         }
         return potion;
     }
 
+    @Deprecated
     public static Potion fromItemStack(ItemStack item) {
         Validate.notNull(item, "item cannot be null");
-        if (item.getType() != Material.POTION)
-            throw new IllegalArgumentException("item is not a potion");
-        return fromDamage(item.getDurability());
+        if(item.getType() != Material.POTION && item.getType() != Material.SPLASH_POTION) {
+            throw new IllegalArgumentException("item cannot be converted to a legacy potion");
+        }
+
+        final PotionData potionData = ((PotionMeta) item.getItemMeta()).getBasePotionData();
+        final Potion potion = new Potion(potionData.getType(), potionData.isUpgraded() ? 2 : 1, potionData.isExtended());
+        if(item.getType() == Material.SPLASH_POTION) potion.splash();
+        return potion;
     }
 
     /**
