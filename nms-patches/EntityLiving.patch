--- a/net/minecraft/world/entity/EntityLiving.java
+++ b/net/minecraft/world/entity/EntityLiving.java

@@ -717,6 +770,17 @@
             }
         }
 
+        // CraftBukkit start
+        if (nbttagcompound.contains("Bukkit.MaxHealth")) {
+            NBTBase nbtbase = nbttagcompound.get("Bukkit.MaxHealth");
+            if (nbtbase.getId() == 5) {
+                this.getAttribute(GenericAttributes.MAX_HEALTH).setBaseValue(((NBTTagFloat) nbtbase).getAsDouble());
+            } else if (nbtbase.getId() == 3) {
+                this.getAttribute(GenericAttributes.MAX_HEALTH).setBaseValue(((NBTTagInt) nbtbase).getAsDouble());
+            }
+        }
+        // CraftBukkit end
+
         if (nbttagcompound.contains("Health", 99)) {
             this.setHealth(nbttagcompound.getFloat("Health"));
         }
@@ -754,9 +818,32 @@
 
     }
 
+    // CraftBukkit start
+    private boolean isTickingEffects = false;
+    private List<ProcessableEffect> effectsToProcess = Lists.newArrayList();
+
+    private static class ProcessableEffect {
+
+        private MobEffectList type;
+        private MobEffect effect;
+        private final EntityPotionEffectEvent.Cause cause;
+
+        private ProcessableEffect(MobEffect effect, EntityPotionEffectEvent.Cause cause) {
+            this.effect = effect;
+            this.cause = cause;
+        }
+
+        private ProcessableEffect(MobEffectList type, EntityPotionEffectEvent.Cause cause) {
+            this.type = type;
+            this.cause = cause;
+        }
+    }
+    // CraftBukkit end
+
     protected void tickEffects() {
         Iterator iterator = this.activeEffects.keySet().iterator();
 
+        isTickingEffects = true; // CraftBukkit
         try {
             while (iterator.hasNext()) {
                 MobEffectList mobeffectlist = (MobEffectList) iterator.next();
@@ -766,6 +853,12 @@
                     this.onEffectUpdated(mobeffect, true, (Entity) null);
                 })) {
                     if (!this.level.isClientSide) {
+                        // CraftBukkit start
+                        EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect, null, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.EXPIRATION);
+                        if (event.isCancelled()) {
+                            continue;
+                        }
+                        // CraftBukkit end
                         iterator.remove();
                         this.onEffectRemoved(mobeffect);
                     }
@@ -776,6 +869,17 @@
         } catch (ConcurrentModificationException concurrentmodificationexception) {
             ;
         }
+        // CraftBukkit start
+        isTickingEffects = false;
+        for (ProcessableEffect e : effectsToProcess) {
+            if (e.effect != null) {
+                addEffect(e.effect, e.cause);
+            } else {
+                removeEffect(e.type, e.cause);
+            }
+        }
+        effectsToProcess.clear();
+        // CraftBukkit end
 
         if (this.effectsDirty) {
             if (!this.level.isClientSide) {
@@ -902,7 +1006,13 @@
         this.entityData.set(EntityLiving.DATA_EFFECT_COLOR_ID, 0);
     }
 
+    // CraftBukkit start
     public boolean removeAllEffects() {
+        return removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+    }
+
+    public boolean removeAllEffects(EntityPotionEffectEvent.Cause cause) {
+        // CraftBukkit end
         if (this.level.isClientSide) {
             return false;
         } else {
@@ -911,7 +1021,14 @@
             boolean flag;
 
             for (flag = false; iterator.hasNext(); flag = true) {
-                this.onEffectRemoved((MobEffect) iterator.next());
+                // CraftBukkit start
+                MobEffect effect = (MobEffect) iterator.next();
+                EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause, EntityPotionEffectEvent.Action.CLEARED);
+                if (event.isCancelled()) {
+                    continue;
+                }
+                this.onEffectRemoved(effect);
+                // CraftBukkit end
                 iterator.remove();
             }
 
@@ -940,18 +1057,48 @@
         return this.addEffect(mobeffect, (Entity) null);
     }
 
+    // CraftBukkit start
+    public boolean addEffect(MobEffect mobeffect, EntityPotionEffectEvent.Cause cause) {
+        return this.addEffect(mobeffect, (Entity) null, cause);
+    }
+
     public boolean addEffect(MobEffect mobeffect, @Nullable Entity entity) {
+        return this.addEffect(mobeffect, entity, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+    }
+
+    public boolean addEffect(MobEffect mobeffect, @Nullable Entity entity, EntityPotionEffectEvent.Cause cause) {
+        if (isTickingEffects) {
+            effectsToProcess.add(new ProcessableEffect(mobeffect, cause));
+            return true;
+        }
+        // CraftBukkit end
+
         if (!this.canBeAffected(mobeffect)) {
             return false;
         } else {
             MobEffect mobeffect1 = (MobEffect) this.activeEffects.get(mobeffect.getEffect());
 
+            // CraftBukkit start
+            boolean override = false;
+            if (mobeffect1 != null) {
+                override = new MobEffect(mobeffect1).update(mobeffect);
+            }
+
+            EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, mobeffect1, mobeffect, cause, override);
+            if (event.isCancelled()) {
+                return false;
+            }
+            // CraftBukkit end
+
             if (mobeffect1 == null) {
                 this.activeEffects.put(mobeffect.getEffect(), mobeffect);
                 this.onEffectAdded(mobeffect, entity);
                 return true;
-            } else if (mobeffect1.update(mobeffect)) {
+                // CraftBukkit start
+            } else if (event.isOverride()) {
+                mobeffect1.update(mobeffect);
                 this.onEffectUpdated(mobeffect1, true, entity);
+                // CraftBukkit end
                 return true;
             } else {
                 return false;
@@ -988,13 +1135,39 @@
         return this.getMobType() == EnumMonsterType.UNDEAD;
     }
 
+    // CraftBukkit start
     @Nullable
     public MobEffect removeEffectNoUpdate(@Nullable MobEffectList mobeffectlist) {
+        return c(mobeffectlist, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+    }
+
+    @Nullable
+    public MobEffect c(@Nullable MobEffectList mobeffectlist, EntityPotionEffectEvent.Cause cause) {
+        if (isTickingEffects) {
+            effectsToProcess.add(new ProcessableEffect(mobeffectlist, cause));
+            return null;
+        }
+
+        MobEffect effect = this.activeEffects.get(mobeffectlist);
+        if (effect == null) {
+            return null;
+        }
+
+        EntityPotionEffectEvent event = CraftEventFactory.callEntityPotionEffectChangeEvent(this, effect, null, cause);
+        if (event.isCancelled()) {
+            return null;
+        }
+
         return (MobEffect) this.activeEffects.remove(mobeffectlist);
     }
 
     public boolean removeEffect(MobEffectList mobeffectlist) {
-        MobEffect mobeffect = this.removeEffectNoUpdate(mobeffectlist);
+        return removeEffect(mobeffectlist, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.UNKNOWN);
+    }
+
+    public boolean removeEffect(MobEffectList mobeffectlist, EntityPotionEffectEvent.Cause cause) {
+        MobEffect mobeffect = this.c(mobeffectlist, cause);
+        // CraftBukkit end
 
         if (mobeffect != null) {
             this.onEffectRemoved(mobeffect);
@@ -1031,20 +1204,55 @@
 
     }
 
+    // CraftBukkit start - Delegate so we can handle providing a reason for health being regained
     public void heal(float f) {
+        heal(f, EntityRegainHealthEvent.RegainReason.CUSTOM);
+    }
+
+    public void heal(float f, EntityRegainHealthEvent.RegainReason regainReason) {
         float f1 = this.getHealth();
 
         if (f1 > 0.0F) {
-            this.setHealth(f1 + f);
+            EntityRegainHealthEvent event = new EntityRegainHealthEvent(this.getBukkitEntity(), f, regainReason);
+            // Suppress during worldgen
+            if (this.valid) {
+                this.level.getCraftServer().getPluginManager().callEvent(event);
+            }
+
+            if (!event.isCancelled()) {
+                this.setHealth((float) (this.getHealth() + event.getAmount()));
+            }
+            // CraftBukkit end
         }
 
     }
 
     public float getHealth() {
+        // CraftBukkit start - Use unscaled health
+        if (this instanceof EntityPlayer) {
+            return (float) ((EntityPlayer) this).getBukkitEntity().getHealth();
+        }
+        // CraftBukkit end
         return (Float) this.entityData.get(EntityLiving.DATA_HEALTH_ID);
     }
 
     public void setHealth(float f) {
+        // CraftBukkit start - Handle scaled health
+        if (this instanceof EntityPlayer) {
+            org.bukkit.craftbukkit.entity.CraftPlayer player = ((EntityPlayer) this).getBukkitEntity();
+            // Squeeze
+            if (f < 0.0F) {
+                player.setRealHealth(0.0D);
+            } else if (f > player.getMaxHealth()) {
+                player.setRealHealth(player.getMaxHealth());
+            } else {
+                player.setRealHealth(f);
+            }
+
+            player.updateScaledHealth(false);
+            return;
+        }
+        // CraftBukkit end
         this.entityData.set(EntityLiving.DATA_HEALTH_ID, MathHelper.clamp(f, 0.0F, this.getMaxHealth()));
     }
 
@@ -1058,7 +1266,7 @@
             return false;
         } else if (this.level.isClientSide) {
             return false;
-        } else if (this.isDeadOrDying()) {
+        } else if (this.isRemoved() || this.dead || this.getHealth() <= 0.0F) { // CraftBukkit - Don't allow entities that got set to dead/killed elsewhere to get damaged and die
             return false;
         } else if (damagesource.isFire() && this.hasEffect(MobEffects.FIRE_RESISTANCE)) {
             return false;
@@ -1069,10 +1277,11 @@
 
             this.noActionTime = 0;
             float f1 = f;
-            boolean flag = false;
+            boolean flag = f > 0.0F && this.isDamageSourceBlocked(damagesource); // Copied from below
             float f2 = 0.0F;
 
-            if (f > 0.0F && this.isDamageSourceBlocked(damagesource)) {
+            // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+            if (false && f > 0.0F && this.isDamageSourceBlocked(damagesource)) {
                 this.hurtCurrentlyUsedShield(f);
                 f2 = f;
                 f = 0.0F;
@@ -1090,27 +1299,47 @@
             this.animationSpeed = 1.5F;
             boolean flag1 = true;
 
-            if ((float) this.invulnerableTime > 10.0F) {
+            if ((float) this.invulnerableTime > (float) this.invulnerableDuration / 2.0F) { // CraftBukkit - restore use of maxNoDamageTicks
                 if (f <= this.lastHurt) {
                     return false;
                 }
 
-                this.actuallyHurt(damagesource, f - this.lastHurt);
+                // CraftBukkit start
+                if (!this.damageEntity0(damagesource, f - this.lastHurt)) {
+                    return false;
+                }
+                // CraftBukkit end
                 this.lastHurt = f;
                 flag1 = false;
             } else {
+                // CraftBukkit start
+                if (!this.damageEntity0(damagesource, f)) {
+                    return false;
+                }
                 this.lastHurt = f;
-                this.invulnerableTime = 20;
-                this.actuallyHurt(damagesource, f);
+                this.invulnerableTime = this.invulnerableDuration; // CraftBukkit - restore use of maxNoDamageTicks
+                // this.damageEntity0(damagesource, f);
+                // CraftBukkit end
                 this.hurtDuration = 10;
                 this.hurtTime = this.hurtDuration;
             }
 
-            if (damagesource.isDamageHelmet() && !this.getItemBySlot(EnumItemSlot.HEAD).isEmpty()) {
+            // CraftBukkit - Moved into damageEntity0(DamageSource, float)
+            if (false && damagesource.isDamageHelmet() && !this.getItemBySlot(EnumItemSlot.HEAD).isEmpty()) {
                 this.hurtHelmet(damagesource, f);
                 f *= 0.75F;
             }
 
+            // CraftBukkit start
+            if (this instanceof EntityAnimal) {
+                ((EntityAnimal) this).resetLove();
+                if (this instanceof EntityTameableAnimal) {
+                    ((EntityTameableAnimal) this).setOrderedToSit(false);
+                }
+            }
+            // CraftBukkit end
+
             this.hurtDir = 0.0F;
             Entity entity1 = damagesource.getEntity();
 
@@ -1233,19 +1462,29 @@
             EnumHand[] aenumhand = EnumHand.values();
             int i = aenumhand.length;
 
+            // CraftBukkit start
+            ItemStack itemstack1 = ItemStack.EMPTY;
             for (int j = 0; j < i; ++j) {
                 EnumHand enumhand = aenumhand[j];
-                ItemStack itemstack1 = this.getItemInHand(enumhand);
+                itemstack1 = this.getItemInHand(enumhand);
 
                 if (itemstack1.is(Items.TOTEM_OF_UNDYING)) {
                     itemstack = itemstack1.copy();
-                    itemstack1.shrink(1);
+                    // itemstack1.subtract(1); // CraftBukkit
                     break;
                 }
             }
 
-            if (itemstack != null) {
-                if (this instanceof EntityPlayer) {
+            EntityResurrectEvent event = new EntityResurrectEvent((LivingEntity) this.getBukkitEntity());
+            event.setCancelled(itemstack == null);
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (!event.isCancelled()) {
+                if (!itemstack1.isEmpty()) {
+                    itemstack1.shrink(1);
+                }
+                if (itemstack != null && this instanceof EntityPlayer) {
+                    // CraftBukkit end
                     EntityPlayer entityplayer = (EntityPlayer) this;
 
                     entityplayer.awardStat(StatisticList.ITEM_USED.get(Items.TOTEM_OF_UNDYING));
@@ -1253,14 +1492,16 @@
                 }
 
                 this.setHealth(1.0F);
-                this.removeAllEffects();
-                this.addEffect(new MobEffect(MobEffects.REGENERATION, 900, 1));
-                this.addEffect(new MobEffect(MobEffects.ABSORPTION, 100, 1));
-                this.addEffect(new MobEffect(MobEffects.FIRE_RESISTANCE, 800, 0));
+                // CraftBukkit start
+                this.removeAllEffects(org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+                this.addEffect(new MobEffect(MobEffects.REGENERATION, 900, 1), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+                this.addEffect(new MobEffect(MobEffects.ABSORPTION, 100, 1), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+                this.addEffect(new MobEffect(MobEffects.FIRE_RESISTANCE, 800, 0), org.bukkit.event.entity.EntityPotionEffectEvent.Cause.TOTEM);
+                // CraftBukkit end
                 this.level.broadcastEntityEvent(this, (byte) 35);
             }
 
-            return itemstack != null;
+            return !event.isCancelled();
         }
     }
 
@@ -1365,14 +1606,22 @@
                     IBlockData iblockdata = Blocks.WITHER_ROSE.defaultBlockState();
 
                     if (this.level.getBlockState(blockposition).isAir() && iblockdata.canSurvive(this.level, blockposition)) {
-                        this.level.setBlock(blockposition, iblockdata, 3);
-                        flag = true;
+                        // CraftBukkit start - call EntityBlockFormEvent for Wither Rose
+                        flag = org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockFormEvent(this.level, blockposition, iblockdata, 3, this);
+                        // CraftBukkit end
                     }
                 }
 
                 if (!flag) {
                     EntityItem entityitem = new EntityItem(this.level, this.getX(), this.getY(), this.getZ(), new ItemStack(Items.WITHER_ROSE));
 
+                    // CraftBukkit start
+                    org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+                    CraftEventFactory.callEvent(event);
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                    // CraftBukkit end
                     this.level.addFreshEntity(entityitem);
                 }
             }
@@ -1392,21 +1641,40 @@
 
         boolean flag = this.lastHurtByPlayerTime > 0;
 
+        this.dropEquipment(); // CraftBukkit - from below
         if (this.shouldDropLoot() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT)) {
             this.dropFromLootTable(damagesource, flag);
             this.dropCustomDeathLoot(damagesource, i, flag);
         }
+        // CraftBukkit start - Call death event
+        CraftEventFactory.callEntityDeathEvent(this, this.drops);
+        this.drops = new ArrayList<>();
+        // CraftBukkit end
 
-        this.dropEquipment();
+        // this.dropInventory();// CraftBukkit - moved up
         this.dropExperience();
     }
 
     protected void dropEquipment() {}
 
-    protected void dropExperience() {
+    // CraftBukkit start
+    public int getExpReward() {
         if (this.level instanceof WorldServer && (this.isAlwaysExperienceDropper() || this.lastHurtByPlayerTime > 0 && this.shouldDropExperience() && this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBLOOT))) {
-            EntityExperienceOrb.award((WorldServer) this.level, this.position(), this.getExperienceReward(this.lastHurtByPlayer));
+            int i = this.getExperienceReward(this.lastHurtByPlayer);
+            return i;
+        } else {
+            return 0;
+        }
+    }
+    // CraftBukkit end
+
+    protected void dropExperience() {
+        // CraftBukkit start - Update getExpReward() above if the removed if() changes!
+        if (true) {
+            EntityExperienceOrb.award((WorldServer) this.level, this.position(), this.expToDrop);
+            this.expToDrop = 0;
         }
+        // CraftBukkit end
 
     }
 
@@ -1526,9 +1794,14 @@
         int i = this.calculateFallDamage(f, f1);
 
         if (i > 0) {
+            // CraftBukkit start
+            if (!this.hurt(damagesource, (float) i)) {
+                return true;
+            }
+            // CraftBukkit end
             this.playSound(this.getFallDamageSound(i), 1.0F, 1.0F);
             this.playBlockFallSound();
-            this.hurt(damagesource, (float) i);
+            // this.damageEntity(damagesource, (float) i); // CraftBukkit - moved up
             return true;
         } else {
             return flag;
@@ -1577,7 +1850,7 @@
 
     protected float getDamageAfterArmorAbsorb(DamageSource damagesource, float f) {
         if (!damagesource.isBypassArmor()) {
-            this.hurtArmor(damagesource, f);
+            // this.damageArmor(damagesource, f); // CraftBukkit - Moved into damageEntity0(DamageSource, float)
             f = CombatMath.getDamageAfterAbsorb(f, (float) this.getArmorValue(), (float) this.getAttributeValue(GenericAttributes.ARMOR_TOUGHNESS));
         }
 
@@ -1590,7 +1863,8 @@
         } else {
             int i;
 
-            if (this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
+            // CraftBukkit - Moved to damageEntity0(DamageSource, float)
+            if (false && this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
                 i = (this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
                 int j = 25 - i;
                 float f1 = f * (float) j;
@@ -1621,29 +1895,172 @@
         }
     }
 
-    protected void actuallyHurt(DamageSource damagesource, float f) {
-        if (!this.isInvulnerableTo(damagesource)) {
-            f = this.getDamageAfterArmorAbsorb(damagesource, f);
-            f = this.getDamageAfterMagicAbsorb(damagesource, f);
-            float f1 = f;
+    // CraftBukkit start
+    protected boolean damageEntity0(final DamageSource damagesource, float f) { // void -> boolean, add final
+       if (!this.isInvulnerableTo(damagesource)) {
+            final boolean human = this instanceof EntityHuman;
+            float originalDamage = f;
+            Function<Double, Double> hardHat = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    if (damagesource.isDamageHelmet() && !EntityLiving.this.getItemBySlot(EnumItemSlot.HEAD).isEmpty()) {
+                        return -(f - (f * 0.75F));
+
+                    }
+                    return -0.0;
+                }
+            };
+            float hardHatModifier = hardHat.apply((double) f).floatValue();
+            f += hardHatModifier;
+
+            Function<Double, Double> blocking = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -((EntityLiving.this.isDamageSourceBlocked(damagesource)) ? f : 0.0);
+                }
+            };
+            float blockingModifier = blocking.apply((double) f).floatValue();
+            f += blockingModifier;
+
+            Function<Double, Double> armor = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(f - EntityLiving.this.getDamageAfterArmorAbsorb(damagesource, f.floatValue()));
+                }
+            };
+            float armorModifier = armor.apply((double) f).floatValue();
+            f += armorModifier;
+
+            Function<Double, Double> resistance = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    if (!damagesource.isBypassMagic() && EntityLiving.this.hasEffect(MobEffects.DAMAGE_RESISTANCE) && damagesource != DamageSource.OUT_OF_WORLD) {
+                        int i = (EntityLiving.this.getEffect(MobEffects.DAMAGE_RESISTANCE).getAmplifier() + 1) * 5;
+                        int j = 25 - i;
+                        float f1 = f.floatValue() * (float) j;
+                        return -(f - (f1 / 25.0F));
+                    }
+                    return -0.0;
+                }
+            };
+            float resistanceModifier = resistance.apply((double) f).floatValue();
+            f += resistanceModifier;
+
+            Function<Double, Double> magic = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(f - EntityLiving.this.getDamageAfterMagicAbsorb(damagesource, f.floatValue()));
+                }
+            };
+            float magicModifier = magic.apply((double) f).floatValue();
+            f += magicModifier;
+
+            Function<Double, Double> absorption = new Function<Double, Double>() {
+                @Override
+                public Double apply(Double f) {
+                    return -(Math.max(f - Math.max(f - EntityLiving.this.getAbsorptionAmount(), 0.0F), 0.0F));
+                }
+            };
+            float absorptionModifier = absorption.apply((double) f).floatValue();
+
+            EntityDamageEvent event = CraftEventFactory.handleLivingEntityDamageEvent(this, damagesource, originalDamage, hardHatModifier, blockingModifier, armorModifier, resistanceModifier, magicModifier, absorptionModifier, hardHat, blocking, armor, resistance, magic, absorption);
+            if (damagesource.getEntity() instanceof EntityHuman) {
+                ((EntityHuman) damagesource.getEntity()).resetAttackStrengthTicker(); // Moved from EntityHuman in order to make the cooldown reset get called after the damage event is fired
+            }
+            if (event.isCancelled()) {
+                return false;
+            }
+
+            f = (float) event.getFinalDamage();
+
+            // Resistance
+            if (event.getDamage(DamageModifier.RESISTANCE) < 0) {
+                float f3 = (float) -event.getDamage(DamageModifier.RESISTANCE);
+                if (f3 > 0.0F && f3 < 3.4028235E37F) {
+                    if (this instanceof EntityPlayer) {
+                        ((EntityPlayer) this).awardStat(StatisticList.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
+                    } else if (damagesource.getEntity() instanceof EntityPlayer) {
+                        ((EntityPlayer) damagesource.getEntity()).awardStat(StatisticList.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
+                    }
+                }
+            }
+
+            // Apply damage to helmet
+            if (damagesource.isDamageHelmet() && !this.getItemBySlot(EnumItemSlot.HEAD).isEmpty()) {
+                this.hurtHelmet(damagesource, f);
+            }
 
-            f = Math.max(f - this.getAbsorptionAmount(), 0.0F);
-            this.setAbsorptionAmount(this.getAbsorptionAmount() - (f1 - f));
-            float f2 = f1 - f;
+            // Apply damage to armor
+            if (!damagesource.isBypassArmor()) {
+                float armorDamage = (float) (event.getDamage() + event.getDamage(DamageModifier.BLOCKING) + event.getDamage(DamageModifier.HARD_HAT));
+                this.hurtArmor(damagesource, armorDamage);
+            }
+
+            // Apply blocking code // PAIL: steal from above
+            if (event.getDamage(DamageModifier.BLOCKING) < 0) {
+                this.level.broadcastEntityEvent(this, (byte) 29); // SPIGOT-4635 - shield damage sound
+                this.hurtCurrentlyUsedShield((float) -event.getDamage(DamageModifier.BLOCKING));
+                Entity entity = damagesource.getDirectEntity();
+
+                if (entity instanceof EntityLiving) {
+                    this.blockUsingShield((EntityLiving) entity);
+                }
+            }
+
+            absorptionModifier = (float) -event.getDamage(DamageModifier.ABSORPTION);
+            this.setAbsorptionAmount(Math.max(this.getAbsorptionAmount() - absorptionModifier, 0.0F));
+            float f2 = absorptionModifier;
 
+            if (f2 > 0.0F && f2 < 3.4028235E37F && this instanceof EntityHuman) {
+                ((EntityHuman) this).awardStat(StatisticList.DAMAGE_ABSORBED, Math.round(f2 * 10.0F));
+            }
             if (f2 > 0.0F && f2 < 3.4028235E37F && damagesource.getEntity() instanceof EntityPlayer) {
                 ((EntityPlayer) damagesource.getEntity()).awardStat(StatisticList.DAMAGE_DEALT_ABSORBED, Math.round(f2 * 10.0F));
             }
 
-            if (f != 0.0F) {
+            if (f > 0 || !human) {
+                if (human) {
+                    // PAIL: Be sure to drag all this code from the EntityHuman subclass each update.
+                    ((EntityHuman) this).causeFoodExhaustion(damagesource.getFoodExhaustion(), org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.DAMAGED); // CraftBukkit - EntityExhaustionEvent
+                    if (f < 3.4028235E37F) {
+                        ((EntityHuman) this).awardStat(StatisticList.DAMAGE_TAKEN, Math.round(f * 10.0F));
+                    }
+                }
+                // CraftBukkit end
                 float f3 = this.getHealth();
 
                 this.setHealth(f3 - f);
                 this.getCombatTracker().recordDamage(damagesource, f3, f);
-                this.setAbsorptionAmount(this.getAbsorptionAmount() - f);
+                // CraftBukkit start
+                if (!human) {
+                    this.setAbsorptionAmount(this.getAbsorptionAmount() - f);
+                }
                 this.gameEvent(GameEvent.ENTITY_DAMAGED, damagesource.getEntity());
+
+                return true;
+            } else {
+                // Duplicate triggers if blocking
+                if (event.getDamage(DamageModifier.BLOCKING) < 0) {
+                    if (this instanceof EntityPlayer) {
+                        CriterionTriggers.ENTITY_HURT_PLAYER.trigger((EntityPlayer) this, damagesource, f, originalDamage, true);
+                        f2 = (float) -event.getDamage(DamageModifier.BLOCKING);
+                        if (f2 > 0.0F && f2 < 3.4028235E37F) {
+                            ((EntityPlayer) this).awardStat(StatisticList.DAMAGE_BLOCKED_BY_SHIELD, Math.round(originalDamage * 10.0F));
+                        }
+                    }
+
+                    if (damagesource.getEntity() instanceof EntityPlayer) {
+                        CriterionTriggers.PLAYER_HURT_ENTITY.trigger((EntityPlayer) damagesource.getEntity(), this, damagesource, f, originalDamage, true);
+                    }
+
+                    return false;
+                } else {
+                    return originalDamage > 0;
+                }
+                // CraftBukkit end
             }
         }
+        return false; // CraftBukkit
     }
 
     public CombatTracker getCombatTracker() {
@@ -1664,8 +2081,18 @@
     }
 
 
     public final int getStingerCount() {
         return (Integer) this.entityData.get(EntityLiving.DATA_STINGER_COUNT_ID);
@@ -1961,6 +2388,12 @@
 
     public abstract ItemStack getItemBySlot(EnumItemSlot enumitemslot);
 
+    // CraftBukkit start
+    public void setItemSlot(EnumItemSlot enumitemslot, ItemStack itemstack, boolean silent) {
+        this.setItemSlot(enumitemslot, itemstack);
+    }
+    // CraftBukkit end
+
     @Override
     public abstract void setItemSlot(EnumItemSlot enumitemslot, ItemStack itemstack);
 
@@ -2204,6 +2637,7 @@
                 }
 
                 if (this.onGround && !this.level.isClientSide) {
+                    if (getSharedFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, false).isCancelled()) // CraftBukkit
                     this.setSharedFlag(7, false);
                 }
             } else {
@@ -2734,6 +3168,7 @@
         }
 
         if (!this.level.isClientSide) {
+            if (flag != this.getSharedFlag(7) && !CraftEventFactory.callToggleGlideEvent(this, flag).isCancelled()) // CraftBukkit
             this.setSharedFlag(7, flag);
         }
 
@@ -2901,14 +3336,21 @@
 
     @Override
     public boolean isPickable() {
-        return !this.isRemoved();
+        return !this.isRemoved() && this.collides; // CraftBukkit
     }
 
     @Override
     public boolean isPushable() {
-        return this.isAlive() && !this.isSpectator() && !this.onClimbable();
+        return this.isAlive() && !this.isSpectator() && !this.onClimbable() && this.collides; // CraftBukkit
     }
 
+    // CraftBukkit start - collidable API
+    @Override
+    public boolean canCollideWithBukkit(Entity entity) {
+        return isPushable() && this.collides != this.collidableExemptions.contains(entity.getUUID());
+    }
+    // CraftBukkit end
+
     @Override
     protected void markHurt() {
         this.hurtMarked = this.random.nextDouble() >= this.getAttributeValue(GenericAttributes.KNOCKBACK_RESISTANCE);
@@ -3107,7 +3549,25 @@
             } else {
                 if (!this.useItem.isEmpty() && this.isUsingItem()) {
                     this.triggerItemUseEffects(this.useItem, 16);
-                    ItemStack itemstack = this.useItem.finishUsingItem(this.level, this);
+                    // CraftBukkit start - fire PlayerItemConsumeEvent
+                    ItemStack itemstack;
+                    if (this instanceof EntityPlayer) {
+                        org.bukkit.inventory.ItemStack craftItem = CraftItemStack.asBukkitCopy(this.useItem);
+                        PlayerItemConsumeEvent event = new PlayerItemConsumeEvent((Player) this.getBukkitEntity(), craftItem);
+                        level.getCraftServer().getPluginManager().callEvent(event);
+
+                        if (event.isCancelled()) {
+                            // Update client
+                            ((EntityPlayer) this).getBukkitEntity().updateInventory();
+                            ((EntityPlayer) this).getBukkitEntity().updateScaledHealth();
+                            return;
+                        }
+
+                        itemstack = (craftItem.equals(event.getItem())) ? this.useItem.finishUsingItem(this.level, this) : CraftItemStack.asNMSCopy(event.getItem()).finishUsingItem(level, this);
+                    } else {
+                        itemstack = this.useItem.finishUsingItem(this.level, this);
+                    }
+                    // CraftBukkit end
 
                     if (itemstack != this.useItem) {
                         this.setItemInHand(enumhand, itemstack);
@@ -3180,6 +3640,12 @@
     }
 
     public boolean randomTeleport(double d0, double d1, double d2, boolean flag) {
+        // CraftBukkit start
+        return randomTeleport(d0, d1, d2, flag, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.UNKNOWN).orElse(false);
+    }
+
+    public Optional<Boolean> randomTeleport(double d0, double d1, double d2, boolean flag, org.bukkit.event.player.PlayerTeleportEvent.TeleportCause cause) {
+        // CraftBukkit end
         double d3 = this.getX();
         double d4 = this.getY();
         double d5 = this.getZ();
@@ -3204,16 +3670,41 @@
             }
 
             if (flag2) {
-                this.teleportTo(d0, d6, d2);
+                // CraftBukkit start - Teleport event
+                // this.teleportTo(d0, d6, d2);
+
+                // first set position, to check if the place to teleport is valid
+                this.setPos(d0, d6, d2);
                 if (world.noCollision((Entity) this) && !world.containsAnyLiquid(this.getBoundingBox())) {
                     flag1 = true;
                 }
+                // now revert and call event if the teleport place is valid
+                this.setPos(d3, d4, d5);
+
+                if (flag1) {
+                    if (!(this instanceof EntityPlayer)) {
+                        EntityTeleportEvent teleport = new EntityTeleportEvent(this.getBukkitEntity(), new Location(this.level.getWorld(), d3, d4, d5), new Location(this.level.getWorld(), d0, d6, d2));
+                        this.level.getCraftServer().getPluginManager().callEvent(teleport);
+                        if (!teleport.isCancelled()) {
+                            Location to = teleport.getTo();
+                            this.teleportTo(to.getX(), to.getY(), to.getZ());
+                        } else {
+                            return Optional.empty();
+                        }
+                    } else {
+                        // player teleport event is called in the underlining code
+                        if (((EntityPlayer) this).connection.teleport(d0, d6, d2, this.getYRot(), this.getXRot(), java.util.Collections.emptySet(), false, cause)) {
+                            return Optional.empty();
+                        }
+                    }
+                }
+                // CraftBukkit end
             }
         }
 
         if (!flag1) {
-            this.teleportTo(d3, d4, d5);
-            return false;
+            // this.enderTeleportTo(d3, d4, d5); // CraftBukkit - already set the location back
+            return Optional.of(false); // CraftBukkit
         } else {
             if (flag) {
                 world.broadcastEntityEvent(this, (byte) 46);
@@ -3223,7 +3714,7 @@
                 ((EntityCreature) this).getNavigation().stop();
             }
 
-            return true;
+            return Optional.of(true); // CraftBukkit
         }
     }
 
@@ -3306,7 +3797,7 @@
     }
 
     public void stopSleeping() {
-        Optional optional = this.getSleepingPos();
+        Optional<BlockPosition> optional = this.getSleepingPos(); // CraftBukkit - decompile error
         World world = this.level;
 
         java.util.Objects.requireNonNull(this.level);
@@ -3338,7 +3829,7 @@
 
     @Nullable
     public EnumDirection getBedOrientation() {
-        BlockPosition blockposition = (BlockPosition) this.getSleepingPos().orElse((Object) null);
+        BlockPosition blockposition = (BlockPosition) this.getSleepingPos().orElse(null); // CraftBukkit - decompile error
 
         return blockposition != null ? BlockBed.getBedOrientation(this.level, blockposition) : null;
     }
@@ -3387,7 +3878,7 @@
                 Pair<MobEffect, Float> pair = (Pair) iterator.next();
 
                 if (!world.isClientSide && pair.getFirst() != null && world.random.nextFloat() < (Float) pair.getSecond()) {
-                    entityliving.addEffect(new MobEffect((MobEffect) pair.getFirst()));
+                    entityliving.addEffect(new MobEffect((MobEffect) pair.getFirst()), EntityPotionEffectEvent.Cause.FOOD); // CraftBukkit
                 }
             }
         }
@@ -3490,8 +3981,10 @@
         this.setDeltaMovement((double) ((float) packetplayoutspawnentityliving.getXd() / 8000.0F), (double) ((float) packetplayoutspawnentityliving.getYd() / 8000.0F), (double) ((float) packetplayoutspawnentityliving.getZd() / 8000.0F));
     }
 
-    public static record a(SoundEffect a, SoundEffect b) {
+    // CraftBukkit start - decompile error
+    public static record a(SoundEffect small, SoundEffect big) {
 
+        /*
         private final SoundEffect small;
         private final SoundEffect big;
 
@@ -3507,5 +4000,7 @@
         public SoundEffect big() {
             return this.big;
         }
+         */
+        // CraftBukkit end
     }
 }
