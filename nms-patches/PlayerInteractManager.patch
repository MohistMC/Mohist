--- a/net/minecraft/server/level/PlayerInteractManager.java
+++ b/net/minecraft/server/level/PlayerInteractManager.java
     public boolean destroyBlock(BlockPosition blockposition) {
         IBlockData iblockdata = this.level.getBlockState(blockposition);
+        // CraftBukkit start - fire BlockBreakEvent
+        org.bukkit.block.Block bblock = CraftBlock.at(level, blockposition);
+        BlockBreakEvent event = null;
+
+        if (this.player instanceof EntityPlayer) {
+            // Sword + Creative mode pre-cancel
+            boolean isSwordNoBreak = !this.player.getMainHandItem().getItem().canAttackBlock(iblockdata, this.level, blockposition, this.player);
+
+            // Tell client the block is gone immediately then process events
+            // Don't tell the client if its a creative sword break because its not broken!
+            if (level.getBlockEntity(blockposition) == null && !isSwordNoBreak) {
+                PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(blockposition, Blocks.AIR.defaultBlockState());
+                this.player.connection.send(packet);
+            }
+
+            event = new BlockBreakEvent(bblock, this.player.getBukkitEntity());
+
+            // Sword + Creative mode pre-cancel
+            event.setCancelled(isSwordNoBreak);
 
-        if (!this.player.getMainHandItem().getItem().canAttackBlock(iblockdata, this.level, blockposition, this.player)) {
+            // Calculate default block experience
+            IBlockData nmsData = this.level.getBlockState(blockposition);
+            Block nmsBlock = nmsData.getBlock();
+
+            ItemStack itemstack = this.player.getItemBySlot(EnumItemSlot.MAINHAND);
+
+            if (nmsBlock != null && !event.isCancelled() && !this.isCreative() && this.player.hasCorrectToolForDrops(nmsBlock.defaultBlockState())) {
+                event.setExpToDrop(nmsBlock.getExpDrop(nmsData, this.level, blockposition, itemstack));
+            }
+
+            this.level.getCraftServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                if (isSwordNoBreak) {
+                    return false;
+                }
+                // Let the client know the block still exists
+                this.player.connection.send(new PacketPlayOutBlockChange(this.level, blockposition));
+
+                // Brute force all possible updates
+                for (EnumDirection dir : EnumDirection.values()) {
+                    this.player.connection.send(new PacketPlayOutBlockChange(level, blockposition.relative(dir)));
+                }
+
+                // Update any tile entity data for this block
+                TileEntity tileentity = this.level.getBlockEntity(blockposition);
+                if (tileentity != null) {
+                    this.player.connection.send(tileentity.getUpdatePacket());
+                }
+                return false;
+            }
+        }
+        // CraftBukkit end
+
+        if (false && !this.player.getMainHandItem().getItem().canAttackBlock(iblockdata, this.level, blockposition, this.player)) { // CraftBukkit - false
             return false;
         } else {
+            iblockdata = this.level.getBlockState(blockposition); // CraftBukkit - update state from plugins
+            if (iblockdata.isAir()) return false; // CraftBukkit - A plugin set block to air without cancelling
             TileEntity tileentity = this.level.getBlockEntity(blockposition);
             Block block = iblockdata.getBlock();
 
@@ -244,6 +383,10 @@
             } else if (this.player.blockActionRestricted(this.level, blockposition, this.gameModeForPlayer)) {
                 return false;
             } else {
+                // CraftBukkit start
+                org.bukkit.block.BlockState state = bblock.getState();
+                level.captureDrops = new ArrayList<>();
+                // CraftBukkit end
                 block.playerWillDestroy(this.level, blockposition, iblockdata, this.player);
                 boolean flag = this.level.removeBlock(blockposition, false);
 
@@ -252,19 +395,32 @@
                 }
 
                 if (this.isCreative()) {
-                    return true;
+                    // return true; // CraftBukkit
                 } else {
                     ItemStack itemstack = this.player.getMainHandItem();
                     ItemStack itemstack1 = itemstack.copy();
                     boolean flag1 = this.player.hasCorrectToolForDrops(iblockdata);
 
                     itemstack.mineBlock(this.level, iblockdata, blockposition, this.player);
-                    if (flag && flag1) {
+                    if (flag && flag1 && event.isDropItems()) { // CraftBukkit - Check if block should drop items
                         block.playerDestroy(this.level, this.player, blockposition, iblockdata, tileentity, itemstack1);
                     }
 
-                    return true;
+                    // return true; // CraftBukkit
+                }
+                // CraftBukkit start
+                if (event.isDropItems()) {
+                    org.bukkit.craftbukkit.event.CraftEventFactory.handleBlockDropItemEvent(bblock, state, this.player, level.captureDrops);
+                }
+                level.captureDrops = null;
+
+                // Drop event experience
+                if (flag && event != null) {
+                    iblockdata.getBlock().popExperience(this.level, blockposition, event.getExpToDrop());
                 }
+
+                return true;
+                // CraftBukkit end
             }
         }
     }
@@ -306,12 +462,52 @@
         }
     }
 
+    // CraftBukkit start - whole method
+    public boolean interactResult = false;
+    public boolean firedInteract = false;
+    public BlockPosition interactPosition;
+    public EnumHand interactHand;
+    public ItemStack interactItemStack;
     public EnumInteractionResult useItemOn(EntityPlayer entityplayer, World world, ItemStack itemstack, EnumHand enumhand, MovingObjectPositionBlock movingobjectpositionblock) {
         BlockPosition blockposition = movingobjectpositionblock.getBlockPos();
         IBlockData iblockdata = world.getBlockState(blockposition);
+        EnumInteractionResult enuminteractionresult = EnumInteractionResult.PASS;
+        boolean cancelledBlock = false;
 
         if (this.gameModeForPlayer == EnumGamemode.SPECTATOR) {
             ITileInventory itileinventory = iblockdata.getMenuProvider(world, blockposition);
+            cancelledBlock = !(itileinventory instanceof ITileInventory);
+        }
+
+        if (entityplayer.getCooldowns().isOnCooldown(itemstack.getItem())) {
+            cancelledBlock = true;
+        }
+
+        PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(entityplayer, Action.RIGHT_CLICK_BLOCK, blockposition, movingobjectpositionblock.getDirection(), itemstack, cancelledBlock, enumhand);
+        firedInteract = true;
+        interactResult = event.useItemInHand() == Event.Result.DENY;
+        interactPosition = blockposition.immutable();
+        interactHand = enumhand;
+        interactItemStack = itemstack.copy();
+
+        if (event.useInteractedBlock() == Event.Result.DENY) {
+            // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+            if (iblockdata.getBlock() instanceof BlockDoor) {
+                boolean bottom = iblockdata.getValue(BlockDoor.HALF) == BlockPropertyDoubleBlockHalf.LOWER;
+                entityplayer.connection.send(new PacketPlayOutBlockChange(world, bottom ? blockposition.above() : blockposition.below()));
+            } else if (iblockdata.getBlock() instanceof BlockCake) {
+                entityplayer.getBukkitEntity().sendHealthUpdate(); // SPIGOT-1341 - reset health for cake
+            } else if (interactItemStack.getItem() instanceof ItemBisected) {
+                // send a correcting update to the client, as it already placed the upper half of the bisected item
+                entityplayer.connection.send(new PacketPlayOutBlockChange(world, blockposition.relative(movingobjectpositionblock.getDirection()).above()));
+
+                // send a correcting update to the client for the block above as well, this because of replaceable blocks (such as grass, sea grass etc)
+                entityplayer.connection.send(new PacketPlayOutBlockChange(world, blockposition.above()));
+            }
+            entityplayer.getBukkitEntity().updateInventory(); // SPIGOT-2867
+            enuminteractionresult = (event.useItemInHand() != Event.Result.ALLOW) ? EnumInteractionResult.SUCCESS : EnumInteractionResult.PASS;
+        } else if (this.gameModeForPlayer == EnumGamemode.SPECTATOR) {
+            ITileInventory itileinventory = iblockdata.getMenuProvider(world, blockposition);
 
             if (itileinventory != null) {
                 entityplayer.openMenu(itileinventory);
@@ -325,7 +521,7 @@
             ItemStack itemstack1 = itemstack.copy();
 
             if (!flag1) {
-                EnumInteractionResult enuminteractionresult = iblockdata.use(world, entityplayer, enumhand, movingobjectpositionblock);
+                enuminteractionresult = iblockdata.use(world, entityplayer, enumhand, movingobjectpositionblock);
 
                 if (enuminteractionresult.consumesAction()) {
                     CriterionTriggers.ITEM_USED_ON_BLOCK.trigger(entityplayer, blockposition, itemstack1);
@@ -333,17 +529,17 @@
                 }
             }
 
-            if (!itemstack.isEmpty() && !entityplayer.getCooldowns().isOnCooldown(itemstack.getItem())) {
+            if (!itemstack.isEmpty() && enuminteractionresult != EnumInteractionResult.SUCCESS && !interactResult) { // add !interactResult SPIGOT-764
                 ItemActionContext itemactioncontext = new ItemActionContext(entityplayer, enumhand, movingobjectpositionblock);
                 EnumInteractionResult enuminteractionresult1;
 
                 if (this.isCreative()) {
                     int i = itemstack.getCount();
 
-                    enuminteractionresult1 = itemstack.useOn(itemactioncontext);
+                    enuminteractionresult1 = itemstack.useOn(itemactioncontext, enumhand);
                     itemstack.setCount(i);
                 } else {
-                    enuminteractionresult1 = itemstack.useOn(itemactioncontext);
+                    enuminteractionresult1 = itemstack.useOn(itemactioncontext, enumhand);
                 }
 
                 if (enuminteractionresult1.consumesAction()) {
@@ -351,10 +547,10 @@
                 }
 
                 return enuminteractionresult1;
-            } else {
-                return EnumInteractionResult.PASS;
             }
         }
+        return enuminteractionresult;
+        // CraftBukkit end
     }
 
     public void setLevel(WorldServer worldserver) {
