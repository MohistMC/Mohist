--- ../src-base/minecraft/net/minecraft/server/dedicated/PropertyManager.java
+++ ../src-work/minecraft/net/minecraft/server/dedicated/PropertyManager.java
@@ -3,10 +3,14 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileOutputStream;
-import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.io.OutputStreamWriter;
 import java.util.Properties;
+import joptsimple.OptionSet;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.apache.commons.io.IOUtils;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
@@ -14,8 +18,9 @@
 public class PropertyManager
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    private final Properties serverProperties = new Properties();
+    public final Properties serverProperties = new Properties();
     private final File serverPropertiesFile;
+    private OptionSet options = null;
 
     public PropertyManager(File propertiesFile)
     {
@@ -28,7 +33,7 @@
             try
             {
                 fileinputstream = new FileInputStream(propertiesFile);
-                this.serverProperties.load(fileinputstream);
+                this.serverProperties.load(new InputStreamReader(fileinputstream, "utf-8"));
             }
             catch (Exception exception)
             {
@@ -37,17 +42,7 @@
             }
             finally
             {
-                if (fileinputstream != null)
-                {
-                    try
-                    {
-                        fileinputstream.close();
-                    }
-                    catch (IOException var11)
-                    {
-                        ;
-                    }
-                }
+                IOUtils.closeQuietly(fileinputstream);
             }
         }
         else
@@ -57,6 +52,18 @@
         }
     }
 
+    public PropertyManager(final OptionSet options) {
+        this((File) options.valueOf("config"));
+        this.options = options;
+    }
+
+    private <T> T getOverride(String name, T value) {
+        if ((this.options != null) && (this.options.has(name)) && !name.equals( "online-mode")) { // Spigot
+            return (T) this.options.valueOf(name);
+        }
+        return value;
+    }
+
     public void generateNewProperties()
     {
         LOGGER.info("Generating new properties file");
@@ -69,8 +76,13 @@
 
         try
         {
+            // CraftBukkit start - Don't attempt writing to file if it's read only
+            if (this.serverPropertiesFile.exists()) { // EMC - Never overwrite the file
+                return;
+            }
+            // CraftBukkit end
             fileoutputstream = new FileOutputStream(this.serverPropertiesFile);
-            this.serverProperties.store(fileoutputstream, "Minecraft server properties");
+            this.serverProperties.store(new OutputStreamWriter(fileoutputstream, "utf-8"), "Minecraft server properties");
         }
         catch (Exception exception)
         {
@@ -79,17 +91,7 @@
         }
         finally
         {
-            if (fileoutputstream != null)
-            {
-                try
-                {
-                    fileoutputstream.close();
-                }
-                catch (IOException var10)
-                {
-                    ;
-                }
-            }
+            IOUtils.closeQuietly((OutputStream)fileoutputstream);
         }
     }
 
@@ -107,20 +109,20 @@
             this.saveProperties();
         }
 
-        return this.serverProperties.getProperty(key, defaultValue);
+        return getOverride(key, this.serverProperties.getProperty(key, defaultValue));
     }
 
     public int getIntProperty(String key, int defaultValue)
     {
         try
         {
-            return Integer.parseInt(this.getStringProperty(key, "" + defaultValue));
+            return getOverride(key, Integer.parseInt(this.getStringProperty(key, "" + defaultValue)));
         }
         catch (Exception var4)
         {
             this.serverProperties.setProperty(key, "" + defaultValue);
             this.saveProperties();
-            return defaultValue;
+            return getOverride(key, defaultValue);
         }
     }
 
@@ -128,13 +130,13 @@
     {
         try
         {
-            return Long.parseLong(this.getStringProperty(key, "" + defaultValue));
+            return getOverride(key, Long.parseLong(this.getStringProperty(key, "" + defaultValue)));
         }
         catch (Exception var5)
         {
             this.serverProperties.setProperty(key, "" + defaultValue);
             this.saveProperties();
-            return defaultValue;
+            return getOverride(key, defaultValue);
         }
     }
 
@@ -142,13 +144,13 @@
     {
         try
         {
-            return Boolean.parseBoolean(this.getStringProperty(key, "" + defaultValue));
+            return getOverride(key, Boolean.parseBoolean(this.getStringProperty(key, "" + defaultValue)));
         }
         catch (Exception var4)
         {
             this.serverProperties.setProperty(key, "" + defaultValue);
             this.saveProperties();
-            return defaultValue;
+            return getOverride(key, defaultValue);
         }
     }
 
