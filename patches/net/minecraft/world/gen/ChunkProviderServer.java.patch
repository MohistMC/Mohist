--- ../src-base/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
+++ ../src-work/minecraft/net/minecraft/world/gen/ChunkProviderServer.java
@@ -26,17 +26,39 @@
 import net.minecraft.world.chunk.storage.IChunkLoader;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.world.ChunkUnloadEvent;
+import red.mohist.api.ServerAPI;
+import red.mohist.configuration.MohistConfig;
 
 public class ChunkProviderServer implements IChunkProvider
 {
     private static final Logger LOGGER = LogManager.getLogger();
-    private final Set<Long> droppedChunksSet = Sets.<Long>newHashSet();
+    public final Set<Long> droppedChunksSet = Sets.<Long>newHashSet();
     public final IChunkGenerator chunkGenerator;
     public final IChunkLoader chunkLoader;
-    public final Long2ObjectMap<Chunk> id2ChunkMap = new Long2ObjectOpenHashMap<Chunk>(8192);
     public final WorldServer world;
     private final Set<Long> loadingChunks = com.google.common.collect.Sets.newHashSet();
+    // Paper start
+    protected Chunk lastChunkByPos = null;
+    public Long2ObjectOpenHashMap<Chunk> id2ChunkMap = new Long2ObjectOpenHashMap<Chunk>(8192) {
 
+        @Override
+        public Chunk get (long key) {
+            if (lastChunkByPos != null && key == lastChunkByPos.chunkKey) {
+                return lastChunkByPos;
+            }
+            return lastChunkByPos = super.get(key);
+        }
+
+        @Override
+        public Chunk remove (long key) {
+            if (lastChunkByPos != null && key == lastChunkByPos.chunkKey) {
+                lastChunkByPos = null;
+            }
+            return super.remove(key);
+        }
+    };
+    // Paper end
     public ChunkProviderServer(WorldServer worldObjIn, IChunkLoader chunkLoaderIn, IChunkGenerator chunkGeneratorIn)
     {
         this.world = worldObjIn;
@@ -83,6 +105,11 @@
         return chunk;
     }
 
+    // Is it copy of method above?
+    public Chunk getChunkIfLoaded(int x, int z) {
+        return id2ChunkMap.get(ChunkPos.asLong(x, z));
+    }
+
     @Nullable
     public Chunk loadChunk(int x, int z)
     {
@@ -92,6 +119,11 @@
     @Nullable
     public Chunk loadChunk(int x, int z, @Nullable Runnable runnable)
     {
+        return getChunkAt(x, z, runnable, true);
+    }
+
+    public Chunk getChunkAt(int x, int z, Runnable runnable, boolean generate)
+    {
         Chunk chunk = this.getLoadedChunk(x, z);
         if (chunk == null)
         {
@@ -106,7 +138,7 @@
                 {
                 this.id2ChunkMap.put(ChunkPos.asLong(x, z), chunk);
                 chunk.onLoad();
-                chunk.populate(this, this.chunkGenerator);
+                chunk.populateCB(this, this.chunkGenerator, false);
                 }
 
                 loadingChunks.remove(pos);
@@ -123,6 +155,8 @@
                     return null;
                 }
             }
+        } else if (chunk == null && generate) {
+            chunk = provideChunk(x, z);
         }
 
         // If we didn't load the chunk async and have a callback run it now
@@ -136,6 +170,7 @@
 
         if (chunk == null)
         {
+            world.timings.syncChunkLoadTimer.startTiming(); // Spigot
             long i = ChunkPos.asLong(x, z);
 
             try
@@ -154,7 +189,8 @@
 
             this.id2ChunkMap.put(i, chunk);
             chunk.onLoad();
-            chunk.populate(this, this.chunkGenerator);
+            chunk.populateCB(this, this.chunkGenerator, true);
+            world.timings.syncChunkLoadTimer.stopTiming(); // Spigot
         }
 
         return chunk;
@@ -177,7 +213,7 @@
         }
         catch (Exception exception)
         {
-            LOGGER.error("Couldn't load chunk", (Throwable)exception);
+			LOGGER.error("Couldn't load chunk", (Throwable)exception);
             return null;
         }
     }
@@ -190,7 +226,7 @@
         }
         catch (Exception exception)
         {
-            LOGGER.error("Couldn't save entities", (Throwable)exception);
+			LOGGER.error("Couldn't save entities", (Throwable)exception);
         }
     }
 
@@ -203,22 +239,19 @@
         }
         catch (IOException ioexception)
         {
-            LOGGER.error("Couldn't save chunk", (Throwable)ioexception);
+ 			LOGGER.error("Couldn't save chunk", (Throwable)ioexception);
         }
         catch (MinecraftException minecraftexception)
         {
-            LOGGER.error("Couldn't save chunk; already in use by another instance of Minecraft?", (Throwable)minecraftexception);
-        }
+			LOGGER.error("Couldn't save chunk; already in use by another instance of Minecraft?", (Throwable)minecraftexception);
+		}
     }
 
     public boolean saveChunks(boolean all)
     {
         int i = 0;
-        List<Chunk> list = Lists.newArrayList(this.id2ChunkMap.values());
-
-        for (int j = 0; j < list.size(); ++j)
+        for (Chunk chunk : this.id2ChunkMap.values())
         {
-            Chunk chunk = list.get(j);
 
             if (all)
             {
@@ -229,11 +262,10 @@
             {
                 this.saveChunkData(chunk);
                 chunk.setModified(false);
-                ++i;
 
-                if (i == 24 && !all)
+                if (!all && ++i == 24)
                 {
-                    return false;
+                        return false;
                 }
             }
         }
@@ -266,17 +298,22 @@
 
                     if (chunk != null && chunk.unloadQueued)
                     {
-                        chunk.onUnload();
-                        net.minecraftforge.common.ForgeChunkManager.putDormantChunk(ChunkPos.asLong(chunk.x, chunk.z), chunk);
-                        this.saveChunkData(chunk);
-                        this.saveChunkExtraData(chunk);
-                        this.id2ChunkMap.remove(olong);
+                        if (!unloadChunk(chunk, true)) {
+                            continue;
+                        }
                         ++i;
                     }
                 }
             }
 
-            if (this.id2ChunkMap.isEmpty()) net.minecraftforge.common.DimensionManager.unloadWorld(this.world.provider.getDimension());
+            if (this.id2ChunkMap.isEmpty()){
+                int dim = this.world.provider.getDimension();
+                for (String dim1 : MohistConfig.instance.autounloadWorld_whitelist) {
+                    if (!dim1.equals(String.valueOf(dim))) {
+                        net.minecraftforge.common.DimensionManager.unloadWorld(dim);
+                    }
+                }
+            }
 
             this.chunkLoader.chunkTick();
         }
@@ -284,6 +321,39 @@
         return false;
     }
 
+    // CraftBukkit start
+    public boolean unloadChunk(Chunk chunk, boolean save) {
+        ChunkUnloadEvent event = new ChunkUnloadEvent(chunk.bukkitChunk, save);
+        this.world.getServer().getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return false;
+        }
+        save = event.isSaveChunk();
+
+        // Update neighbor counts
+        for (int x = -2; x < 3; x++) {
+            for (int z = -2; z < 3; z++) {
+                if (x == 0 && z == 0) {
+                    continue;
+                }
+
+                Chunk neighbor = this.getChunkIfLoaded(chunk.x + x, chunk.z + z);
+                if (neighbor != null) {
+                    neighbor.setNeighborUnloaded(-x, -z);
+                    chunk.setNeighborUnloaded(x, z);
+                }
+            }
+        }
+        // Moved from unloadChunks above
+        chunk.onUnload();
+        net.minecraftforge.common.ForgeChunkManager.putDormantChunk(ChunkPos.asLong(chunk.x, chunk.z), chunk);
+        this.saveChunkData(chunk);
+        this.saveChunkExtraData(chunk);
+        this.id2ChunkMap.remove(chunk.chunkKey);
+        return true;
+    }
+    // CraftBukkit end
+
     public boolean canSave()
     {
         return !this.world.disableLevelSaving;
