--- ../src-base/minecraft/net/minecraft/advancements/PlayerAdvancements.java
+++ ../src-work/minecraft/net/minecraft/advancements/PlayerAdvancements.java
@@ -29,6 +29,8 @@
 import net.minecraft.util.text.TextComponentTranslation;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.spigotmc.SpigotConfig;
+import red.mohist.configuration.MohistConfig;
 
 public class PlayerAdvancements
 {
@@ -39,7 +41,7 @@
     };
     private final MinecraftServer server;
     private final File progressFile;
-    private final Map<Advancement, AdvancementProgress> progress = Maps.<Advancement, AdvancementProgress>newLinkedHashMap();
+    public final Map<Advancement, AdvancementProgress> progress = Maps.<Advancement, AdvancementProgress>newLinkedHashMap();
     private final Set<Advancement> visible = Sets.<Advancement>newLinkedHashSet();
     private final Set<Advancement> visibilityChanged = Sets.<Advancement>newLinkedHashSet();
     private final Set<Advancement> progressChanged = Sets.<Advancement>newLinkedHashSet();
@@ -142,7 +144,11 @@
 
                     if (advancement == null)
                     {
-                        LOGGER.warn("Ignored advancement '" + entry.getKey() + "' in progress file " + this.progressFile + " - it doesn't exist anymore?");
+                        // CraftBukkit start
+                        if (entry.getKey().toString().equals("minecraft")) {
+                            LOGGER.warn("Ignored advancement '" + entry.getKey() + "' in progress file " + this.progressFile + " - it doesn't exist anymore?");
+                        }
+                        // CraftBukkit end
                     }
                     else
                     {
@@ -167,6 +173,9 @@
 
     public void save()
     {
+        if (SpigotConfig.disableAdvancementSaving) {
+            return;
+        }
         Map<ResourceLocation, AdvancementProgress> map = Maps.<ResourceLocation, AdvancementProgress>newHashMap();
 
         for (Entry<Advancement, AdvancementProgress> entry : this.progress.entrySet())
@@ -196,6 +205,9 @@
 
     public boolean grantCriterion(Advancement p_192750_1_, String p_192750_2_)
     {
+        // Forge: don't grant advancements for fake players
+        if (this.player instanceof net.minecraftforge.common.util.FakePlayer) return false;
+
         boolean flag = false;
         AdvancementProgress advancementprogress = this.getProgress(p_192750_1_);
         boolean flag1 = advancementprogress.isDone();
@@ -208,12 +220,17 @@
 
             if (!flag1 && advancementprogress.isDone())
             {
+                this.player.world.getServer().getPluginManager().callEvent(new org.bukkit.event.player.PlayerAdvancementDoneEvent(this.player.getBukkitEntity(), p_192750_1_.bukkit)); // CraftBukkit
                 p_192750_1_.getRewards().apply(this.player);
 
                 if (p_192750_1_.getDisplay() != null && p_192750_1_.getDisplay().shouldAnnounceToChat() && this.player.world.getGameRules().getBoolean("announceAdvancements"))
                 {
-                    this.server.getPlayerList().sendMessage(new TextComponentTranslation("chat.type.advancement." + p_192750_1_.getDisplay().getFrame().getName(), new Object[] {this.player.getDisplayName(), p_192750_1_.getDisplayText()}));
+                    if (!MohistConfig.instance.disableannounceAdvancements.getValue()) {
+                        this.server.getPlayerList().sendMessage(new TextComponentTranslation("chat.type.advancement." + p_192750_1_.getDisplay().getFrame().getName(), new Object[]{this.player.getDisplayName(), p_192750_1_.getDisplayText()}));
+                    }
                 }
+
+                net.minecraftforge.common.ForgeHooks.onAdvancement(this.player, p_192750_1_);
             }
         }
 
@@ -375,11 +392,18 @@
         this.progress.put(p_192743_1_, p_192743_2_);
     }
 
-    private void ensureVisibility(Advancement p_192742_1_)
-    {
+    private void ensureVisibility(Advancement p_192742_1_) {
+        // Paper start
+        ensureVisibility(p_192742_1_, IterationEntryPoint.ROOT);
+    }
+    private enum IterationEntryPoint {
+        ROOT,
+        ITERATOR,
+        PARENT_OF_ITERATOR
+    }
+    private void ensureVisibility(Advancement p_192742_1_, IterationEntryPoint entryPoint) {
         boolean flag = this.shouldBeVisible(p_192742_1_);
         boolean flag1 = this.visible.contains(p_192742_1_);
-
         if (flag && !flag1)
         {
             this.visible.add(p_192742_1_);
@@ -398,12 +422,20 @@
 
         if (flag != flag1 && p_192742_1_.getParent() != null)
         {
-            this.ensureVisibility(p_192742_1_.getParent());
+            // Paper start - If we're not coming from an iterator consider this to be a root entry, otherwise
+            // market that we're entering from the parent of an iterator.
+            this.ensureVisibility(p_192742_1_.getParent(), entryPoint == IterationEntryPoint.ITERATOR ? IterationEntryPoint.PARENT_OF_ITERATOR : IterationEntryPoint.ROOT);
         }
+        // If this is true, we've went through a child iteration, entered the parent, processed the parent
+        // and are about to reprocess the children. Stop processing here to prevent O(N^2) processing.
+        if (entryPoint == IterationEntryPoint.PARENT_OF_ITERATOR) {
+            return;
+        }
+        // Paper end
 
         for (Advancement advancement : p_192742_1_.getChildren())
         {
-            this.ensureVisibility(advancement);
+            this.ensureVisibility(advancement, IterationEntryPoint.ITERATOR); // Paper - Mark this call as being from iteration
         }
     }
 
