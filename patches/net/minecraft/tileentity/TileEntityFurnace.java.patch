--- ../src-base/minecraft/net/minecraft/tileentity/TileEntityFurnace.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntityFurnace.java
@@ -1,5 +1,6 @@
 package net.minecraft.tileentity;
 
+import java.util.List;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockFurnace;
 import net.minecraft.block.material.Material;
@@ -22,6 +23,7 @@
 import net.minecraft.item.ItemTool;
 import net.minecraft.item.crafting.FurnaceRecipes;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ITickable;
 import net.minecraft.util.NonNullList;
@@ -31,6 +33,12 @@
 import net.minecraft.util.math.MathHelper;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftHumanEntity;
+import org.bukkit.craftbukkit.v1_12_R1.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+import red.mohist.common.RealTimeTicking;
 
 public class TileEntityFurnace extends TileEntityLockable implements ITickable, ISidedInventory
 {
@@ -44,6 +52,30 @@
     private int totalCookTime;
     private String furnaceCustomName;
 
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+    
+    public List<ItemStack> getContents() {
+        return this.furnaceItemStacks;
+    }
+        
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+    
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+        
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+        
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
     public int getSizeInventory()
     {
         return this.furnaceItemStacks.size();
@@ -166,12 +198,31 @@
 
     public void update()
     {
-        boolean flag = this.isBurning();
+        // CARPET-optimizedTileEntities: Skip the update if sleeping
+        if(this.isSleeping)
+            return;
+        boolean flag = (this.getBlockType() == Blocks.LIT_FURNACE); // CraftBukkit - SPIGOT-844 - Check if furnace block is lit using the block instead of burn time
         boolean flag1 = false;
 
+        // CraftBukkit - moved from below - edited for wall time
+        if (this.isBurning() && this.canSmelt()) {
+            int ticks = (int) ((RealTimeTicking) this.getWorld()).getRealTimeTicks();
+            this.cookTime = Math.min(this.totalCookTime, this.cookTime + ticks);
+            if (this.cookTime >= this.totalCookTime) {
+                this.cookTime -= this.totalCookTime; // Paper
+                this.totalCookTime = this.getCookTime((ItemStack) this.furnaceItemStacks.get(0));
+                this.smeltItem();
+                flag1 = true;
+            }
+        } else {
+            this.cookTime = 0;
+        }
+        // CraftBukkit end
+
         if (this.isBurning())
         {
-            --this.furnaceBurnTime;
+            int ticks = (int) ((RealTimeTicking) this.getWorld()).getRealTimeTicks();
+            this.furnaceBurnTime = Math.max(0, this.furnaceBurnTime - ticks);
         }
 
         if (!this.world.isRemote)
@@ -180,13 +231,21 @@
 
             if (this.isBurning() || !itemstack.isEmpty() && !((ItemStack)this.furnaceItemStacks.get(0)).isEmpty())
             {
-                if (!this.isBurning() && this.canSmelt())
-                {
-                    this.furnaceBurnTime = getItemBurnTime(itemstack);
-                    this.currentItemBurnTime = this.furnaceBurnTime;
+                // CraftBukkit start - Handle multiple elapsed ticks
+                if (this.furnaceBurnTime <= 0 && this.canSmelt()) { // CraftBukkit - == to <=
+                    CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
 
-                    if (this.isBurning())
-                    {
+                    FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(this.world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), fuel, getItemBurnTime(itemstack));
+                    this.world.getServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                    if (furnaceBurnEvent.isCancelled()) {
+                        return;
+                    }
+
+                    this.currentItemBurnTime = furnaceBurnEvent.getBurnTime();
+                    this.furnaceBurnTime += this.currentItemBurnTime;
+                    if (this.furnaceBurnTime > 0 && furnaceBurnEvent.isBurning()) {
+                        // CraftBukkit end
                         flag1 = true;
 
                         if (!itemstack.isEmpty())
@@ -202,34 +261,23 @@
                         }
                     }
                 }
-
-                if (this.isBurning() && this.canSmelt())
-                {
-                    ++this.cookTime;
-
-                    if (this.cookTime == this.totalCookTime)
-                    {
-                        this.cookTime = 0;
-                        this.totalCookTime = this.getCookTime(this.furnaceItemStacks.get(0));
-                        this.smeltItem();
-                        flag1 = true;
-                    }
-                }
-                else
-                {
-                    this.cookTime = 0;
-                }
             }
             else if (!this.isBurning() && this.cookTime > 0)
             {
-                this.cookTime = MathHelper.clamp(this.cookTime - 2, 0, this.totalCookTime);
+                int ticks = (int) ((RealTimeTicking) this.getWorld()).getRealTimeTicks();
+                this.cookTime = MathHelper.clamp(this.cookTime - (2 * ticks), 0, this.totalCookTime);
             }
 
             if (flag != this.isBurning())
             {
                 flag1 = true;
                 BlockFurnace.setState(this.isBurning(), this.world, this.pos);
+                this.updateContainingBlockInfo(); // CraftBukkit - Invalidate tile entity's cached block type
             }
+
+            // CARPET-optimizedTileEntities: Fall asleep if not burning
+            if(!this.isBurning())
+                this.isSleeping = true;
         }
 
         if (flag1)
@@ -289,6 +337,31 @@
             ItemStack itemstack1 = FurnaceRecipes.instance().getSmeltingResult(itemstack);
             ItemStack itemstack2 = this.furnaceItemStacks.get(2);
 
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(this.world.getWorld().getBlockAt(pos.getX(), pos.getY(), pos.getZ()), source, result);
+            this.world.getServer().getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+                return;
+            }
+
+            result = furnaceSmeltEvent.getResult();
+            itemstack1 = CraftItemStack.asNMSCopy(result);
+
+            if (!itemstack1.isEmpty()) {
+                if (itemstack2.isEmpty()) {
+                    this.furnaceItemStacks.set(2, itemstack1.copy());
+                } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+                    itemstack2.grow(itemstack1.getCount());
+                } else {
+                    return;
+                }
+            }
+
+            /*
             if (itemstack2.isEmpty())
             {
                 this.furnaceItemStacks.set(2, itemstack1.copy());
@@ -297,6 +370,8 @@
             {
                 itemstack2.grow(itemstack1.getCount());
             }
+            */
+            // CraftBukkit end
 
             if (itemstack.getItem() == Item.getItemFromBlock(Blocks.SPONGE) && itemstack.getMetadata() == 1 && !((ItemStack)this.furnaceItemStacks.get(1)).isEmpty() && ((ItemStack)this.furnaceItemStacks.get(1)).getItem() == Items.BUCKET)
             {
@@ -533,14 +608,14 @@
         this.furnaceItemStacks.clear();
     }
 
-    net.minecraftforge.items.IItemHandler handlerTop = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.UP);
-    net.minecraftforge.items.IItemHandler handlerBottom = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.DOWN);
-    net.minecraftforge.items.IItemHandler handlerSide = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, net.minecraft.util.EnumFacing.WEST);
+    net.minecraftforge.items.IItemHandler handlerTop = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, EnumFacing.UP);
+    net.minecraftforge.items.IItemHandler handlerBottom = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, EnumFacing.DOWN);
+    net.minecraftforge.items.IItemHandler handlerSide = new net.minecraftforge.items.wrapper.SidedInvWrapper(this, EnumFacing.WEST);
 
     @SuppressWarnings("unchecked")
     @Override
     @javax.annotation.Nullable
-    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @javax.annotation.Nullable net.minecraft.util.EnumFacing facing)
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @javax.annotation.Nullable EnumFacing facing)
     {
         if (facing != null && capability == net.minecraftforge.items.CapabilityItemHandler.ITEM_HANDLER_CAPABILITY)
             if (facing == EnumFacing.DOWN)
@@ -551,4 +626,8 @@
                 return (T) handlerSide;
         return super.getCapability(capability, facing);
     }
+
+    // CARPET-optimizedTileEntities: Whether the tile entity is asleep or not.
+    // False by default so tile entities wake up upon chunk loading
+    private boolean isSleeping = false;
 }
