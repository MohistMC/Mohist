--- ../src-base/minecraft/net/minecraft/tileentity/TileEntityChest.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntityChest.java
@@ -1,10 +1,12 @@
 package net.minecraft.tileentity;
 
+import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockChest;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.InventoryPlayer;
+import net.minecraft.init.Blocks;
 import net.minecraft.init.SoundEvents;
 import net.minecraft.inventory.Container;
 import net.minecraft.inventory.ContainerChest;
@@ -22,6 +24,8 @@
 import net.minecraft.util.datafix.walkers.ItemStackDataLists;
 import net.minecraft.util.math.AxisAlignedBB;
 import net.minecraft.util.math.BlockPos;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
 
 public class TileEntityChest extends TileEntityLockableLoot implements ITickable
 {
@@ -37,6 +41,30 @@
     private int ticksSinceSync;
     private BlockChest.Type cachedChestType;
 
+    // CraftBukkit start - add fields and methods
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+    private int maxStack = MAX_STACK;
+    
+    public List<ItemStack> getContents() {
+        return this.chestContents;
+    }
+        
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+    
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+        
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+        
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
     public TileEntityChest()
     {
     }
@@ -109,7 +137,7 @@
 
     public int getInventoryStackLimit()
     {
-        return 64;
+        return maxStack; // CraftBukkit
     }
 
     public void updateContainingBlockInfo()
@@ -212,6 +240,10 @@
 
     public void update()
     {
+
+         // CARPET-optimizedTileEntities: Skip the update if sleeping
+        if(this.isSleeping)
+            return;
         this.checkForAdjacentChests();
         int i = this.pos.getX();
         int j = this.pos.getY();
@@ -237,6 +269,10 @@
             }
         }
 
+        // CARPET-optimizedTileEntities: If no players are using the chest, go to sleep
+        if(this.numPlayersUsing == 0)
+            this.isSleeping = true;
+
         this.prevLidAngle = this.lidAngle;
         float f1 = 0.1F;
 
@@ -260,6 +296,9 @@
 
         if (this.numPlayersUsing == 0 && this.lidAngle > 0.0F || this.numPlayersUsing > 0 && this.lidAngle < 1.0F)
         {
+            // CARPET-optimizedTileEntities: This is the closing animation.
+            // It is possible here that numPlayersUsing is 0, so make sure you don't sleep
+            this.isSleeping = false;
             float f2 = this.lidAngle;
 
             if (this.numPlayersUsing > 0)
@@ -305,6 +344,8 @@
 
     public boolean receiveClientEvent(int id, int type)
     {
+        // CARPET-optimizedTileEntities: Wake up the chest when a player uses it
+        this.isSleeping = false;
         if (id == 1)
         {
             this.numPlayersUsing = type;
@@ -325,8 +366,21 @@
                 this.numPlayersUsing = 0;
             }
 
+            int oldPower = Math.max(0, Math.min(15, this.numPlayersUsing)); // CraftBukkit - Get power before new viewer is added
+
             ++this.numPlayersUsing;
+            if (this.world == null) return; // CraftBukkit
             this.world.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
+
+            // CraftBukkit start - Call redstone event
+            if (this.getBlockType() == Blocks.TRAPPED_CHEST) {
+                int newPower = Math.max(0, Math.min(15, this.numPlayersUsing));
+
+                if (oldPower != newPower) {
+                    org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory.callRedstoneChange(world, pos.getX(), pos.getY(), pos.getZ(), oldPower, newPower);
+                }
+            }
+            // CraftBukkit end
             this.world.notifyNeighborsOfStateChange(this.pos, this.getBlockType(), false);
 
             if (this.getChestType() == BlockChest.Type.TRAP)
@@ -340,14 +394,21 @@
     {
         if (!player.isSpectator() && this.getBlockType() instanceof BlockChest)
         {
+            int oldPower = Math.max(0, Math.min(15, this.numPlayersUsing)); // CraftBukkit - Get power before new viewer is added
             --this.numPlayersUsing;
             this.world.addBlockEvent(this.pos, this.getBlockType(), 1, this.numPlayersUsing);
             this.world.notifyNeighborsOfStateChange(this.pos, this.getBlockType(), false);
 
+            // CraftBukkit start - Call redstone event
             if (this.getChestType() == BlockChest.Type.TRAP)
             {
+                int newPower = Math.max(0, Math.min(15, this.numPlayersUsing));
+                if (oldPower != newPower) {
+                    org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory.callRedstoneChange(world, pos.getX(), pos.getY(), pos.getZ(), oldPower, newPower);
+                }
                 this.world.notifyNeighborsOfStateChange(this.pos.down(), this.getBlockType(), false);
             }
+            // CraftBukkit end
         }
     }
 
@@ -411,4 +472,14 @@
     {
         return this.chestContents;
     }
+
+    // CARPET-optimizedTileEntities: Whether the tile entity is asleep or not.
+    // False by default so tile entities wake up upon chunk loading
+    private boolean isSleeping = false;
+
+    // CARPET-optimizedTileEntities
+    @Override
+    public void wakeUp(){
+        this.isSleeping = false;
+    }
 }
