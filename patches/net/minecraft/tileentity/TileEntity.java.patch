--- ../src-base/minecraft/net/minecraft/tileentity/TileEntity.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntity.java
@@ -7,6 +7,7 @@
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.init.Blocks;
+import net.minecraft.inventory.IInventory;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.network.play.server.SPacketUpdateTileEntity;
 import net.minecraft.util.Mirror;
@@ -16,20 +17,28 @@
 import net.minecraft.util.registry.RegistryNamespaced;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.world.World;
+import net.minecraftforge.cauldron.inventory.CraftCustomInventory;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.v1_12_R1.SpigotTimings;
+import org.bukkit.craftbukkit.v1_12_R1.block.CraftBlockEntityState;
+import org.bukkit.inventory.InventoryHolder;
+import org.spigotmc.CustomTimingsHandler;
+import red.mohist.Mohist;
 
 public abstract class TileEntity implements net.minecraftforge.common.capabilities.ICapabilitySerializable<NBTTagCompound>
 {
     private static final Logger LOGGER = LogManager.getLogger();
     private static final RegistryNamespaced < ResourceLocation, Class <? extends TileEntity >> REGISTRY = new RegistryNamespaced < ResourceLocation, Class <? extends TileEntity >> ();
-    protected World world;
+    public World world;
+    private boolean GC = false;
     protected BlockPos pos = BlockPos.ORIGIN;
     protected boolean tileEntityInvalid;
     private int blockMetadata = -1;
     protected Block blockType;
+    public CustomTimingsHandler tickTimer = SpigotTimings.getTileEntityTimings(this); // Spigot
 
     public static void register(String id, Class <? extends TileEntity > clazz)
     {
@@ -305,6 +314,17 @@
     {
     }
 
+    // KCauldron start
+    public boolean isGC()
+    {
+        return this.GC; //Returns true if the chunk it is inside of has marked it for unloading
+    }
+
+    public void setGC(boolean state)
+    {
+        this.GC = state; //Should never be touched by a mod. Would make it package-private but not sure if that would still work
+    }
+    // KCauldron end
     // -- BEGIN FORGE PATCHES --
     /**
      * Called when you receive a TileEntityData packet for the location this
@@ -531,4 +551,30 @@
         register("shulker_box", TileEntityShulkerBox.class);
         register("bed", TileEntityBed.class);
     }
+
+    // CraftBukkit start - add method
+    @Nullable
+    public InventoryHolder getOwner() {
+        if (world == null) return null;
+        // Spigot start
+        org.bukkit.block.Block block = this.world.getWorld().getBlockAt(this.pos.getX(), this.pos.getY(), this.pos.getZ());
+        if (block == null) {
+            Mohist.LOGGER.warn("No block for owner at %s %d %d %d", new Object[] { this.world.getWorld(), this.pos.getX(), this.pos.getY(), this.pos.getZ() });
+            return null;
+        }
+        // Spigot end
+        org.bukkit.block.BlockState state = block.getState();
+        if (state instanceof InventoryHolder)
+        {
+            return (InventoryHolder) state;
+        }
+        if (state instanceof CraftBlockEntityState) {
+            TileEntity te = ((CraftBlockEntityState)state).getTileEntity();
+            if (te instanceof IInventory) {
+                return new CraftCustomInventory((IInventory)te);
+            }
+        }
+        return null;
+    }
+    // CraftBukkit end
 }
