--- a/net/minecraft/world/chunk/Chunk.java
+++ b/net/minecraft/world/chunk/Chunk.java
@@ -20,14 +_,12 @@
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.Blocks;
-import net.minecraft.block.ITileEntityProvider;
+import net.minecraft.block.ContainerBlock;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
-import net.minecraft.entity.boss.dragon.EnderDragonEntity;
-import net.minecraft.entity.boss.dragon.EnderDragonPartEntity;
 import net.minecraft.fluid.Fluid;
 import net.minecraft.fluid.FluidState;
 import net.minecraft.fluid.Fluids;
@@ -57,20 +_,21 @@
 import net.minecraftforge.api.distmarker.OnlyIn;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.craftbukkit.v1_16_R3.CraftChunk;
 
-public class Chunk implements IChunk {
+public class Chunk extends net.minecraftforge.common.capabilities.CapabilityProvider<Chunk> implements IChunk, net.minecraftforge.common.extensions.IForgeChunk {
    private static final Logger field_150817_t = LogManager.getLogger();
    @Nullable
    public static final ChunkSection field_186036_a = null;
    private final ChunkSection[] field_76652_q = new ChunkSection[16];
    private BiomeContainer field_76651_r;
    private final Map<BlockPos, CompoundNBT> field_201618_i = Maps.newHashMap();
-   private boolean field_76636_d;
-   private final World field_76637_e;
-   private final Map<Heightmap.Type, Heightmap> field_76634_f = Maps.newEnumMap(Heightmap.Type.class);
+   public boolean field_76636_d;
+   public final World field_76637_e;
+   public final Map<Heightmap.Type, Heightmap> field_76634_f = Maps.newEnumMap(Heightmap.Type.class);
    private final UpgradeData field_196967_n;
-   private final Map<BlockPos, TileEntity> field_150816_i = Maps.newHashMap();
-   private final ClassInheritanceMultiMap<Entity>[] field_76645_j;
+   public final Map<BlockPos, TileEntity> field_150816_i = Maps.newHashMap();
+   public final ClassInheritanceMultiMap<Entity>[] field_76645_j;
    private final Map<Structure<?>, StructureStart<?>> field_201619_q = Maps.newHashMap();
    private final Map<Structure<?>, LongSet> field_201620_r = Maps.newHashMap();
    private final ShortList[] field_201622_t = new ShortList[16];
@@ -85,17 +_,126 @@
    @Nullable
    private Consumer<Chunk> field_217330_v;
    private final ChunkPos field_212816_F;
+   public final long coordinateKey;
    private volatile boolean field_217331_x;
 
+   // Paper start
+   public final com.destroystokyo.paper.util.maplist.EntityList entities = new com.destroystokyo.paper.util.maplist.EntityList();
+   public ChunkHolder playerChunk;
+
+   static final int NEIGHBOUR_CACHE_RADIUS = 3;
+
+   public static int getNeighbourCacheRadius() {
+      return NEIGHBOUR_CACHE_RADIUS;
+   }
+
+   boolean loadedTicketLevel;
+   private long neighbourChunksLoadedBitset;
+   private final Chunk[] loadedNeighbourChunks = new Chunk[(NEIGHBOUR_CACHE_RADIUS * 2 + 1) * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)];
+
+   private static int getNeighbourIndex(final int relativeX, final int relativeZ) {
+      // index = (relativeX  NEIGHBOUR_CACHE_RADIUS)  (relativeZ  NEIGHBOUR_CACHE_RADIUS) * (NEIGHBOUR_CACHE_RADIUS * 2  1)
+      // optimised variant of the above by moving some of the ops to compile time
+      return relativeX + (relativeZ * (NEIGHBOUR_CACHE_RADIUS * 2 + 1)) + (NEIGHBOUR_CACHE_RADIUS + NEIGHBOUR_CACHE_RADIUS * ((NEIGHBOUR_CACHE_RADIUS * 2 + 1)));
+   }
+
+   public final Chunk getRelativeNeighbourIfLoaded(final int relativeX, final int relativeZ) {
+      return this.loadedNeighbourChunks[getNeighbourIndex(relativeX, relativeZ)];
+   }
+
+   public final boolean isNeighbourLoaded(final int relativeX, final int relativeZ) {
+      return (this.neighbourChunksLoadedBitset & (1L << getNeighbourIndex(relativeX, relativeZ))) != 0;
+   }
+
+   public final void setNeighbourLoaded(final int relativeX, final int relativeZ, final Chunk chunk) {
+      if (chunk == null) {
+         throw new IllegalArgumentException("Chunk must be non-null, neighbour: (" + relativeX + "," + relativeZ + "), chunk: " + this.field_212816_F);
+      }
+      final long before = this.neighbourChunksLoadedBitset;
+      final int index = getNeighbourIndex(relativeX, relativeZ);
+      this.loadedNeighbourChunks[index] = chunk;
+      this.neighbourChunksLoadedBitset |= (1L << index);
+      this.onNeighbourChange(before, this.neighbourChunksLoadedBitset);
+   }
+
+   public final void setNeighbourUnloaded(final int relativeX, final int relativeZ) {
+      final long before = this.neighbourChunksLoadedBitset;
+      final int index = getNeighbourIndex(relativeX, relativeZ);
+      this.loadedNeighbourChunks[index] = null;
+      this.neighbourChunksLoadedBitset &= ~(1L << index);
+      this.onNeighbourChange(before, this.neighbourChunksLoadedBitset);
+   }
+
+   public final void resetNeighbours() {
+      final long before = this.neighbourChunksLoadedBitset;
+      this.neighbourChunksLoadedBitset = 0L;
+      java.util.Arrays.fill(this.loadedNeighbourChunks, null);
+      this.onNeighbourChange(before, 0L);
+   }
+
+   protected void onNeighbourChange(final long bitsetBefore, final long bitsetAfter) {
+
+   }
+
+   public final boolean isAnyNeighborsLoaded() {
+      return neighbourChunksLoadedBitset != 0;
+   }
+
+   public final boolean areNeighboursLoaded(final int radius) {
+      return Chunk.areNeighboursLoaded(this.neighbourChunksLoadedBitset, radius);
+   }
+
+   public static boolean areNeighboursLoaded(final long bitset, final int radius) {
+      // index = relativeX  (relativeZ * (NEIGHBOUR_CACHE_RADIUS * 2  1))  (NEIGHBOUR_CACHE_RADIUS  NEIGHBOUR_CACHE_RADIUS * ((NEIGHBOUR_CACHE_RADIUS * 2  1)))
+      switch (radius) {
+         case 0: {
+            return (bitset & (1L << getNeighbourIndex(0, 0))) != 0;
+         }
+         case 1: {
+            long mask = 0L;
+            for (int dx = -1; dx <= 1; ++dx) {
+               for (int dz = -1; dz <= 1; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+         case 2: {
+            long mask = 0L;
+            for (int dx = -2; dx <= 2; ++dx) {
+               for (int dz = -2; dz <= 2; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+         case 3: {
+            long mask = 0L;
+            for (int dx = -3; dx <= 3; ++dx) {
+               for (int dz = -3; dz <= 3; ++dz) {
+                  mask |= (1L << getNeighbourIndex(dx, dz));
+               }
+            }
+            return (bitset & mask) == mask;
+         }
+
+         default:
+            throw new IllegalArgumentException("Radius not recognized: " + radius);
+      }
+   }
+   // Paper end
+
    public Chunk(World p_i225780_1_, ChunkPos p_i225780_2_, BiomeContainer p_i225780_3_) {
       this(p_i225780_1_, p_i225780_2_, p_i225780_3_, UpgradeData.field_196994_a, EmptyTickList.func_205388_a(), EmptyTickList.func_205388_a(), 0L, (ChunkSection[])null, (Consumer<Chunk>)null);
    }
 
    public Chunk(World p_i225781_1_, ChunkPos p_i225781_2_, BiomeContainer p_i225781_3_, UpgradeData p_i225781_4_, ITickList<Block> p_i225781_5_, ITickList<Fluid> p_i225781_6_, long p_i225781_7_, @Nullable ChunkSection[] p_i225781_9_, @Nullable Consumer<Chunk> p_i225781_10_) {
+      super(Chunk.class);
       this.field_76645_j = new ClassInheritanceMultiMap[16];
       this.field_76637_e = p_i225781_1_;
       this.field_212816_F = p_i225781_2_;
       this.field_196967_n = p_i225781_4_;
+      this.coordinateKey = ChunkPos.func_77272_a(field_212816_F.field_77276_a, field_212816_F.field_77275_b); // Paper - cache long key
 
       for(Heightmap.Type heightmap$type : Heightmap.Type.values()) {
          if (ChunkStatus.field_222617_m.func_222595_h().contains(heightmap$type)) {
@@ -116,11 +_,26 @@
          if (this.field_76652_q.length == p_i225781_9_.length) {
             System.arraycopy(p_i225781_9_, 0, this.field_76652_q, 0, this.field_76652_q.length);
          } else {
-            field_150817_t.warn("Could not set level chunk sections, array length is {} instead of {}", p_i225781_9_.length, this.field_76652_q.length);
+            field_150817_t.warn(com.mohistmc.util.i18n.i18n.get("chunk.1", p_i225781_9_.length, this.field_76652_q.length));
          }
       }
-
-   }
+      this.gatherCapabilities();
+
+      // CraftBukkit start
+      this.bukkitChunk = new CraftChunk(this);
+   }
+
+   public org.bukkit.Chunk bukkitChunk;
+   public org.bukkit.Chunk getBukkitChunk() {
+      return bukkitChunk;
+   }
+
+   public boolean mustNotSave;
+   public boolean needsDecoration;
+
+   private static final org.bukkit.craftbukkit.v1_16_R3.persistence.CraftPersistentDataTypeRegistry DATA_TYPE_REGISTRY = new org.bukkit.craftbukkit.v1_16_R3.persistence.CraftPersistentDataTypeRegistry();
+   public final org.bukkit.craftbukkit.v1_16_R3.persistence.CraftPersistentDataContainer persistentDataContainer = new org.bukkit.craftbukkit.v1_16_R3.persistence.CraftPersistentDataContainer(DATA_TYPE_REGISTRY);
+   // CraftBukkit end
 
    public Chunk(World p_i49947_1_, ChunkPrimer p_i49947_2_) {
       this(p_i49947_1_, p_i49947_2_.func_76632_l(), p_i49947_2_.func_225549_i_(), p_i49947_2_.func_196966_y(), p_i49947_2_.func_205218_i_(), p_i49947_2_.func_212247_j(), p_i49947_2_.func_177416_w(), p_i49947_2_.func_76587_i(), (Consumer<Chunk>)null);
@@ -153,6 +_,7 @@
 
       this.func_217305_b(p_i49947_2_.func_217310_r());
       this.field_76643_l = true;
+      this.needsDecoration = true; // CraftBukkit
    }
 
    public Heightmap func_217303_b(Heightmap.Type p_217303_1_) {
@@ -207,6 +_,16 @@
       }
    }
 
+   @Override
+   public BlockState getTypeIfLoaded(BlockPos blockposition) {
+      return this.func_180495_p(blockposition);
+   }
+
+   @Override
+   public Fluid getFluidIfLoaded(BlockPos blockposition) {
+      return this.func_204610_c(blockposition).func_206886_c();
+   }
+
    public FluidState func_204610_c(BlockPos p_204610_1_) {
       return this.func_205751_b(p_204610_1_.func_177958_n(), p_204610_1_.func_177956_o(), p_204610_1_.func_177952_p());
    }
@@ -231,14 +_,25 @@
       }
    }
 
+   // CraftBukkit start
    @Nullable
    public BlockState func_177436_a(BlockPos p_177436_1_, BlockState p_177436_2_, boolean p_177436_3_) {
-      int i = p_177436_1_.func_177958_n() & 15;
-      int j = p_177436_1_.func_177956_o();
-      int k = p_177436_1_.func_177952_p() & 15;
+      return this.setBlockState(p_177436_1_, p_177436_2_, p_177436_3_, true);
+   }
+
+   // Mohist: Plugin NMS compatibility
+   public BlockState setType(BlockPos pos, BlockState state, boolean isMoving, boolean doPlace) {
+       return this.setBlockState(pos, state, isMoving, doPlace);
+   }
+
+   public BlockState setBlockState(BlockPos pos, BlockState state, boolean isMoving, boolean doPlace) {
+      // CraftBukkit end
+      int i = pos.func_177958_n() & 15;
+      int j = pos.func_177956_o();
+      int k = pos.func_177952_p() & 15;
       ChunkSection chunksection = this.field_76652_q[j >> 4];
       if (chunksection == field_186036_a) {
-         if (p_177436_2_.func_196958_f()) {
+         if (state.func_196958_f()) {
             return null;
          }
 
@@ -247,46 +_,47 @@
       }
 
       boolean flag = chunksection.func_76663_a();
-      BlockState blockstate = chunksection.func_222629_a(i, j & 15, k, p_177436_2_);
-      if (blockstate == p_177436_2_) {
+      BlockState blockstate = chunksection.func_222629_a(i, j & 15, k, state);
+      if (blockstate == state) {
          return null;
       } else {
-         Block block = p_177436_2_.func_177230_c();
+         Block block = state.func_177230_c();
          Block block1 = blockstate.func_177230_c();
-         this.field_76634_f.get(Heightmap.Type.MOTION_BLOCKING).func_202270_a(i, j, k, p_177436_2_);
-         this.field_76634_f.get(Heightmap.Type.MOTION_BLOCKING_NO_LEAVES).func_202270_a(i, j, k, p_177436_2_);
-         this.field_76634_f.get(Heightmap.Type.OCEAN_FLOOR).func_202270_a(i, j, k, p_177436_2_);
-         this.field_76634_f.get(Heightmap.Type.WORLD_SURFACE).func_202270_a(i, j, k, p_177436_2_);
+         this.field_76634_f.get(Heightmap.Type.MOTION_BLOCKING).func_202270_a(i, j, k, state);
+         this.field_76634_f.get(Heightmap.Type.MOTION_BLOCKING_NO_LEAVES).func_202270_a(i, j, k, state);
+         this.field_76634_f.get(Heightmap.Type.OCEAN_FLOOR).func_202270_a(i, j, k, state);
+         this.field_76634_f.get(Heightmap.Type.WORLD_SURFACE).func_202270_a(i, j, k, state);
          boolean flag1 = chunksection.func_76663_a();
          if (flag != flag1) {
-            this.field_76637_e.func_72863_F().func_212863_j_().func_215567_a(p_177436_1_, flag1);
+            this.field_76637_e.func_72863_F().func_212863_j_().func_215567_a(pos, flag1);
          }
 
          if (!this.field_76637_e.field_72995_K) {
-            blockstate.func_196947_b(this.field_76637_e, p_177436_1_, p_177436_2_, p_177436_3_);
-         } else if (block1 != block && block1 instanceof ITileEntityProvider) {
-            this.field_76637_e.func_175713_t(p_177436_1_);
+            blockstate.func_196947_b(this.field_76637_e, pos, state, isMoving);
+         } else if ((block1 != block || !state.hasTileEntity()) && blockstate.hasTileEntity()) {
+            this.field_76637_e.func_175713_t(pos);
          }
 
          if (!chunksection.func_177485_a(i, j & 15, k).func_203425_a(block)) {
             return null;
          } else {
-            if (block1 instanceof ITileEntityProvider) {
-               TileEntity tileentity = this.func_177424_a(p_177436_1_, Chunk.CreateEntityType.CHECK);
+            if (blockstate.hasTileEntity()) {
+               TileEntity tileentity = this.func_177424_a(pos, Chunk.CreateEntityType.CHECK);
                if (tileentity != null) {
                   tileentity.func_145836_u();
                }
             }
 
-            if (!this.field_76637_e.field_72995_K) {
-               p_177436_2_.func_215705_a(this.field_76637_e, p_177436_1_, blockstate, p_177436_3_);
+            // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
+            if (!this.field_76637_e.field_72995_K && doPlace && !this.field_76637_e.captureBlockSnapshots && (!this.field_76637_e.captureBlockStates || block instanceof ContainerBlock)) {
+               state.func_215705_a(this.field_76637_e, pos, blockstate, isMoving);
             }
 
-            if (block instanceof ITileEntityProvider) {
-               TileEntity tileentity1 = this.func_177424_a(p_177436_1_, Chunk.CreateEntityType.CHECK);
+            if (state.hasTileEntity()) {
+               TileEntity tileentity1 = this.func_177424_a(pos, Chunk.CreateEntityType.CHECK);
                if (tileentity1 == null) {
-                  tileentity1 = ((ITileEntityProvider)block).func_196283_a_(this.field_76637_e);
-                  this.field_76637_e.func_175690_a(p_177436_1_, tileentity1);
+                  tileentity1 = state.createTileEntity(this.field_76637_e);
+                  this.field_76637_e.func_175690_a(pos, tileentity1);
                } else {
                   tileentity1.func_145836_u();
                }
@@ -308,8 +_,13 @@
       int i = MathHelper.func_76128_c(p_76612_1_.func_226277_ct_() / 16.0D);
       int j = MathHelper.func_76128_c(p_76612_1_.func_226281_cx_() / 16.0D);
       if (i != this.field_212816_F.field_77276_a || j != this.field_212816_F.field_77275_b) {
-         field_150817_t.warn("Wrong location! ({}, {}) should be ({}, {}), {}", i, j, this.field_212816_F.field_77276_a, this.field_212816_F.field_77275_b, p_76612_1_);
-         p_76612_1_.field_70128_L = true;
+         field_150817_t.warn(com.mohistmc.util.i18n.i18n.get("chunk.2", i, j, this.field_212816_F.field_77276_a, this.field_212816_F.field_77275_b, p_76612_1_));
+         // Mohist start - Fix "Wrong location"
+         field_150817_t.warn(com.mohistmc.util.i18n.i18n.get("chunk.entmove"));
+         p_76612_1_.needsChunkUpdate = true;
+         ((ServerWorld) this.field_76637_e).field_217499_z.add(p_76612_1_);
+         // Mohist end
+         return; // Paper
       }
 
       int k = MathHelper.func_76128_c(p_76612_1_.func_226278_cu_() / 16.0D);
@@ -321,11 +_,13 @@
          k = this.field_76645_j.length - 1;
       }
 
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EnteringChunk(p_76612_1_, this.field_212816_F.field_77276_a, this.field_212816_F.field_77275_b, p_76612_1_.field_70176_ah, p_76612_1_.field_70164_aj));
       p_76612_1_.field_70175_ag = true;
       p_76612_1_.field_70176_ah = this.field_212816_F.field_77276_a;
       p_76612_1_.field_70162_ai = k;
       p_76612_1_.field_70164_aj = this.field_212816_F.field_77275_b;
       this.field_76645_j[k].add(p_76612_1_);
+      this.func_76630_e(); // Forge - ensure chunks are marked to save after an entity add
    }
 
    public void func_201607_a(Heightmap.Type p_201607_1_, long[] p_201607_2_) {
@@ -346,6 +_,7 @@
       }
 
       this.field_76645_j[p_76608_2_].remove(p_76608_1_);
+      this.func_76630_e(); // Forge - ensure chunks are marked to save after entity removals
    }
 
    public int func_201576_a(Heightmap.Type p_201576_1_, int p_201576_2_, int p_201576_3_) {
@@ -356,7 +_,7 @@
    private TileEntity func_177422_i(BlockPos p_177422_1_) {
       BlockState blockstate = this.func_180495_p(p_177422_1_);
       Block block = blockstate.func_177230_c();
-      return !block.func_235695_q_() ? null : ((ITileEntityProvider)block).func_196283_a_(this.field_76637_e);
+      return !blockstate.hasTileEntity() ? null : blockstate.createTileEntity(this.field_76637_e);
    }
 
    @Nullable
@@ -366,7 +_,17 @@
 
    @Nullable
    public TileEntity func_177424_a(BlockPos p_177424_1_, Chunk.CreateEntityType p_177424_2_) {
-      TileEntity tileentity = this.field_150816_i.get(p_177424_1_);
+      // CraftBukkit start
+      TileEntity tileentity = field_76637_e.capturedTileEntities.get(p_177424_1_);
+      if (tileentity == null) {
+         tileentity = (TileEntity) this.field_150816_i.get(p_177424_1_);
+      }
+      // CraftBukkit end
+
+      if (tileentity != null && tileentity.func_145837_r()) {
+         field_150816_i.remove(p_177424_1_);
+         tileentity = null;
+      }
       if (tileentity == null) {
          CompoundNBT compoundnbt = this.field_201618_i.remove(p_177424_1_);
          if (compoundnbt != null) {
@@ -382,9 +_,6 @@
             tileentity = this.func_177422_i(p_177424_1_);
             this.field_76637_e.func_175690_a(p_177424_1_, tileentity);
          }
-      } else if (tileentity.func_145837_r()) {
-         this.field_150816_i.remove(p_177424_1_);
-         return null;
       }
 
       return tileentity;
@@ -399,14 +_,13 @@
    }
 
    public void func_177426_a(BlockPos p_177426_1_, TileEntity p_177426_2_) {
-      if (this.func_180495_p(p_177426_1_).func_177230_c() instanceof ITileEntityProvider) {
+      if (this.func_180495_p(p_177426_1_).hasTileEntity()) {
          p_177426_2_.func_226984_a_(this.field_76637_e, p_177426_1_);
          p_177426_2_.func_145829_t();
          TileEntity tileentity = this.field_150816_i.put(p_177426_1_.func_185334_h(), p_177426_2_);
          if (tileentity != null && tileentity != p_177426_2_) {
             tileentity.func_145843_s();
          }
-
       }
    }
 
@@ -418,9 +_,14 @@
    public CompoundNBT func_223134_j(BlockPos p_223134_1_) {
       TileEntity tileentity = this.func_175625_s(p_223134_1_);
       if (tileentity != null && !tileentity.func_145837_r()) {
+         try {
          CompoundNBT compoundnbt1 = tileentity.func_189515_b(new CompoundNBT());
          compoundnbt1.func_74757_a("keepPacked", false);
          return compoundnbt1;
+         } catch (Exception e) {
+            LogManager.getLogger().error("A TileEntity type {} has thrown an exception trying to write state. It will not persist, Report this to the mod author", tileentity.getClass().getName(), e);
+            return null;
+         }
       } else {
          CompoundNBT compoundnbt = this.field_201618_i.get(p_223134_1_);
          if (compoundnbt != null) {
@@ -450,13 +_,57 @@
 
    }
 
+   // CraftBukkit start
+   public void loadCallback() {
+      org.bukkit.Server server = this.field_76637_e.getCBServer();
+      if (server != null) {
+         /*
+          * If it's a new world, the first few chunks are generated inside
+          * the World constructor. We can't reliably alter that, so we have
+          * no way of creating a CraftWorld/CraftServer at that point.
+          */
+         server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkLoadEvent(this.bukkitChunk, this.needsDecoration));
+         if (this.needsDecoration) {
+            try (co.aikar.timings.Timing ignored = this.field_76637_e.timings.chunkLoadPopulate.startTiming()) { // Paper
+               this.needsDecoration = false;
+               java.util.Random random = new java.util.Random();
+               random.setSeed(((ServerWorld) field_76637_e).func_72905_C());
+               long xRand = random.nextLong() / 2L * 2L + 1L;
+               long zRand = random.nextLong() / 2L * 2L + 1L;
+               random.setSeed((long) this.field_212816_F.field_77276_a * xRand + (long) this.field_212816_F.field_77275_b * zRand ^ ((ServerWorld) field_76637_e).func_72905_C());
+
+               org.bukkit.World world = this.field_76637_e.getWorld();
+               if (world != null) {
+                  this.field_76637_e.populating = true;
+                  try {
+                     for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
+                        populator.populate(world, random, bukkitChunk);
+                     }
+                  } finally {
+                     this.field_76637_e.populating = false;
+                  }
+               }
+               server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
+            } // Paper
+         }
+      }
+   }
+   public void unloadCallback() {
+      org.bukkit.Server server = this.field_76637_e.getCBServer();
+      org.bukkit.event.world.ChunkUnloadEvent unloadEvent = new org.bukkit.event.world.ChunkUnloadEvent(this.bukkitChunk, this.func_201593_f());
+      server.getPluginManager().callEvent(unloadEvent);
+      // note: saving can be prevented, but not forced if no saving is actually required
+      this.mustNotSave = !unloadEvent.isSaveChunk();
+   }
+   // CraftBukkit end
+
    public void func_76630_e() {
       this.field_76643_l = true;
    }
 
    public void func_177414_a(@Nullable Entity p_177414_1_, AxisAlignedBB p_177414_2_, List<Entity> p_177414_3_, @Nullable Predicate<? super Entity> p_177414_4_) {
-      int i = MathHelper.func_76128_c((p_177414_2_.field_72338_b - 2.0D) / 16.0D);
-      int j = MathHelper.func_76128_c((p_177414_2_.field_72337_e + 2.0D) / 16.0D);
+      int i = MathHelper.func_76128_c((p_177414_2_.field_72338_b - this.field_76637_e.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.func_76128_c((p_177414_2_.field_72337_e + this.field_76637_e.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.func_76125_a(i, 0, this.field_76645_j.length - 1);
       j = MathHelper.func_76125_a(j, 0, this.field_76645_j.length - 1);
 
@@ -472,8 +_,8 @@
                   p_177414_3_.add(entity);
                }
 
-               if (entity instanceof EnderDragonEntity) {
-                  for(EnderDragonPartEntity enderdragonpartentity : ((EnderDragonEntity)entity).func_213404_dT()) {
+               if (entity.isMultipartEntity()) {
+                  for(net.minecraftforge.entity.PartEntity<?> enderdragonpartentity : entity.getParts()) {
                      if (enderdragonpartentity != p_177414_1_ && enderdragonpartentity.func_174813_aQ().func_72326_a(p_177414_2_) && (p_177414_4_ == null || p_177414_4_.test(enderdragonpartentity))) {
                         p_177414_3_.add(enderdragonpartentity);
                      }
@@ -486,8 +_,8 @@
    }
 
    public <T extends Entity> void func_217313_a(@Nullable EntityType<?> p_217313_1_, AxisAlignedBB p_217313_2_, List<? super T> p_217313_3_, Predicate<? super T> p_217313_4_) {
-      int i = MathHelper.func_76128_c((p_217313_2_.field_72338_b - 2.0D) / 16.0D);
-      int j = MathHelper.func_76128_c((p_217313_2_.field_72337_e + 2.0D) / 16.0D);
+      int i = MathHelper.func_76128_c((p_217313_2_.field_72338_b - this.field_76637_e.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.func_76128_c((p_217313_2_.field_72337_e + this.field_76637_e.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.func_76125_a(i, 0, this.field_76645_j.length - 1);
       j = MathHelper.func_76125_a(j, 0, this.field_76645_j.length - 1);
 
@@ -502,8 +_,8 @@
    }
 
    public <T extends Entity> void func_177430_a(Class<? extends T> p_177430_1_, AxisAlignedBB p_177430_2_, List<T> p_177430_3_, @Nullable Predicate<? super T> p_177430_4_) {
-      int i = MathHelper.func_76128_c((p_177430_2_.field_72338_b - 2.0D) / 16.0D);
-      int j = MathHelper.func_76128_c((p_177430_2_.field_72337_e + 2.0D) / 16.0D);
+      int i = MathHelper.func_76128_c((p_177430_2_.field_72338_b - this.field_76637_e.getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.func_76128_c((p_177430_2_.field_72337_e + this.field_76637_e.getMaxEntityRadius()) / 16.0D);
       i = MathHelper.func_76125_a(i, 0, this.field_76645_j.length - 1);
       j = MathHelper.func_76125_a(j, 0, this.field_76645_j.length - 1);
 
@@ -535,6 +_,11 @@
       };
       Sets.newHashSet(this.field_150816_i.keySet()).stream().filter(predicate).forEach(this.field_76637_e::func_175713_t);
 
+      for (TileEntity tileEntity : field_150816_i.values()) {
+         tileEntity.func_145836_u();
+         tileEntity.func_195044_w();
+      }
+
       for(int i = 0; i < this.field_76652_q.length; ++i) {
          ChunkSection chunksection = this.field_76652_q[i];
          if ((p_227073_4_ & 1 << i) == 0) {
@@ -592,13 +_,23 @@
       return this.field_76645_j;
    }
 
+   public List<Entity>[] getEntitySlices() {
+      // Mohist start - handle Spigot method in MythicMobs
+      List<Entity>[] e = new List[16];
+      for (int l = 0; l < this.field_76645_j.length; ++l) {
+         e[l] = new org.bukkit.craftbukkit.v1_16_R3.util.UnsafeList<>();
+      }
+      return e;
+      // Mohist end
+   }
+
    public CompoundNBT func_201579_g(BlockPos p_201579_1_) {
       return this.field_201618_i.get(p_201579_1_);
    }
 
    public Stream<BlockPos> func_217304_m() {
       return StreamSupport.stream(BlockPos.func_191531_b(this.field_212816_F.func_180334_c(), 0, this.field_212816_F.func_180333_d(), this.field_212816_F.func_180332_e(), 255, this.field_212816_F.func_180330_f()).spliterator(), false).filter((p_217312_1_) -> {
-         return this.func_180495_p(p_217312_1_).func_185906_d() != 0;
+         return this.func_180495_p(p_217312_1_).getLightValue(func_177412_p(), p_217312_1_) != 0;
       });
    }
 
@@ -615,7 +_,7 @@
    }
 
    public boolean func_201593_f() {
-      return this.field_76643_l || this.field_76644_m && this.field_76637_e.func_82737_E() != this.field_76641_n;
+      return (this.field_76643_l || this.field_76644_m && this.field_76637_e.func_82737_E() != this.field_76641_n) && !this.mustNotSave; // CraftBukkit
    }
 
    public void func_177409_g(boolean p_177409_1_) {
@@ -704,12 +_,11 @@
       BlockState blockstate = this.func_180495_p(p_212815_1_);
       TileEntity tileentity;
       if ("DUMMY".equals(p_212815_2_.func_74779_i("id"))) {
-         Block block = blockstate.func_177230_c();
-         if (block instanceof ITileEntityProvider) {
-            tileentity = ((ITileEntityProvider)block).func_196283_a_(this.field_76637_e);
+         if (blockstate.hasTileEntity()) {
+            tileentity = blockstate.createTileEntity(this.field_76637_e);
          } else {
             tileentity = null;
-            field_150817_t.warn("Tried to load a DUMMY block entity @ {} but found not block entity block {} at location", p_212815_1_, blockstate);
+            field_150817_t.warn(com.mohistmc.util.i18n.i18n.get("chunk.3", p_212815_1_, blockstate));
          }
       } else {
          tileentity = TileEntity.func_235657_b_(blockstate, p_212815_2_);
@@ -719,7 +_,7 @@
          tileentity.func_226984_a_(this.field_76637_e, p_212815_1_);
          this.func_150813_a(tileentity);
       } else {
-         field_150817_t.warn("Tried to load a block entity for block {} but failed at location {}", blockstate, p_212815_1_);
+         field_150817_t.warn(com.mohistmc.util.i18n.i18n.get("chunk.4", blockstate, p_212815_1_));
       }
 
       return tileentity;
@@ -794,5 +_,31 @@
       IMMEDIATE,
       QUEUED,
       CHECK;
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link AnvilChunkLoader}.
+    */
+   @java.lang.Deprecated
+   @javax.annotation.Nullable
+   public final CompoundNBT writeCapsToNBT() {
+      return this.serializeCaps();
+   }
+
+   /**
+    * <strong>FOR INTERNAL USE ONLY</strong>
+    * <p>
+    * Only public for use in {@link AnvilChunkLoader}.
+    */
+   @java.lang.Deprecated
+   public final void readCapsFromNBT(CompoundNBT tag) {
+      this.deserializeCaps(tag);
+   }
+
+   @Override
+   public World getWorldForge() {
+      return func_177412_p();
    }
 }
