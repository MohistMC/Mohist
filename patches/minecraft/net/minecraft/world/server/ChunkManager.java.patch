--- a/net/minecraft/world/server/ChunkManager.java
+++ b/net/minecraft/world/server/ChunkManager.java
@@ -1,25 +_,11 @@
 package net.minecraft.world.server;
 
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Iterables;
-import com.google.common.collect.Lists;
-import com.google.common.collect.Queues;
-import com.google.common.collect.Sets;
-import com.mojang.datafixers.DataFixer;
-import com.mojang.datafixers.util.Either;
-import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
-import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2ByteMap;
-import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
-import it.unimi.dsi.fastutil.longs.LongIterator;
-import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
-import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
 import java.io.File;
 import java.io.IOException;
 import java.io.Writer;
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
@@ -36,24 +_,47 @@
 import java.util.function.Supplier;
 import java.util.stream.Collectors;
 import java.util.stream.Stream;
+
 import javax.annotation.Nullable;
+
+import net.minecraft.addons.server.MCUtil;
+import net.minecraft.entity.EntityClassification;
+import net.minecraft.network.play.ServerPlayNetHandler;
+import net.minecraft.network.play.server.*;
+import net.minecraft.world.chunk.*;
+import org.apache.commons.lang3.mutable.MutableBoolean;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.entity.Player;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.collect.Iterables;
+import com.google.common.collect.Lists;
+import com.google.common.collect.Queues;
+import com.google.common.collect.Sets;
+import com.mojang.datafixers.DataFixer;
+import com.mojang.datafixers.util.Either;
+
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
+import it.unimi.dsi.fastutil.longs.Long2ByteMap;
+import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
+import it.unimi.dsi.fastutil.longs.LongIterator;
+import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
+import it.unimi.dsi.fastutil.longs.LongSet;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
 import net.minecraft.entity.MobEntity;
-import net.minecraft.entity.boss.dragon.EnderDragonPartEntity;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.entity.player.ServerPlayerEntity;
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.network.DebugPacketSender;
 import net.minecraft.network.IPacket;
-import net.minecraft.network.play.server.SChunkDataPacket;
-import net.minecraft.network.play.server.SMountEntityPacket;
-import net.minecraft.network.play.server.SSetPassengersPacket;
-import net.minecraft.network.play.server.SUpdateChunkPositionPacket;
-import net.minecraft.network.play.server.SUpdateLightPacket;
 import net.minecraft.profiler.IProfiler;
 import net.minecraft.util.CSVWriter;
 import net.minecraft.util.ClassInheritanceMultiMap;
@@ -69,15 +_,6 @@
 import net.minecraft.village.PointOfInterestManager;
 import net.minecraft.world.GameRules;
 import net.minecraft.world.TrackedEntity;
-import net.minecraft.world.chunk.Chunk;
-import net.minecraft.world.chunk.ChunkPrimer;
-import net.minecraft.world.chunk.ChunkPrimerWrapper;
-import net.minecraft.world.chunk.ChunkStatus;
-import net.minecraft.world.chunk.ChunkTaskPriorityQueue;
-import net.minecraft.world.chunk.ChunkTaskPriorityQueueSorter;
-import net.minecraft.world.chunk.IChunk;
-import net.minecraft.world.chunk.IChunkLightProvider;
-import net.minecraft.world.chunk.PlayerGenerationTracker;
 import net.minecraft.world.chunk.listener.IChunkStatusListener;
 import net.minecraft.world.chunk.storage.ChunkLoader;
 import net.minecraft.world.chunk.storage.ChunkSerializer;
@@ -88,1118 +_,1440 @@
 import net.minecraft.world.storage.SaveFormat;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
-import org.apache.commons.lang3.mutable.MutableBoolean;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
 
 public class ChunkManager extends ChunkLoader implements ChunkHolder.IPlayerProvider {
-   private static final Logger field_219250_d = LogManager.getLogger();
-   public static final int field_219249_a = 33 + ChunkStatus.func_222600_b();
-   private final Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219251_e = new Long2ObjectLinkedOpenHashMap<>();
-   private volatile Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219252_f = this.field_219251_e.clone();
-   private final Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219253_g = new Long2ObjectLinkedOpenHashMap<>();
-   private final LongSet field_219254_h = new LongOpenHashSet();
-   private final ServerWorld field_219255_i;
-   private final ServerWorldLightManager field_219256_j;
-   private final ThreadTaskExecutor<Runnable> field_219257_k;
-   private final ChunkGenerator field_219258_l;
-   private final Supplier<DimensionSavedDataManager> field_219259_m;
-   private final PointOfInterestManager field_219260_n;
-   private final LongSet field_219261_o = new LongOpenHashSet();
-   private boolean field_219262_p;
-   private final ChunkTaskPriorityQueueSorter field_219263_q;
-   private final ITaskExecutor<ChunkTaskPriorityQueueSorter.FunctionEntry<Runnable>> field_219264_r;
-   private final ITaskExecutor<ChunkTaskPriorityQueueSorter.FunctionEntry<Runnable>> field_219265_s;
-   private final IChunkStatusListener field_219266_t;
-   private final ChunkManager.ProxyTicketManager field_219267_u;
-   private final AtomicInteger field_219268_v = new AtomicInteger();
-   private final TemplateManager field_219269_w;
-   private final File field_219270_x;
-   private final PlayerGenerationTracker field_219271_y = new PlayerGenerationTracker();
-   private final Int2ObjectMap<ChunkManager.EntityTracker> field_219272_z = new Int2ObjectOpenHashMap<>();
-   private final Long2ByteMap field_241087_z_ = new Long2ByteOpenHashMap();
-   private final Queue<Runnable> field_223181_A = Queues.newConcurrentLinkedQueue();
-   private int field_219247_A;
-
-   public ChunkManager(ServerWorld p_i232602_1_, SaveFormat.LevelSave p_i232602_2_, DataFixer p_i232602_3_, TemplateManager p_i232602_4_, Executor p_i232602_5_, ThreadTaskExecutor<Runnable> p_i232602_6_, IChunkLightProvider p_i232602_7_, ChunkGenerator p_i232602_8_, IChunkStatusListener p_i232602_9_, Supplier<DimensionSavedDataManager> p_i232602_10_, int p_i232602_11_, boolean p_i232602_12_) {
-      super(new File(p_i232602_2_.func_237291_a_(p_i232602_1_.func_234923_W_()), "region"), p_i232602_3_, p_i232602_12_);
-      this.field_219269_w = p_i232602_4_;
-      this.field_219270_x = p_i232602_2_.func_237291_a_(p_i232602_1_.func_234923_W_());
-      this.field_219255_i = p_i232602_1_;
-      this.field_219258_l = p_i232602_8_;
-      this.field_219257_k = p_i232602_6_;
-      DelegatedTaskExecutor<Runnable> delegatedtaskexecutor = DelegatedTaskExecutor.func_213144_a(p_i232602_5_, "worldgen");
-      ITaskExecutor<Runnable> itaskexecutor = ITaskExecutor.func_213140_a("main", p_i232602_6_::func_212871_a_);
-      this.field_219266_t = p_i232602_9_;
-      DelegatedTaskExecutor<Runnable> delegatedtaskexecutor1 = DelegatedTaskExecutor.func_213144_a(p_i232602_5_, "light");
-      this.field_219263_q = new ChunkTaskPriorityQueueSorter(ImmutableList.of(delegatedtaskexecutor, itaskexecutor, delegatedtaskexecutor1), p_i232602_5_, Integer.MAX_VALUE);
-      this.field_219264_r = this.field_219263_q.func_219087_a(delegatedtaskexecutor, false);
-      this.field_219265_s = this.field_219263_q.func_219087_a(itaskexecutor, false);
-      this.field_219256_j = new ServerWorldLightManager(p_i232602_7_, this, this.field_219255_i.func_230315_m_().func_218272_d(), delegatedtaskexecutor1, this.field_219263_q.func_219087_a(delegatedtaskexecutor1, false));
-      this.field_219267_u = new ChunkManager.ProxyTicketManager(p_i232602_5_, p_i232602_6_);
-      this.field_219259_m = p_i232602_10_;
-      this.field_219260_n = new PointOfInterestManager(new File(this.field_219270_x, "poi"), p_i232602_3_, p_i232602_12_);
-      this.func_219175_a(p_i232602_11_);
-   }
-
-   private static double func_219217_a(ChunkPos p_219217_0_, Entity p_219217_1_) {
-      double d0 = (double)(p_219217_0_.field_77276_a * 16 + 8);
-      double d1 = (double)(p_219217_0_.field_77275_b * 16 + 8);
-      double d2 = d0 - p_219217_1_.func_226277_ct_();
-      double d3 = d1 - p_219217_1_.func_226281_cx_();
-      return d2 * d2 + d3 * d3;
-   }
-
-   private static int func_219215_b(ChunkPos p_219215_0_, ServerPlayerEntity p_219215_1_, boolean p_219215_2_) {
-      int i;
-      int j;
-      if (p_219215_2_) {
-         SectionPos sectionpos = p_219215_1_.func_213842_M();
-         i = sectionpos.func_218149_a();
-         j = sectionpos.func_218148_c();
-      } else {
-         i = MathHelper.func_76128_c(p_219215_1_.func_226277_ct_() / 16.0D);
-         j = MathHelper.func_76128_c(p_219215_1_.func_226281_cx_() / 16.0D);
-      }
-
-      return func_219232_a(p_219215_0_, i, j);
-   }
-
-   private static int func_219232_a(ChunkPos p_219232_0_, int p_219232_1_, int p_219232_2_) {
-      int i = p_219232_0_.field_77276_a - p_219232_1_;
-      int j = p_219232_0_.field_77275_b - p_219232_2_;
-      return Math.max(Math.abs(i), Math.abs(j));
-   }
-
-   protected ServerWorldLightManager func_219207_a() {
-      return this.field_219256_j;
-   }
-
-   @Nullable
-   protected ChunkHolder func_219220_a(long p_219220_1_) {
-      return this.field_219251_e.get(p_219220_1_);
-   }
-
-   @Nullable
-   protected ChunkHolder func_219219_b(long p_219219_1_) {
-      return this.field_219252_f.get(p_219219_1_);
-   }
-
-   protected IntSupplier func_219191_c(long p_219191_1_) {
-      return () -> {
-         ChunkHolder chunkholder = this.func_219219_b(p_219191_1_);
-         return chunkholder == null ? ChunkTaskPriorityQueue.field_219419_a - 1 : Math.min(chunkholder.func_219281_j(), ChunkTaskPriorityQueue.field_219419_a - 1);
-      };
-   }
-
-   @OnlyIn(Dist.CLIENT)
-   public String func_219170_a(ChunkPos p_219170_1_) {
-      ChunkHolder chunkholder = this.func_219219_b(p_219170_1_.func_201841_a());
-      if (chunkholder == null) {
-         return "null";
-      } else {
-         String s = chunkholder.func_219299_i() + "\n";
-         ChunkStatus chunkstatus = chunkholder.func_219285_d();
-         IChunk ichunk = chunkholder.func_219287_e();
-         if (chunkstatus != null) {
-            s = s + "St: \u00a7" + chunkstatus.func_222584_c() + chunkstatus + '\u00a7' + "r\n";
-         }
-
-         if (ichunk != null) {
-            s = s + "Ch: \u00a7" + ichunk.func_201589_g().func_222584_c() + ichunk.func_201589_g() + '\u00a7' + "r\n";
-         }
-
-         ChunkHolder.LocationType chunkholder$locationtype = chunkholder.func_219300_g();
-         s = s + "\u00a7" + chunkholder$locationtype.ordinal() + chunkholder$locationtype;
-         return s + '\u00a7' + "r";
-      }
-   }
-
-   private CompletableFuture<Either<List<IChunk>, ChunkHolder.IChunkLoadingError>> func_219236_a(ChunkPos p_219236_1_, int p_219236_2_, IntFunction<ChunkStatus> p_219236_3_) {
-      List<CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>>> list = Lists.newArrayList();
-      int i = p_219236_1_.field_77276_a;
-      int j = p_219236_1_.field_77275_b;
-
-      for(int k = -p_219236_2_; k <= p_219236_2_; ++k) {
-         for(int l = -p_219236_2_; l <= p_219236_2_; ++l) {
-            int i1 = Math.max(Math.abs(l), Math.abs(k));
-            final ChunkPos chunkpos = new ChunkPos(i + l, j + k);
-            long j1 = chunkpos.func_201841_a();
-            ChunkHolder chunkholder = this.func_219220_a(j1);
-            if (chunkholder == null) {
-               return CompletableFuture.completedFuture(Either.right(new ChunkHolder.IChunkLoadingError() {
-                  public String toString() {
-                     return "Unloaded " + chunkpos.toString();
-                  }
-               }));
-            }
-
-            ChunkStatus chunkstatus = p_219236_3_.apply(i1);
-            CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture = chunkholder.func_219276_a(chunkstatus, this);
-            list.add(completablefuture);
-         }
-      }
-
-      CompletableFuture<List<Either<IChunk, ChunkHolder.IChunkLoadingError>>> completablefuture1 = Util.func_215079_b(list);
-      return completablefuture1.thenApply((p_219227_4_) -> {
-         List<IChunk> list1 = Lists.newArrayList();
-         int k1 = 0;
-
-         for(final Either<IChunk, ChunkHolder.IChunkLoadingError> either : p_219227_4_) {
-            Optional<IChunk> optional = either.left();
-            if (!optional.isPresent()) {
-               final int l1 = k1;
-               return Either.right(new ChunkHolder.IChunkLoadingError() {
-                  public String toString() {
-                     return "Unloaded " + new ChunkPos(i + l1 % (p_219236_2_ * 2 + 1), j + l1 / (p_219236_2_ * 2 + 1)) + " " + either.right().get().toString();
-                  }
-               });
-            }
-
-            list1.add(optional.get());
-            ++k1;
-         }
-
-         return Either.left(list1);
-      });
-   }
-
-   public CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> func_219188_b(ChunkPos p_219188_1_) {
-      return this.func_219236_a(p_219188_1_, 2, (p_219218_0_) -> {
-         return ChunkStatus.field_222617_m;
-      }).thenApplyAsync((p_219242_0_) -> {
-         return p_219242_0_.mapLeft((p_219238_0_) -> {
-            return (Chunk)p_219238_0_.get(p_219238_0_.size() / 2);
-         });
-      }, this.field_219257_k);
-   }
-
-   @Nullable
-   private ChunkHolder func_219213_a(long p_219213_1_, int p_219213_3_, @Nullable ChunkHolder p_219213_4_, int p_219213_5_) {
-      if (p_219213_5_ > field_219249_a && p_219213_3_ > field_219249_a) {
-         return p_219213_4_;
-      } else {
-         if (p_219213_4_ != null) {
-            p_219213_4_.func_219292_a(p_219213_3_);
-         }
-
-         if (p_219213_4_ != null) {
-            if (p_219213_3_ > field_219249_a) {
-               this.field_219261_o.add(p_219213_1_);
-            } else {
-               this.field_219261_o.remove(p_219213_1_);
-            }
-         }
-
-         if (p_219213_3_ <= field_219249_a && p_219213_4_ == null) {
-            p_219213_4_ = this.field_219253_g.remove(p_219213_1_);
-            if (p_219213_4_ != null) {
-               p_219213_4_.func_219292_a(p_219213_3_);
-            } else {
-               p_219213_4_ = new ChunkHolder(new ChunkPos(p_219213_1_), p_219213_3_, this.field_219256_j, this.field_219263_q, this);
-            }
-
-            this.field_219251_e.put(p_219213_1_, p_219213_4_);
-            this.field_219262_p = true;
-         }
-
-         return p_219213_4_;
-      }
-   }
-
-   public void close() throws IOException {
-      try {
-         this.field_219263_q.close();
-         this.field_219260_n.close();
-      } finally {
-         super.close();
-      }
-
-   }
-
-   protected void func_219177_a(boolean p_219177_1_) {
-      if (p_219177_1_) {
-         List<ChunkHolder> list = this.field_219252_f.values().stream().filter(ChunkHolder::func_219289_k).peek(ChunkHolder::func_219303_l).collect(Collectors.toList());
-         MutableBoolean mutableboolean = new MutableBoolean();
-
-         do {
-            mutableboolean.setFalse();
-            list.stream().map((p_222974_1_) -> {
-               CompletableFuture<IChunk> completablefuture;
-               do {
-                  completablefuture = p_222974_1_.func_219302_f();
-                  this.field_219257_k.func_213161_c(completablefuture::isDone);
-               } while(completablefuture != p_222974_1_.func_219302_f());
-
-               return completablefuture.join();
-            }).filter((p_222952_0_) -> {
-               return p_222952_0_ instanceof ChunkPrimerWrapper || p_222952_0_ instanceof Chunk;
-            }).filter(this::func_219229_a).forEach((p_222959_1_) -> {
-               mutableboolean.setTrue();
-            });
-         } while(mutableboolean.isTrue());
-
-         this.func_223155_b(() -> {
-            return true;
-         });
-         this.func_227079_i_();
-         field_219250_d.info("ThreadedAnvilChunkStorage ({}): All chunks are saved", (Object)this.field_219270_x.getName());
-      } else {
-         this.field_219252_f.values().stream().filter(ChunkHolder::func_219289_k).forEach((p_222965_1_) -> {
-            IChunk ichunk = p_222965_1_.func_219302_f().getNow((IChunk)null);
-            if (ichunk instanceof ChunkPrimerWrapper || ichunk instanceof Chunk) {
-               this.func_219229_a(ichunk);
-               p_222965_1_.func_219303_l();
-            }
-
-         });
-      }
-
-   }
-
-   protected void func_219204_a(BooleanSupplier p_219204_1_) {
-      IProfiler iprofiler = this.field_219255_i.func_217381_Z();
-      iprofiler.func_76320_a("poi");
-      this.field_219260_n.func_219115_a(p_219204_1_);
-      iprofiler.func_219895_b("chunk_unload");
-      if (!this.field_219255_i.func_217402_u()) {
-         this.func_223155_b(p_219204_1_);
-      }
-
-      iprofiler.func_76319_b();
-   }
-
-   private void func_223155_b(BooleanSupplier p_223155_1_) {
-      LongIterator longiterator = this.field_219261_o.iterator();
-
-      for(int i = 0; longiterator.hasNext() && (p_223155_1_.getAsBoolean() || i < 200 || this.field_219261_o.size() > 2000); longiterator.remove()) {
-         long j = longiterator.nextLong();
-         ChunkHolder chunkholder = this.field_219251_e.remove(j);
-         if (chunkholder != null) {
-            this.field_219253_g.put(j, chunkholder);
-            this.field_219262_p = true;
-            ++i;
-            this.func_219212_a(j, chunkholder);
-         }
-      }
-
-      Runnable runnable;
-      while((p_223155_1_.getAsBoolean() || this.field_223181_A.size() > 2000) && (runnable = this.field_223181_A.poll()) != null) {
-         runnable.run();
-      }
-
-   }
-
-   private void func_219212_a(long p_219212_1_, ChunkHolder p_219212_3_) {
-      CompletableFuture<IChunk> completablefuture = p_219212_3_.func_219302_f();
-      completablefuture.thenAcceptAsync((p_219185_5_) -> {
-         CompletableFuture<IChunk> completablefuture1 = p_219212_3_.func_219302_f();
-         if (completablefuture1 != completablefuture) {
-            this.func_219212_a(p_219212_1_, p_219212_3_);
-         } else {
-            if (this.field_219253_g.remove(p_219212_1_, p_219212_3_) && p_219185_5_ != null) {
-               if (p_219185_5_ instanceof Chunk) {
-                  ((Chunk)p_219185_5_).func_177417_c(false);
-               }
-
-               this.func_219229_a(p_219185_5_);
-               if (this.field_219254_h.remove(p_219212_1_) && p_219185_5_ instanceof Chunk) {
-                  Chunk chunk = (Chunk)p_219185_5_;
-                  this.field_219255_i.func_217466_a(chunk);
-               }
-
-               this.field_219256_j.func_215581_a(p_219185_5_.func_76632_l());
-               this.field_219256_j.func_215588_z_();
-               this.field_219266_t.func_219508_a(p_219185_5_.func_76632_l(), (ChunkStatus)null);
-            }
-
-         }
-      }, this.field_223181_A::add).whenComplete((p_223171_1_, p_223171_2_) -> {
-         if (p_223171_2_ != null) {
-            field_219250_d.error("Failed to save chunk " + p_219212_3_.func_219277_h(), p_223171_2_);
-         }
-
-      });
-   }
-
-   protected boolean func_219245_b() {
-      if (!this.field_219262_p) {
-         return false;
-      } else {
-         this.field_219252_f = this.field_219251_e.clone();
-         this.field_219262_p = false;
-         return true;
-      }
-   }
-
-   public CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> func_219244_a(ChunkHolder p_219244_1_, ChunkStatus p_219244_2_) {
-      ChunkPos chunkpos = p_219244_1_.func_219277_h();
-      if (p_219244_2_ == ChunkStatus.field_223226_a_) {
-         return this.func_223172_f(chunkpos);
-      } else {
-         CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture = p_219244_1_.func_219276_a(p_219244_2_.func_222593_e(), this);
-         return completablefuture.thenComposeAsync((p_223180_4_) -> {
-            Optional<IChunk> optional = p_223180_4_.left();
-            if (!optional.isPresent()) {
-               return CompletableFuture.completedFuture(p_223180_4_);
-            } else {
-               if (p_219244_2_ == ChunkStatus.field_222614_j) {
-                  this.field_219267_u.func_219356_a(TicketType.field_219492_e, chunkpos, 33 + ChunkStatus.func_222599_a(ChunkStatus.field_222613_i), chunkpos);
-               }
-
-               IChunk ichunk = optional.get();
-               if (ichunk.func_201589_g().func_209003_a(p_219244_2_)) {
-                  CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture1;
-                  if (p_219244_2_ == ChunkStatus.field_222614_j) {
-                     completablefuture1 = this.func_223156_b(p_219244_1_, p_219244_2_);
-                  } else {
-                     completablefuture1 = p_219244_2_.func_223201_a(this.field_219255_i, this.field_219269_w, this.field_219256_j, (p_223175_2_) -> {
-                        return this.func_219200_b(p_219244_1_);
-                     }, ichunk);
-                  }
-
-                  this.field_219266_t.func_219508_a(chunkpos, p_219244_2_);
-                  return completablefuture1;
-               } else {
-                  return this.func_223156_b(p_219244_1_, p_219244_2_);
-               }
-            }
-         }, this.field_219257_k);
-      }
-   }
-
-   private CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> func_223172_f(ChunkPos p_223172_1_) {
-      return CompletableFuture.supplyAsync(() -> {
-         try {
-            this.field_219255_i.func_217381_Z().func_230035_c_("chunkLoad");
-            CompoundNBT compoundnbt = this.func_219178_f(p_223172_1_);
-            if (compoundnbt != null) {
-               boolean flag = compoundnbt.func_150297_b("Level", 10) && compoundnbt.func_74775_l("Level").func_150297_b("Status", 8);
-               if (flag) {
-                  IChunk ichunk = ChunkSerializer.func_222656_a(this.field_219255_i, this.field_219269_w, this.field_219260_n, p_223172_1_, compoundnbt);
-                  ichunk.func_177432_b(this.field_219255_i.func_82737_E());
-                  this.func_241088_a_(p_223172_1_, ichunk.func_201589_g().func_202129_d());
-                  return Either.left(ichunk);
-               }
-
-               field_219250_d.error("Chunk file at {} is missing level data, skipping", (Object)p_223172_1_);
-            }
-         } catch (ReportedException reportedexception) {
-            Throwable throwable = reportedexception.getCause();
-            if (!(throwable instanceof IOException)) {
-               this.func_241089_g_(p_223172_1_);
-               throw reportedexception;
-            }
-
-            field_219250_d.error("Couldn't load chunk {}", p_223172_1_, throwable);
-         } catch (Exception exception) {
-            field_219250_d.error("Couldn't load chunk {}", p_223172_1_, exception);
-         }
-
-         this.func_241089_g_(p_223172_1_);
-         return Either.left(new ChunkPrimer(p_223172_1_, UpgradeData.field_196994_a));
-      }, this.field_219257_k);
-   }
-
-   private void func_241089_g_(ChunkPos p_241089_1_) {
-      this.field_241087_z_.put(p_241089_1_.func_201841_a(), (byte)-1);
-   }
-
-   private byte func_241088_a_(ChunkPos p_241088_1_, ChunkStatus.Type p_241088_2_) {
-      return this.field_241087_z_.put(p_241088_1_.func_201841_a(), (byte)(p_241088_2_ == ChunkStatus.Type.PROTOCHUNK ? -1 : 1));
-   }
-
-   private CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> func_223156_b(ChunkHolder p_223156_1_, ChunkStatus p_223156_2_) {
-      ChunkPos chunkpos = p_223156_1_.func_219277_h();
-      CompletableFuture<Either<List<IChunk>, ChunkHolder.IChunkLoadingError>> completablefuture = this.func_219236_a(chunkpos, p_223156_2_.func_202128_c(), (p_219195_2_) -> {
-         return this.func_219205_a(p_223156_2_, p_219195_2_);
-      });
-      this.field_219255_i.func_217381_Z().func_230036_c_(() -> {
-         return "chunkGenerate " + p_223156_2_.func_222596_d();
-      });
-      return completablefuture.thenComposeAsync((p_219235_4_) -> {
-         return p_219235_4_.map((p_223148_4_) -> {
-            try {
-               CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture1 = p_223156_2_.func_223198_a(this.field_219255_i, this.field_219258_l, this.field_219269_w, this.field_219256_j, (p_222954_2_) -> {
-                  return this.func_219200_b(p_223156_1_);
-               }, p_223148_4_);
-               this.field_219266_t.func_219508_a(chunkpos, p_223156_2_);
-               return completablefuture1;
-            } catch (Exception exception) {
-               CrashReport crashreport = CrashReport.func_85055_a(exception, "Exception generating new chunk");
-               CrashReportCategory crashreportcategory = crashreport.func_85058_a("Chunk to be generated");
-               crashreportcategory.func_71507_a("Location", String.format("%d,%d", chunkpos.field_77276_a, chunkpos.field_77275_b));
-               crashreportcategory.func_71507_a("Position hash", ChunkPos.func_77272_a(chunkpos.field_77276_a, chunkpos.field_77275_b));
-               crashreportcategory.func_71507_a("Generator", this.field_219258_l);
-               throw new ReportedException(crashreport);
-            }
-         }, (p_219211_2_) -> {
-            this.func_219209_c(chunkpos);
-            return CompletableFuture.completedFuture(Either.right(p_219211_2_));
-         });
-      }, (p_219216_2_) -> {
-         this.field_219264_r.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(p_223156_1_, p_219216_2_));
-      });
-   }
-
-   protected void func_219209_c(ChunkPos p_219209_1_) {
-      this.field_219257_k.func_212871_a_(Util.func_215075_a(() -> {
-         this.field_219267_u.func_219345_b(TicketType.field_219492_e, p_219209_1_, 33 + ChunkStatus.func_222599_a(ChunkStatus.field_222613_i), p_219209_1_);
-      }, () -> {
-         return "release light ticket " + p_219209_1_;
-      }));
-   }
-
-   private ChunkStatus func_219205_a(ChunkStatus p_219205_1_, int p_219205_2_) {
-      ChunkStatus chunkstatus;
-      if (p_219205_2_ == 0) {
-         chunkstatus = p_219205_1_.func_222593_e();
-      } else {
-         chunkstatus = ChunkStatus.func_222581_a(ChunkStatus.func_222599_a(p_219205_1_) + p_219205_2_);
-      }
-
-      return chunkstatus;
-   }
-
-   private CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> func_219200_b(ChunkHolder p_219200_1_) {
-      CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture = p_219200_1_.func_219301_a(ChunkStatus.field_222617_m.func_222593_e());
-      return completablefuture.thenApplyAsync((p_219193_2_) -> {
-         ChunkStatus chunkstatus = ChunkHolder.func_219278_b(p_219200_1_.func_219299_i());
-         return !chunkstatus.func_209003_a(ChunkStatus.field_222617_m) ? ChunkHolder.field_219306_a : p_219193_2_.mapLeft((p_219237_2_) -> {
-            ChunkPos chunkpos = p_219200_1_.func_219277_h();
-            Chunk chunk;
-            if (p_219237_2_ instanceof ChunkPrimerWrapper) {
-               chunk = ((ChunkPrimerWrapper)p_219237_2_).func_217336_u();
-            } else {
-               chunk = new Chunk(this.field_219255_i, (ChunkPrimer)p_219237_2_);
-               p_219200_1_.func_219294_a(new ChunkPrimerWrapper(chunk));
-            }
-
-            chunk.func_217314_a(() -> {
-               return ChunkHolder.func_219286_c(p_219200_1_.func_219299_i());
-            });
-            chunk.func_217318_w();
-            if (this.field_219254_h.add(chunkpos.func_201841_a())) {
-               chunk.func_177417_c(true);
-               this.field_219255_i.func_147448_a(chunk.func_177434_r().values());
-               List<Entity> list = null;
-               ClassInheritanceMultiMap<Entity>[] aclassinheritancemultimap = chunk.func_177429_s();
-               int i = aclassinheritancemultimap.length;
-
-               for(int j = 0; j < i; ++j) {
-                  for(Entity entity : aclassinheritancemultimap[j]) {
-                     if (!(entity instanceof PlayerEntity) && !this.field_219255_i.func_217440_f(entity)) {
-                        if (list == null) {
-                           list = Lists.newArrayList(entity);
-                        } else {
-                           list.add(entity);
-                        }
-                     }
-                  }
-               }
-
-               if (list != null) {
-                  list.forEach(chunk::func_76622_b);
-               }
-            }
-
-            return chunk;
-         });
-      }, (p_219228_2_) -> {
-         this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219069_a(p_219228_2_, p_219200_1_.func_219277_h().func_201841_a(), p_219200_1_::func_219299_i));
-      });
-   }
-
-   public CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> func_219179_a(ChunkHolder p_219179_1_) {
-      ChunkPos chunkpos = p_219179_1_.func_219277_h();
-      CompletableFuture<Either<List<IChunk>, ChunkHolder.IChunkLoadingError>> completablefuture = this.func_219236_a(chunkpos, 1, (p_219172_0_) -> {
-         return ChunkStatus.field_222617_m;
-      });
-      CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> completablefuture1 = completablefuture.thenApplyAsync((p_219239_0_) -> {
-         return p_219239_0_.flatMap((p_219208_0_) -> {
-            Chunk chunk = (Chunk)p_219208_0_.get(p_219208_0_.size() / 2);
-            chunk.func_201595_A();
-            return Either.left(chunk);
-         });
-      }, (p_219230_2_) -> {
-         this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(p_219179_1_, p_219230_2_));
-      });
-      completablefuture1.thenAcceptAsync((p_219176_2_) -> {
-         p_219176_2_.mapLeft((p_219196_2_) -> {
-            this.field_219268_v.getAndIncrement();
-            IPacket<?>[] ipacket = new IPacket[2];
-            this.func_219097_a(chunkpos, false).forEach((p_219233_3_) -> {
-               this.func_219180_a(p_219233_3_, ipacket, p_219196_2_);
-            });
-            return Either.left(p_219196_2_);
-         });
-      }, (p_219202_2_) -> {
-         this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(p_219179_1_, p_219202_2_));
-      });
-      return completablefuture1;
-   }
-
-   public CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> func_222961_b(ChunkHolder p_222961_1_) {
-      return p_222961_1_.func_219276_a(ChunkStatus.field_222617_m, this).thenApplyAsync((p_222976_0_) -> {
-         return p_222976_0_.mapLeft((p_222955_0_) -> {
-            Chunk chunk = (Chunk)p_222955_0_;
-            chunk.func_222879_B();
-            return chunk;
-         });
-      }, (p_222962_2_) -> {
-         this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(p_222961_1_, p_222962_2_));
-      });
-   }
-
-   public int func_219174_c() {
-      return this.field_219268_v.get();
-   }
-
-   private boolean func_219229_a(IChunk p_219229_1_) {
-      this.field_219260_n.func_219112_a(p_219229_1_.func_76632_l());
-      if (!p_219229_1_.func_201593_f()) {
-         return false;
-      } else {
-         p_219229_1_.func_177432_b(this.field_219255_i.func_82737_E());
-         p_219229_1_.func_177427_f(false);
-         ChunkPos chunkpos = p_219229_1_.func_76632_l();
-
-         try {
-            ChunkStatus chunkstatus = p_219229_1_.func_201589_g();
-            if (chunkstatus.func_202129_d() != ChunkStatus.Type.LEVELCHUNK) {
-               if (this.func_241090_h_(chunkpos)) {
-                  return false;
-               }
-
-               if (chunkstatus == ChunkStatus.field_223226_a_ && p_219229_1_.func_201609_c().values().stream().noneMatch(StructureStart::func_75069_d)) {
-                  return false;
-               }
-            }
-
-            this.field_219255_i.func_217381_Z().func_230035_c_("chunkSave");
-            CompoundNBT compoundnbt = ChunkSerializer.func_222645_a(this.field_219255_i, p_219229_1_);
-            this.func_219100_a(chunkpos, compoundnbt);
-            this.func_241088_a_(chunkpos, chunkstatus.func_202129_d());
-            return true;
-         } catch (Exception exception) {
-            field_219250_d.error("Failed to save chunk {},{}", chunkpos.field_77276_a, chunkpos.field_77275_b, exception);
-            return false;
-         }
-      }
-   }
-
-   private boolean func_241090_h_(ChunkPos p_241090_1_) {
-      byte b0 = this.field_241087_z_.get(p_241090_1_.func_201841_a());
-      if (b0 != 0) {
-         return b0 == 1;
-      } else {
-         CompoundNBT compoundnbt;
-         try {
-            compoundnbt = this.func_219178_f(p_241090_1_);
-            if (compoundnbt == null) {
-               this.func_241089_g_(p_241090_1_);
-               return false;
-            }
-         } catch (Exception exception) {
-            field_219250_d.error("Failed to read chunk {}", p_241090_1_, exception);
-            this.func_241089_g_(p_241090_1_);
-            return false;
-         }
-
-         ChunkStatus.Type chunkstatus$type = ChunkSerializer.func_222651_a(compoundnbt);
-         return this.func_241088_a_(p_241090_1_, chunkstatus$type) == 1;
-      }
-   }
-
-   protected void func_219175_a(int p_219175_1_) {
-      int i = MathHelper.func_76125_a(p_219175_1_ + 1, 3, 33);
-      if (i != this.field_219247_A) {
-         int j = this.field_219247_A;
-         this.field_219247_A = i;
-         this.field_219267_u.func_219354_b(this.field_219247_A);
-
-         for(ChunkHolder chunkholder : this.field_219251_e.values()) {
-            ChunkPos chunkpos = chunkholder.func_219277_h();
-            IPacket<?>[] ipacket = new IPacket[2];
-            this.func_219097_a(chunkpos, false).forEach((p_219224_4_) -> {
-               int k = func_219215_b(chunkpos, p_219224_4_, true);
-               boolean flag = k <= j;
-               boolean flag1 = k <= this.field_219247_A;
-               this.func_219199_a(p_219224_4_, chunkpos, ipacket, flag, flag1);
-            });
-         }
-      }
-
-   }
-
-   protected void func_219199_a(ServerPlayerEntity p_219199_1_, ChunkPos p_219199_2_, IPacket<?>[] p_219199_3_, boolean p_219199_4_, boolean p_219199_5_) {
-      if (p_219199_1_.field_70170_p == this.field_219255_i) {
-         if (p_219199_5_ && !p_219199_4_) {
-            ChunkHolder chunkholder = this.func_219219_b(p_219199_2_.func_201841_a());
+    private static final Logger field_219250_d = LogManager.getLogger();
+    public static final int field_219249_a = 33 + ChunkStatus.func_222600_b();
+    private final Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219251_e = new Long2ObjectLinkedOpenHashMap<>();
+    public volatile Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219252_f = this.field_219251_e.clone();
+    private final Long2ObjectLinkedOpenHashMap<ChunkHolder> field_219253_g = new Long2ObjectLinkedOpenHashMap<>();
+    public final LongSet field_219254_h = new LongOpenHashSet(); // Paper private -> public
+    public final ServerWorld field_219255_i; // Paper private -> public
+    private final ServerWorldLightManager field_219256_j;
+    private final ThreadTaskExecutor<Runnable> field_219257_k;
+    private final ChunkGenerator field_219258_l;
+    private final Supplier<DimensionSavedDataManager> field_219259_m;
+    private final PointOfInterestManager field_219260_n;
+    public final LongSet field_219261_o = new LongOpenHashSet(); // Paper private -> public
+    private boolean field_219262_p;
+    private final ChunkTaskPriorityQueueSorter field_219263_q;
+    private final ITaskExecutor<ChunkTaskPriorityQueueSorter.FunctionEntry<Runnable>> field_219264_r;
+    public final ITaskExecutor<ChunkTaskPriorityQueueSorter.FunctionEntry<Runnable>> field_219265_s; // Paper private -> public
+    // Paper start
+    final ITaskExecutor<ChunkTaskPriorityQueueSorter.FunctionEntry<Runnable>> mailboxLight;
+
+    public void addLightTask(ChunkHolder playerchunk, Runnable run) {
+        this.mailboxLight.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(playerchunk, run));
+    }
+
+    // Paper end
+    public final IChunkStatusListener field_219266_t;
+    public final ChunkManager.ProxyTicketManager field_219267_u;
+    private final AtomicInteger field_219268_v = new AtomicInteger();
+    private final TemplateManager field_219269_w;
+    private final File field_219270_x;
+    private final PlayerGenerationTracker field_219271_y = new PlayerGenerationTracker();
+    public final Int2ObjectMap<ChunkManager.EntityTracker> field_219272_z = new Int2ObjectOpenHashMap<>();
+    private final Long2ByteMap field_241087_z_ = new Long2ByteOpenHashMap();
+    private final Queue<Runnable> field_223181_A = Queues.newConcurrentLinkedQueue();
+    int field_219247_A; // Paper - private -> package private
+    public final com.destroystokyo.paper.util.PlayerMobDistanceMap playerMobDistanceMap; // Paper
+
+
+    // CraftBukkit start - recursion-safe executor for Chunk loadCallback() and unloadCallback()
+    public final CallbackExecutor callbackExecutor = new CallbackExecutor();
+
+    public static final class CallbackExecutor implements java.util.concurrent.Executor, Runnable {
+        private Runnable queued;
+
+        @Override
+        public void execute(Runnable runnable) {
+            if (queued != null) {
+                throw new IllegalStateException("Already queued");
+            }
+            queued = runnable;
+        }
+
+        @Override
+        public void run() {
+            Runnable task = queued;
+            queued = null;
+            if (task != null) {
+                task.run();
+            }
+        }
+    }
+
+    // CraftBukkit end
+
+    // Paper start - no-tick view distance
+    int noTickViewDistance;
+
+    public final int getRawNoTickViewDistance() {
+        return this.noTickViewDistance;
+    }
+
+    public final int getEffectiveNoTickViewDistance() {
+        return this.noTickViewDistance == -1 ? this.getEffectiveViewDistance() : this.noTickViewDistance;
+    }
+
+    public final int getLoadViewDistance() {
+        return Math.max(this.getEffectiveViewDistance(), this.getEffectiveNoTickViewDistance());
+    }
+
+    public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerViewDistanceBroadcastMap;
+    public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerViewDistanceTickMap;
+    public final com.destroystokyo.paper.util.misc.PlayerAreaMap playerViewDistanceNoTickMap;
+    // Paper end - no-tick view distance
+
+    // Paper start - distance maps
+    private final com.destroystokyo.paper.util.misc.PooledLinkedHashSets<PlayerEntity> pooledLinkedPlayerHashSets = new com.destroystokyo.paper.util.misc.PooledLinkedHashSets<>();
+
+    void addPlayerToDistanceMaps(PlayerEntity player) {
+        int chunkX = MCUtil.getChunkCoordinate(player.func_213303_ch().field_72450_a);
+        int chunkZ = MCUtil.getChunkCoordinate(player.func_213303_ch().field_72449_c);
+        // Note: players need to be explicitly added to distance maps before they can be updated
+       // Paper start - no-tick view distance
+       int effectiveTickViewDistance = this.getEffectiveViewDistance();
+       int effectiveNoTickViewDistance = Math.max(this.getEffectiveNoTickViewDistance(), effectiveTickViewDistance);
+
+       if (!this.func_219187_b((ServerPlayerEntity) player)) {
+          this.playerViewDistanceTickMap.add(player, chunkX, chunkZ, effectiveTickViewDistance);
+          this.playerViewDistanceNoTickMap.add(player, chunkX, chunkZ, effectiveNoTickViewDistance + 2); // clients need chunk 1 neighbour, and we need another 1 for sending those extra neighbours (as we require neighbours to send)
+       }
+
+       player.needsChunkCenterUpdate = true;
+       this.playerViewDistanceBroadcastMap.add(player, chunkX, chunkZ, effectiveNoTickViewDistance + 1); // clients need an extra neighbour to render the full view distance configured
+       player.needsChunkCenterUpdate = false;
+       // Paper end - no-tick view distance
+    }
+
+    void removePlayerFromDistanceMaps(PlayerEntity player) {
+       // Paper start - no-tick view distance
+       this.playerViewDistanceBroadcastMap.remove(player);
+       this.playerViewDistanceTickMap.remove(player);
+       this.playerViewDistanceNoTickMap.remove(player);
+       // Paper end - no-tick view distance
+    }
+
+    void updateMaps(PlayerEntity player) {
+        int chunkX = MCUtil.getChunkCoordinate(player.func_213303_ch().field_72450_a);
+        int chunkZ = MCUtil.getChunkCoordinate(player.func_213303_ch().field_72449_c);
+       // Note: players need to be explicitly added to distance maps before they can be updated
+       // Paper start - no-tick view distance
+       int effectiveTickViewDistance = this.getEffectiveViewDistance();
+       int effectiveNoTickViewDistance = Math.max(this.getEffectiveNoTickViewDistance(), effectiveTickViewDistance);
+
+       if (!this.func_219187_b((ServerPlayerEntity) player)) {
+          this.playerViewDistanceTickMap.update(player, chunkX, chunkZ, effectiveTickViewDistance);
+          this.playerViewDistanceNoTickMap.update(player, chunkX, chunkZ, effectiveNoTickViewDistance + 2); // clients need chunk 1 neighbour, and we need another 1 for sending those extra neighbours (as we require neighbours to send)
+       }
+
+       player.needsChunkCenterUpdate = true;
+       this.playerViewDistanceBroadcastMap.update(player, chunkX, chunkZ, effectiveNoTickViewDistance + 1); // clients need an extra neighbour to render the full view distance configured
+       player.needsChunkCenterUpdate = false;
+       // Paper end - no-tick view distance
+    }
+    // Paper end
+
+    public ChunkManager(ServerWorld p_i232602_1_, SaveFormat.LevelSave p_i232602_2_, DataFixer p_i232602_3_, TemplateManager p_i232602_4_, Executor p_i232602_5_, ThreadTaskExecutor<Runnable> p_i232602_6_, IChunkLightProvider p_i232602_7_, ChunkGenerator p_i232602_8_, IChunkStatusListener p_i232602_9_, Supplier<DimensionSavedDataManager> p_i232602_10_, int p_i232602_11_, boolean p_i232602_12_) {
+        super(new File(p_i232602_2_.func_237291_a_(p_i232602_1_.func_234923_W_()), "region"), p_i232602_3_, p_i232602_12_);
+        this.field_219269_w = p_i232602_4_;
+        this.field_219270_x = p_i232602_2_.func_237291_a_(p_i232602_1_.func_234923_W_());
+        this.field_219255_i = p_i232602_1_;
+        this.field_219258_l = p_i232602_8_;
+        this.field_219257_k = p_i232602_6_;
+        DelegatedTaskExecutor<Runnable> delegatedtaskexecutor = DelegatedTaskExecutor.func_213144_a(p_i232602_5_, "worldgen");
+        ITaskExecutor<Runnable> itaskexecutor = ITaskExecutor.func_213140_a("main", p_i232602_6_::func_212871_a_);
+        this.field_219266_t = p_i232602_9_;
+        DelegatedTaskExecutor<Runnable> delegatedtaskexecutor1 = DelegatedTaskExecutor.func_213144_a(p_i232602_5_, "light");
+        this.field_219263_q = new ChunkTaskPriorityQueueSorter(ImmutableList.of(delegatedtaskexecutor, itaskexecutor, delegatedtaskexecutor1), p_i232602_5_, Integer.MAX_VALUE);
+        this.field_219264_r = this.field_219263_q.func_219087_a(delegatedtaskexecutor, false);
+        this.field_219265_s = this.field_219263_q.func_219087_a(itaskexecutor, false);
+        /*DelegatedTaskExecutor<Runnable> lightthreaded;
+        DelegatedTaskExecutor<Runnable> threadedmailbox1 = lightthreaded = DelegatedTaskExecutor.create(p_i232602_5_, "light"); // Paper*/
+        this.mailboxLight = this.field_219263_q.func_219087_a(itaskexecutor, false);// Paper
+        this.field_219256_j = new ServerWorldLightManager(p_i232602_7_, this, this.field_219255_i.func_230315_m_().func_218272_d(), delegatedtaskexecutor1, this.field_219263_q.func_219087_a(delegatedtaskexecutor1, false));
+        this.field_219267_u = new ChunkManager.ProxyTicketManager(p_i232602_5_, p_i232602_6_);
+        this.field_219259_m = p_i232602_10_;
+        this.field_219260_n = new PointOfInterestManager(new File(this.field_219270_x, "poi"), p_i232602_3_, p_i232602_12_);
+        this.func_219175_a(p_i232602_11_);
+        this.playerMobDistanceMap = this.field_219255_i.paperConfig.perPlayerMobSpawns ? new com.destroystokyo.paper.util.PlayerMobDistanceMap() : null; // Paper
+
+        // Paper start - no-tick view distance
+        this.setNoTickViewDistance(this.field_219255_i.paperConfig.noTickViewDistance);
+        this.playerViewDistanceTickMap = new com.destroystokyo.paper.util.misc.PlayerAreaMap(this.pooledLinkedPlayerHashSets,
+                (PlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+                 com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<PlayerEntity> newState) -> {
+                    if (newState.size() != 1) {
+                        return;
+                    }
+                    Chunk chunk = ChunkManager.this.field_219255_i.func_72863_F().getChunkAtIfLoadedMainThreadNoCache(rangeX, rangeZ);
+                    if (chunk == null || !chunk.areNeighboursLoaded(2)) {
+                        return;
+                    }
+
+                    ChunkPos chunkPos = new ChunkPos(rangeX, rangeZ);
+                    ChunkManager.this.field_219255_i.func_72863_F().func_217228_a(TicketType.field_219490_c, chunkPos, 31, chunkPos); // entity ticking level, TODO check on update
+                },
+                (PlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+                 com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<PlayerEntity> newState) -> {
+                    if (newState != null) {
+                        return;
+                    }
+                    ChunkPos chunkPos = new ChunkPos(rangeX, rangeZ);
+                    ChunkManager.this.field_219255_i.func_72863_F().func_217222_b(TicketType.field_219490_c, chunkPos, 31, chunkPos); // entity ticking level, TODO check on update
+                });
+        this.playerViewDistanceNoTickMap = new com.destroystokyo.paper.util.misc.PlayerAreaMap(this.pooledLinkedPlayerHashSets);
+        this.playerViewDistanceBroadcastMap = new com.destroystokyo.paper.util.misc.PlayerAreaMap(this.pooledLinkedPlayerHashSets,
+                (PlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+                 com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<PlayerEntity> newState) -> {
+                    if (player.needsChunkCenterUpdate) {
+                        player.needsChunkCenterUpdate = false;
+                        //((ServerPlayerEntity)player).connection.send(new PacketPlayOutViewCentre(currPosX, currPosZ)); // TODO: find forge packet equivalent
+                    }
+                    ChunkManager.this.func_219199_a((ServerPlayerEntity) player, new ChunkPos(rangeX, rangeZ), new IPacket[2], false, true); // unloaded, loaded
+                },
+                (PlayerEntity player, int rangeX, int rangeZ, int currPosX, int currPosZ, int prevPosX, int prevPosZ,
+                 com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<PlayerEntity> newState) -> {
+                    ChunkManager.this.func_219199_a((ServerPlayerEntity) player, new ChunkPos(rangeX, rangeZ), null, true, false); // unloaded, loaded
+                });
+        // Paper end - no-tick view distance
+    }
+
+    private static double func_219217_a(ChunkPos p_219217_0_, Entity p_219217_1_) {
+        double d0 = p_219217_0_.field_77276_a * 16 + 8;
+        double d1 = p_219217_0_.field_77275_b * 16 + 8;
+        double d2 = d0 - p_219217_1_.func_226277_ct_();
+        double d3 = d1 - p_219217_1_.func_226281_cx_();
+        return d2 * d2 + d3 * d3;
+    }
+
+    private static int func_219215_b(ChunkPos p_219215_0_, ServerPlayerEntity p_219215_1_, boolean p_219215_2_) {
+        int i;
+        int j;
+        if (p_219215_2_) {
+            SectionPos sectionpos = p_219215_1_.func_213842_M();
+            i = sectionpos.func_218149_a();
+            j = sectionpos.func_218148_c();
+        } else {
+            i = MathHelper.func_76128_c(p_219215_1_.func_226277_ct_() / 16.0D);
+            j = MathHelper.func_76128_c(p_219215_1_.func_226281_cx_() / 16.0D);
+        }
+
+        return func_219232_a(p_219215_0_, i, j);
+    }
+
+    private static int func_219232_a(ChunkPos p_219232_0_, int p_219232_1_, int p_219232_2_) {
+        int i = p_219232_0_.field_77276_a - p_219232_1_;
+        int j = p_219232_0_.field_77275_b - p_219232_2_;
+        return Math.max(Math.abs(i), Math.abs(j));
+    }
+
+    protected ServerWorldLightManager func_219207_a() {
+        return this.field_219256_j;
+    }
+
+    @Nullable
+    public ChunkHolder func_219220_a(long p_219220_1_) { // Mohist - Chunk getters protected -> public
+        return this.field_219251_e.get(p_219220_1_);
+    }
+
+    @Nullable
+    public ChunkHolder func_219219_b(long p_219219_1_) { // Mohist - Chunk getters protected -> public
+        return this.field_219252_f.get(p_219219_1_);
+    }
+
+    protected IntSupplier func_219191_c(long p_219191_1_) {
+        return () -> {
+            ChunkHolder chunkholder = this.func_219219_b(p_219191_1_);
+            return chunkholder == null ? ChunkTaskPriorityQueue.field_219419_a - 1 : Math.min(chunkholder.func_219281_j(), ChunkTaskPriorityQueue.field_219419_a - 1);
+        };
+    }
+
+    @OnlyIn(Dist.CLIENT)
+    public String func_219170_a(ChunkPos p_219170_1_) {
+        ChunkHolder chunkholder = this.func_219219_b(p_219170_1_.func_201841_a());
+        if (chunkholder == null) {
+            return "null";
+        } else {
+            String s = chunkholder.func_219299_i() + "\n";
+            ChunkStatus chunkstatus = chunkholder.func_219285_d();
+            IChunk ichunk = chunkholder.func_219287_e();
+            if (chunkstatus != null) {
+                s = s + "St: \u00a7" + chunkstatus.func_222584_c() + chunkstatus + '\u00a7' + "r\n";
+            }
+
+            if (ichunk != null) {
+                s = s + "Ch: \u00a7" + ichunk.func_201589_g().func_222584_c() + ichunk.func_201589_g() + '\u00a7' + "r\n";
+            }
+
+            ChunkHolder.LocationType chunkholder$locationtype = chunkholder.func_219300_g();
+            s = s + "\u00a7" + chunkholder$locationtype.ordinal() + chunkholder$locationtype;
+            return s + '\u00a7' + "r";
+        }
+    }
+
+   // Paper start
+   public final int getEffectiveViewDistance() {
+      // TODO this needs to be checked on update
+      // Mojang currently sets it to +1 of the configured view distance. So subtract one to get the one we really want.
+      return this.field_219247_A - 1;
+   }
+   // Paper end
+
+    private CompletableFuture<Either<List<IChunk>, ChunkHolder.IChunkLoadingError>> func_219236_a(ChunkPos p_219236_1_, int p_219236_2_, IntFunction<ChunkStatus> p_219236_3_) {
+        List<CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>>> list = Lists.newArrayList();
+        int i = p_219236_1_.field_77276_a;
+        int j = p_219236_1_.field_77275_b;
+
+        for (int k = -p_219236_2_; k <= p_219236_2_; ++k) {
+            for (int l = -p_219236_2_; l <= p_219236_2_; ++l) {
+                int i1 = Math.max(Math.abs(l), Math.abs(k));
+                final ChunkPos chunkpos = new ChunkPos(i + l, j + k);
+                long j1 = chunkpos.func_201841_a();
+                ChunkHolder chunkholder = this.func_219220_a(j1);
+                if (chunkholder == null) {
+                    return CompletableFuture.completedFuture(Either.right(new ChunkHolder.IChunkLoadingError() {
+                        public String toString() {
+                            return "Unloaded " + chunkpos;
+                        }
+                    }));
+                }
+
+                ChunkStatus chunkstatus = p_219236_3_.apply(i1);
+                CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture = chunkholder.func_219276_a(chunkstatus, this);
+                list.add(completablefuture);
+            }
+        }
+
+        CompletableFuture<List<Either<IChunk, ChunkHolder.IChunkLoadingError>>> completablefuture1 = Util.func_215079_b(list);
+        return completablefuture1.thenApply((p_219227_4_) -> {
+            List<IChunk> list1 = Lists.newArrayList();
+            int k1 = 0;
+
+            for (final Either<IChunk, ChunkHolder.IChunkLoadingError> either : p_219227_4_) {
+                Optional<IChunk> optional = either.left();
+                if (!optional.isPresent()) {
+                    final int l1 = k1;
+                    return Either.right(new ChunkHolder.IChunkLoadingError() {
+                        public String toString() {
+                            return "Unloaded " + new ChunkPos(i + l1 % (p_219236_2_ * 2 + 1), j + l1 / (p_219236_2_ * 2 + 1)) + " " + either.right().get();
+                        }
+                    });
+                }
+
+                list1.add(optional.get());
+                ++k1;
+            }
+
+            return Either.left(list1);
+        });
+    }
+
+    public CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> func_219188_b(ChunkPos p_219188_1_) {
+        return this.func_219236_a(p_219188_1_, 2, (p_219218_0_) -> {
+            return ChunkStatus.field_222617_m;
+        }).thenApplyAsync((p_219242_0_) -> {
+            return p_219242_0_.mapLeft((p_219238_0_) -> {
+                return (Chunk) p_219238_0_.get(p_219238_0_.size() / 2);
+            });
+        }, this.field_219257_k);
+    }
+
+    @Nullable
+    private ChunkHolder func_219213_a(long p_219213_1_, int p_219213_3_, @Nullable ChunkHolder p_219213_4_, int p_219213_5_) {
+        if (p_219213_5_ > field_219249_a && p_219213_3_ > field_219249_a) {
+            return p_219213_4_;
+        } else {
+            if (p_219213_4_ != null) {
+                p_219213_4_.func_219292_a(p_219213_3_);
+            }
+
+            if (p_219213_4_ != null) {
+                if (p_219213_3_ > field_219249_a) {
+                    this.field_219261_o.add(p_219213_1_);
+                } else {
+                    this.field_219261_o.remove(p_219213_1_);
+                }
+            }
+
+            if (p_219213_3_ <= field_219249_a && p_219213_4_ == null) {
+                p_219213_4_ = this.field_219253_g.remove(p_219213_1_);
+                if (p_219213_4_ != null) {
+                    p_219213_4_.func_219292_a(p_219213_3_);
+                } else {
+                    p_219213_4_ = new ChunkHolder(new ChunkPos(p_219213_1_), p_219213_3_, this.field_219256_j, this.field_219263_q, this);
+                }
+
+                this.field_219251_e.put(p_219213_1_, p_219213_4_);
+                this.field_219262_p = true;
+            }
+
+            return p_219213_4_;
+        }
+    }
+
+    public void close() throws IOException {
+        try {
+            this.field_219263_q.close();
+            this.field_219260_n.close();
+        } finally {
+            super.close();
+        }
+
+    }
+
+    protected void func_219177_a(boolean p_219177_1_) {
+        if (p_219177_1_) {
+            List<ChunkHolder> list = this.field_219252_f.values().stream().filter(ChunkHolder::func_219289_k).peek(ChunkHolder::func_219303_l).collect(Collectors.toList());
+            MutableBoolean mutableboolean = new MutableBoolean();
+
+            do {
+                mutableboolean.setFalse();
+                list.stream().map((p_222974_1_) -> {
+                    CompletableFuture<IChunk> completablefuture;
+                    do {
+                        completablefuture = p_222974_1_.func_219302_f();
+                        this.field_219257_k.func_213161_c(completablefuture::isDone);
+                    } while (completablefuture != p_222974_1_.func_219302_f());
+
+                    return completablefuture.join();
+                }).filter((p_222952_0_) -> {
+                    return p_222952_0_ instanceof ChunkPrimerWrapper || p_222952_0_ instanceof Chunk;
+                }).filter(this::func_219229_a).forEach((p_222959_1_) -> {
+                    mutableboolean.setTrue();
+                });
+            } while (mutableboolean.isTrue());
+
+            this.func_223155_b(() -> {
+                return true;
+            });
+            this.func_227079_i_();
+            field_219250_d.info(com.mohistmc.util.i18n.i18n.get("chunkmanager.1", this.field_219270_x.getName()));
+        } else {
+            this.field_219252_f.values().stream().filter(ChunkHolder::func_219289_k).forEach((p_222965_1_) -> {
+                IChunk ichunk = p_222965_1_.func_219302_f().getNow(null);
+                if (ichunk instanceof ChunkPrimerWrapper || ichunk instanceof Chunk) {
+                    this.func_219229_a(ichunk);
+                    p_222965_1_.func_219303_l();
+                }
+
+            });
+        }
+
+    }
+
+    private static final double UNLOAD_QUEUE_RESIZE_FACTOR = 0.96; // Spigot
+
+    protected void func_219204_a(BooleanSupplier p_219204_1_) {
+        IProfiler iprofiler = this.field_219255_i.func_217381_Z();
+        iprofiler.func_76320_a("poi");
+        this.field_219260_n.func_219115_a(p_219204_1_);
+        iprofiler.func_219895_b("chunk_unload");
+        if (!this.field_219255_i.func_217402_u()) {
+            this.func_223155_b(p_219204_1_);
+        }
+
+        iprofiler.func_76319_b();
+    }
+
+    private void func_223155_b(BooleanSupplier p_223155_1_) {
+        LongIterator longiterator = this.field_219261_o.iterator();
+
+        for (int i = 0; longiterator.hasNext() && (p_223155_1_.getAsBoolean() || i < 200 || this.field_219261_o.size() > 2000); longiterator.remove()) {
+            long j = longiterator.nextLong();
+            ChunkHolder chunkholder = this.field_219251_e.remove(j);
             if (chunkholder != null) {
-               Chunk chunk = chunkholder.func_219298_c();
-               if (chunk != null) {
-                  this.func_219180_a(p_219199_1_, p_219199_3_, chunk);
-               }
-
-               DebugPacketSender.func_218802_a(this.field_219255_i, p_219199_2_);
-            }
-         }
-
-         if (!p_219199_5_ && p_219199_4_) {
-            p_219199_1_.func_213845_a(p_219199_2_);
-         }
-
-      }
-   }
-
-   public int func_219194_d() {
-      return this.field_219252_f.size();
-   }
-
-   protected ChunkManager.ProxyTicketManager func_219246_e() {
-      return this.field_219267_u;
-   }
-
-   protected Iterable<ChunkHolder> func_223491_f() {
-      return Iterables.unmodifiableIterable(this.field_219252_f.values());
-   }
-
-   void func_225406_a(Writer p_225406_1_) throws IOException {
-      CSVWriter csvwriter = CSVWriter.func_225428_a().func_225423_a("x").func_225423_a("z").func_225423_a("level").func_225423_a("in_memory").func_225423_a("status").func_225423_a("full_status").func_225423_a("accessible_ready").func_225423_a("ticking_ready").func_225423_a("entity_ticking_ready").func_225423_a("ticket").func_225423_a("spawning").func_225423_a("entity_count").func_225423_a("block_entity_count").func_225422_a(p_225406_1_);
-
-      for(Entry<ChunkHolder> entry : this.field_219252_f.long2ObjectEntrySet()) {
-         ChunkPos chunkpos = new ChunkPos(entry.getLongKey());
-         ChunkHolder chunkholder = entry.getValue();
-         Optional<IChunk> optional = Optional.ofNullable(chunkholder.func_219287_e());
-         Optional<Chunk> optional1 = optional.flatMap((p_225407_0_) -> {
-            return p_225407_0_ instanceof Chunk ? Optional.of((Chunk)p_225407_0_) : Optional.empty();
-         });
-         csvwriter.func_225426_a(chunkpos.field_77276_a, chunkpos.field_77275_b, chunkholder.func_219299_i(), optional.isPresent(), optional.map(IChunk::func_201589_g).orElse((ChunkStatus)null), optional1.map(Chunk::func_217321_u).orElse((ChunkHolder.LocationType)null), func_225402_a(chunkholder.func_223492_c()), func_225402_a(chunkholder.func_219296_a()), func_225402_a(chunkholder.func_219297_b()), this.field_219267_u.func_225413_c(entry.getLongKey()), !this.func_219243_d(chunkpos), optional1.map((p_225401_0_) -> {
-            return Stream.of(p_225401_0_.func_177429_s()).mapToInt(ClassInheritanceMultiMap::size).sum();
-         }).orElse(0), optional1.map((p_225405_0_) -> {
-            return p_225405_0_.func_177434_r().size();
-         }).orElse(0));
-      }
-
-   }
-
-   private static String func_225402_a(CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> p_225402_0_) {
-      try {
-         Either<Chunk, ChunkHolder.IChunkLoadingError> either = p_225402_0_.getNow((Either<Chunk, ChunkHolder.IChunkLoadingError>)null);
-         return either != null ? either.map((p_225408_0_) -> {
-            return "done";
-         }, (p_225400_0_) -> {
-            return "unloaded";
-         }) : "not completed";
-      } catch (CompletionException completionexception) {
-         return "failed " + completionexception.getCause().getMessage();
-      } catch (CancellationException cancellationexception) {
-         return "cancelled";
-      }
-   }
-
-   @Nullable
-   private CompoundNBT func_219178_f(ChunkPos p_219178_1_) throws IOException {
-      CompoundNBT compoundnbt = this.func_227078_e_(p_219178_1_);
-      return compoundnbt == null ? null : this.func_235968_a_(this.field_219255_i.func_234923_W_(), this.field_219259_m, compoundnbt);
-   }
-
-   boolean func_219243_d(ChunkPos p_219243_1_) {
-      long i = p_219243_1_.func_201841_a();
-      return !this.field_219267_u.func_223494_d(i) ? true : this.field_219271_y.func_219444_a(i).noneMatch((p_219201_1_) -> {
-         return !p_219201_1_.func_175149_v() && func_219217_a(p_219243_1_, p_219201_1_) < 16384.0D;
-      });
-   }
-
-   private boolean func_219187_b(ServerPlayerEntity p_219187_1_) {
-      return p_219187_1_.func_175149_v() && !this.field_219255_i.func_82736_K().func_223586_b(GameRules.field_223613_p);
-   }
-
-   void func_219234_a(ServerPlayerEntity p_219234_1_, boolean p_219234_2_) {
-      boolean flag = this.func_219187_b(p_219234_1_);
-      boolean flag1 = this.field_219271_y.func_219448_c(p_219234_1_);
-      int i = MathHelper.func_76128_c(p_219234_1_.func_226277_ct_()) >> 4;
-      int j = MathHelper.func_76128_c(p_219234_1_.func_226281_cx_()) >> 4;
-      if (p_219234_2_) {
-         this.field_219271_y.func_219442_a(ChunkPos.func_77272_a(i, j), p_219234_1_, flag);
-         this.func_223489_c(p_219234_1_);
-         if (!flag) {
-            this.field_219267_u.func_219341_a(SectionPos.func_218157_a(p_219234_1_), p_219234_1_);
-         }
-      } else {
-         SectionPos sectionpos = p_219234_1_.func_213842_M();
-         this.field_219271_y.func_219443_a(sectionpos.func_218155_u().func_201841_a(), p_219234_1_);
-         if (!flag1) {
-            this.field_219267_u.func_219367_b(sectionpos, p_219234_1_);
-         }
-      }
-
-      for(int l = i - this.field_219247_A; l <= i + this.field_219247_A; ++l) {
-         for(int k = j - this.field_219247_A; k <= j + this.field_219247_A; ++k) {
-            ChunkPos chunkpos = new ChunkPos(l, k);
-            this.func_219199_a(p_219234_1_, chunkpos, new IPacket[2], !p_219234_2_, p_219234_2_);
-         }
-      }
-
-   }
-
-   private SectionPos func_223489_c(ServerPlayerEntity p_223489_1_) {
-      SectionPos sectionpos = SectionPos.func_218157_a(p_223489_1_);
-      p_223489_1_.func_213850_a(sectionpos);
-      p_223489_1_.field_71135_a.func_147359_a(new SUpdateChunkPositionPacket(sectionpos.func_218149_a(), sectionpos.func_218148_c()));
-      return sectionpos;
-   }
-
-   public void func_219183_a(ServerPlayerEntity p_219183_1_) {
-      for(ChunkManager.EntityTracker chunkmanager$entitytracker : this.field_219272_z.values()) {
-         if (chunkmanager$entitytracker.field_219403_c == p_219183_1_) {
-            chunkmanager$entitytracker.func_219397_a(this.field_219255_i.func_217369_A());
-         } else {
-            chunkmanager$entitytracker.func_219400_b(p_219183_1_);
-         }
-      }
-
-      int l1 = MathHelper.func_76128_c(p_219183_1_.func_226277_ct_()) >> 4;
-      int i2 = MathHelper.func_76128_c(p_219183_1_.func_226281_cx_()) >> 4;
-      SectionPos sectionpos = p_219183_1_.func_213842_M();
-      SectionPos sectionpos1 = SectionPos.func_218157_a(p_219183_1_);
-      long i = sectionpos.func_218155_u().func_201841_a();
-      long j = sectionpos1.func_218155_u().func_201841_a();
-      boolean flag = this.field_219271_y.func_225419_d(p_219183_1_);
-      boolean flag1 = this.func_219187_b(p_219183_1_);
-      boolean flag2 = sectionpos.func_218146_v() != sectionpos1.func_218146_v();
-      if (flag2 || flag != flag1) {
-         this.func_223489_c(p_219183_1_);
-         if (!flag) {
-            this.field_219267_u.func_219367_b(sectionpos, p_219183_1_);
-         }
-
-         if (!flag1) {
-            this.field_219267_u.func_219341_a(sectionpos1, p_219183_1_);
-         }
-
-         if (!flag && flag1) {
-            this.field_219271_y.func_219446_a(p_219183_1_);
-         }
-
-         if (flag && !flag1) {
-            this.field_219271_y.func_219447_b(p_219183_1_);
-         }
-
-         if (i != j) {
-            this.field_219271_y.func_219445_a(i, j, p_219183_1_);
-         }
-      }
-
-      int k = sectionpos.func_218149_a();
-      int l = sectionpos.func_218148_c();
-      if (Math.abs(k - l1) <= this.field_219247_A * 2 && Math.abs(l - i2) <= this.field_219247_A * 2) {
-         int k2 = Math.min(l1, k) - this.field_219247_A;
-         int i3 = Math.min(i2, l) - this.field_219247_A;
-         int j3 = Math.max(l1, k) + this.field_219247_A;
-         int k3 = Math.max(i2, l) + this.field_219247_A;
-
-         for(int l3 = k2; l3 <= j3; ++l3) {
-            for(int k1 = i3; k1 <= k3; ++k1) {
-               ChunkPos chunkpos1 = new ChunkPos(l3, k1);
-               boolean flag5 = func_219232_a(chunkpos1, k, l) <= this.field_219247_A;
-               boolean flag6 = func_219232_a(chunkpos1, l1, i2) <= this.field_219247_A;
-               this.func_219199_a(p_219183_1_, chunkpos1, new IPacket[2], flag5, flag6);
-            }
-         }
-      } else {
-         for(int i1 = k - this.field_219247_A; i1 <= k + this.field_219247_A; ++i1) {
-            for(int j1 = l - this.field_219247_A; j1 <= l + this.field_219247_A; ++j1) {
-               ChunkPos chunkpos = new ChunkPos(i1, j1);
-               boolean flag3 = true;
-               boolean flag4 = false;
-               this.func_219199_a(p_219183_1_, chunkpos, new IPacket[2], true, false);
-            }
-         }
-
-         for(int j2 = l1 - this.field_219247_A; j2 <= l1 + this.field_219247_A; ++j2) {
-            for(int l2 = i2 - this.field_219247_A; l2 <= i2 + this.field_219247_A; ++l2) {
-               ChunkPos chunkpos2 = new ChunkPos(j2, l2);
-               boolean flag7 = false;
-               boolean flag8 = true;
-               this.func_219199_a(p_219183_1_, chunkpos2, new IPacket[2], false, true);
-            }
-         }
-      }
-
-   }
-
-   public Stream<ServerPlayerEntity> func_219097_a(ChunkPos p_219097_1_, boolean p_219097_2_) {
-      return this.field_219271_y.func_219444_a(p_219097_1_.func_201841_a()).filter((p_219192_3_) -> {
-         int i = func_219215_b(p_219097_1_, p_219192_3_, true);
-         if (i > this.field_219247_A) {
-            return false;
-         } else {
-            return !p_219097_2_ || i == this.field_219247_A;
-         }
-      });
-   }
-
-   protected void func_219210_a(Entity p_219210_1_) {
-      if (!(p_219210_1_ instanceof EnderDragonPartEntity)) {
-         EntityType<?> entitytype = p_219210_1_.func_200600_R();
-         int i = entitytype.func_233602_m_() * 16;
-         int j = entitytype.func_220332_l();
-         if (this.field_219272_z.containsKey(p_219210_1_.func_145782_y())) {
-            throw (IllegalStateException)Util.func_229757_c_(new IllegalStateException("Entity is already tracked!"));
-         } else {
-            ChunkManager.EntityTracker chunkmanager$entitytracker = new ChunkManager.EntityTracker(p_219210_1_, i, j, entitytype.func_220340_m());
-            this.field_219272_z.put(p_219210_1_.func_145782_y(), chunkmanager$entitytracker);
-            chunkmanager$entitytracker.func_219397_a(this.field_219255_i.func_217369_A());
-            if (p_219210_1_ instanceof ServerPlayerEntity) {
-               ServerPlayerEntity serverplayerentity = (ServerPlayerEntity)p_219210_1_;
-               this.func_219234_a(serverplayerentity, true);
-
-               for(ChunkManager.EntityTracker chunkmanager$entitytracker1 : this.field_219272_z.values()) {
-                  if (chunkmanager$entitytracker1.field_219403_c != serverplayerentity) {
-                     chunkmanager$entitytracker1.func_219400_b(serverplayerentity);
-                  }
-               }
-            }
-
-         }
-      }
-   }
-
-   protected void func_219231_b(Entity p_219231_1_) {
-      if (p_219231_1_ instanceof ServerPlayerEntity) {
-         ServerPlayerEntity serverplayerentity = (ServerPlayerEntity)p_219231_1_;
-         this.func_219234_a(serverplayerentity, false);
-
-         for(ChunkManager.EntityTracker chunkmanager$entitytracker : this.field_219272_z.values()) {
-            chunkmanager$entitytracker.func_219399_a(serverplayerentity);
-         }
-      }
-
-      ChunkManager.EntityTracker chunkmanager$entitytracker1 = this.field_219272_z.remove(p_219231_1_.func_145782_y());
-      if (chunkmanager$entitytracker1 != null) {
-         chunkmanager$entitytracker1.func_219396_a();
-      }
-
-   }
-
-   protected void func_219169_g() {
-      List<ServerPlayerEntity> list = Lists.newArrayList();
-      List<ServerPlayerEntity> list1 = this.field_219255_i.func_217369_A();
-
-      for(ChunkManager.EntityTracker chunkmanager$entitytracker : this.field_219272_z.values()) {
-         SectionPos sectionpos = chunkmanager$entitytracker.field_219405_e;
-         SectionPos sectionpos1 = SectionPos.func_218157_a(chunkmanager$entitytracker.field_219403_c);
-         if (!Objects.equals(sectionpos, sectionpos1)) {
-            chunkmanager$entitytracker.func_219397_a(list1);
+                this.field_219253_g.put(j, chunkholder);
+                this.field_219262_p = true;
+                ++i;
+                this.func_219212_a(j, chunkholder);
+            }
+        }
+
+        Runnable runnable;
+        while ((p_223155_1_.getAsBoolean() || this.field_223181_A.size() > 2000) && (runnable = this.field_223181_A.poll()) != null) {
+            runnable.run();
+        }
+
+    }
+
+    private void func_219212_a(long p_219212_1_, ChunkHolder p_219212_3_) {
+        CompletableFuture<IChunk> completablefuture = p_219212_3_.func_219302_f();
+        completablefuture.thenAcceptAsync((p_219185_5_) -> {
+            CompletableFuture<IChunk> completablefuture1 = p_219212_3_.func_219302_f();
+            if (completablefuture1 != completablefuture) {
+                this.func_219212_a(p_219212_1_, p_219212_3_);
+            } else {
+                if (this.field_219253_g.remove(p_219212_1_, p_219212_3_) && p_219185_5_ != null) {
+                    if (p_219185_5_ instanceof Chunk) {
+                        ((Chunk) p_219185_5_).func_177417_c(false);
+                        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Unload(p_219185_5_));
+                    }
+
+                    this.func_219229_a(p_219185_5_);
+                    if (this.field_219254_h.remove(p_219212_1_) && p_219185_5_ instanceof Chunk) {
+                        Chunk chunk = (Chunk) p_219185_5_;
+                        this.field_219255_i.func_217466_a(chunk);
+                    }
+
+                    this.field_219256_j.func_215581_a(p_219185_5_.func_76632_l());
+                    this.field_219256_j.func_215588_z_();
+                    this.field_219266_t.func_219508_a(p_219185_5_.func_76632_l(), null);
+                }
+
+            }
+        }, this.field_223181_A::add).whenComplete((p_223171_1_, p_223171_2_) -> {
+            if (p_223171_2_ != null) {
+                field_219250_d.error("Failed to save chunk " + p_219212_3_.func_219277_h(), p_223171_2_);
+            }
+
+        });
+    }
+
+    protected boolean func_219245_b() {
+        if (!this.field_219262_p) {
+            return false;
+        } else {
+            this.field_219252_f = this.field_219251_e.clone();
+            this.field_219262_p = false;
+            return true;
+        }
+    }
+
+    public CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> func_219244_a(ChunkHolder p_219244_1_, ChunkStatus p_219244_2_) {
+        ChunkPos chunkpos = p_219244_1_.func_219277_h();
+        if (p_219244_2_ == ChunkStatus.field_223226_a_) {
+            return this.func_223172_f(chunkpos);
+        } else {
+            CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture = p_219244_1_.func_219276_a(p_219244_2_.func_222593_e(), this);
+            return completablefuture.thenComposeAsync((p_223180_4_) -> {
+                Optional<IChunk> optional = p_223180_4_.left();
+                if (!optional.isPresent()) {
+                    return CompletableFuture.completedFuture(p_223180_4_);
+                } else {
+                    if (p_219244_2_ == ChunkStatus.field_222614_j) {
+                        this.field_219267_u.func_219356_a(TicketType.field_219492_e, chunkpos, 33 + ChunkStatus.func_222599_a(ChunkStatus.field_222613_i), chunkpos);
+                    }
+
+                    IChunk ichunk = optional.get();
+                    if (ichunk.func_201589_g().func_209003_a(p_219244_2_)) {
+                        CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture1;
+                        if (p_219244_2_ == ChunkStatus.field_222614_j) {
+                            completablefuture1 = this.func_223156_b(p_219244_1_, p_219244_2_);
+                        } else {
+                            completablefuture1 = p_219244_2_.func_223201_a(this.field_219255_i, this.field_219269_w, this.field_219256_j, (p_223175_2_) -> {
+                                return this.func_219200_b(p_219244_1_);
+                            }, ichunk);
+                        }
+
+                        this.field_219266_t.func_219508_a(chunkpos, p_219244_2_);
+                        return completablefuture1;
+                    } else {
+                        return this.func_223156_b(p_219244_1_, p_219244_2_);
+                    }
+                }
+            }, this.field_219257_k);
+        }
+    }
+
+    private CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> func_223172_f(ChunkPos p_223172_1_) {
+        return CompletableFuture.supplyAsync(() -> {
+            try {
+                this.field_219255_i.func_217381_Z().func_230035_c_("chunkLoad");
+                CompoundNBT compoundnbt = this.func_219178_f(p_223172_1_);
+                if (compoundnbt != null) {
+                    boolean flag = compoundnbt.func_150297_b("Level", 10) && compoundnbt.func_74775_l("Level").func_150297_b("Status", 8);
+                    if (flag) {
+                        IChunk ichunk = ChunkSerializer.func_222656_a(this.field_219255_i, this.field_219269_w, this.field_219260_n, p_223172_1_, compoundnbt);
+                        ichunk.func_177432_b(this.field_219255_i.func_82737_E());
+                        this.func_241088_a_(p_223172_1_, ichunk.func_201589_g().func_202129_d());
+                        return Either.left(ichunk);
+                    }
+
+                    field_219250_d.error(com.mohistmc.util.i18n.i18n.get("chunkmanager.2", p_223172_1_));
+                }
+            } catch (ReportedException reportedexception) {
+                Throwable throwable = reportedexception.getCause();
+                if (!(throwable instanceof IOException)) {
+                    this.func_241089_g_(p_223172_1_);
+                    throw reportedexception;
+                }
+
+                field_219250_d.error(com.mohistmc.util.i18n.i18n.get("chunkmanager.3", p_223172_1_, throwable));
+            } catch (Exception exception) {
+                field_219250_d.error(com.mohistmc.util.i18n.i18n.get("chunkmanager.4", p_223172_1_, exception));
+            }
+
+            this.func_241089_g_(p_223172_1_);
+            return Either.left(new ChunkPrimer(p_223172_1_, UpgradeData.field_196994_a));
+        }, this.field_219257_k);
+    }
+
+    private void func_241089_g_(ChunkPos p_241089_1_) {
+        this.field_241087_z_.put(p_241089_1_.func_201841_a(), (byte) -1);
+    }
+
+    private byte func_241088_a_(ChunkPos p_241088_1_, ChunkStatus.Type p_241088_2_) {
+        return this.field_241087_z_.put(p_241088_1_.func_201841_a(), (byte) (p_241088_2_ == ChunkStatus.Type.PROTOCHUNK ? -1 : 1));
+    }
+
+    private CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> func_223156_b(ChunkHolder p_223156_1_, ChunkStatus p_223156_2_) {
+        ChunkPos chunkpos = p_223156_1_.func_219277_h();
+        CompletableFuture<Either<List<IChunk>, ChunkHolder.IChunkLoadingError>> completablefuture = this.func_219236_a(chunkpos, p_223156_2_.func_202128_c(), (p_219195_2_) -> {
+            return this.func_219205_a(p_223156_2_, p_219195_2_);
+        });
+        this.field_219255_i.func_217381_Z().func_230036_c_(() -> {
+            return "chunkGenerate " + p_223156_2_.func_222596_d();
+        });
+        return completablefuture.thenComposeAsync((p_219235_4_) -> {
+            return p_219235_4_.map((p_223148_4_) -> {
+                try {
+                    CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture1 = p_223156_2_.func_223198_a(this.field_219255_i, this.field_219258_l, this.field_219269_w, this.field_219256_j, (p_222954_2_) -> {
+                        return this.func_219200_b(p_223156_1_);
+                    }, p_223148_4_);
+                    this.field_219266_t.func_219508_a(chunkpos, p_223156_2_);
+                    return completablefuture1;
+                } catch (Exception exception) {
+                    CrashReport crashreport = CrashReport.func_85055_a(exception, "Exception generating new chunk");
+                    CrashReportCategory crashreportcategory = crashreport.func_85058_a("Chunk to be generated");
+                    crashreportcategory.func_71507_a("Location", String.format("%d,%d", chunkpos.field_77276_a, chunkpos.field_77275_b));
+                    crashreportcategory.func_71507_a("Position hash", ChunkPos.func_77272_a(chunkpos.field_77276_a, chunkpos.field_77275_b));
+                    crashreportcategory.func_71507_a("Generator", this.field_219258_l);
+                    throw new ReportedException(crashreport);
+                }
+            }, (p_219211_2_) -> {
+                this.func_219209_c(chunkpos);
+                return CompletableFuture.completedFuture(Either.right(p_219211_2_));
+            });
+        }, (p_219216_2_) -> {
+            this.field_219264_r.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(p_223156_1_, p_219216_2_));
+        });
+    }
+
+    protected void func_219209_c(ChunkPos p_219209_1_) {
+        this.field_219257_k.func_212871_a_(Util.func_215075_a(() -> {
+            this.field_219267_u.func_219345_b(TicketType.field_219492_e, p_219209_1_, 33 + ChunkStatus.func_222599_a(ChunkStatus.field_222613_i), p_219209_1_);
+        }, () -> {
+            return "release light ticket " + p_219209_1_;
+        }));
+    }
+
+    private ChunkStatus func_219205_a(ChunkStatus p_219205_1_, int p_219205_2_) {
+        ChunkStatus chunkstatus;
+        if (p_219205_2_ == 0) {
+            chunkstatus = p_219205_1_.func_222593_e();
+        } else {
+            chunkstatus = ChunkStatus.func_222581_a(ChunkStatus.func_222599_a(p_219205_1_) + p_219205_2_);
+        }
+
+        return chunkstatus;
+    }
+
+    private CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> func_219200_b(ChunkHolder p_219200_1_) {
+        CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture = p_219200_1_.func_219301_a(ChunkStatus.field_222617_m.func_222593_e());
+        return completablefuture.thenApplyAsync((p_219193_2_) -> {
+            ChunkStatus chunkstatus = ChunkHolder.func_219278_b(p_219200_1_.func_219299_i());
+            return !chunkstatus.func_209003_a(ChunkStatus.field_222617_m) ? ChunkHolder.field_219306_a : p_219193_2_.mapLeft((p_219237_2_) -> {
+                ChunkPos chunkpos = p_219200_1_.func_219277_h();
+                Chunk chunk;
+                if (p_219237_2_ instanceof ChunkPrimerWrapper) {
+                    chunk = ((ChunkPrimerWrapper) p_219237_2_).func_217336_u();
+                } else {
+                    chunk = new Chunk(this.field_219255_i, (ChunkPrimer) p_219237_2_);
+                    p_219200_1_.func_219294_a(new ChunkPrimerWrapper(chunk));
+                }
+
+                chunk.func_217314_a(() -> {
+                    return ChunkHolder.func_219286_c(p_219200_1_.func_219299_i());
+                });
+                chunk.func_217318_w();
+                if (this.field_219254_h.add(chunkpos.func_201841_a())) {
+                    chunk.func_177417_c(true);
+                    this.field_219255_i.func_147448_a(chunk.func_177434_r().values());
+                    List<Entity> list = null;
+                    ClassInheritanceMultiMap<Entity>[] aclassinheritancemultimap = chunk.func_177429_s();
+                    int i = aclassinheritancemultimap.length;
+
+                    for (int j = 0; j < i; ++j) {
+                        for (Entity entity : aclassinheritancemultimap[j]) {
+                            if (!(entity instanceof PlayerEntity) && !this.field_219255_i.func_217440_f(entity)) {
+                                if (list == null) {
+                                    list = Lists.newArrayList(entity);
+                                } else {
+                                    list.add(entity);
+                                }
+                            }
+                        }
+                    }
+
+                    if (list != null) {
+                        list.forEach(chunk::func_76622_b);
+                    }
+                    net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkEvent.Load(chunk));
+                }
+
+                return chunk;
+            });
+        }, (p_219228_2_) -> {
+            this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219069_a(p_219228_2_, p_219200_1_.func_219277_h().func_201841_a(), p_219200_1_::func_219299_i));
+        });
+    }
+
+    public CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> func_219179_a(ChunkHolder p_219179_1_) {
+        ChunkPos chunkpos = p_219179_1_.func_219277_h();
+        CompletableFuture<Either<List<IChunk>, ChunkHolder.IChunkLoadingError>> completablefuture = this.func_219236_a(chunkpos, 1, (p_219172_0_) -> {
+            return ChunkStatus.field_222617_m;
+        });
+        CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> completablefuture1 = completablefuture.thenApplyAsync((p_219239_0_) -> {
+            return p_219239_0_.flatMap((p_219208_0_) -> {
+                Chunk chunk = (Chunk) p_219208_0_.get(p_219208_0_.size() / 2);
+                chunk.func_201595_A();
+                return Either.left(chunk);
+            });
+        }, (p_219230_2_) -> {
+            this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(p_219179_1_, p_219230_2_));
+        });
+        completablefuture1.thenAcceptAsync((p_219176_2_) -> {
+            p_219176_2_.mapLeft((p_219196_2_) -> {
+                this.field_219268_v.getAndIncrement();
+                // Paper - no-tick view distance - moved to Chunk neighbour update
+                return Either.left(p_219196_2_);
+            });
+        }, (p_219202_2_) -> {
+            this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(p_219179_1_, p_219202_2_)); // Paper - diff on change, this is the scheduling method copied in Chunk used to schedule chunk broadcasts (on change it needs to be copied again)
+        });
+        return completablefuture1;
+    }
+
+    public CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> func_222961_b(ChunkHolder p_222961_1_) {
+        return p_222961_1_.func_219276_a(ChunkStatus.field_222617_m, this).thenApplyAsync((p_222976_0_) -> {
+            return p_222976_0_.mapLeft((p_222955_0_) -> {
+                Chunk chunk = (Chunk) p_222955_0_;
+                chunk.func_222879_B();
+                return chunk;
+            });
+        }, (p_222962_2_) -> {
+            this.field_219265_s.func_212871_a_(ChunkTaskPriorityQueueSorter.func_219081_a(p_222961_1_, p_222962_2_));
+        });
+    }
+
+    public int func_219174_c() {
+        return this.field_219268_v.get();
+    }
+
+    private boolean func_219229_a(IChunk p_219229_1_) {
+        this.field_219260_n.func_219112_a(p_219229_1_.func_76632_l());
+        if (!p_219229_1_.func_201593_f()) {
+            return false;
+        } else {
+            p_219229_1_.func_177432_b(this.field_219255_i.func_82737_E());
+            p_219229_1_.func_177427_f(false);
+            ChunkPos chunkpos = p_219229_1_.func_76632_l();
+
+            try {
+                ChunkStatus chunkstatus = p_219229_1_.func_201589_g();
+                if (chunkstatus.func_202129_d() != ChunkStatus.Type.LEVELCHUNK) {
+                    if (this.func_241090_h_(chunkpos)) {
+                        return false;
+                    }
+
+                    if (chunkstatus == ChunkStatus.field_223226_a_ && p_219229_1_.func_201609_c().values().stream().noneMatch(StructureStart::func_75069_d)) {
+                        return false;
+                    }
+                }
+
+                this.field_219255_i.func_217381_Z().func_230035_c_("chunkSave");
+                CompoundNBT compoundnbt = ChunkSerializer.func_222645_a(this.field_219255_i, p_219229_1_);
+                net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.ChunkDataEvent.Save(p_219229_1_, p_219229_1_.getWorldForge() != null ? p_219229_1_.getWorldForge() : this.field_219255_i, compoundnbt));
+                this.func_219100_a(chunkpos, compoundnbt);
+                this.func_241088_a_(chunkpos, chunkstatus.func_202129_d());
+                return true;
+            } catch (Exception exception) {
+                field_219250_d.error(com.mohistmc.util.i18n.i18n.get("chunkmanager.5", chunkpos.field_77276_a, chunkpos.field_77275_b, exception));
+                return false;
+            }
+        }
+    }
+
+    private boolean func_241090_h_(ChunkPos p_241090_1_) {
+        byte b0 = this.field_241087_z_.get(p_241090_1_.func_201841_a());
+        if (b0 != 0) {
+            return b0 == 1;
+        } else {
+            CompoundNBT compoundnbt;
+            try {
+                compoundnbt = this.func_219178_f(p_241090_1_);
+                if (compoundnbt == null) {
+                    this.func_241089_g_(p_241090_1_);
+                    return false;
+                }
+            } catch (Exception exception) {
+                field_219250_d.error(com.mohistmc.util.i18n.i18n.get("chunkmanager.6", p_241090_1_, exception));
+                this.func_241089_g_(p_241090_1_);
+                return false;
+            }
+
+            ChunkStatus.Type chunkstatus$type = ChunkSerializer.func_222651_a(compoundnbt);
+            return this.func_241088_a_(p_241090_1_, chunkstatus$type) == 1;
+        }
+    }
+
+    /*public void setViewDistance(int p_219175_1_) { // Paper - public
+       int i = MathHelper.clamp(p_219175_1_ + 1, 3, 33); // Paper - diff on change, these make the lower view distance limit 2 and the upper 32
+        if (i != this.viewDistance) {
+            int j = this.viewDistance;
+            this.viewDistance = i;
+            this.distanceManager.updatePlayerTickets(this.viewDistance);
+
+            for (ChunkHolder chunkholder : this.updatingChunkMap.values()) {
+                ChunkPos chunkpos = chunkholder.getPos();
+                IPacket<?>[] ipacket = new IPacket[2];
+                this.getPlayers(chunkpos, false).forEach((p_219224_4_) -> {
+                    int k = checkerboardDistance(chunkpos, p_219224_4_, true);
+                    boolean flag = k <= j;
+                    boolean flag1 = k <= this.viewDistance;
+                    this.updateChunkTracking(p_219224_4_, chunkpos, ipacket, flag, flag1);
+                });
+            }
+        }
+
+    }*/
+
+    public void func_219175_a(int p_219175_1_) { // Paper - public
+        int j = MathHelper.func_76125_a(p_219175_1_ + 1, 3, 33); // Paper - diff on change, these make the lower view distance limit 2 and the upper 32
+
+        if (j != this.field_219247_A) {
+            int k = this.field_219247_A;
+
+            this.field_219247_A = j;
+            this.setNoTickViewDistance(this.getRawNoTickViewDistance()); //Paper - no-tick view distance - propagate changes to no-tick, which does the actual chunk loading/sending
+        }
+
+    }
+
+    // Paper start - no-tick view distance
+    public final void setNoTickViewDistance(int viewDistance) {
+        viewDistance = viewDistance == -1 ? -1 : MathHelper.func_76125_a(viewDistance, 2, 32);
+
+        this.noTickViewDistance = viewDistance;
+        int loadViewDistance = this.getLoadViewDistance();
+        this.field_219267_u.setNoTickViewDistance(loadViewDistance + 2 + 2); // add 2 to account for the change to 31 -> 33 tickets // see notes in the distance map updating for the other + 2
+
+        if (this.field_219255_i != null && this.field_219255_i.field_217491_A != null) { // this can be called from constructor, where these aren't set
+            for (ServerPlayerEntity player : this.field_219255_i.field_217491_A) {
+                ServerPlayNetHandler connection = player.field_71135_a;
+                if (connection != null) {
+                    // moved in from PlayerList
+                    connection.func_147359_a(new SUpdateViewDistancePacket(loadViewDistance));
+                }
+                this.updateMaps(player);
+            }
+        }
+    }
+    // Paper end - no-tick view distance
+
+    public void func_219199_a(ServerPlayerEntity p_219199_1_, ChunkPos p_219199_2_, IPacket<?>[] p_219199_3_, boolean p_219199_4_, boolean p_219199_5_) { // Paper protected -> public
+        if (p_219199_1_.field_70170_p == this.field_219255_i) {
+            net.minecraftforge.event.ForgeEventFactory.fireChunkWatch(p_219199_4_, p_219199_5_, p_219199_1_, p_219199_2_, this.field_219255_i);
+            if (p_219199_5_ && !p_219199_4_) {
+                ChunkHolder chunkholder = this.func_219219_b(p_219199_2_.func_201841_a());
+                if (chunkholder != null) {
+                    Chunk chunk = chunkholder.getSendingChunk(); // Paper - no-tick view distance
+                    if (chunk != null) {
+                        this.func_219180_a(p_219199_1_, p_219199_3_, chunk);
+                    }
+
+                    DebugPacketSender.func_218802_a(this.field_219255_i, p_219199_2_);
+                }
+            }
+
+            if (!p_219199_5_ && p_219199_4_) {
+                p_219199_1_.func_213845_a(p_219199_2_);
+            }
+
+        }
+    }
+
+    public int func_219194_d() {
+        return this.field_219252_f.size();
+    }
+
+    protected ChunkManager.ProxyTicketManager func_219246_e() {
+        return this.field_219267_u;
+    }
+
+    protected Iterable<ChunkHolder> func_223491_f() {
+        return Iterables.unmodifiableIterable(this.field_219252_f.values());
+    }
+
+    void func_225406_a(Writer p_225406_1_) throws IOException {
+        CSVWriter csvwriter = CSVWriter.func_225428_a().func_225423_a("x").func_225423_a("z").func_225423_a("level").func_225423_a("in_memory").func_225423_a("status").func_225423_a("full_status").func_225423_a("accessible_ready").func_225423_a("ticking_ready").func_225423_a("entity_ticking_ready").func_225423_a("ticket").func_225423_a("spawning").func_225423_a("entity_count").func_225423_a("block_entity_count").func_225422_a(p_225406_1_);
+
+        for (Entry<ChunkHolder> entry : this.field_219252_f.long2ObjectEntrySet()) {
+            ChunkPos chunkpos = new ChunkPos(entry.getLongKey());
+            ChunkHolder chunkholder = entry.getValue();
+            Optional<IChunk> optional = Optional.ofNullable(chunkholder.func_219287_e());
+            Optional<Chunk> optional1 = optional.flatMap((p_225407_0_) -> {
+                return p_225407_0_ instanceof Chunk ? Optional.of((Chunk) p_225407_0_) : Optional.empty();
+            });
+            csvwriter.func_225426_a(chunkpos.field_77276_a, chunkpos.field_77275_b, chunkholder.func_219299_i(), optional.isPresent(), optional.map(IChunk::func_201589_g).orElse(null), optional1.map(Chunk::func_217321_u).orElse(null), func_225402_a(chunkholder.func_223492_c()), func_225402_a(chunkholder.func_219296_a()), func_225402_a(chunkholder.func_219297_b()), this.field_219267_u.func_225413_c(entry.getLongKey()), !this.func_219243_d(chunkpos), optional1.map((p_225401_0_) -> {
+                return Stream.of(p_225401_0_.func_177429_s()).mapToInt(ClassInheritanceMultiMap::size).sum();
+            }).orElse(0), optional1.map((p_225405_0_) -> {
+                return p_225405_0_.func_177434_r().size();
+            }).orElse(0));
+        }
+
+    }
+
+    private static String func_225402_a(CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> p_225402_0_) {
+        try {
+            Either<Chunk, ChunkHolder.IChunkLoadingError> either = p_225402_0_.getNow(null);
+            return either != null ? either.map((p_225408_0_) -> {
+                return "done";
+            }, (p_225400_0_) -> {
+                return "unloaded";
+            }) : "not completed";
+        } catch (CompletionException completionexception) {
+            return "failed " + completionexception.getCause().getMessage();
+        } catch (CancellationException cancellationexception) {
+            return "cancelled";
+        }
+    }
+
+    @Nullable
+    private CompoundNBT func_219178_f(ChunkPos p_219178_1_) throws IOException {
+        CompoundNBT compoundnbt = this.func_227078_e_(p_219178_1_);
+        return compoundnbt == null ? null : this.func_235968_a_(this.field_219255_i.func_234923_W_(), this.field_219259_m, compoundnbt);
+    }
+
+    boolean func_219243_d(ChunkPos p_219243_1_) {
+        // Spigot start
+        return isOutsideOfRange(p_219243_1_, false);
+    }
+
+    boolean isOutsideOfRange(ChunkPos chunkPosIn, boolean reducedRange) {
+        int chunkRange = field_219255_i.spigotConfig.mobSpawnRange;
+        chunkRange = (chunkRange > field_219255_i.spigotConfig.viewDistance) ? (byte) field_219255_i.spigotConfig.viewDistance : chunkRange;
+        chunkRange = (chunkRange > 8) ? 8 : chunkRange;
+        double blockRange = (reducedRange) ? Math.pow(chunkRange << 4, 2) : 16384.0D;
+        // Spigot end
+
+        long i = chunkPosIn.func_201841_a();
+        return !this.field_219267_u.func_223494_d(i) || this.field_219271_y.func_219444_a(i).noneMatch((p_219201_1_) -> {
+            return !p_219201_1_.func_175149_v() && func_219217_a(chunkPosIn, p_219201_1_) < blockRange; // Spigot
+        });
+    }
+
+    private boolean func_219187_b(ServerPlayerEntity p_219187_1_) {
+        return p_219187_1_.func_175149_v() && !this.field_219255_i.func_82736_K().func_223586_b(GameRules.field_223613_p);
+    }
+
+    void func_219234_a(ServerPlayerEntity p_219234_1_, boolean p_219234_2_) {
+        boolean flag = this.func_219187_b(p_219234_1_);
+        boolean flag1 = this.field_219271_y.func_219448_c(p_219234_1_);
+        int i = MathHelper.func_76128_c(p_219234_1_.func_226277_ct_()) >> 4;
+        int j = MathHelper.func_76128_c(p_219234_1_.func_226281_cx_()) >> 4;
+        if (p_219234_2_) {
+            this.field_219271_y.func_219442_a(ChunkPos.func_77272_a(i, j), p_219234_1_, flag);
+            this.func_223489_c(p_219234_1_);
+            if (!flag) {
+                this.field_219267_u.func_219341_a(SectionPos.func_218157_a(p_219234_1_), p_219234_1_);
+            }
+        } else {
+            SectionPos sectionpos = p_219234_1_.func_213842_M();
+            this.field_219271_y.func_219443_a(sectionpos.func_218155_u().func_201841_a(), p_219234_1_);
+            if (!flag1) {
+                this.field_219267_u.func_219367_b(sectionpos, p_219234_1_);
+            }
+        }
+
+        // Paper - broadcast view distance map handles this (see remove/add calls above)
+
+    }
+
+    private SectionPos func_223489_c(ServerPlayerEntity p_223489_1_) {
+        SectionPos sectionpos = SectionPos.func_218157_a(p_223489_1_);
+        p_223489_1_.func_213850_a(sectionpos);
+        // Paper - distance map handles this now
+        return sectionpos;
+    }
+
+    public void func_219183_a(ServerPlayerEntity p_219183_1_) {
+        for (ChunkManager.EntityTracker chunkmanager$entitytracker : this.field_219272_z.values()) {
+            if (chunkmanager$entitytracker.field_219403_c == p_219183_1_) {
+                chunkmanager$entitytracker.func_219397_a(this.field_219255_i.func_217369_A());
+            } else {
+                chunkmanager$entitytracker.func_219400_b(p_219183_1_);
+            }
+        }
+
+        int l1 = MathHelper.func_76128_c(p_219183_1_.func_226277_ct_()) >> 4;
+        int i2 = MathHelper.func_76128_c(p_219183_1_.func_226281_cx_()) >> 4;
+        SectionPos sectionpos = p_219183_1_.func_213842_M();
+        SectionPos sectionpos1 = SectionPos.func_218157_a(p_219183_1_);
+        long i = sectionpos.func_218155_u().func_201841_a();
+        long j = sectionpos1.func_218155_u().func_201841_a();
+        boolean flag = this.field_219271_y.func_225419_d(p_219183_1_);
+        boolean flag1 = this.func_219187_b(p_219183_1_);
+        boolean flag2 = sectionpos.func_218146_v() != sectionpos1.func_218146_v();
+        if (flag2 || flag != flag1) {
+            this.func_223489_c(p_219183_1_);
+            if (!flag) {
+                this.field_219267_u.func_219367_b(sectionpos, p_219183_1_);
+            }
+
+            if (!flag1) {
+                this.field_219267_u.func_219341_a(sectionpos1, p_219183_1_);
+            }
+
+            if (!flag && flag1) {
+                this.field_219271_y.func_219446_a(p_219183_1_);
+            }
+
+            if (flag && !flag1) {
+                this.field_219271_y.func_219447_b(p_219183_1_);
+            }
+
+            if (i != j) {
+                this.field_219271_y.func_219445_a(i, j, p_219183_1_);
+            }
+        }
+
+        int k = sectionpos.func_218149_a();
+        int l = sectionpos.func_218148_c();
+        /* // Paper start - replaced by distance map
+        if (Math.abs(k - l1) <= this.viewDistance * 2 && Math.abs(l - i2) <= this.viewDistance * 2) {
+            int k2 = Math.min(l1, k) - this.viewDistance;
+            int i3 = Math.min(i2, l) - this.viewDistance;
+            int j3 = Math.max(l1, k) + this.viewDistance;
+            int k3 = Math.max(i2, l) + this.viewDistance;
+
+            for (int l3 = k2; l3 <= j3; ++l3) {
+                for (int k1 = i3; k1 <= k3; ++k1) {
+                    ChunkPos chunkpos1 = new ChunkPos(l3, k1);
+                    boolean flag5 = checkerboardDistance(chunkpos1, k, l) <= this.viewDistance;
+                    boolean flag6 = checkerboardDistance(chunkpos1, l1, i2) <= this.viewDistance;
+                    this.updateChunkTracking(p_219183_1_, chunkpos1, new IPacket[2], flag5, flag6);
+                }
+            }
+        } else {
+            for (int i1 = k - this.viewDistance; i1 <= k + this.viewDistance; ++i1) {
+                for (int j1 = l - this.viewDistance; j1 <= l + this.viewDistance; ++j1) {
+                    ChunkPos chunkpos = new ChunkPos(i1, j1);
+                    boolean flag3 = true;
+                    boolean flag4 = false;
+                    this.updateChunkTracking(p_219183_1_, chunkpos, new IPacket[2], true, false);
+                }
+            }
+
+            for (int j2 = l1 - this.viewDistance; j2 <= l1 + this.viewDistance; ++j2) {
+                for (int l2 = i2 - this.viewDistance; l2 <= i2 + this.viewDistance; ++l2) {
+                    ChunkPos chunkpos2 = new ChunkPos(j2, l2);
+                    boolean flag7 = false;
+                    boolean flag8 = true;
+                    this.updateChunkTracking(p_219183_1_, chunkpos2, new IPacket[2], false, true);
+                }
+            }
+        } */ // Paper end - replaced by distance map
+
+    }
+
+    public Stream<ServerPlayerEntity> func_219097_a(ChunkPos p_219097_1_, boolean p_219097_2_) {
+        /*return this.playerMap.getPlayers(p_219097_1_.toLong()).filter((p_219192_3_) -> {
+            int i = checkerboardDistance(p_219097_1_, p_219192_3_, true);
+            if (i > this.viewDistance) {
+                return false;
+            } else {
+                return !p_219097_2_ || i == this.viewDistance;
+            }
+        });*/
+        // Paper start - per player view distance
+        // there can be potential desync with player's last mapped section and the view distance map, so use the
+        // view distance map here.
+        com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<PlayerEntity> inRange = this.playerViewDistanceBroadcastMap.getObjectsInRange(p_219097_1_);
+
+        if (inRange == null) {
+            return Stream.empty();
+        }
+        // all current cases are inlined so we wont hit this code, it's just in case plugins or future updates use it
+        List<ServerPlayerEntity> players = new java.util.ArrayList<>();
+        Object[] backingSet = inRange.getBackingSet();
+
+        if (p_219097_2_) { // flag -> border only
+            for (int i = 0, len = backingSet.length; i < len; ++i) {
+                Object temp = backingSet[i];
+                if (!(temp instanceof PlayerEntity)) {
+                    continue;
+                }
+                PlayerEntity player = (PlayerEntity) temp;
+                int viewDistance = this.playerViewDistanceBroadcastMap.getLastViewDistance(player);
+                long lastPosition = this.playerViewDistanceBroadcastMap.getLastCoordinate(player);
+
+                int distX = Math.abs(MCUtil.getCoordinateX(lastPosition) - p_219097_1_.field_77276_a);
+                int distZ = Math.abs(MCUtil.getCoordinateZ(lastPosition) - p_219097_1_.field_77275_b);
+                if (Math.max(distX, distZ) == viewDistance) {
+                    players.add((ServerPlayerEntity) player);
+                }
+            }
+        } else {
+            for (int i = 0, len = backingSet.length; i < len; ++i) {
+                Object temp = backingSet[i];
+                if (!(temp instanceof PlayerEntity)) {
+                    continue;
+                }
+                PlayerEntity player = (PlayerEntity) temp;
+                players.add((ServerPlayerEntity) player);
+            }
+        }
+        return players.stream();
+        // Paper end - per player view distance
+    }
+
+    protected void func_219210_a(Entity p_219210_1_) {
+        if (!(p_219210_1_ instanceof net.minecraftforge.entity.PartEntity)) {
+            EntityType<?> entitytype = p_219210_1_.func_200600_R();
+            int i = entitytype.func_233602_m_() * 16;
+            i = org.spigotmc.TrackingRange.getEntityTrackingRange(p_219210_1_, i); // Spigot
+            int j = entitytype.func_220332_l();
+            if (this.field_219272_z.containsKey(p_219210_1_.func_145782_y())) {
+                throw Util.func_229757_c_(new IllegalStateException("Entity is already tracked!"));
+            } else {
+                ChunkManager.EntityTracker chunkmanager$entitytracker = new ChunkManager.EntityTracker(p_219210_1_, i, j, entitytype.func_220340_m());
+                this.field_219272_z.put(p_219210_1_.func_145782_y(), chunkmanager$entitytracker);
+                chunkmanager$entitytracker.func_219397_a(this.field_219255_i.func_217369_A());
+                if (p_219210_1_ instanceof ServerPlayerEntity) {
+                    ServerPlayerEntity serverplayerentity = (ServerPlayerEntity) p_219210_1_;
+                    this.func_219234_a(serverplayerentity, true);
+
+                    for (ChunkManager.EntityTracker chunkmanager$entitytracker1 : this.field_219272_z.values()) {
+                        if (chunkmanager$entitytracker1.field_219403_c != serverplayerentity) {
+                            chunkmanager$entitytracker1.func_219400_b(serverplayerentity);
+                        }
+                    }
+                }
+
+            }
+        }
+    }
+
+    protected void func_219231_b(Entity p_219231_1_) {
+        if (p_219231_1_ instanceof ServerPlayerEntity) {
+            ServerPlayerEntity serverplayerentity = (ServerPlayerEntity) p_219231_1_;
+            this.func_219234_a(serverplayerentity, false);
+
+            for (ChunkManager.EntityTracker chunkmanager$entitytracker : this.field_219272_z.values()) {
+                chunkmanager$entitytracker.func_219399_a(serverplayerentity);
+            }
+        }
+
+        ChunkManager.EntityTracker chunkmanager$entitytracker1 = this.field_219272_z.remove(p_219231_1_.func_145782_y());
+        if (chunkmanager$entitytracker1 != null) {
+            chunkmanager$entitytracker1.func_219396_a();
+        }
+
+    }
+
+    protected void func_219169_g() {
+        List<ServerPlayerEntity> list = Lists.newArrayList();
+        List<ServerPlayerEntity> list1 = this.field_219255_i.func_217369_A();
+
+        for (ChunkManager.EntityTracker chunkmanager$entitytracker : this.field_219272_z.values()) {
+            SectionPos sectionpos = chunkmanager$entitytracker.field_219405_e;
+            SectionPos sectionpos1 = SectionPos.func_218157_a(chunkmanager$entitytracker.field_219403_c);
+            if (!Objects.equals(sectionpos, sectionpos1)) {
+                chunkmanager$entitytracker.func_219397_a(list1);
+                Entity entity = chunkmanager$entitytracker.field_219403_c;
+                if (entity instanceof ServerPlayerEntity) {
+                    list.add((ServerPlayerEntity) entity);
+                }
+
+                chunkmanager$entitytracker.field_219405_e = sectionpos1;
+            }
+
+            chunkmanager$entitytracker.field_219402_b.func_219453_a();
+        }
+
+        if (!list.isEmpty()) {
+            for (ChunkManager.EntityTracker chunkmanager$entitytracker1 : this.field_219272_z.values()) {
+                chunkmanager$entitytracker1.func_219397_a(list);
+            }
+        }
+
+    }
+
+    protected void func_219222_a(Entity p_219222_1_, IPacket<?> p_219222_2_) {
+        ChunkManager.EntityTracker chunkmanager$entitytracker = this.field_219272_z.get(p_219222_1_.func_145782_y());
+        if (chunkmanager$entitytracker != null) {
+            chunkmanager$entitytracker.func_219391_a(p_219222_2_);
+        }
+
+    }
+
+    protected void func_219225_b(Entity p_219225_1_, IPacket<?> p_219225_2_) {
+        ChunkManager.EntityTracker chunkmanager$entitytracker = this.field_219272_z.get(p_219225_1_.func_145782_y());
+        if (chunkmanager$entitytracker != null) {
+            chunkmanager$entitytracker.func_219392_b(p_219225_2_);
+        }
+
+    }
+
+    // Paper start
+    private static int getLightMask(final Chunk chunk) {
+        final ChunkSection[] chunkSections = chunk.func_76587_i();
+        int mask = 0;
+
+        for (int i = 0; i < chunkSections.length; ++i) {
+            /*
+
+
+Lightmasks have 18 bits, from the -1 (void) section until the 17th (air) section.
+Sections go from 0..16. Now whenever a section is not empty, it can potentially change lighting for the section itself, the section below and the section above, hence the bitmask 111b, which is 7d.
+
+             */
+            mask |= (ChunkSection.func_222628_a(chunkSections[i]) ? 0 : 7) << i;
+        }
+
+        return mask;
+    }
+
+    private static int getCeilingLightMask(final Chunk chunk) {
+        int mask = getLightMask(chunk);
+
+        /*
+         It is similar to get highest bit, it would turn an 001010 into an 001111 so basically the highest bit and all below.
+         We then invert this, so we'd have 110000 and compare that to the "main" chunk.
+         This is because the bug only appears when the current chunks lightmaps are higher than those of the neighbors, thus we can omit sending neighbors which are lower than the current chunks lights.
+
+         so TLDR is that getCeilingLightMask returns a light mask with all bits set below the highest affected section. We could also count the number of leading zeros and invert them, somehow.
+         @TODO: Implement Leafs suggestion
+         either use Integer#numberOfLeadingZeros or document what this bithack is supposed to be doing then
+         */
+        mask |= mask >> 1;
+        mask |= mask >> 2;
+        mask |= mask >> 4;
+        mask |= mask >> 8;
+        mask |= mask >> 16;
+
+        return mask;
+    }
+    // Paper end
+
+    public void func_219180_a(ServerPlayerEntity p_219180_1_, IPacket<?>[] p_219180_2_, Chunk p_219180_3_) { // Paper private -> public
+        if (p_219180_2_[0] == null) {
+            p_219180_2_[0] = new SChunkDataPacket(p_219180_3_, 65535);
+            p_219180_2_[1] = new SUpdateLightPacket(p_219180_3_.func_76632_l(), this.field_219256_j, true);
+        }
+
+        p_219180_1_.func_213844_a(p_219180_3_.func_76632_l(), p_219180_2_[0], p_219180_2_[1]);
+        DebugPacketSender.func_218802_a(this.field_219255_i, p_219180_3_.func_76632_l());
+        List<Entity> list = Lists.newArrayList();
+        List<Entity> list1 = Lists.newArrayList();
+
+        for (ChunkManager.EntityTracker chunkmanager$entitytracker : this.field_219272_z.values()) {
             Entity entity = chunkmanager$entitytracker.field_219403_c;
-            if (entity instanceof ServerPlayerEntity) {
-               list.add((ServerPlayerEntity)entity);
-            }
-
-            chunkmanager$entitytracker.field_219405_e = sectionpos1;
-         }
-
-         chunkmanager$entitytracker.field_219402_b.func_219453_a();
-      }
-
-      if (!list.isEmpty()) {
-         for(ChunkManager.EntityTracker chunkmanager$entitytracker1 : this.field_219272_z.values()) {
-            chunkmanager$entitytracker1.func_219397_a(list);
-         }
-      }
-
-   }
-
-   protected void func_219222_a(Entity p_219222_1_, IPacket<?> p_219222_2_) {
-      ChunkManager.EntityTracker chunkmanager$entitytracker = this.field_219272_z.get(p_219222_1_.func_145782_y());
-      if (chunkmanager$entitytracker != null) {
-         chunkmanager$entitytracker.func_219391_a(p_219222_2_);
-      }
-
-   }
-
-   protected void func_219225_b(Entity p_219225_1_, IPacket<?> p_219225_2_) {
-      ChunkManager.EntityTracker chunkmanager$entitytracker = this.field_219272_z.get(p_219225_1_.func_145782_y());
-      if (chunkmanager$entitytracker != null) {
-         chunkmanager$entitytracker.func_219392_b(p_219225_2_);
-      }
-
-   }
-
-   private void func_219180_a(ServerPlayerEntity p_219180_1_, IPacket<?>[] p_219180_2_, Chunk p_219180_3_) {
-      if (p_219180_2_[0] == null) {
-         p_219180_2_[0] = new SChunkDataPacket(p_219180_3_, 65535);
-         p_219180_2_[1] = new SUpdateLightPacket(p_219180_3_.func_76632_l(), this.field_219256_j, true);
-      }
-
-      p_219180_1_.func_213844_a(p_219180_3_.func_76632_l(), p_219180_2_[0], p_219180_2_[1]);
-      DebugPacketSender.func_218802_a(this.field_219255_i, p_219180_3_.func_76632_l());
-      List<Entity> list = Lists.newArrayList();
-      List<Entity> list1 = Lists.newArrayList();
-
-      for(ChunkManager.EntityTracker chunkmanager$entitytracker : this.field_219272_z.values()) {
-         Entity entity = chunkmanager$entitytracker.field_219403_c;
-         if (entity != p_219180_1_ && entity.field_70176_ah == p_219180_3_.func_76632_l().field_77276_a && entity.field_70164_aj == p_219180_3_.func_76632_l().field_77275_b) {
-            chunkmanager$entitytracker.func_219400_b(p_219180_1_);
-            if (entity instanceof MobEntity && ((MobEntity)entity).func_110166_bE() != null) {
-               list.add(entity);
-            }
-
-            if (!entity.func_184188_bt().isEmpty()) {
-               list1.add(entity);
-            }
-         }
-      }
-
-      if (!list.isEmpty()) {
-         for(Entity entity1 : list) {
-            p_219180_1_.field_71135_a.func_147359_a(new SMountEntityPacket(entity1, ((MobEntity)entity1).func_110166_bE()));
-         }
-      }
-
-      if (!list1.isEmpty()) {
-         for(Entity entity2 : list1) {
-            p_219180_1_.field_71135_a.func_147359_a(new SSetPassengersPacket(entity2));
-         }
-      }
-
-   }
-
-   protected PointOfInterestManager func_219189_h() {
-      return this.field_219260_n;
-   }
-
-   public CompletableFuture<Void> func_222973_a(Chunk p_222973_1_) {
-      return this.field_219257_k.func_222817_e(() -> {
-         p_222973_1_.func_222880_a(this.field_219255_i);
-      });
-   }
-
-   class EntityTracker {
-      private final TrackedEntity field_219402_b;
-      private final Entity field_219403_c;
-      private final int field_219404_d;
-      private SectionPos field_219405_e;
-      private final Set<ServerPlayerEntity> field_219406_f = Sets.newHashSet();
-
-      public EntityTracker(Entity p_i50468_2_, int p_i50468_3_, int p_i50468_4_, boolean p_i50468_5_) {
-         this.field_219402_b = new TrackedEntity(ChunkManager.this.field_219255_i, p_i50468_2_, p_i50468_4_, p_i50468_5_, this::func_219391_a);
-         this.field_219403_c = p_i50468_2_;
-         this.field_219404_d = p_i50468_3_;
-         this.field_219405_e = SectionPos.func_218157_a(p_i50468_2_);
-      }
-
-      public boolean equals(Object p_equals_1_) {
-         if (p_equals_1_ instanceof ChunkManager.EntityTracker) {
-            return ((ChunkManager.EntityTracker)p_equals_1_).field_219403_c.func_145782_y() == this.field_219403_c.func_145782_y();
-         } else {
-            return false;
-         }
-      }
-
-      public int hashCode() {
-         return this.field_219403_c.func_145782_y();
-      }
-
-      public void func_219391_a(IPacket<?> p_219391_1_) {
-         for(ServerPlayerEntity serverplayerentity : this.field_219406_f) {
-            serverplayerentity.field_71135_a.func_147359_a(p_219391_1_);
-         }
-
-      }
-
-      public void func_219392_b(IPacket<?> p_219392_1_) {
-         this.func_219391_a(p_219392_1_);
-         if (this.field_219403_c instanceof ServerPlayerEntity) {
-            ((ServerPlayerEntity)this.field_219403_c).field_71135_a.func_147359_a(p_219392_1_);
-         }
-
-      }
-
-      public void func_219396_a() {
-         for(ServerPlayerEntity serverplayerentity : this.field_219406_f) {
-            this.field_219402_b.func_219454_a(serverplayerentity);
-         }
-
-      }
-
-      public void func_219399_a(ServerPlayerEntity p_219399_1_) {
-         if (this.field_219406_f.remove(p_219399_1_)) {
-            this.field_219402_b.func_219454_a(p_219399_1_);
-         }
-
-      }
-
-      public void func_219400_b(ServerPlayerEntity p_219400_1_) {
-         if (p_219400_1_ != this.field_219403_c) {
-            Vector3d vector3d = p_219400_1_.func_213303_ch().func_178788_d(this.field_219402_b.func_219456_b());
-            int i = Math.min(this.func_229843_b_(), (ChunkManager.this.field_219247_A - 1) * 16);
-            boolean flag = vector3d.field_72450_a >= (double)(-i) && vector3d.field_72450_a <= (double)i && vector3d.field_72449_c >= (double)(-i) && vector3d.field_72449_c <= (double)i && this.field_219403_c.func_174827_a(p_219400_1_);
-            if (flag) {
-               boolean flag1 = this.field_219403_c.field_98038_p;
-               if (!flag1) {
-                  ChunkPos chunkpos = new ChunkPos(this.field_219403_c.field_70176_ah, this.field_219403_c.field_70164_aj);
-                  ChunkHolder chunkholder = ChunkManager.this.func_219219_b(chunkpos.func_201841_a());
-                  if (chunkholder != null && chunkholder.func_219298_c() != null) {
-                     flag1 = ChunkManager.func_219215_b(chunkpos, p_219400_1_, false) <= ChunkManager.this.field_219247_A;
-                  }
-               }
-
-               if (flag1 && this.field_219406_f.add(p_219400_1_)) {
-                  this.field_219402_b.func_219455_b(p_219400_1_);
-               }
-            } else if (this.field_219406_f.remove(p_219400_1_)) {
-               this.field_219402_b.func_219454_a(p_219400_1_);
-            }
-
-         }
-      }
-
-      private int func_241091_a_(int p_241091_1_) {
-         return ChunkManager.this.field_219255_i.func_73046_m().func_230512_b_(p_241091_1_);
-      }
-
-      private int func_229843_b_() {
-         Collection<Entity> collection = this.field_219403_c.func_184182_bu();
-         int i = this.field_219404_d;
-
-         for(Entity entity : collection) {
-            int j = entity.func_200600_R().func_233602_m_() * 16;
-            if (j > i) {
-               i = j;
-            }
-         }
-
-         return this.func_241091_a_(i);
-      }
-
-      public void func_219397_a(List<ServerPlayerEntity> p_219397_1_) {
-         for(ServerPlayerEntity serverplayerentity : p_219397_1_) {
-            this.func_219400_b(serverplayerentity);
-         }
-
-      }
-   }
-
-   class ProxyTicketManager extends TicketManager {
-      protected ProxyTicketManager(Executor p_i50469_2_, Executor p_i50469_3_) {
-         super(p_i50469_2_, p_i50469_3_);
-      }
-
-      protected boolean func_219371_a(long p_219371_1_) {
-         return ChunkManager.this.field_219261_o.contains(p_219371_1_);
-      }
-
-      @Nullable
-      protected ChunkHolder func_219335_b(long p_219335_1_) {
-         return ChunkManager.this.func_219220_a(p_219335_1_);
-      }
-
-      @Nullable
-      protected ChunkHolder func_219372_a(long p_219372_1_, int p_219372_3_, @Nullable ChunkHolder p_219372_4_, int p_219372_5_) {
-         return ChunkManager.this.func_219213_a(p_219372_1_, p_219372_3_, p_219372_4_, p_219372_5_);
-      }
-   }
+            if (entity != p_219180_1_ && entity.field_70176_ah == p_219180_3_.func_76632_l().field_77276_a && entity.field_70164_aj == p_219180_3_.func_76632_l().field_77275_b) {
+                chunkmanager$entitytracker.func_219400_b(p_219180_1_);
+                if (entity instanceof MobEntity && ((MobEntity) entity).func_110166_bE() != null) {
+                    list.add(entity);
+                }
+
+                if (!entity.func_184188_bt().isEmpty()) {
+                    list1.add(entity);
+                }
+            }
+        }
+
+        if (!list.isEmpty()) {
+            for (Entity entity1 : list) {
+                p_219180_1_.field_71135_a.func_147359_a(new SMountEntityPacket(entity1, ((MobEntity) entity1).func_110166_bE()));
+            }
+        }
+
+        if (!list1.isEmpty()) {
+            for (Entity entity2 : list1) {
+                p_219180_1_.field_71135_a.func_147359_a(new SSetPassengersPacket(entity2));
+            }
+        }
+
+    }
+
+    protected PointOfInterestManager func_219189_h() {
+        return this.field_219260_n;
+    }
+
+    public CompletableFuture<Void> func_222973_a(Chunk p_222973_1_) {
+        return this.field_219257_k.func_222817_e(() -> {
+            p_222973_1_.func_222880_a(this.field_219255_i);
+        });
+    }
+
+    public void removeTracker(ChunkManager tracker, ServerPlayerEntity playerEntity, int entityId) {
+        ChunkManager.EntityTracker entry = tracker.field_219272_z.get(entityId);
+        if (entry != null) {
+            entry.func_219399_a(playerEntity);
+        }
+    }
+
+    public void updateTrackingState(ChunkManager tracker, ServerPlayerEntity playerEntity, int entityId) {
+        ChunkManager.EntityTracker entry = tracker.field_219272_z.get(entityId);
+        if (entry != null && !entry.field_219406_f.contains(playerEntity)) {
+            entry.func_219400_b(playerEntity);
+        }
+    }
+
+    public void updatePlayerMobTypeMap(Entity entity) {
+        if (!this.field_219255_i.paperConfig.perPlayerMobSpawns) {
+            return;
+        }
+        int chunkX = (int)Math.floor(entity.func_213303_ch().field_72450_a) >> 4;
+        int chunkZ = (int)Math.floor(entity.func_213303_ch().field_72449_c) >> 4;
+        int index = entity.func_200600_R().func_220339_d().ordinal();
+
+        for (PlayerEntity player : this.playerMobDistanceMap.getPlayersInRange(chunkX, chunkZ)) {
+            ++player.mobCounts[index];
+        }
+    }
+
+    public int getMobCountNear(PlayerEntity entityPlayer, EntityClassification enumCreatureType) {
+        return entityPlayer.mobCounts[enumCreatureType.ordinal()];
+    }
+
+    public class EntityTracker {
+        private final TrackedEntity field_219402_b;
+        private final Entity field_219403_c;
+        private final int field_219404_d;
+        private SectionPos field_219405_e;
+        public final Set<ServerPlayerEntity> field_219406_f = Sets.newHashSet();
+
+        public EntityTracker(Entity p_i50468_2_, int p_i50468_3_, int p_i50468_4_, boolean p_i50468_5_) {
+            this.field_219402_b = new TrackedEntity(ChunkManager.this.field_219255_i, p_i50468_2_, p_i50468_4_, p_i50468_5_, this::func_219391_a);
+            this.field_219402_b.setTrackedPlayers(field_219406_f);
+            this.field_219403_c = p_i50468_2_;
+            this.field_219404_d = p_i50468_3_;
+            this.field_219405_e = SectionPos.func_218157_a(p_i50468_2_);
+        }
+
+        public boolean equals(Object p_equals_1_) {
+            if (p_equals_1_ instanceof ChunkManager.EntityTracker) {
+                return ((ChunkManager.EntityTracker) p_equals_1_).field_219403_c.func_145782_y() == this.field_219403_c.func_145782_y();
+            } else {
+                return false;
+            }
+        }
+
+        public int hashCode() {
+            return this.field_219403_c.func_145782_y();
+        }
+
+        public void func_219391_a(IPacket<?> p_219391_1_) {
+            for (ServerPlayerEntity serverplayerentity : this.field_219406_f) {
+                serverplayerentity.field_71135_a.func_147359_a(p_219391_1_);
+            }
+
+        }
+
+        public void func_219392_b(IPacket<?> p_219392_1_) {
+            this.func_219391_a(p_219392_1_);
+            if (this.field_219403_c instanceof ServerPlayerEntity) {
+                ((ServerPlayerEntity) this.field_219403_c).field_71135_a.func_147359_a(p_219392_1_);
+            }
+
+        }
+
+        public void func_219396_a() {
+            for (ServerPlayerEntity serverplayerentity : this.field_219406_f) {
+                this.field_219402_b.func_219454_a(serverplayerentity);
+            }
+
+        }
+
+        public void func_219399_a(ServerPlayerEntity p_219399_1_) {
+            if (this.field_219406_f.remove(p_219399_1_)) {
+                this.field_219402_b.func_219454_a(p_219399_1_);
+            }
+
+        }
+
+        public void func_219400_b(ServerPlayerEntity p_219400_1_) {
+            if (p_219400_1_ != this.field_219403_c) {
+                Vector3d vector3d = p_219400_1_.func_213303_ch().func_178788_d(this.field_219403_c.func_213303_ch());  // MC-155077, SPIGOT-5113
+                int i = Math.min(this.func_229843_b_(), (ChunkManager.this.field_219247_A - 1) * 16);
+                boolean flag = vector3d.field_72450_a >= (double) (-i) && vector3d.field_72450_a <= (double) i && vector3d.field_72449_c >= (double) (-i) && vector3d.field_72449_c <= (double) i && this.field_219403_c.func_174827_a(p_219400_1_);
+                if (flag) {
+                    boolean flag1 = this.field_219403_c.field_98038_p;
+                    if (!flag1) {
+                        ChunkPos chunkpos = new ChunkPos(this.field_219403_c.field_70176_ah, this.field_219403_c.field_70164_aj);
+                        ChunkHolder chunkholder = ChunkManager.this.func_219219_b(chunkpos.func_201841_a());
+                        if (chunkholder != null && chunkholder.getSendingChunk() != null) { // Paper - no-tick view distance
+                            flag1 = ChunkManager.func_219215_b(chunkpos, p_219400_1_, false) <= ChunkManager.this.field_219247_A;
+                        }
+                    }
+
+                    // CraftBukkit start - respect vanish API
+                    if (this.field_219403_c instanceof ServerPlayerEntity) {
+                        Player craftPlayer = ((ServerPlayerEntity) this.field_219403_c).getBukkitEntity();
+                        if (!p_219400_1_.getBukkitEntity().canSee(craftPlayer)) {
+                            flag1 = false;
+                        }
+                    }
+                    p_219400_1_.field_71130_g.remove(Integer.valueOf(this.field_219403_c.func_145782_y()));
+                    // CraftBukkit end
+
+                    if (flag1 && this.field_219406_f.add(p_219400_1_)) {
+                        this.field_219402_b.func_219455_b(p_219400_1_);
+                    }
+                } else if (this.field_219406_f.remove(p_219400_1_)) {
+                    this.field_219402_b.func_219454_a(p_219400_1_);
+                }
+
+            }
+        }
+
+        private int func_241091_a_(int p_241091_1_) {
+            return ChunkManager.this.field_219255_i.func_73046_m().func_230512_b_(p_241091_1_);
+        }
+
+        private int func_229843_b_() {
+            Collection<Entity> collection = this.field_219403_c.func_184182_bu();
+            int i = this.field_219404_d;
+
+            for (Entity entity : collection) {
+                int j = entity.func_200600_R().func_233602_m_() * 16;
+                if (j > i) {
+                    i = j;
+                }
+            }
+
+            return this.func_241091_a_(i);
+        }
+
+        public void func_219397_a(List<ServerPlayerEntity> p_219397_1_) {
+            for (ServerPlayerEntity serverplayerentity : p_219397_1_) {
+                this.func_219400_b(serverplayerentity);
+            }
+
+        }
+    }
+
+    class ProxyTicketManager extends TicketManager {
+        protected ProxyTicketManager(Executor p_i50469_2_, Executor p_i50469_3_) {
+            super(p_i50469_2_, p_i50469_3_);
+        }
+
+        protected boolean func_219371_a(long p_219371_1_) {
+            return ChunkManager.this.field_219261_o.contains(p_219371_1_);
+        }
+
+        @Nullable
+        protected ChunkHolder func_219335_b(long p_219335_1_) {
+            return ChunkManager.this.func_219220_a(p_219335_1_);
+        }
+
+        @Nullable
+        protected ChunkHolder func_219372_a(long p_219372_1_, int p_219372_3_, @Nullable ChunkHolder p_219372_4_, int p_219372_5_) {
+            return ChunkManager.this.func_219213_a(p_219372_1_, p_219372_3_, p_219372_4_, p_219372_5_);
+        }
+    }
 }
