--- a/net/minecraft/world/server/ServerChunkProvider.java
+++ b/net/minecraft/world/server/ServerChunkProvider.java
@@ -1,9 +_,5 @@
 package net.minecraft.world.server;
 
-import com.google.common.annotations.VisibleForTesting;
-import com.google.common.collect.Lists;
-import com.mojang.datafixers.DataFixer;
-import com.mojang.datafixers.util.Either;
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
@@ -16,9 +_,24 @@
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Supplier;
+
 import javax.annotation.Nullable;
+
+import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.Lists;
+import com.mojang.datafixers.DataFixer;
+import com.mojang.datafixers.util.Either;
+
+import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import net.minecraft.block.Block;
+import net.minecraft.block.Blocks;
 import net.minecraft.entity.Entity;
+import net.minecraft.entity.EntityType;
+import net.minecraft.entity.LivingEntity;
+import net.minecraft.entity.monster.MonsterEntity;
+import net.minecraft.entity.player.PlayerInventory;
 import net.minecraft.entity.player.ServerPlayerEntity;
+import net.minecraft.item.ItemStack;
 import net.minecraft.network.IPacket;
 import net.minecraft.profiler.IProfiler;
 import net.minecraft.util.Util;
@@ -27,17 +_,16 @@
 import net.minecraft.util.math.ChunkPos;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.math.SectionPos;
+import net.minecraft.util.palette.IPalette;
 import net.minecraft.village.PointOfInterestManager;
-import net.minecraft.world.GameRules;
-import net.minecraft.world.IBlockReader;
-import net.minecraft.world.LightType;
-import net.minecraft.world.World;
+import net.minecraft.world.*;
 import net.minecraft.world.chunk.AbstractChunkProvider;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.ChunkStatus;
 import net.minecraft.world.chunk.IChunk;
 import net.minecraft.world.chunk.listener.IChunkStatusListener;
 import net.minecraft.world.gen.ChunkGenerator;
+import net.minecraft.world.gen.feature.template.Template;
 import net.minecraft.world.gen.feature.template.TemplateManager;
 import net.minecraft.world.spawner.WorldEntitySpawner;
 import net.minecraft.world.storage.DimensionSavedDataManager;
@@ -51,20 +_,173 @@
    private final TicketManager field_217240_d;
    public final ChunkGenerator field_186029_c;
    public final ServerWorld field_73251_h;
-   private final Thread field_217241_g;
+   public final Thread field_217241_g; // Paper - private -> public
    private final ServerWorldLightManager field_217242_h;
    private final ServerChunkProvider.ChunkExecutor field_217243_i;
    public final ChunkManager field_217237_a;
    private final DimensionSavedDataManager field_217244_j;
    private long field_217245_k;
-   private boolean field_217246_l = true;
-   private boolean field_217247_m = true;
+   public boolean field_217246_l = true;
+   public boolean field_217247_m = true;
    private final long[] field_222875_n = new long[4];
    private final ChunkStatus[] field_222876_o = new ChunkStatus[4];
    private final IChunk[] field_222877_p = new IChunk[4];
    @Nullable
    private WorldEntitySpawner.EntityDensityManager field_241097_p_;
 
+   // Paper start
+   final com.destroystokyo.paper.util.concurrent.WeakSeqLock loadedChunkMapSeqLock = new com.destroystokyo.paper.util.concurrent.WeakSeqLock();
+   final Long2ObjectOpenHashMap<Chunk> loadedChunkMap = new Long2ObjectOpenHashMap<>(8192, 0.5f);
+
+   private final Chunk[] lastLoadedChunks = new Chunk[4 * 4];
+
+   private static int getChunkCacheKey(int x, int z) {
+      return x & 3 | ((z & 3) << 2);
+   }
+
+   public void addLoadedChunk(Chunk chunk) {
+      this.loadedChunkMapSeqLock.acquireWrite();
+      try {
+         this.loadedChunkMap.put(chunk.coordinateKey, chunk);
+      } finally {
+         this.loadedChunkMapSeqLock.releaseWrite();
+      }
+
+      // rewrite cache if we have to
+      // we do this since we also cache null chunks
+      int cacheKey = getChunkCacheKey(chunk.locX, chunk.locZ);
+
+      this.lastLoadedChunks[cacheKey] = chunk;
+   }
+
+   public void removeLoadedChunk(Chunk chunk) {
+      this.loadedChunkMapSeqLock.acquireWrite();
+      try {
+         this.loadedChunkMap.remove(chunk.coordinateKey);
+      } finally {
+         this.loadedChunkMapSeqLock.releaseWrite();
+      }
+
+      // rewrite cache if we have to
+      // we do this since we also cache null chunks
+      int cacheKey = getChunkCacheKey(chunk.locX, chunk.locZ);
+
+      Chunk cachedChunk = this.lastLoadedChunks[cacheKey];
+      if (cachedChunk != null && cachedChunk.coordinateKey == chunk.coordinateKey) {
+         this.lastLoadedChunks[cacheKey] = null;
+      }
+   }
+
+   public final Chunk getChunkAtIfLoadedMainThread(int x, int z) {
+      int cacheKey = getChunkCacheKey(x, z);
+
+      Chunk cachedChunk = this.lastLoadedChunks[cacheKey];
+      if (cachedChunk != null && cachedChunk.locX == x & cachedChunk.locZ == z) {
+         return this.lastLoadedChunks[cacheKey];
+      }
+
+      long chunkKey = ChunkPos.func_77272_a(x, z);
+
+      cachedChunk = this.loadedChunkMap.get(chunkKey);
+      // Skipping a null check to avoid extra instructions to improve inline capability
+      this.lastLoadedChunks[cacheKey] = cachedChunk;
+      return cachedChunk;
+   }
+
+   public final Chunk getChunkAtIfLoadedMainThreadNoCache(int x, int z) {
+      return this.loadedChunkMap.get(ChunkPos.func_77272_a(x, z));
+   }
+
+   public final Chunk getChunkAtMainThread(int x, int z) {
+      Chunk ret = this.getChunkAtIfLoadedMainThread(x, z);
+      if (ret != null) {
+         return ret;
+      }
+      return (Chunk) this.func_212849_a_(x, z, ChunkStatus.field_222617_m, true);
+   }
+
+   private long chunkFutureAwaitCounter;
+
+   public void getEntityTickingChunkAsync(int x, int z, java.util.function.Consumer<Chunk> onLoad) {
+      if (Thread.currentThread() != this.field_217241_g) {
+         this.field_217243_i.execute(() -> {
+            ServerChunkProvider.this.getEntityTickingChunkAsync(x, z, onLoad);
+         });
+         return;
+      }
+      this.getChunkFutureAsynchronously(x, z, 31, ChunkHolder::func_219297_b, onLoad);
+   }
+
+   public void getTickingChunkAsync(int x, int z, java.util.function.Consumer<Chunk> onLoad) {
+      if (Thread.currentThread() != this.field_217241_g) {
+         this.field_217243_i.execute(() -> {
+            ServerChunkProvider.this.getTickingChunkAsync(x, z, onLoad);
+         });
+         return;
+      }
+      this.getChunkFutureAsynchronously(x, z, 32, ChunkHolder::func_219296_a, onLoad);
+   }
+
+   public void getFullChunkAsync(int x, int z, java.util.function.Consumer<Chunk> onLoad) {
+      if (Thread.currentThread() != this.field_217241_g) {
+         this.field_217243_i.execute(() -> {
+            ServerChunkProvider.this.getFullChunkAsync(x, z, onLoad);
+         });
+         return;
+      }
+      this.getChunkFutureAsynchronously(x, z, 33, ChunkHolder::func_223492_c, onLoad);
+   }
+
+   private void getChunkFutureAsynchronously(int x, int z, int ticketLevel, Function<ChunkHolder, CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>>> futureGet, java.util.function.Consumer<Chunk> onLoad) {
+      if (Thread.currentThread() != this.field_217241_g) {
+         throw new IllegalStateException();
+      }
+      ChunkPos chunkPos = new ChunkPos(x, z);
+      Long identifier = this.chunkFutureAwaitCounter++;
+      this.field_217240_d.addTicketAtLevel(TicketType.FUTURE_AWAIT, chunkPos, ticketLevel, identifier);
+      this.func_217235_l();
+
+      ChunkHolder chunk = this.field_217237_a.func_219220_a(chunkPos.func_201841_a());
+
+      if (chunk == null) {
+         throw new IllegalStateException("Expected playerchunk " + chunkPos + " in world '" + this.field_73251_h.getWorld().getName() + "'");
+      }
+
+      CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>> future = futureGet.apply(chunk);
+
+      future.whenCompleteAsync((either, throwable) -> {
+         try {
+            if (throwable != null) {
+               if (throwable instanceof ThreadDeath) {
+                  throw (ThreadDeath) throwable;
+               }
+               net.minecraft.server.MinecraftServer.field_147145_h.fatal("Failed to complete future await for chunk " + chunkPos.toString() + " in world '" + ServerChunkProvider.this.field_73251_h.getWorld().getName() + "'", throwable);
+            } else if (either.right().isPresent()) {
+               net.minecraft.server.MinecraftServer.field_147145_h.fatal("Failed to complete future await for chunk " + chunkPos.toString() + " in world '" + ServerChunkProvider.this.field_73251_h.getWorld().getName() + "': " + either.right().get().toString());
+            }
+
+            try {
+               if (onLoad != null) {
+                  field_217237_a.callbackExecutor.execute(() -> {
+                     onLoad.accept(either == null ? null : either.left().orElse(null)); // indicate failure to the callback.
+                  });
+               }
+            } catch (Throwable thr) {
+               if (thr instanceof ThreadDeath) {
+                  throw (ThreadDeath) thr;
+               }
+               net.minecraft.server.MinecraftServer.field_147145_h.fatal("Load callback for future await failed " + chunkPos.toString() + " in world '" + ServerChunkProvider.this.field_73251_h.getWorld().getName() + "'", thr);
+               return;
+            }
+         } finally {
+            // due to odd behaviour with CB unload implementation we need to have these AFTER the load callback.
+            ServerChunkProvider.this.field_217240_d.addTicketAtLevel(TicketType.field_219494_g, chunkPos, ticketLevel, chunkPos);
+            ServerChunkProvider.this.field_217240_d.removeTicketAtLevel(TicketType.FUTURE_AWAIT, chunkPos, ticketLevel, identifier);
+         }
+      }, this.field_217243_i);
+   }
+   // Paper end
+
    public ServerChunkProvider(ServerWorld p_i232603_1_, SaveFormat.LevelSave p_i232603_2_, DataFixer p_i232603_3_, TemplateManager p_i232603_4_, Executor p_i232603_5_, ChunkGenerator p_i232603_6_, int p_i232603_7_, boolean p_i232603_8_, IChunkStatusListener p_i232603_9_, Supplier<DimensionSavedDataManager> p_i232603_10_) {
       this.field_73251_h = p_i232603_1_;
       this.field_217243_i = new ServerChunkProvider.ChunkExecutor(p_i232603_1_);
@@ -80,6 +_,67 @@
       this.func_222869_l();
    }
 
+   // Paper start - "real" get chunk if loaded
+   // Note: Partially copied from the getChunkAt method below
+   @Nullable
+   public Chunk getChunkAtIfCachedImmediately(int x, int z) {
+      long k = ChunkPos.func_77272_a(x, z);
+
+      // Note: Bypass cache since we need to check ticket level, and to make this MT-Safe
+
+      ChunkHolder playerChunk = this.field_217237_a.func_219219_b(k);
+      if (playerChunk == null) {
+         return null;
+      }
+
+      return playerChunk.getFullChunkIfCached();
+   }
+
+   @Nullable
+   public Chunk getChunkAtIfLoadedImmediately(int x, int z) {
+      long k = ChunkPos.func_77272_a(x, z);
+
+      if (Thread.currentThread() == this.field_217241_g) {
+         return this.getChunkAtIfLoadedMainThread(x, z);
+      }
+
+      Chunk ret = null;
+      long readlock;
+      do {
+         readlock = this.loadedChunkMapSeqLock.acquireRead();
+         try {
+            ret = this.loadedChunkMap.get(k);
+         } catch (Throwable thr) {
+            if (thr instanceof ThreadDeath) {
+               throw (ThreadDeath) thr;
+            }
+            // re-try, this means a CME occurred...
+            continue;
+         }
+      } while (!this.loadedChunkMapSeqLock.tryReleaseRead(readlock));
+
+      return ret;
+   }
+   // Paper end
+
+   // CraftBukkit start - properly implement isChunkLoaded
+   public boolean isChunkLoaded(int chunkX, int chunkZ) {
+      ChunkHolder chunk = this.field_217237_a.func_219220_a(ChunkPos.func_77272_a(chunkX, chunkZ));
+      if (chunk == null) {
+         return false;
+      }
+      return chunk.getFullChunk() != null;
+   }
+
+   public Chunk getChunkUnchecked(int chunkX, int chunkZ) {
+      ChunkHolder chunk = this.field_217237_a.func_219220_a(ChunkPos.func_77272_a(chunkX, chunkZ));
+      if (chunk == null) {
+         return null;
+      }
+      return chunk.getFullChunkUnchecked();
+   }
+   // CraftBukkit end
+
    public ServerWorldLightManager func_212863_j_() {
       return this.field_217242_h;
    }
@@ -127,7 +_,11 @@
 
          iprofiler.func_230035_c_("getChunkCacheMiss");
          CompletableFuture<Either<IChunk, ChunkHolder.IChunkLoadingError>> completablefuture = this.func_217233_c(p_212849_1_, p_212849_2_, p_212849_3_, p_212849_4_);
-         this.field_217243_i.func_213161_c(completablefuture::isDone);
+         if (!completablefuture.isDone()) { // Paper
+            this.field_73251_h.timings.syncChunkLoad.startTiming(); // Paper
+            this.field_217243_i.func_213161_c(completablefuture::isDone);
+            this.field_73251_h.timings.syncChunkLoad.stopTiming(); // Paper
+         } // Paper
          IChunk ichunk1 = completablefuture.join().map((p_222874_0_) -> {
             return p_222874_0_;
          }, (p_222870_1_) -> {
@@ -208,7 +_,15 @@
       long i = chunkpos.func_201841_a();
       int j = 33 + ChunkStatus.func_222599_a(p_217233_3_);
       ChunkHolder chunkholder = this.func_217213_a(i);
-      if (p_217233_4_) {
+      // CraftBukkit start - don't add new ticket for currently unloading chunk
+      boolean currentlyUnloading = false;
+      if (chunkholder != null) {
+         ChunkHolder.LocationType oldChunkState = ChunkHolder.func_219286_c(chunkholder.field_219316_k);
+         ChunkHolder.LocationType currentChunkState = ChunkHolder.func_219286_c(chunkholder.func_219299_i());
+         currentlyUnloading = (oldChunkState.func_219065_a(ChunkHolder.LocationType.BORDER) && !currentChunkState.func_219065_a(ChunkHolder.LocationType.BORDER));
+      }
+      if (p_217233_4_ && !currentlyUnloading) {
+         // CraftBukkit end
          this.field_217240_d.func_219356_a(TicketType.field_219494_g, chunkpos, j, chunkpos);
          if (this.func_217224_a(chunkholder, j)) {
             IProfiler iprofiler = this.field_73251_h.func_217381_Z();
@@ -226,7 +_,7 @@
    }
 
    private boolean func_217224_a(@Nullable ChunkHolder p_217224_1_, int p_217224_2_) {
-      return p_217224_1_ == null || p_217224_1_.func_219299_i() > p_217224_2_;
+      return p_217224_1_ == null || p_217224_1_.field_219316_k > p_217224_2_; // CraftBukkit using oldTicketLevel for isLoaded checks
    }
 
    public boolean func_73149_a(int p_73149_1_, int p_73149_2_) {
@@ -292,7 +_,7 @@
       return this.func_222872_a(i, ChunkHolder::func_219296_a);
    }
 
-   private boolean func_222872_a(long p_222872_1_, Function<ChunkHolder, CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>>> p_222872_3_) {
+   public boolean func_222872_a(long p_222872_1_, Function<ChunkHolder, CompletableFuture<Either<Chunk, ChunkHolder.IChunkLoadingError>>> p_222872_3_) {
       ChunkHolder chunkholder = this.func_217213_a(p_222872_1_);
       if (chunkholder == null) {
          return false;
@@ -304,23 +_,51 @@
 
    public void func_217210_a(boolean p_217210_1_) {
       this.func_217235_l();
+      try (co.aikar.timings.Timing timed = field_73251_h.timings.chunkSaveData.startTiming()) { // Paper - Timings
       this.field_217237_a.func_219177_a(p_217210_1_);
+      } // Paper - Timings
    }
 
    public void close() throws IOException {
+      // CraftBukkit start
       this.func_217210_a(true);
+   }
+
+   public void close(boolean save) throws IOException {
+      if (save) {
+         this.func_217210_a(true);
+      }
+      // CraftBukkit end
       this.field_217242_h.close();
       this.field_217237_a.close();
    }
 
+   // CraftBukkit start - modelled on below
+   public void purgeUnload() {
+      this.field_73251_h.func_217381_Z().func_76320_a("purge");
+      this.field_217240_d.func_219340_a();
+      this.func_217235_l();
+      this.field_73251_h.func_217381_Z().func_219895_b("unload");
+      this.field_217237_a.func_219204_a(() -> true);
+      this.field_73251_h.func_217381_Z().func_76319_b();
+      this.func_222869_l();
+   }
+   // CraftBukkit end
+
    public void func_217207_a(BooleanSupplier p_217207_1_) {
       this.field_73251_h.func_217381_Z().func_76320_a("purge");
+      this.field_73251_h.timings.doChunkMap.startTiming(); // Spigot
       this.field_217240_d.func_219340_a();
       this.func_217235_l();
+      this.field_73251_h.timings.doChunkMap.stopTiming(); // Spigot
       this.field_73251_h.func_217381_Z().func_219895_b("chunks");
+      this.field_73251_h.timings.chunks.startTiming(); // Paper - timings
       this.func_217220_m();
+      this.field_73251_h.timings.chunks.stopTiming(); // Paper - timings
+      this.field_73251_h.timings.doChunkUnload.startTiming(); // Spigot
       this.field_73251_h.func_217381_Z().func_219895_b("unload");
       this.field_217237_a.func_219204_a(p_217207_1_);
+      this.field_73251_h.timings.doChunkUnload.stopTiming(); // Spigot
       this.field_73251_h.func_217381_Z().func_76319_b();
       this.func_222869_l();
    }
@@ -331,42 +_,68 @@
       this.field_217245_k = i;
       IWorldInfo iworldinfo = this.field_73251_h.func_72912_H();
       boolean flag = this.field_73251_h.func_234925_Z_();
-      boolean flag1 = this.field_73251_h.func_82736_K().func_223586_b(GameRules.field_223601_d);
+      boolean flag1 = this.field_73251_h.func_82736_K().func_223586_b(GameRules.field_223601_d) && !field_73251_h.func_217369_A().isEmpty(); //CraftBukkit
       if (!flag) {
          this.field_73251_h.func_217381_Z().func_76320_a("pollingChunks");
          int k = this.field_73251_h.func_82736_K().func_223592_c(GameRules.field_223610_m);
-         boolean flag2 = iworldinfo.func_82573_f() % 400L == 0L;
+         boolean flag2 = iworldinfo.func_82573_f() % 400 == 0L; // TODO: Mohist - Refresh the velocity anomaly
          this.field_73251_h.func_217381_Z().func_76320_a("naturalSpawnCount");
+         this.field_73251_h.timings.countNaturalMobs.startTiming(); // Paper - timings
          int l = this.field_217240_d.func_219358_b();
-         WorldEntitySpawner.EntityDensityManager worldentityspawner$entitydensitymanager = WorldEntitySpawner.func_234964_a_(l, this.field_73251_h.func_241136_z_(), this::func_241098_a_);
+         // Paper start - per player mob spawning
+         WorldEntitySpawner.EntityDensityManager worldentityspawner$entitydensitymanager; // moved down
+         if (this.field_217237_a.playerMobDistanceMap != null) {
+            // update distance map
+            this.field_73251_h.timings.playerMobDistanceMapUpdate.startTiming();
+            this.field_217237_a.playerMobDistanceMap.update(this.field_73251_h.field_217491_A, this.field_217237_a.field_219247_A);
+            this.field_73251_h.timings.playerMobDistanceMapUpdate.stopTiming();
+            // re-set mob counts
+            for (ServerPlayerEntity player : this.field_73251_h.field_217491_A) {
+               Arrays.fill(player.mobCounts, 0);
+            }
+            worldentityspawner$entitydensitymanager = WorldEntitySpawner.createState(l, this.field_73251_h.func_241136_z_(), this::func_241098_a_, true);
+         } else {
+            worldentityspawner$entitydensitymanager = WorldEntitySpawner.createState(l, this.field_73251_h.func_241136_z_(), this::func_241098_a_, false);
+         }
+         // Paper end
+         this.field_73251_h.timings.countNaturalMobs.stopTiming(); // Paper - timings
          this.field_241097_p_ = worldentityspawner$entitydensitymanager;
          this.field_73251_h.func_217381_Z().func_76319_b();
-         List<ChunkHolder> list = Lists.newArrayList(this.field_217237_a.func_223491_f());
+         /*List<ChunkHolder> list = Lists.newArrayList(this.chunkMap.getChunks());
          Collections.shuffle(list);
-         list.forEach((p_241099_7_) -> {
+         list.forEach((p_241099_7_) -> {*/
+         //List<PlayerChunk> list = Lists.newArrayList(this.playerChunkMap.f()); // Paper
+         //Collections.shuffle(list); // Paper
+         this.field_217237_a.func_223491_f().forEach((p_241099_7_) -> { // Paper - no... just no...
             Optional<Chunk> optional = p_241099_7_.func_219296_a().getNow(ChunkHolder.field_219308_c).left();
             if (optional.isPresent()) {
                this.field_73251_h.func_217381_Z().func_76320_a("broadcast");
+               this.field_73251_h.timings.broadcastChunkUpdates.startTiming(); // Paper - timings
                p_241099_7_.func_219274_a(optional.get());
+               this.field_73251_h.timings.broadcastChunkUpdates.stopTiming(); // Paper - timings
                this.field_73251_h.func_217381_Z().func_76319_b();
                Optional<Chunk> optional1 = p_241099_7_.func_219297_b().getNow(ChunkHolder.field_219308_c).left();
                if (optional1.isPresent()) {
                   Chunk chunk = optional1.get();
                   ChunkPos chunkpos = p_241099_7_.func_219277_h();
-                  if (!this.field_217237_a.func_219243_d(chunkpos)) {
+                  if (!this.field_217237_a.func_219243_d(chunkpos) || field_217237_a.func_219246_e().shouldForceTicks(chunkpos.func_201841_a())) {
                      chunk.func_177415_c(chunk.func_177416_w() + j);
-                     if (flag1 && (this.field_217246_l || this.field_217247_m) && this.field_73251_h.func_175723_af().func_177730_a(chunk.func_76632_l())) {
+                     if (flag1 && (this.field_217246_l || this.field_217247_m) && this.field_73251_h.func_175723_af().func_177730_a(chunk.func_76632_l()) && !this.field_217237_a.isOutsideOfRange(chunkpos, true)) { // Spigot
                         WorldEntitySpawner.func_234979_a_(this.field_73251_h, chunk, worldentityspawner$entitydensitymanager, this.field_217247_m, this.field_217246_l, flag2);
                      }
 
+                     this.field_73251_h.timings.chunkTicks.startTiming(); // Spigot // Paper
                      this.field_73251_h.func_217441_a(chunk, k);
+                     this.field_73251_h.timings.chunkTicks.stopTiming(); // Spigot // Paper
                   }
                }
             }
          });
          this.field_73251_h.func_217381_Z().func_76320_a("customSpawners");
          if (flag1) {
-            this.field_73251_h.func_241123_a_(this.field_217246_l, this.field_217247_m);
+            try (co.aikar.timings.Timing ignored = this.field_73251_h.timings.miscMobSpawning.startTiming()) { // Paper - timings
+               this.field_73251_h.func_241123_a_(this.field_217246_l, this.field_217247_m);
+            }
          }
 
          this.field_73251_h.func_217381_Z().func_76319_b();
@@ -429,6 +_,14 @@
       this.field_217240_d.func_219362_d(p_217222_1_, p_217222_2_, p_217222_3_, p_217222_4_);
    }
 
+   public <T> void registerTickingTicket(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.field_217240_d.registerTicking(type, pos, distance, value);
+   }
+
+   public <T> void releaseTickingTicket(TicketType<T> type, ChunkPos pos, int distance, T value) {
+      this.field_217240_d.releaseTicking(type, pos, distance, value);
+   }
+
    public void func_217206_a(ChunkPos p_217206_1_, boolean p_217206_2_) {
       this.field_217240_d.func_219364_a(p_217206_1_, p_217206_2_);
    }
@@ -507,11 +_,16 @@
       }
 
       protected boolean func_213168_p() {
-         if (ServerChunkProvider.this.func_217235_l()) {
-            return true;
-         } else {
-            ServerChunkProvider.this.field_217242_h.func_215588_z_();
-            return super.func_213168_p();
+         // CraftBukkit start - process pending Chunk loadCallback() and unloadCallback() after each run task
+         try {
+            if (ServerChunkProvider.this.func_217235_l()) {
+               return true;
+            } else {
+               ServerChunkProvider.this.field_217242_h.func_215588_z_();
+               return super.func_213168_p();
+            }
+         } finally {
+            field_217237_a.callbackExecutor.run();
          }
       }
    }
