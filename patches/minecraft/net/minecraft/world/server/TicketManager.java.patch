--- a/net/minecraft/world/server/TicketManager.java
+++ b/net/minecraft/world/server/TicketManager.java
@@ -3,16 +3,7 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Sets;
 import com.mojang.datafixers.util.Either;
-import it.unimi.dsi.fastutil.longs.Long2ByteMap;
-import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2IntMap;
-import it.unimi.dsi.fastutil.longs.Long2IntMaps;
-import it.unimi.dsi.fastutil.longs.Long2IntOpenHashMap;
-import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
-import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
-import it.unimi.dsi.fastutil.longs.LongIterator;
-import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
+import it.unimi.dsi.fastutil.longs.*;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
@@ -37,7 +28,7 @@
    private static final Logger field_219373_a = LogManager.getLogger();
    private static final int field_219374_b = 33 + ChunkStatus.func_222599_a(ChunkStatus.field_222617_m) - 2;
    private final Long2ObjectMap<ObjectSet<ServerPlayerEntity>> field_219375_c = new Long2ObjectOpenHashMap<>();
-   private final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> field_219377_e = new Long2ObjectOpenHashMap<>();
+   public final Long2ObjectOpenHashMap<SortedArraySet<Ticket<?>>> field_219377_e = new Long2ObjectOpenHashMap<>(); // private->public CraftBukkit
    private final TicketManager.ChunkTicketTracker field_219378_f = new TicketManager.ChunkTicketTracker();
    private final TicketManager.PlayerChunkTracker field_219381_i = new TicketManager.PlayerChunkTracker(8);
    private final TicketManager.PlayerTicketTracker field_219382_j = new TicketManager.PlayerTicketTracker(33);
@@ -99,10 +90,22 @@
       }
 
       if (!this.field_219383_k.isEmpty()) {
-         this.field_219383_k.forEach((p_219343_1_) -> {
-            p_219343_1_.func_219291_a(p_219353_1_);
-         });
-         this.field_219383_k.clear();
+         // CraftBukkit start
+         // Iterate pending chunk updates with protection against concurrent modification exceptions
+         java.util.Iterator<ChunkHolder> iter = this.field_219383_k.iterator();
+         int expectedSize = this.field_219383_k.size();
+         do {
+            ChunkHolder playerchunk = iter.next();
+            iter.remove();
+            expectedSize--;
+            playerchunk.func_219291_a(p_219353_1_);
+            // Reset iterator if set was modified using add()
+            if (this.field_219383_k.size() != expectedSize) {
+               expectedSize = this.field_219383_k.size();
+               iter = this.field_219383_k.iterator();
+            }
+         } while (iter.hasNext());
+         // CraftBukkit end
          return true;
       } else {
          if (!this.field_219387_o.isEmpty()) {
@@ -146,6 +149,17 @@
 
    }
 
+   private boolean addTicket(long chunkPosIn, Ticket<?> ticketIn) { // CraftBukkit - void -> boolean
+      SortedArraySet<Ticket<?>> sortedarrayset = this.func_229848_e_(chunkPosIn);
+      int i = func_229844_a_(sortedarrayset);
+      Ticket<?> ticket = sortedarrayset.func_226175_a_(ticketIn);
+      ticket.func_229861_a_(this.field_219389_q);
+      if (ticketIn.func_219477_b() < i) {
+         this.field_219378_f.func_215491_b(chunkPosIn, ticketIn.func_219477_b(), true);
+      }
+      return ticketIn == ticket; // CraftBukkit
+   }
+
    private void func_219349_b(long p_219349_1_, Ticket<?> p_219349_3_) {
       SortedArraySet<Ticket<?>> sortedarrayset = this.func_229848_e_(p_219349_1_);
       if (sortedarrayset.remove(p_219349_3_)) {
@@ -159,6 +173,23 @@
       this.field_219378_f.func_215491_b(p_219349_1_, func_229844_a_(sortedarrayset), false);
    }
 
+   private boolean removeTicket(long chunkPosIn, Ticket<?> ticket) { // CraftBukkit - void -> boolean
+      SortedArraySet<Ticket<?>> arraysetsorted = this.func_229848_e_(chunkPosIn);
+      boolean removed = false; // CraftBukkit
+      if (arraysetsorted.remove(ticket)) {
+         removed = true; // CraftBukkit
+      }
+      if (arraysetsorted.isEmpty()) {
+         this.field_219377_e.remove(chunkPosIn);
+      }
+      this.field_219378_f.func_215491_b(chunkPosIn, func_229844_a_(arraysetsorted), false);
+      return removed; // CraftBukkit
+   }
+
+   public <T> boolean addTicketAtLevel(TicketType<T> ticketType, ChunkPos chunkcoordintpair, int level, T identifier) {
+      return this.addTicket(chunkcoordintpair.func_201841_a(), new Ticket<>(ticketType, level, identifier));
+   }
+
    public <T> void func_219356_a(TicketType<T> p_219356_1_, ChunkPos p_219356_2_, int p_219356_3_, T p_219356_4_) {
       this.func_219347_a(p_219356_2_.func_201841_a(), new Ticket<>(p_219356_1_, p_219356_3_, p_219356_4_));
    }
@@ -167,6 +198,10 @@
       Ticket<T> ticket = new Ticket<>(p_219345_1_, p_219345_3_, p_219345_4_);
       this.func_219349_b(p_219345_2_.func_201841_a(), ticket);
    }
+   public <T> boolean removeTicketAtLevel(TicketType<T> ticketType, ChunkPos pos, int level, T identifier) {
+      Ticket<T> ticket = new Ticket<T>(ticketType, level, identifier);
+      return this.removeTicket(pos.func_201841_a(), ticket);
+   }
 
    public <T> void func_219331_c(TicketType<T> p_219331_1_, ChunkPos p_219331_2_, int p_219331_3_, T p_219331_4_) {
       this.func_219347_a(p_219331_2_.func_201841_a(), new Ticket<>(p_219331_1_, 33 - p_219331_3_, p_219331_4_));
@@ -244,6 +279,22 @@
       return this.field_219384_l.func_225396_a();
    }
 
+   // CraftBukkit start
+   public <T> void removeAllTicketsFor(TicketType<T> ticketType, int ticketLevel, T ticketIdentifier) {
+      Ticket<T> target = new Ticket<T>(ticketType, ticketLevel, ticketIdentifier);
+      for (java.util.Iterator<Entry<SortedArraySet<Ticket<?>>>> iterator = this.field_219377_e.long2ObjectEntrySet().fastIterator(); iterator.hasNext();) {
+         Entry<SortedArraySet<Ticket<?>>> entry = iterator.next();
+         SortedArraySet<Ticket<?>> tickets = entry.getValue();
+         if (tickets.remove(target)) {
+            // can't use entry after it's removed
+            if (tickets.isEmpty()) {
+               iterator.remove();
+            }
+         }
+      }
+   }
+   // CraftBukkit end
+
    class ChunkTicketTracker extends ChunkDistanceGraph {
       public ChunkTicketTracker() {
          super(ChunkManager.field_219249_a + 2, 16, 256);
