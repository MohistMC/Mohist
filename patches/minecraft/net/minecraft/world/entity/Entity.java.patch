--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -15,7 +_,9 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BiConsumer;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
@@ -31,6 +_,7 @@
 import net.minecraft.commands.arguments.EntityAnchorArgument;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.PositionImpl;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
@@ -116,9 +_,39 @@
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Team;
+import org.bukkit.Bukkit;
+import org.bukkit.Location;
+import org.bukkit.Server;
+import org.bukkit.block.BlockFace;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.v1_19_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_19_R1.CraftWorld;
+import org.bukkit.craftbukkit.v1_19_R1.block.CraftBlock;
+import org.bukkit.craftbukkit.v1_19_R1.entity.CraftEntity;
+import org.bukkit.craftbukkit.v1_19_R1.entity.CraftPlayer;
+import org.bukkit.craftbukkit.v1_19_R1.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_19_R1.event.CraftPortalEvent;
+import org.bukkit.craftbukkit.v1_19_R1.inventory.CraftItemStack;
+import org.bukkit.entity.Hanging;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.event.entity.EntityAirChangeEvent;
+import org.bukkit.event.entity.EntityCombustByEntityEvent;
+import org.bukkit.event.entity.EntityCombustEvent;
+import org.bukkit.event.entity.EntityDropItemEvent;
+import org.bukkit.event.entity.EntityPortalEvent;
+import org.bukkit.event.entity.EntityPoseChangeEvent;
+import org.bukkit.event.entity.EntityRegainHealthEvent;
+import org.bukkit.event.hanging.HangingBreakByEntityEvent;
+import org.bukkit.event.player.PlayerTeleportEvent;
+import org.bukkit.event.vehicle.VehicleBlockCollisionEvent;
+import org.bukkit.event.vehicle.VehicleEnterEvent;
+import org.bukkit.event.vehicle.VehicleExitEvent;
+import org.bukkit.plugin.PluginManager;
 import org.slf4j.Logger;
+import org.spigotmc.AsyncCatcher;
 
-public abstract class Entity implements Nameable, EntityAccess, CommandSource {
+public abstract class Entity extends net.minecraftforge.common.capabilities.CapabilityProvider<Entity> implements Nameable, EntityAccess, CommandSource, net.minecraftforge.common.extensions.IForgeEntity {
    private static final Logger f_19849_ = LogUtils.getLogger();
    public static final String f_146815_ = "id";
    public static final String f_146816_ = "Passengers";
@@ -137,6 +_,7 @@
    private static final double f_146812_ = 0.0023333333333333335D;
    public static final String f_146824_ = "UUID";
    private static double f_19846_ = 1.0D;
+   @Deprecated // Forge: Use the getter to allow overriding in mods
    private final EntityType<?> f_19847_;
    private int f_19848_ = f_19843_.incrementAndGet();
    public boolean f_19850_;
@@ -157,7 +_,7 @@
    public float f_19859_;
    public float f_19860_;
    private AABB f_19828_ = f_19845_;
-   protected boolean f_19861_;
+   public boolean f_19861_;
    public boolean f_19862_;
    public boolean f_19863_;
    public boolean f_201939_;
@@ -177,14 +_,17 @@
    public double f_19790_;
    public double f_19791_;
    public double f_19792_;
+   @Deprecated // Forge - see IForgeEntity#getStepHeight
    public float f_19793_;
    public boolean f_19794_;
    protected final RandomSource f_19796_ = RandomSource.m_216327_();
    public int f_19797_;
    public int f_19831_ = -this.m_6101_();
-   protected boolean f_19798_;
+   public boolean f_19798_;
+   @Deprecated // Forge: Use forgeFluidTypeHeight instead
    protected Object2DoubleMap<TagKey<Fluid>> f_19799_ = new Object2DoubleArrayMap<>(2);
    protected boolean f_19800_;
+   @Deprecated // Forge: Use forgeFluidTypeOnEyes instead
    private final Set<TagKey<Fluid>> f_19801_ = new HashSet<>();
    public int f_19802_;
    protected boolean f_19803_ = true;
@@ -230,13 +_,88 @@
    @Nullable
    private BlockState f_185934_ = null;
 
+   // CraftBukkit start
+   public boolean persist = true;
+   public boolean valid;
+   public boolean generation;
+   public int maxAirTicks = getDefaultMaxAirSupply(); // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+   public org.bukkit.projectiles.ProjectileSource projectileSource; // For projectiles only
+   public boolean lastDamageCancelled; // SPIGOT-5339, SPIGOT-6252, SPIGOT-6777: Keep track if the event was canceled
+   public boolean persistentInvisibility = false;
+   public BlockPos lastLavaContact;
+   // CraftBukkit end
+
+   // Spigot start
+   public final org.spigotmc.ActivationRange.ActivationType activationType = org.spigotmc.ActivationRange.initializeEntityActivationType(this);
+   public final boolean defaultActivationState;
+   public long activatedTick = Integer.MIN_VALUE;
+   public void inactiveTick() { }
+   // Spigot end
+
+   // Mohist start
+   public AtomicReference<CreatureSpawnEvent.SpawnReason> spawnReason = new AtomicReference<>(CreatureSpawnEvent.SpawnReason.DEFAULT);
+
+   public void spawnReason(CreatureSpawnEvent.SpawnReason spawnReason) {
+      this.spawnReason.set(spawnReason);
+   }
+
+   public AtomicReference<EntityRegainHealthEvent.RegainReason> heal$regainReason = new AtomicReference<>(EntityRegainHealthEvent.RegainReason.CUSTOM);
+
+   public void heal$regainReason(EntityRegainHealthEvent.RegainReason regainReason){
+      heal$regainReason.set(regainReason);
+   }
+   // Mohist end
+
+   public float getBukkitYaw() {
+      return this.f_19857_;
+   }
+
+   private static final int CURRENT_LEVEL = 2;
+   static boolean isLevelAtLeast(CompoundTag tag, int level) {
+      return tag.m_128441_("Bukkit.updateLevel") && tag.m_128451_("Bukkit.updateLevel") >= level;
+   }
+
+   private CraftEntity bukkitEntity;
+   public CraftEntity getBukkitEntity() {
+      if (bukkitEntity == null) {
+         bukkitEntity = CraftEntity.getEntity(f_19853_.getCraftServer(), this);
+      }
+      return bukkitEntity;
+   }
+
+   public void setBukkitEntity(CraftEntity bukkitEntity) {
+      this.bukkitEntity = bukkitEntity;
+   }
+   @Override
+   public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+      return getBukkitEntity();
+   }
+
+   // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+   public int getDefaultMaxAirSupply() {
+      return f_146818_;
+   }
+
+   public boolean isChunkLoaded() {
+      return f_19853_.m_7232_((int) Math.floor(this.m_20185_()) >> 4, (int) Math.floor(this.m_20189_()) >> 4);
+   }
+   // CraftBukkit end
+
    public Entity(EntityType<?> p_19870_, Level p_19871_) {
+      super(Entity.class);
       this.f_19847_ = p_19870_;
       this.f_19853_ = p_19871_;
       this.f_19815_ = p_19870_.m_20680_();
       this.f_19825_ = Vec3.f_82478_;
       this.f_19826_ = BlockPos.f_121853_;
       this.f_185933_ = ChunkPos.f_186419_;
+      // Spigot start
+      if (p_19871_ != null) {
+         this.defaultActivationState = org.spigotmc.ActivationRange.initializeEntityActivationState(this, p_19871_.spigotConfig);
+      } else {
+         this.defaultActivationState = false;
+      }
+      // Spigot end
       this.f_19804_ = new SynchedEntityData(this);
       this.f_19804_.m_135372_(f_19805_, (byte)0);
       this.f_19804_.m_135372_(f_19832_, this.m_6062_());
@@ -248,7 +_,11 @@
       this.f_19804_.m_135372_(f_146800_, 0);
       this.m_8097_();
       this.m_6034_(0.0D, 0.0D, 0.0D);
-      this.f_19816_ = this.m_6380_(Pose.STANDING, this.f_19815_);
+      net.minecraftforge.event.entity.EntityEvent.Size sizeEvent = net.minecraftforge.event.ForgeEventFactory.getEntitySizeForge(this, Pose.STANDING, this.f_19815_, this.m_6380_(Pose.STANDING, this.f_19815_));
+      this.f_19815_ = sizeEvent.getNewSize();
+      this.f_19816_ = sizeEvent.getNewEyeHeight();
+      net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityEvent.EntityConstructing(this));
+      this.gatherCapabilities();
    }
 
    public boolean m_20039_(BlockPos p_20040_, BlockState p_20041_) {
@@ -338,12 +_,21 @@
 
    public void m_142687_(Entity.RemovalReason p_146834_) {
       this.m_142467_(p_146834_);
+      this.invalidateCaps();
    }
 
    public void m_142036_() {
    }
 
    public void m_20124_(Pose p_20125_) {
+      // CraftBukkit start
+      if (p_20125_ == this.m_20089_()) {
+         return;
+      }
+      if (!AsyncCatcher.catchAsync()) {
+         this.f_19853_.getCraftServer().getPluginManager().callEvent(new EntityPoseChangeEvent(this.getBukkitEntity(), org.bukkit.entity.Pose.values()[p_20125_.ordinal()]));
+      }
+      // CraftBukkit end
       this.f_19804_.m_135381_(f_19806_, p_20125_);
    }
 
@@ -367,6 +_,32 @@
    }
 
    protected void m_19915_(float p_19916_, float p_19917_) {
+      // CraftBukkit start - yaw was sometimes set to NaN, so we need to set it back to 0
+      if (Float.isNaN(p_19916_)) {
+         p_19916_ = 0;
+      }
+
+      if (p_19916_ == Float.POSITIVE_INFINITY || p_19916_ == Float.NEGATIVE_INFINITY) {
+         if (this instanceof ServerPlayer) {
+            this.f_19853_.getCraftServer().getLogger().warning(this.m_6302_() + " was caught trying to crash the server with an invalid yaw");
+            ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite yaw (Hacking?)");
+         }
+         p_19916_ = 0;
+      }
+
+      // pitch was sometimes set to NaN, so we need to set it back to 0
+      if (Float.isNaN(p_19917_)) {
+         p_19917_ = 0;
+      }
+      if (p_19917_ == Float.POSITIVE_INFINITY || p_19917_ == Float.NEGATIVE_INFINITY) {
+         if (this instanceof ServerPlayer) {
+            this.f_19853_.getCraftServer().getLogger().warning(this.m_6302_() + " was caught trying to crash the server with an invalid pitch");
+            ((CraftPlayer) this.getBukkitEntity()).kickPlayer("Infinite pitch (Hacking?)");
+         }
+         p_19917_ = 0;
+      }
+      // CraftBukkit end
+
       this.m_146922_(p_19916_ % 360.0F);
       this.m_146926_(p_19917_ % 360.0F);
    }
@@ -407,6 +_,15 @@
       this.m_6075_();
    }
 
+   // CraftBukkit start
+   public void postTick() {
+      // No clean way to break out of ticking once the entity has been copied to a new world, so instead we move the portalling later in the tick cycle
+      if (!(this instanceof ServerPlayer)) {
+         this.m_20157_();
+      }
+   }
+    // CraftBukkit end
+
    public void m_6075_() {
       this.f_19853_.m_46473_().m_6180_("entityBaseTick");
       this.f_185934_ = null;
@@ -421,7 +_,7 @@
       this.f_19867_ = this.f_19787_;
       this.f_19860_ = this.m_146909_();
       this.f_19859_ = this.m_146908_();
-      this.m_20157_();
+      if (this instanceof ServerPlayer) this.m_20157_(); // CraftBukkit - // Moved up to postTick
       if (this.m_5843_()) {
          this.m_20076_();
       }
@@ -455,7 +_,11 @@
 
       if (this.m_20077_()) {
          this.m_20093_();
-         this.f_19789_ *= 0.5F;
+         this.f_19789_ *= this.getFluidFallDistanceModifier(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
+      } else {
+         // CraftBukkit start
+         this.lastLavaContact = null;
+         // CraftBukkit end
       }
 
       this.m_146871_();
@@ -499,15 +_,42 @@
 
    public void m_20093_() {
       if (!this.m_5825_()) {
-         this.m_20254_(15);
+         // CraftBukkit start - Fallen in lava TODO: this event spams!
+         if (this instanceof LivingEntity && f_19831_ <= 0) {
+            // not on fire yet
+            org.bukkit.block.Block damager = (lastLavaContact == null) ? null : CraftBlock.at(f_19853_, lastLavaContact);
+            org.bukkit.entity.Entity damagee = this.getBukkitEntity();
+            EntityCombustEvent combustEvent = new org.bukkit.event.entity.EntityCombustByBlockEvent(damager, damagee, 15);
+            this.f_19853_.getCraftServer().getPluginManager().callEvent(combustEvent);
+
+            if (!combustEvent.isCancelled()) {
+               this.setSecondsOnFire(combustEvent.getDuration(), false);
+            }
+         } else {
+            // This will be called every single tick the entity is in lava, so don't throw an event
+            this.setSecondsOnFire(15, false);
+         }
+         CraftEventFactory.blockDamage = (lastLavaContact) == null ? null : CraftBlock.at(f_19853_, lastLavaContact);
          if (this.m_6469_(DamageSource.f_19308_, 4.0F)) {
             this.m_5496_(SoundEvents.f_11909_, 0.4F, 2.0F + this.f_19796_.m_188501_() * 0.4F);
          }
-
+         CraftEventFactory.blockDamage = null;
+         // CraftBukkit end - we also don't throw an event unless the object in lava is living, to save on some event calls
       }
    }
 
    public void m_20254_(int p_20255_) {
+      if (this.callEvent.getAndSet(true)) {
+         EntityCombustEvent event = new EntityCombustEvent(this.getBukkitEntity(), p_20255_);
+         this.f_19853_.getCraftServer().getPluginManager().callEvent(event);
+
+         if (event.isCancelled()) {
+            return;
+         }
+
+         p_20255_ = event.getDuration();
+      }
+      // CraftBukkit end
       int i = p_20255_ * 20;
       if (this instanceof LivingEntity) {
          i = ProtectionEnchantment.m_45138_((LivingEntity)this, i);
@@ -519,6 +_,14 @@
 
    }
 
+   // Mohist start
+   public AtomicBoolean callEvent = new AtomicBoolean(true);
+   public void setSecondsOnFire(int i, boolean callEvent) {
+      this.callEvent.set(callEvent);
+      m_20254_(i);
+   }
+   // Mohist end
+
    public void m_7311_(int p_20269_) {
       this.f_19831_ = p_20269_;
    }
@@ -614,6 +_,28 @@
                block.m_5548_(this.f_19853_, this);
             }
 
+            // CraftBukkit start
+            if (f_19862_ && getBukkitEntity() instanceof Vehicle) {
+               Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+               org.bukkit.block.Block bl = this.f_19853_.getWorld().getBlockAt(Mth.m_14107_(this.m_20185_()), Mth.m_14107_(this.m_20186_()), Mth.m_14107_(this.m_20189_()));
+               if (p_19974_.f_82479_ > vec3.f_82479_) {
+                  bl = bl.getRelative(BlockFace.EAST);
+               } else if (p_19974_.f_82479_ < vec3.f_82479_) {
+                  bl = bl.getRelative(BlockFace.WEST);
+               } else if (p_19974_.f_82481_ > vec3.f_82481_) {
+                  bl = bl.getRelative(BlockFace.SOUTH);
+               } else if (p_19974_.f_82481_ < vec3.f_82481_) {
+                  bl = bl.getRelative(BlockFace.NORTH);
+               }
+               var blType = bl.getType();
+               if (blType==null || !blType.isAir()) { // it maybe not air if the type is null
+                  VehicleBlockCollisionEvent event = new VehicleBlockCollisionEvent(vehicle, bl);
+                  f_19853_.getCraftServer().getPluginManager().callEvent(event);
+               }
+            }
+            // CraftBukkit end
+
+
             if (this.f_19861_) {
                block.m_141947_(this.f_19853_, blockpos, blockstate, this);
             }
@@ -623,7 +_,7 @@
                double d1 = vec3.f_82479_;
                double d2 = vec3.f_82480_;
                double d3 = vec3.f_82481_;
-               this.f_146794_ += (float)(vec3.m_82553_() * 0.6D);
+               this.f_146794_ = (float) ((double) this.f_146794_ + vec3.m_82553_() * 0.6D);
                boolean flag1 = blockstate.m_204336_(BlockTags.f_13082_) || blockstate.m_60713_(Blocks.f_152499_);
                if (!flag1) {
                   d2 = 0.0D;
@@ -662,25 +_,23 @@
 
             this.m_146872_();
             float f2 = this.m_6041_();
-            this.m_20256_(this.m_20184_().m_82542_((double)f2, 1.0D, (double)f2));
-            if (this.f_19853_.m_46847_(this.m_20191_().m_82406_(1.0E-6D)).noneMatch((p_20127_) -> {
-               return p_20127_.m_204336_(BlockTags.f_13076_) || p_20127_.m_60713_(Blocks.f_49991_);
-            })) {
-               if (this.f_19831_ <= 0) {
-                  this.m_7311_(-this.m_6101_());
-               }
-
-               if (this.f_146810_ && (this.f_146808_ || this.m_20071_())) {
-                  this.m_146873_();
-               }
-            }
-
-            if (this.m_6060_() && (this.f_146808_ || this.m_20071_())) {
+            this.m_20256_(this.m_20184_().m_82542_((double) f2, 1.0D, (double) f2));
+         }
+         if (this.f_19853_.m_46847_(this.m_20191_().m_82406_(1.0E-6D)).noneMatch((p_20127_) -> p_20127_.m_204336_(BlockTags.f_13076_) || p_20127_.m_60713_(Blocks.f_49991_))) {
+            if (this.f_19831_ <= 0) {
                this.m_7311_(-this.m_6101_());
             }
 
-            this.f_19853_.m_46473_().m_7238_();
-         }
+            if (this.f_146810_ && (this.f_146808_ || this.m_20071_() || this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType)))) {
+               this.m_146873_();
+            }
+         }
+
+         if (this.m_6060_() && (this.f_146808_ || this.m_20071_() || this.isInFluidType((fluidType, height) -> this.canFluidExtinguish(fluidType)))) {
+            this.m_7311_(-this.m_6101_());
+         }
+
+         this.f_19853_.m_46473_().m_7238_();
       }
    }
 
@@ -728,10 +_,10 @@
       int j = Mth.m_14107_(this.f_19825_.f_82480_ - (double)p_216987_);
       int k = Mth.m_14107_(this.f_19825_.f_82481_);
       BlockPos blockpos = new BlockPos(i, j, k);
-      if (this.f_19853_.m_8055_(blockpos).m_60795_()) {
+      if (this.f_19853_.m_46859_(blockpos)) {
          BlockPos blockpos1 = blockpos.m_7495_();
          BlockState blockstate = this.f_19853_.m_8055_(blockpos1);
-         if (blockstate.m_204336_(BlockTags.f_13039_) || blockstate.m_204336_(BlockTags.f_13032_) || blockstate.m_60734_() instanceof FenceGateBlock) {
+         if (blockstate.collisionExtendsVertically(this.f_19853_, blockpos1, this)) {
             return blockpos1;
          }
       }
@@ -804,10 +_,11 @@
       boolean flag1 = p_20273_.f_82480_ != vec3.f_82480_;
       boolean flag2 = p_20273_.f_82481_ != vec3.f_82481_;
       boolean flag3 = this.f_19861_ || flag1 && p_20273_.f_82480_ < 0.0D;
-      if (this.f_19793_ > 0.0F && flag3 && (flag || flag2)) {
-         Vec3 vec31 = m_198894_(this, new Vec3(p_20273_.f_82479_, (double)this.f_19793_, p_20273_.f_82481_), aabb, this.f_19853_, list);
-         Vec3 vec32 = m_198894_(this, new Vec3(0.0D, (double)this.f_19793_, 0.0D), aabb.m_82363_(p_20273_.f_82479_, 0.0D, p_20273_.f_82481_), this.f_19853_, list);
-         if (vec32.f_82480_ < (double)this.f_19793_) {
+      float stepHeight = getStepHeight();
+      if (stepHeight > 0.0F && flag3 && (flag || flag2)) {
+         Vec3 vec31 = m_198894_(this, new Vec3(p_20273_.f_82479_, (double)stepHeight, p_20273_.f_82481_), aabb, this.f_19853_, list);
+         Vec3 vec32 = m_198894_(this, new Vec3(0.0D, (double)stepHeight, 0.0D), aabb.m_82363_(p_20273_.f_82479_, 0.0D, p_20273_.f_82481_), this.f_19853_, list);
+         if (vec32.f_82480_ < (double)stepHeight) {
             Vec3 vec33 = m_198894_(this, new Vec3(p_20273_.f_82479_, 0.0D, p_20273_.f_82481_), aabb.m_82383_(vec32), this.f_19853_, list).m_82549_(vec32);
             if (vec33.m_165925_() > vec31.m_165925_()) {
                vec31 = vec33;
@@ -891,6 +_,20 @@
       return SoundEvents.f_11917_;
    }
 
+   // CraftBukkit start - Add delegate methods
+   public SoundEvent getSwimSound0() {
+      return m_5501_();
+   }
+
+   public SoundEvent getSwimSplashSound0() {
+      return m_5509_();
+   }
+
+   public SoundEvent getSwimHighSpeedSplashSound0() {
+      return m_5508_();
+   }
+   // CraftBukkit end
+
    protected void m_20101_() {
       AABB aabb = this.m_20191_();
       BlockPos blockpos = new BlockPos(aabb.f_82288_ + 0.001D, aabb.f_82289_ + 0.001D, aabb.f_82290_ + 0.001D);
@@ -934,7 +_,7 @@
    protected void m_7355_(BlockPos p_20135_, BlockState p_20136_) {
       if (!p_20136_.m_60767_().m_76332_()) {
          BlockState blockstate = this.f_19853_.m_8055_(p_20135_.m_7494_());
-         SoundType soundtype = blockstate.m_204336_(BlockTags.f_144271_) ? blockstate.m_60827_() : p_20136_.m_60827_();
+         SoundType soundtype = blockstate.m_60713_(Blocks.f_50125_) ? blockstate.getSoundType(f_19853_, p_20135_, this) : p_20136_.getSoundType(f_19853_, p_20135_, this);
          this.m_5496_(soundtype.m_56776_(), soundtype.m_56773_() * 0.15F, soundtype.m_56774_());
       }
    }
@@ -1063,19 +_,22 @@
 
    public void m_5844_() {
       if (this.m_6069_()) {
-         this.m_20282_(this.m_20142_() && this.m_20069_() && !this.m_20159_());
+         this.m_20282_(this.m_20142_() && (this.m_20069_() || this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType))) && !this.m_20159_());
       } else {
-         this.m_20282_(this.m_20142_() && this.m_5842_() && !this.m_20159_() && this.f_19853_.m_6425_(this.f_19826_).m_205070_(FluidTags.f_13131_));
+         this.m_20282_(this.m_20142_() && (this.m_5842_() || this.canStartSwimming()) && !this.m_20159_());
       }
 
    }
 
    protected boolean m_20073_() {
       this.f_19799_.clear();
+      this.forgeFluidTypeHeight.clear();
       this.m_20074_();
-      double d0 = this.f_19853_.m_6042_().f_63857_() ? 0.007D : 0.0023333333333333335D;
-      boolean flag = this.m_204031_(FluidTags.f_13132_, d0);
-      return this.m_20069_() || flag;
+      if (!(this.m_20202_() instanceof Boat)) {
+         this.f_19789_ *= this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().filter(e -> !e.getKey().isAir() && !e.getKey().isVanilla()).map(e -> this.getFluidFallDistanceModifier(e.getKey())).min(Float::compare).orElse(1F);
+         if (this.isInFluidType((fluidType, height) -> !fluidType.isAir() && !fluidType.isVanilla() && this.canFluidExtinguish(fluidType))) this.m_20095_();
+      }
+      return this.isInFluidType();
    }
 
    void m_20074_() {
@@ -1098,6 +_,7 @@
    private void m_20323_() {
       this.f_19800_ = this.m_204029_(FluidTags.f_13131_);
       this.f_19801_.clear();
+      this.forgeFluidTypeOnEyes = net.minecraftforge.common.ForgeMod.EMPTY_TYPE.get();
       double d0 = this.m_20188_() - (double)0.11111111F;
       Entity entity = this.m_20202_();
       if (entity instanceof Boat boat) {
@@ -1110,7 +_,7 @@
       FluidState fluidstate = this.f_19853_.m_6425_(blockpos);
       double d1 = (double)((float)blockpos.m_123342_() + fluidstate.m_76155_(this.f_19853_, blockpos));
       if (d1 > d0) {
-         fluidstate.m_205075_().forEach(this.f_19801_::add);
+         this.forgeFluidTypeOnEyes = fluidstate.getFluidType();
       }
 
    }
@@ -1154,7 +_,7 @@
    }
 
    public boolean m_5843_() {
-      return this.m_20142_() && !this.m_20069_() && !this.m_5833_() && !this.m_6047_() && !this.m_20077_() && this.m_6084_();
+      return this.m_20142_() && !this.m_20069_() && !this.m_5833_() && !this.m_6047_() && !this.m_20077_() && this.m_6084_() && !this.isInFluidType();
    }
 
    protected void m_20076_() {
@@ -1163,19 +_,23 @@
       int k = Mth.m_14107_(this.m_20189_());
       BlockPos blockpos = new BlockPos(i, j, k);
       BlockState blockstate = this.f_19853_.m_8055_(blockpos);
+      if(!blockstate.addRunningEffects(f_19853_, blockpos, this))
       if (blockstate.m_60799_() != RenderShape.INVISIBLE) {
          Vec3 vec3 = this.m_20184_();
-         this.f_19853_.m_7106_(new BlockParticleOption(ParticleTypes.f_123794_, blockstate), this.m_20185_() + (this.f_19796_.m_188500_() - 0.5D) * (double)this.f_19815_.f_20377_, this.m_20186_() + 0.1D, this.m_20189_() + (this.f_19796_.m_188500_() - 0.5D) * (double)this.f_19815_.f_20377_, vec3.f_82479_ * -4.0D, 1.5D, vec3.f_82481_ * -4.0D);
+         this.f_19853_.m_7106_(new BlockParticleOption(ParticleTypes.f_123794_, blockstate).setPos(blockpos), this.m_20185_() + (this.f_19796_.m_188500_() - 0.5D) * (double)this.f_19815_.f_20377_, this.m_20186_() + 0.1D, this.m_20189_() + (this.f_19796_.m_188500_() - 0.5D) * (double)this.f_19815_.f_20377_, vec3.f_82479_ * -4.0D, 1.5D, vec3.f_82481_ * -4.0D);
       }
 
    }
 
+   @Deprecated // Forge: Use isEyeInFluidType instead
    public boolean m_204029_(TagKey<Fluid> p_204030_) {
+      if (p_204030_ == FluidTags.f_13131_) return this.isEyeInFluidType(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+      else if (p_204030_ == FluidTags.f_13132_) return this.isEyeInFluidType(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
       return this.f_19801_.contains(p_204030_);
    }
 
    public boolean m_20077_() {
-      return !this.f_19803_ && this.f_19799_.getDouble(FluidTags.f_13132_) > 0.0D;
+      return !this.f_19803_ && this.forgeFluidTypeHeight.getDouble(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get()) > 0.0D;
    }
 
    public void m_19920_(float p_19921_, Vec3 p_19922_) {
@@ -1216,6 +_,7 @@
       this.f_19855_ = p_20250_;
       this.f_19856_ = d1;
       this.m_6034_(d0, p_20250_, d1);
+      if (valid) f_19853_.m_6325_((int) Math.floor(this.m_20185_()) >> 4, (int) Math.floor(this.m_20189_()) >> 4); // CraftBukkit
    }
 
    public void m_20219_(Vec3 p_20220_) {
@@ -1397,6 +_,12 @@
       return false;
    }
 
+   // CraftBukkit start - collidable API
+   public boolean canCollideWithBukkit(Entity entity) {
+      return m_6094_();
+   }
+   // CraftBukkit end
+
    public void m_5993_(Entity p_19953_, int p_19954_, DamageSource p_19955_) {
       if (p_19953_ instanceof ServerPlayer) {
          CriteriaTriggers.f_10569_.m_48104_((ServerPlayer)p_19953_, this, p_19955_);
@@ -1427,7 +_,7 @@
          return false;
       } else {
          String s = this.m_20078_();
-         if (s == null) {
+         if (!this.persist || s == null) { // CraftBukkit - persist flag
             return false;
          } else {
             p_20087_.m_128359_("id", s);
@@ -1451,6 +_,18 @@
 
          Vec3 vec3 = this.m_20184_();
          p_20241_.m_128365_("Motion", this.m_20063_(vec3.f_82479_, vec3.f_82480_, vec3.f_82481_));
+
+         // CraftBukkit start - Checking for NaN pitch/yaw and resetting to zero
+         // TODO: make sure this is the best way to address this.
+         if (Float.isNaN(this.f_19857_)) {
+            this.f_19857_ = 0;
+         }
+
+         if (Float.isNaN(this.f_19858_)) {
+            this.f_19858_ = 0;
+         }
+         // CraftBukkit end
+
          p_20241_.m_128365_("Rotation", this.m_20065_(this.m_146908_(), this.m_146909_()));
          p_20241_.m_128350_("FallDistance", this.f_19789_);
          p_20241_.m_128376_("Fire", (short)this.f_19831_);
@@ -1459,6 +_,22 @@
          p_20241_.m_128379_("Invulnerable", this.f_19840_);
          p_20241_.m_128405_("PortalCooldown", this.f_19839_);
          p_20241_.m_128362_("UUID", this.m_20148_());
+         // CraftBukkit start
+         // PAIL: Check above UUID reads 1.8 properly, ie: UUIDMost / UUIDLeast
+         p_20241_.m_128356_("WorldUUIDLeast", this.f_19853_.getWorld().getUID().getLeastSignificantBits());
+         p_20241_.m_128356_("WorldUUIDMost", this.f_19853_.getWorld().getUID().getMostSignificantBits());
+         p_20241_.m_128405_("Bukkit.updateLevel", CURRENT_LEVEL);
+         if (!this.persist) {
+            p_20241_.m_128379_("Bukkit.persist", this.persist);
+         }
+         if (this.persistentInvisibility) {
+            p_20241_.m_128379_("Bukkit.invisible", this.persistentInvisibility);
+         }
+         // SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+         if (maxAirTicks != getDefaultMaxAirSupply()) {
+            p_20241_.m_128405_("Bukkit.MaxAirSupply", m_6062_());
+         }
+         // CraftBukkit end
          Component component = this.m_7770_();
          if (component != null) {
             p_20241_.m_128359_("CustomName", Component.Serializer.m_130703_(component));
@@ -1489,6 +_,8 @@
             p_20241_.m_128379_("HasVisualFire", this.f_146813_);
          }
 
+         p_20241_.m_128379_("CanUpdate", canUpdate);
+
          if (!this.f_19841_.isEmpty()) {
             ListTag listtag = new ListTag();
 
@@ -1499,6 +_,10 @@
             p_20241_.m_128365_("Tags", listtag);
          }
 
+         CompoundTag caps = serializeCaps();
+         if (caps != null) p_20241_.m_128365_("ForgeCaps", caps);
+         if (persistentData != null) p_20241_.m_128365_("ForgeData", persistentData.m_6426_());
+
          this.m_7380_(p_20241_);
          if (this.m_20160_()) {
             ListTag listtag1 = new ListTag();
@@ -1514,7 +_,11 @@
                p_20241_.m_128365_("Passengers", listtag1);
             }
          }
-
+         // CraftBukkit start - stores eventually existing bukkit values
+         if (this.bukkitEntity != null) {
+            this.bukkitEntity.storeBukkitValues(p_20241_);
+         }
+         // CraftBukkit end
          return p_20241_;
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.m_127521_(throwable, "Saving entity NBT");
@@ -1574,6 +_,9 @@
                this.m_146915_(p_20259_.m_128471_("Glowing"));
                this.m_146917_(p_20259_.m_128451_("TicksFrozen"));
                this.f_146813_ = p_20259_.m_128471_("HasVisualFire");
+               if (p_20259_.m_128425_("ForgeData", 10)) persistentData = p_20259_.m_128469_("ForgeData");
+               if (p_20259_.m_128425_("CanUpdate", 99)) this.canUpdate(p_20259_.m_128471_("CanUpdate"));
+               if (p_20259_.m_128425_("ForgeCaps", 10)) deserializeCaps(p_20259_.m_128469_("ForgeCaps"));
                if (p_20259_.m_128425_("Tags", 9)) {
                   this.f_19841_.clear();
                   ListTag listtag3 = p_20259_.m_128437_("Tags", 8);
@@ -1595,6 +_,42 @@
          } else {
             throw new IllegalStateException("Entity has invalid position");
          }
+         // CraftBukkit start
+         this.persist = !p_20259_.m_128441_("Bukkit.persist") || p_20259_.m_128471_("Bukkit.persist");
+         // SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
+         if (p_20259_.m_128441_("Bukkit.MaxAirSupply")) {
+            maxAirTicks = p_20259_.m_128451_("Bukkit.MaxAirSupply");
+         }
+         // CraftBukkit end
+
+         // CraftBukkit start - Reset world
+         if (this instanceof ServerPlayer) {
+            Server server = Bukkit.getServer();
+            org.bukkit.World bworld = null;
+
+            // TODO: Remove World related checks, replaced with WorldUID
+            String worldName = p_20259_.m_128461_("world");
+
+            if (p_20259_.m_128441_("WorldUUIDMost") && p_20259_.m_128441_("WorldUUIDLeast")) {
+               UUID uid = new UUID(p_20259_.m_128454_("WorldUUIDMost"), p_20259_.m_128454_("WorldUUIDLeast"));
+               bworld = server.getWorld(uid);
+            } else {
+               bworld = server.getWorld(worldName);
+            }
+
+            if (bworld == null) {
+               bworld = ((CraftServer) server).getServer().m_129880_(Level.f_46428_).getWorld();
+            }
+
+            ((ServerPlayer) this).m_143425_(bworld == null ? null : ((CraftWorld) bworld).getHandle());
+         }
+         this.getBukkitEntity().readBukkitValues(p_20259_);
+         if (p_20259_.m_128441_("Bukkit.invisible")) {
+            boolean bukkitInvisible = p_20259_.m_128471_("Bukkit.invisible");
+            this.m_6842_(bukkitInvisible);
+            this.persistentInvisibility = bukkitInvisible;
+         }
+         // CraftBukkit end
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.m_127521_(throwable, "Loading entity NBT");
          CrashReportCategory crashreportcategory = crashreport.m_127514_("Entity being loaded");
@@ -1662,6 +_,15 @@
       } else {
          ItemEntity itementity = new ItemEntity(this.f_19853_, this.m_20185_(), this.m_20186_() + (double)p_19986_, this.m_20189_(), p_19985_);
          itementity.m_32060_();
+         // CraftBukkit start
+         EntityDropItemEvent event = new EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) itementity.getBukkitEntity());
+         Bukkit.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return null;
+         }
+         // CraftBukkit end
+         if (captureDrops() != null) captureDrops().add(itementity);
+         else
          this.f_19853_.m_7967_(itementity);
          return itementity;
       }
@@ -1698,6 +_,7 @@
 
    public void m_6083_() {
       this.m_20256_(Vec3.f_82478_);
+      if (canUpdate())
       this.m_8119_();
       if (this.m_20159_()) {
          this.m_20202_().m_7332_(this);
@@ -1744,6 +_,7 @@
             }
          }
 
+      if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, p_19966_, true)) return false;
          if (p_19967_ || this.m_7341_(p_19966_) && p_19966_.m_7310_(this)) {
             if (this.m_20159_()) {
                this.m_8127_();
@@ -1752,6 +_,7 @@
             this.m_20124_(Pose.STANDING);
             this.f_19824_ = p_19966_;
             this.f_19824_.m_20348_(this);
+            if (!addPassenger.get()) this.f_19824_ = null; // CraftBukkit // Mohist
             p_19966_.m_146920_().filter((p_185984_) -> {
                return p_185984_ instanceof ServerPlayer;
             }).forEach((p_185982_) -> {
@@ -1782,6 +_,7 @@
    public void m_6038_() {
       if (this.f_19824_ != null) {
          Entity entity = this.f_19824_;
+         if (!net.minecraftforge.event.ForgeEventFactory.canMountEntity(this, entity, false)) return;
          this.f_19824_ = null;
          entity.m_20351_(this);
       }
@@ -1792,10 +_,44 @@
       this.m_6038_();
    }
 
+   public AtomicBoolean addPassenger = new AtomicBoolean(true);
    protected void m_20348_(Entity p_20349_) {
       if (p_20349_.m_20202_() != this) {
          throw new IllegalStateException("Use x.startRiding(y), not y.addPassenger(x)");
       } else {
+         // CraftBukkit start
+         com.google.common.base.Preconditions.checkState(!p_20349_.f_19823_.contains(this), "Circular entity riding! %s %s", this, p_20349_);
+
+         CraftEntity craft = (CraftEntity) p_20349_.getBukkitEntity().getVehicle();
+         Entity orig = craft == null ? null : craft.getHandle();
+         if (getBukkitEntity() instanceof Vehicle && p_20349_.getBukkitEntity() instanceof org.bukkit.entity.LivingEntity) {
+            VehicleEnterEvent event = new VehicleEnterEvent(
+                    (Vehicle) getBukkitEntity(),
+                    p_20349_.getBukkitEntity()
+            );
+            // Suppress during worldgen
+            if (this.valid) {
+               Bukkit.getPluginManager().callEvent(event);
+            }
+            CraftEntity craftn = (CraftEntity) p_20349_.getBukkitEntity().getVehicle();
+            Entity n = craftn == null ? null : craftn.getHandle();
+            if (event.isCancelled() || n != orig) {
+               addPassenger.set(false);
+               return;
+            }
+         }
+         // CraftBukkit end
+         // Spigot start
+         org.spigotmc.event.entity.EntityMountEvent event = new org.spigotmc.event.entity.EntityMountEvent(p_20349_.getBukkitEntity(), this.getBukkitEntity());
+         // Suppress during worldgen
+         if (this.valid) {
+            Bukkit.getPluginManager().callEvent(event);
+         }
+         if (event.isCancelled()) {
+            addPassenger.set(false);
+            return;
+         }
+         // Spigot end
          if (this.f_19823_.isEmpty()) {
             this.f_19823_ = ImmutableList.of(p_20349_);
          } else {
@@ -1810,12 +_,52 @@
          }
 
       }
-   }
-
+      addPassenger.set(true);
+   }
+
+   // Mohist start
+   protected boolean addPassengerCB(Entity entity) { // CraftBukkit
+      m_20348_(entity);
+      return addPassenger.get();
+   }
+   // Mohist end
+
+   public AtomicBoolean removePassenger = new AtomicBoolean(true);
    protected void m_20351_(Entity p_20352_) {
       if (p_20352_.m_20202_() == this) {
          throw new IllegalStateException("Use x.stopRiding(y), not y.removePassenger(x)");
       } else {
+         // CraftBukkit start
+         CraftEntity craft = (CraftEntity) p_20352_.getBukkitEntity().getVehicle();
+         Entity orig = craft == null ? null : craft.getHandle();
+         if (getBukkitEntity() instanceof Vehicle && p_20352_.getBukkitEntity() instanceof org.bukkit.entity.LivingEntity) {
+            VehicleExitEvent event = new VehicleExitEvent(
+                    (Vehicle) getBukkitEntity(),
+                    (org.bukkit.entity.LivingEntity) p_20352_.getBukkitEntity()
+            );
+            // Suppress during worldgen
+            if (this.valid) {
+               Bukkit.getPluginManager().callEvent(event);
+            }
+            CraftEntity craftn = (CraftEntity) p_20352_.getBukkitEntity().getVehicle();
+            Entity n = craftn == null ? null : craftn.getHandle();
+            if (event.isCancelled() || n != orig) {
+               removePassenger.set(false);
+               return;
+            }
+         }
+         // CraftBukkit end
+         // Spigot start
+         org.spigotmc.event.entity.EntityDismountEvent event = new org.spigotmc.event.entity.EntityDismountEvent(p_20352_.getBukkitEntity(), this.getBukkitEntity());
+         // Suppress during worldgen
+         if (this.valid) {
+            Bukkit.getPluginManager().callEvent(event);
+         }
+         if (event.isCancelled()) {
+            removePassenger.set(false);
+            return;
+         }
+         // Spigot end
          if (this.f_19823_.size() == 1 && this.f_19823_.get(0) == p_20352_) {
             this.f_19823_ = ImmutableList.of();
          } else {
@@ -1826,6 +_,7 @@
 
          p_20352_.f_19851_ = 60;
       }
+      removePassenger.set(true);
    }
 
    protected boolean m_7310_(Entity p_20354_) {
@@ -1879,6 +_,7 @@
       }
    }
 
+   // Mohist TODO
    protected void m_20157_() {
       if (this.f_19853_ instanceof ServerLevel) {
          int i = this.m_6078_();
@@ -1891,7 +_,13 @@
                this.f_19853_.m_46473_().m_6180_("portal");
                this.f_19818_ = i;
                this.m_20091_();
-               this.m_5489_(serverlevel1);
+               // CraftBukkit start
+               //if (this instanceof ServerPlayer) {
+               //   ((ServerPlayer) this).changeDimension(serverlevel1, PlayerTeleportEvent.TeleportCause.NETHER_PORTAL);
+               //} else {
+                  this.m_5489_(serverlevel1);
+               //}
+               // CraftBukkit end
                this.f_19853_.m_46473_().m_7238_();
             }
 
@@ -1957,6 +_,8 @@
       return !this.f_19823_.isEmpty();
    }
 
+   /** @deprecated Forge: Use {@link #canBeRiddenUnderFluidType(net.minecraftforge.fluids.FluidType, Entity) rider sensitive version} */
+   @Deprecated
    public boolean m_6146_() {
       return true;
    }
@@ -2006,10 +_,17 @@
    }
 
    public boolean m_20143_() {
-      return this.m_6067_() && !this.m_20069_();
+      return this.m_6067_() && !this.m_20069_() && !this.isInFluidType((fluidType, height) -> this.canSwimInFluidType(fluidType));
    }
 
    public void m_20282_(boolean p_20283_) {
+      // CraftBukkit start
+      if (valid && this.m_6069_() != p_20283_ && this instanceof LivingEntity) {
+         if (CraftEventFactory.callToggleSwimEvent((LivingEntity) this, p_20283_).isCancelled()) {
+            return;
+         }
+      }
+      // CraftBukkit end
       this.m_20115_(4, p_20283_);
    }
 
@@ -2055,15 +_,18 @@
       return this.m_5647_() != null ? this.m_5647_().m_83536_(p_20032_) : false;
    }
 
+   // CraftBukkit - start
    public void m_6842_(boolean p_20304_) {
-      this.m_20115_(5, p_20304_);
+      if (!this.persistentInvisibility) { // Prevent Minecraft from removing our invisibility flag
+         this.m_20115_(5, p_20304_);
+      }
    }
 
-   protected boolean m_20291_(int p_20292_) {
+   public boolean m_20291_(int p_20292_) {
       return (this.f_19804_.m_135370_(f_19805_) & 1 << p_20292_) != 0;
    }
 
-   protected void m_20115_(int p_20116_, boolean p_20117_) {
+   public void m_20115_(int p_20116_, boolean p_20117_) {
       byte b0 = this.f_19804_.m_135370_(f_19805_);
       if (p_20117_) {
          this.f_19804_.m_135381_(f_19805_, (byte)(b0 | 1 << p_20116_));
@@ -2074,7 +_,7 @@
    }
 
    public int m_6062_() {
-      return 300;
+      return maxAirTicks; // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
    }
 
    public int m_20146_() {
@@ -2082,7 +_,18 @@
    }
 
    public void m_20301_(int p_20302_) {
-      this.f_19804_.m_135381_(f_19832_, p_20302_);
+      // CraftBukkit start
+      EntityAirChangeEvent event = new EntityAirChangeEvent(this.getBukkitEntity(), p_20302_);
+      // Suppress during worldgen
+      if (this.valid) {
+         event.getEntity().getServer().getPluginManager().callEvent(event);
+      }
+      if (event.isCancelled() && this.m_20146_() != p_20302_){
+         this.f_19804_.markDirty(Entity.f_19832_);
+         return;
+      }
+      this.f_19804_.m_135381_(Entity.f_19832_, event.getAmount());
+      // CraftBukkit end
    }
 
    public int m_146888_() {
@@ -2108,11 +_,40 @@
 
    public void m_8038_(ServerLevel p_19927_, LightningBolt p_19928_) {
       this.m_7311_(this.f_19831_ + 1);
+      // CraftBukkit start
+      final org.bukkit.entity.Entity thisBukkitEntity = this.getBukkitEntity();
+      final org.bukkit.entity.Entity stormBukkitEntity = p_19928_.getBukkitEntity();
+      final PluginManager pluginManager = Bukkit.getPluginManager();
+      // CraftBukkit end
       if (this.f_19831_ == 0) {
-         this.m_20254_(8);
-      }
-
-      this.m_6469_(DamageSource.f_19306_, 5.0F);
+         // CraftBukkit start - Call a combust event when lightning strikes
+         EntityCombustByEntityEvent entityCombustEvent = new EntityCombustByEntityEvent(stormBukkitEntity, thisBukkitEntity, 8);
+         pluginManager.callEvent(entityCombustEvent);
+         if (!entityCombustEvent.isCancelled()) {
+            this.setSecondsOnFire(entityCombustEvent.getDuration(), false);
+         }
+         // CraftBukkit end
+      }
+
+      // CraftBukkit start
+      if (thisBukkitEntity instanceof Hanging) {
+         HangingBreakByEntityEvent hangingEvent = new HangingBreakByEntityEvent((Hanging) thisBukkitEntity, stormBukkitEntity);
+         pluginManager.callEvent(hangingEvent);
+
+         if (hangingEvent.isCancelled()) {
+            return;
+         }
+      }
+
+      if (this.m_5825_()) {
+         return;
+      }
+      CraftEventFactory.entityDamage = p_19928_;
+      if (!this.m_6469_(DamageSource.f_19306_, 5.0F)) {
+         CraftEventFactory.entityDamage = null;
+         return;
+      }
+      // CraftBukkit end
    }
 
    public void m_6845_(boolean p_20313_) {
@@ -2201,7 +_,7 @@
    }
 
    protected Component m_5677_() {
-      return this.f_19847_.m_20676_();
+      return this.m_6095_().m_20676_(); // Forge: Use getter to allow overriding by mods
    }
 
    public boolean m_7306_(Entity p_20356_) {
@@ -2257,14 +_,20 @@
 
    @Nullable
    public Entity m_5489_(ServerLevel p_20118_) {
+      return this.changeDimension(p_20118_, p_20118_.m_8871_());
+   }
+   @Nullable
+   public Entity changeDimension(ServerLevel p_20118_, net.minecraftforge.common.util.ITeleporter teleporter) {
+      if (!net.minecraftforge.common.ForgeHooks.onTravelToDimension(this, p_20118_.m_46472_())) return null;
       if (this.f_19853_ instanceof ServerLevel && !this.m_213877_()) {
          this.f_19853_.m_46473_().m_6180_("changeDimension");
          this.m_19877_();
          this.f_19853_.m_46473_().m_6180_("reposition");
-         PortalInfo portalinfo = this.m_7937_(p_20118_);
+         PortalInfo portalinfo = teleporter.getPortalInfo(this, p_20118_, this::m_7937_);
          if (portalinfo == null) {
             return null;
          } else {
+            Entity transportedEntity = teleporter.placeEntity(this, (ServerLevel) this.f_19853_, p_20118_, this.f_19857_, spawnPortal -> { //Forge: Start vanilla logic
             this.f_19853_.m_46473_().m_6182_("reloading");
             Entity entity = this.m_6095_().m_20615_(p_20118_);
             if (entity != null) {
@@ -2272,17 +_,19 @@
                entity.m_7678_(portalinfo.f_77676_.f_82479_, portalinfo.f_77676_.f_82480_, portalinfo.f_77676_.f_82481_, portalinfo.f_77678_, entity.m_146909_());
                entity.m_20256_(portalinfo.f_77677_);
                p_20118_.m_143334_(entity);
-               if (p_20118_.m_46472_() == Level.f_46430_) {
+               if (spawnPortal && p_20118_.m_46472_() == Level.f_46430_) {
                   ServerLevel.m_8617_(p_20118_);
                }
             }
+            return entity;
+            }); //Forge: End vanilla logic
 
             this.m_6089_();
             this.f_19853_.m_46473_().m_7238_();
             ((ServerLevel)this.f_19853_).m_8886_();
             p_20118_.m_8886_();
             this.f_19853_.m_46473_().m_7238_();
-            return entity;
+            return transportedEntity;
          }
       } else {
          return null;
@@ -2331,7 +_,13 @@
             blockpos = p_19923_.m_5452_(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, p_19923_.m_220360_());
          }
 
-         return new PortalInfo(new Vec3((double)blockpos.m_123341_() + 0.5D, (double)blockpos.m_123342_(), (double)blockpos.m_123343_() + 0.5D), this.m_20184_(), this.m_146908_(), this.m_146909_());
+         // CraftBukkit start
+         CraftPortalEvent event = callPortalEvent(this, p_19923_, new PositionImpl(blockpos.m_123341_() + 0.5D, blockpos.m_123342_(), blockpos.m_123343_() + 0.5D), PlayerTeleportEvent.TeleportCause.END_PORTAL, 0, 0);
+         if (event == null) {
+            return null;
+         }
+
+         return new PortalInfo(new Vec3(event.getTo().getX(), event.getTo().getY(), event.getTo().getZ()), this.m_20184_(), this.m_146908_(), this.m_146909_(), ((CraftWorld) event.getTo().getWorld()).getHandle(), event);
       }
    }
 
@@ -2339,10 +_,29 @@
       return PortalShape.m_77738_(p_20046_, p_20045_, this.m_20182_(), this.m_6972_(this.m_20089_()));
    }
 
+   // CraftBukkit start
+   protected CraftPortalEvent callPortalEvent(Entity entity, ServerLevel exitWorldServer, PositionImpl exitPosition, PlayerTeleportEvent.TeleportCause cause, int searchRadius, int creationRadius) {
+      org.bukkit.entity.Entity bukkitEntity = entity.getBukkitEntity();
+      Location enter = bukkitEntity.getLocation();
+      Location exit = new Location(exitWorldServer.getWorld(), exitPosition.m_7096_(), exitPosition.m_7098_(), exitPosition.m_7094_());
+
+      EntityPortalEvent event = new EntityPortalEvent(bukkitEntity, enter, exit, searchRadius);
+      event.getEntity().getServer().getPluginManager().callEvent(event);
+      if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !entity.m_6084_()) {
+         return null;
+      }
+      return new CraftPortalEvent(event);
+   }
+
    protected Optional<BlockUtil.FoundRectangle> m_183318_(ServerLevel p_185935_, BlockPos p_185936_, boolean p_185937_, WorldBorder p_185938_) {
       return p_185935_.m_8871_().m_192985_(p_185936_, p_185937_, p_185938_);
    }
 
+   protected Optional<BlockUtil.FoundRectangle> getExitPortal(ServerLevel worldserver, BlockPos blockposition, boolean flag, WorldBorder worldborder, int searchRadius, boolean canCreatePortal, int createRadius) {
+      return null; //worldserver.getPortalForcer().findPortalAround(blockposition, worldborder, searchRadius); // Mohist TODO
+      // CraftBukkit end
+   }
+
    public boolean m_6072_() {
       return true;
    }
@@ -2404,6 +_,7 @@
       return this.f_19821_;
    }
 
+   @Deprecated // Forge: Use FluidType sensitive version
    public boolean m_6063_() {
       return true;
    }
@@ -2468,6 +_,9 @@
       }
    }
 
+   public void teleportTo(ServerLevel handle, PositionImpl blockPos) {
+   }
+
    public boolean m_6052_() {
       return this.m_20151_();
    }
@@ -2483,8 +_,10 @@
       EntityDimensions entitydimensions = this.f_19815_;
       Pose pose = this.m_20089_();
       EntityDimensions entitydimensions1 = this.m_6972_(pose);
+      net.minecraftforge.event.entity.EntityEvent.Size sizeEvent = net.minecraftforge.event.ForgeEventFactory.getEntitySizeForge(this, pose, entitydimensions, entitydimensions1, this.m_6380_(pose, entitydimensions1));
+      entitydimensions1 = sizeEvent.getNewSize();
       this.f_19815_ = entitydimensions1;
-      this.f_19816_ = this.m_6380_(pose, entitydimensions1);
+      this.f_19816_ = sizeEvent.getNewEyeHeight();
       this.m_20090_();
       boolean flag = (double)entitydimensions1.f_20377_ <= 4.0D && (double)entitydimensions1.f_20378_ <= 4.0D;
       if (!this.f_19853_.f_46443_ && !this.f_19803_ && !this.f_19794_ && flag && (entitydimensions1.f_20377_ > entitydimensions.f_20377_ || entitydimensions1.f_20378_ > entitydimensions.f_20378_) && !(this instanceof Player)) {
@@ -2492,8 +_,9 @@
          double d0 = (double)Math.max(0.0F, entitydimensions1.f_20377_ - entitydimensions.f_20377_) + 1.0E-6D;
          double d1 = (double)Math.max(0.0F, entitydimensions1.f_20378_ - entitydimensions.f_20378_) + 1.0E-6D;
          VoxelShape voxelshape = Shapes.m_83064_(AABB.m_165882_(vec3, d0, d1, d0));
+         EntityDimensions finalEntitydimensions = entitydimensions1;
          this.f_19853_.m_151418_(this, voxelshape, vec3, (double)entitydimensions1.f_20377_, (double)entitydimensions1.f_20378_, (double)entitydimensions1.f_20377_).ifPresent((p_185956_) -> {
-            this.m_146884_(p_185956_.m_82520_(0.0D, (double)(-entitydimensions1.f_20378_) / 2.0D, 0.0D));
+            this.m_146884_(p_185956_.m_82520_(0.0D, (double)(-finalEntitydimensions.f_20378_) / 2.0D, 0.0D));
          });
       }
 
@@ -2532,7 +_,27 @@
    }
 
    public final void m_20011_(AABB p_20012_) {
-      this.f_19828_ = p_20012_;
+      // this.bb = p_20012_;
+      // CraftBukkit start - block invalid bounding boxes
+      double minX = p_20012_.f_82288_,
+              minY = p_20012_.f_82289_,
+              minZ = p_20012_.f_82290_,
+              maxX = p_20012_.f_82291_,
+              maxY = p_20012_.f_82292_,
+              maxZ = p_20012_.f_82293_;
+      double len = p_20012_.f_82291_ - p_20012_.f_82288_;
+      if (len < 0) maxX = minX;
+      if (len > 64) maxX = minX + 64.0;
+
+      len = p_20012_.f_82292_ - p_20012_.f_82289_;
+      if (len < 0) maxY = minY;
+      if (len > 64) maxY = minY + 64.0;
+
+      len = p_20012_.f_82293_ - p_20012_.f_82290_;
+      if (len < 0) maxZ = minZ;
+      if (len > 64) maxZ = minZ + 64.0;
+      this.f_19828_ = new AABB(minX, minY, minZ, maxX, maxY, maxZ);
+      // CraftBukkit end
    }
 
    protected float m_6380_(Pose p_19976_, EntityDimensions p_19977_) {
@@ -2727,7 +_,7 @@
       return SoundSource.NEUTRAL;
    }
 
-   protected int m_6101_() {
+   public int m_6101_() {
       return 1;
    }
 
@@ -2768,9 +_,17 @@
       this.f_19859_ = this.m_146908_();
    }
 
+   @Deprecated // Forge: Use no parameter version instead, only for vanilla Tags
    public boolean m_204031_(TagKey<Fluid> p_204032_, double p_204033_) {
+      this.updateFluidHeightAndDoFluidPushing();
+      if(p_204032_ == FluidTags.f_13131_) return this.isInFluidType(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+      else if (p_204032_ == FluidTags.f_13132_) return this.isInFluidType(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
+      else return false;
+   }
+
+   public void updateFluidHeightAndDoFluidPushing() {
       if (this.m_146899_()) {
-         return false;
+         return;
       } else {
          AABB aabb = this.m_20191_().m_82406_(0.001D);
          int i = Mth.m_14107_(aabb.f_82288_);
@@ -2785,25 +_,28 @@
          Vec3 vec3 = Vec3.f_82478_;
          int k1 = 0;
          BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
+         it.unimi.dsi.fastutil.objects.Object2ObjectMap<net.minecraftforge.fluids.FluidType, org.apache.commons.lang3.tuple.MutableTriple<Double, Vec3, Integer>> interimCalcs = new it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap<>(net.minecraftforge.fluids.FluidType.SIZE.get() - 1);
 
          for(int l1 = i; l1 < j; ++l1) {
             for(int i2 = k; i2 < l; ++i2) {
                for(int j2 = i1; j2 < j1; ++j2) {
                   blockpos$mutableblockpos.m_122178_(l1, i2, j2);
                   FluidState fluidstate = this.f_19853_.m_6425_(blockpos$mutableblockpos);
-                  if (fluidstate.m_205070_(p_204032_)) {
+                  net.minecraftforge.fluids.FluidType fluidType = fluidstate.getFluidType();
+                  if (!fluidType.isAir()) {
                      double d1 = (double)((float)i2 + fluidstate.m_76155_(this.f_19853_, blockpos$mutableblockpos));
                      if (d1 >= aabb.f_82289_) {
                         flag1 = true;
-                        d0 = Math.max(d1 - aabb.f_82289_, d0);
-                        if (flag) {
+                        org.apache.commons.lang3.tuple.MutableTriple<Double, Vec3, Integer> interim = interimCalcs.computeIfAbsent(fluidType, t -> org.apache.commons.lang3.tuple.MutableTriple.of(0.0D, Vec3.f_82478_, 0));
+                        interim.setLeft(Math.max(d1 - aabb.f_82289_, interim.getLeft()));
+                        if (this.isPushedByFluid(fluidType)) {
                            Vec3 vec31 = fluidstate.m_76179_(this.f_19853_, blockpos$mutableblockpos);
-                           if (d0 < 0.4D) {
-                              vec31 = vec31.m_82490_(d0);
+                           if (interim.getLeft() < 0.4D) {
+                              vec31 = vec31.m_82490_(interim.getLeft());
                            }
 
-                           vec3 = vec3.m_82549_(vec31);
-                           ++k1;
+                           interim.setMiddle(interim.getMiddle().m_82549_(vec31));
+                           interim.setRight(interim.getRight() + 1);
                         }
                      }
                   }
@@ -2811,27 +_,28 @@
             }
          }
 
-         if (vec3.m_82553_() > 0.0D) {
-            if (k1 > 0) {
-               vec3 = vec3.m_82490_(1.0D / (double)k1);
+         interimCalcs.forEach((fluidType, interim) -> {
+         if (interim.getMiddle().m_82553_() > 0.0D) {
+            if (interim.getRight() > 0) {
+               interim.setMiddle(interim.getMiddle().m_82490_(1.0D / (double)interim.getRight()));
             }
 
             if (!(this instanceof Player)) {
-               vec3 = vec3.m_82541_();
+               interim.setMiddle(interim.getMiddle().m_82541_());
             }
 
             Vec3 vec32 = this.m_20184_();
-            vec3 = vec3.m_82490_(p_204033_ * 1.0D);
+            interim.setMiddle(interim.getMiddle().m_82490_(this.getFluidMotionScale(fluidType)));
             double d2 = 0.003D;
-            if (Math.abs(vec32.f_82479_) < 0.003D && Math.abs(vec32.f_82481_) < 0.003D && vec3.m_82553_() < 0.0045000000000000005D) {
-               vec3 = vec3.m_82541_().m_82490_(0.0045000000000000005D);
+            if (Math.abs(vec32.f_82479_) < 0.003D && Math.abs(vec32.f_82481_) < 0.003D && interim.getMiddle().m_82553_() < 0.0045000000000000005D) {
+               interim.setMiddle(interim.getMiddle().m_82541_().m_82490_(0.0045000000000000005D));
             }
 
-            this.m_20256_(this.m_20184_().m_82549_(vec3));
+            this.m_20256_(this.m_20184_().m_82549_(interim.getMiddle()));
          }
 
-         this.f_19799_.put(p_204032_, d0);
-         return flag1;
+         this.setFluidTypeHeight(fluidType, interim.getLeft());
+         });
       }
    }
 
@@ -2844,7 +_,10 @@
       return !this.f_19853_.m_151572_(i, k, j, l);
    }
 
+   @Deprecated // Forge: Use getFluidTypeHeight instead
    public double m_204036_(TagKey<Fluid> p_204037_) {
+      if (p_204037_ == FluidTags.f_13131_) return getFluidTypeHeight(net.minecraftforge.common.ForgeMod.WATER_TYPE.get());
+      else if (p_204037_ == FluidTags.f_13132_) return getFluidTypeHeight(net.minecraftforge.common.ForgeMod.LAVA_TYPE.get());
       return this.f_19799_.getDouble(p_204037_);
    }
 
@@ -2970,6 +_,7 @@
 
          this.f_146801_.m_142044_();
       }
+      if (this.isAddedToWorld() && !this.f_19853_.f_46443_ && !this.m_213877_()) this.f_19853_.m_6325_((int) Math.floor(p_20344_) >> 4, (int) Math.floor(p_20346_) >> 4); // Forge - ensure target chunk is loaded.
 
    }
 
@@ -3060,7 +_,7 @@
       this.f_146801_.m_142472_(p_146876_);
    }
 
-   protected void m_146912_() {
+   public void m_146912_() {
       this.f_146795_ = null;
    }
 
@@ -3085,6 +_,103 @@
    public boolean m_142265_(Level p_146843_, BlockPos p_146844_) {
       return true;
    }
+
+   /* ================================== Forge Start =====================================*/
+
+   private boolean canUpdate = true;
+   @Override
+   public void canUpdate(boolean value) {
+      this.canUpdate = value;
+   }
+   @Override
+   public boolean canUpdate() {
+      return this.canUpdate;
+   }
+   private java.util.Collection<ItemEntity> captureDrops = null;
+   @Override
+   public java.util.Collection<ItemEntity> captureDrops() {
+      return captureDrops;
+   }
+   @Override
+   public java.util.Collection<ItemEntity> captureDrops(java.util.Collection<ItemEntity> value) {
+      java.util.Collection<ItemEntity> ret = captureDrops;
+      this.captureDrops = value;
+      return ret;
+   }
+   private CompoundTag persistentData;
+   @Override
+   public CompoundTag getPersistentData() {
+      if (persistentData == null)
+         persistentData = new CompoundTag();
+      return persistentData;
+   }
+   @Override
+   public boolean canTrample(BlockState state, BlockPos pos, float fallDistance) {
+      return f_19853_.f_46441_.m_188501_() < fallDistance - 0.5F
+          && this instanceof LivingEntity
+          && (this instanceof Player || net.minecraftforge.event.ForgeEventFactory.getMobGriefingEvent(f_19853_, this))
+          && this.m_20205_() * this.m_20205_() * this.m_20206_() > 0.512F;
+   }
+
+   /**
+    * Internal use for keeping track of entities that are tracked by a world, to
+    * allow guarantees that entity position changes will force a chunk load, avoiding
+    * potential issues with entity desyncing and bad chunk data.
+    */
+   private boolean isAddedToWorld;
+
+   @Override
+   public final boolean isAddedToWorld() { return this.isAddedToWorld; }
+
+   @Override
+   public void onAddedToWorld() { this.isAddedToWorld = true; }
+
+   @Override
+   public void onRemovedFromWorld() { this.isAddedToWorld = false; }
+
+   @Override
+   public void revive() {
+      this.m_146912_();
+      this.reviveCaps();
+   }
+
+   // no AT because of overrides
+   /**
+    * Accessor method for {@link #getEyeHeight(Pose, EntityDimensions)}
+    */
+   public float getEyeHeightAccess(Pose pose, EntityDimensions size) {
+      return this.m_6380_(pose, size);
+   }
+
+   protected Object2DoubleMap<net.minecraftforge.fluids.FluidType> forgeFluidTypeHeight = new Object2DoubleArrayMap<>(net.minecraftforge.fluids.FluidType.SIZE.get());
+   private net.minecraftforge.fluids.FluidType forgeFluidTypeOnEyes = net.minecraftforge.common.ForgeMod.EMPTY_TYPE.get();
+   protected final void setFluidTypeHeight(net.minecraftforge.fluids.FluidType type, double height) {
+      this.forgeFluidTypeHeight.put(type, height);
+   }
+   @Override
+   public final double getFluidTypeHeight(net.minecraftforge.fluids.FluidType type) {
+      return this.forgeFluidTypeHeight.getDouble(type);
+   }
+   @Override
+   public final boolean isInFluidType(java.util.function.BiPredicate<net.minecraftforge.fluids.FluidType, Double> predicate, boolean forAllTypes) {
+      return forAllTypes ? this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().allMatch(e -> predicate.test(e.getKey(), e.getDoubleValue()))
+              : this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().anyMatch(e -> predicate.test(e.getKey(), e.getDoubleValue()));
+   }
+   @Override
+   public final boolean isInFluidType() {
+      return this.forgeFluidTypeHeight.size() > 0;
+   }
+  @Override
+  public final net.minecraftforge.fluids.FluidType getEyeInFluidType() {
+      return forgeFluidTypeOnEyes;
+   }
+   @Override
+   public net.minecraftforge.fluids.FluidType getMaxHeightFluidType() {
+      return this.forgeFluidTypeHeight.object2DoubleEntrySet().stream().max(java.util.Comparator.comparingDouble(Object2DoubleMap.Entry::getDoubleValue)).map(Object2DoubleMap.Entry::getKey).orElseGet(net.minecraftforge.common.ForgeMod.EMPTY_TYPE);
+   }
+
+   /* ================================== Forge End =====================================*/
+
 
    public Level m_9236_() {
       return this.f_19853_;
