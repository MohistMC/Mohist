--- a/net/minecraft/world/World.java
+++ b/net/minecraft/world/World.java
@@ -2,10 +2,7 @@
 
 import com.google.common.collect.Lists;
 import java.io.IOException;
-import java.util.Collection;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Random;
+import java.util.*;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -20,6 +17,7 @@
 import net.minecraft.crash.ReportedException;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityType;
+import net.minecraft.entity.item.ItemEntity;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.fluid.Fluids;
 import net.minecraft.fluid.IFluidState;
@@ -27,6 +25,7 @@
 import net.minecraft.item.crafting.RecipeManager;
 import net.minecraft.nbt.CompoundNBT;
 import net.minecraft.network.IPacket;
+import net.minecraft.network.play.server.SWorldBorderPacket;
 import net.minecraft.particles.IParticleData;
 import net.minecraft.profiler.IProfiler;
 import net.minecraft.scoreboard.Scoreboard;
@@ -34,7 +33,6 @@
 import net.minecraft.tags.NetworkTagManager;
 import net.minecraft.tileentity.ITickableTileEntity;
 import net.minecraft.tileentity.TileEntity;
-import net.minecraft.tileentity.TileEntityType;
 import net.minecraft.util.DamageSource;
 import net.minecraft.util.Direction;
 import net.minecraft.util.SoundCategory;
@@ -45,6 +43,7 @@
 import net.minecraft.util.registry.Registry;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.biome.BiomeManager;
+import net.minecraft.world.border.IBorderListener;
 import net.minecraft.world.border.WorldBorder;
 import net.minecraft.world.chunk.AbstractChunkProvider;
 import net.minecraft.world.chunk.Chunk;
@@ -55,21 +54,31 @@
 import net.minecraft.world.gen.Heightmap;
 import net.minecraft.world.lighting.WorldLightManager;
 import net.minecraft.world.server.ChunkHolder;
+import net.minecraft.world.server.ServerChunkProvider;
+import net.minecraft.world.server.ServerWorld;
 import net.minecraft.world.storage.MapData;
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
+import net.minecraftforge.common.DimensionManager;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_15_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_15_R1.CraftWorld;
+import org.bukkit.craftbukkit.v1_15_R1.SpigotTimings;
+import org.bukkit.craftbukkit.v1_15_R1.block.CapturedBlockState;
+import org.bukkit.craftbukkit.v1_15_R1.block.data.CraftBlockData;
+import org.bukkit.event.block.BlockPhysicsEvent;
 
-public abstract class World implements IWorld, AutoCloseable {
+public abstract class World extends net.minecraftforge.common.capabilities.CapabilityProvider<World> implements IWorld, AutoCloseable, net.minecraftforge.common.extensions.IForgeWorld {
    protected static final Logger field_195596_d = LogManager.getLogger();
    private static final Direction[] field_200007_a = Direction.values();
    public final List<TileEntity> field_147482_g = Lists.newArrayList();
    public final List<TileEntity> field_175730_i = Lists.newArrayList();
    protected final List<TileEntity> field_147484_a = Lists.newArrayList();
-   protected final List<TileEntity> field_147483_b = Lists.newArrayList();
-   private final Thread field_217407_c;
+   protected final java.util.Set<TileEntity> field_147483_b = java.util.Collections.newSetFromMap(new java.util.IdentityHashMap<>()); // Forge: faster "contains" makes removal much more efficient
+   public final Thread field_217407_c; // private->public CraftBukkit
    private int field_73008_k;
    protected int field_73005_l = (new Random()).nextInt();
    protected final int field_73006_m = 1013904223;
@@ -79,15 +88,59 @@
    public float field_73017_q;
    public final Random field_73012_v = new Random();
    public final Dimension field_73011_w;
-   protected final AbstractChunkProvider field_73020_y;
-   protected final WorldInfo field_72986_A;
+   public final AbstractChunkProvider field_73020_y; // protected->public CraftBukkit
+   public final WorldInfo field_72986_A; // protected->public CraftBukkit
    private final IProfiler field_72984_F;
    public final boolean field_72995_K;
    protected boolean field_147481_N;
    private final WorldBorder field_175728_M;
-   private final BiomeManager field_226689_w_;
+   private BiomeManager field_226689_w_; // final->not CraftBukkit
+   public boolean restoringBlockSnapshots = false;
+   public boolean captureBlockSnapshots = false;
+   public java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot> capturedBlockSnapshots = new java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot>();
 
+   // CraftBukkit start Added the following
+   private final CraftWorld world;
+   public boolean pvpMode;
+   public boolean keepSpawnInMemory = true;
+   public org.bukkit.generator.ChunkGenerator generator;
+   public boolean captureBlockStates;
+   public boolean captureTreeGeneration;
+   public Map<BlockPos, CapturedBlockState> capturedBlockStates = new HashMap<>();
+   public Map<BlockPos, TileEntity> capturedTileEntities = new HashMap<>();
+   public List<ItemEntity> captureDrops;
+   public long ticksPerAnimalSpawns;
+   public long ticksPerMonsterSpawns;
+   public long ticksPerWaterSpawns;
+   public long ticksPerAmbientSpawns;
+   public boolean populating;
+   public final org.spigotmc.SpigotWorldConfig spigotConfig; // Spigot
+
+   public final SpigotTimings.WorldTimingsHandler timings; // Spigot
+   public static BlockPos lastPhysicsProblem; // Spigot
+
+   private org.spigotmc.TickLimiter entityLimiter;
+   private org.spigotmc.TickLimiter tileLimiter;
+   private int tileTickPosition;
+
+   public CraftWorld getWorldCB() {
+      return this.world;
+   }
+
+   public CraftServer getServerCB() {
+      return (CraftServer) Bukkit.getServer();
+   }
+
+   public Chunk getChunkIfLoaded(final int x, final int z) {
+      return ((ServerChunkProvider)this.field_73020_y).func_217205_a(x, z, false);
+   }
+
    protected World(WorldInfo p_i50005_1_, DimensionType p_i50005_2_, BiFunction<World, Dimension, AbstractChunkProvider> p_i50005_3_, IProfiler p_i50005_4_, boolean p_i50005_5_) {
+      super(World.class);
+      this.spigotConfig = new org.spigotmc.SpigotWorldConfig( p_i50005_1_.func_76065_j() ); // Spigot
+      timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
+
+      this.world = DimensionManager.getWorld(func_73046_m(), p_i50005_2_, false, false) != null ? DimensionManager.getWorld(func_73046_m(), p_i50005_2_, false, false).getWorldCB() : null;
       this.field_72984_F = p_i50005_4_;
       this.field_72986_A = p_i50005_1_;
       this.field_73011_w = p_i50005_2_.func_218270_a(this);
@@ -98,6 +151,67 @@
       this.field_226689_w_ = new BiomeManager(this, p_i50005_5_ ? p_i50005_1_.func_76063_b() : WorldInfo.func_227498_c_(p_i50005_1_.func_76063_b()), p_i50005_2_.func_227176_e_());
    }
 
+   protected World(WorldInfo info, DimensionType dimType, BiFunction<World, Dimension, AbstractChunkProvider> provider, IProfiler profilerIn, boolean remote, org.bukkit.generator.ChunkGenerator gen, org.bukkit.World.Environment env) {
+      super(World.class);
+       this.spigotConfig = new org.spigotmc.SpigotWorldConfig( info.func_76065_j() ); // Spigot
+      this.generator = gen;
+      this.world = new CraftWorld((ServerWorld) this, gen, env);
+      this.ticksPerAnimalSpawns = this.getServerCB().getTicksPerAnimalSpawns(); // CraftBukkit
+      this.ticksPerMonsterSpawns = this.getServerCB().getTicksPerMonsterSpawns(); // CraftBukkit
+      this.ticksPerWaterSpawns = this.getServerCB().getTicksPerWaterSpawns(); // CraftBukkit
+      this.ticksPerAmbientSpawns = this.getServerCB().getTicksPerAmbientSpawns(); // CraftBukkit
+      // CraftBukkit end
+      this.field_72984_F = profilerIn;
+      this.field_72986_A = info;
+      this.field_73011_w = dimType.func_218270_a(this);
+      this.field_73020_y = provider.apply(this, this.field_73011_w);
+      this.field_72995_K = remote;
+      this.field_175728_M = this.field_73011_w.func_177501_r();
+      this.field_217407_c = Thread.currentThread();
+      this.field_226689_w_ = new BiomeManager(this, remote ? info.func_76063_b() : WorldInfo.func_227498_c_(info.func_76063_b()), dimType.func_227176_e_());
+      // CraftBukkit start
+      func_175723_af().world = (ServerWorld) this;
+      // From PlayerList.setPlayerFileData
+      this.func_175723_af().func_177737_a(new IBorderListener() {
+         @Override
+         public void func_177694_a(final WorldBorder worldborder, final double d0) {
+            World.this.getServerCB().getHandle().sendAll(new SWorldBorderPacket(worldborder, SWorldBorderPacket.Action.SET_SIZE), worldborder.world);
+         }
+
+         @Override
+         public void func_177692_a(final WorldBorder worldborder, final double d0, final double d1, final long i) {
+            World.this.getServerCB().getHandle().sendAll(new SWorldBorderPacket(worldborder, SWorldBorderPacket.Action.LERP_SIZE), worldborder.world);
+         }
+
+         @Override
+         public void func_177693_a(final WorldBorder worldborder, final double d0, final double d1) {
+            World.this.getServerCB().getHandle().sendAll(new SWorldBorderPacket(worldborder, SWorldBorderPacket.Action.SET_CENTER), worldborder.world);
+         }
+
+         @Override
+         public void func_177691_a(final WorldBorder worldborder, final int i) {
+            World.this.getServerCB().getHandle().sendAll(new SWorldBorderPacket(worldborder, SWorldBorderPacket.Action.SET_WARNING_TIME), worldborder.world);
+         }
+
+         @Override
+         public void func_177690_b(final WorldBorder worldborder, final int i) {
+            World.this.getServerCB().getHandle().sendAll(new SWorldBorderPacket(worldborder, SWorldBorderPacket.Action.SET_WARNING_BLOCKS), worldborder.world);
+   }
+
+         @Override
+         public void func_177696_b(final WorldBorder worldborder, final double d0) {
+         }
+
+         @Override
+         public void func_177695_c(final WorldBorder worldborder, final double d0) {
+         }
+      });
+      // CraftBukkit end
+      timings = new SpigotTimings.WorldTimingsHandler(this); // Spigot - code below can generate new world and access timings
+      this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
+      this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
+   }
+
    public boolean func_201670_d() {
       return this.field_72995_K;
    }
@@ -151,6 +265,17 @@
    }
 
    public boolean func_180501_a(BlockPos p_180501_1_, BlockState p_180501_2_, int p_180501_3_) {
+      // CraftBukkit start - tree generation
+      if (this.captureTreeGeneration) {
+         CapturedBlockState blockstate = capturedBlockStates.get(p_180501_1_);
+         if (blockstate == null) {
+            blockstate = CapturedBlockState.getTreeBlockState(this, p_180501_1_, p_180501_3_);
+            this.capturedBlockStates.put(p_180501_1_.func_185334_h(), blockstate);
+         }
+         blockstate.setData(p_180501_2_);
+         return true;
+      }
+      // CraftBukkit end
       if (func_189509_E(p_180501_1_)) {
          return false;
       } else if (!this.field_72995_K && this.field_72986_A.func_76067_t() == WorldType.field_180272_g) {
@@ -158,23 +283,113 @@
       } else {
          Chunk chunk = this.func_175726_f(p_180501_1_);
          Block block = p_180501_2_.func_177230_c();
-         BlockState blockstate = chunk.func_177436_a(p_180501_1_, p_180501_2_, (p_180501_3_ & 64) != 0);
+         // CraftBukkit start - capture blockstates
+         boolean captured = false;
+         if (this.captureBlockStates && !this.capturedBlockStates.containsKey(p_180501_1_)) {
+            CapturedBlockState blockstate = CapturedBlockState.getBlockState(this, p_180501_1_, p_180501_3_);
+            this.capturedBlockStates.put(p_180501_1_.func_185334_h(), blockstate);
+            captured = true;
+         }
+         // CraftBukkit end
+         p_180501_1_ = p_180501_1_.func_185334_h(); // Forge - prevent mutable BlockPos leaks
+         net.minecraftforge.common.util.BlockSnapshot blockSnapshot = null;
+         if (this.captureBlockSnapshots && !this.field_72995_K) {
+            blockSnapshot = net.minecraftforge.common.util.BlockSnapshot.getBlockSnapshot(this, p_180501_1_, p_180501_3_);
+            this.capturedBlockSnapshots.add(blockSnapshot);
+         }
+
+         BlockState old = func_180495_p(p_180501_1_);
+         int oldLight = old.getLightValue(this, p_180501_1_);
+         int oldOpacity = old.func_200016_a(this, p_180501_1_);
+
+         BlockState blockstate = chunk.setBlockState(p_180501_1_, p_180501_2_, (p_180501_3_ & 64) != 0, (p_180501_3_ & 1024) == 0); // CraftBukkit custom NO_PLACE flag
          if (blockstate == null) {
+            // CraftBukkit start - remove blockstate if failed (or the same)
+            if (this.captureBlockStates && captured) {
+               this.capturedBlockStates.remove(p_180501_1_);
+            }
+            // CraftBukkit end
+            if (blockSnapshot != null) this.capturedBlockSnapshots.remove(blockSnapshot);
             return false;
          } else {
             BlockState blockstate1 = this.func_180495_p(p_180501_1_);
-            if (blockstate1 != blockstate && (blockstate1.func_200016_a(this, p_180501_1_) != blockstate.func_200016_a(this, p_180501_1_) || blockstate1.func_185906_d() != blockstate.func_185906_d() || blockstate1.func_215691_g() || blockstate.func_215691_g())) {
+            if (blockstate1 != blockstate && (blockstate1.func_200016_a(this, p_180501_1_) != oldOpacity || blockstate1.getLightValue(this, p_180501_1_) != oldLight || blockstate1.func_215691_g() || blockstate.func_215691_g())) {
                this.field_72984_F.func_76320_a("queueCheckLight");
                this.func_72863_F().func_212863_j_().func_215568_a(p_180501_1_);
                this.field_72984_F.func_76319_b();
             }
 
+            // CraftBukkit start
+            if (!this.captureBlockStates) {// Don't notify clients or update physics while capturing blockstates
+               // Modularize client and physic updates
+               // Spigot start
+               try {
+                  notifyAndUpdatePhysics(p_180501_1_, chunk, blockstate, p_180501_2_, blockstate1, p_180501_3_);
+               } catch (StackOverflowError ex) {
+                  lastPhysicsProblem = new BlockPos(p_180501_1_);
+               }
+               // Spigot end
+            }
+            return true;
+         }
+      }
+   }
+
+   // CraftBukkit start - Split off from above in order to directly send client and physic updates
+   public void notifyAndUpdatePhysics(BlockPos blockposition, Chunk chunk, BlockState oldBlock, BlockState newBlock, BlockState actualBlock, int i) {
+      BlockState iblockdata = newBlock;
+      BlockState iblockdata1 = oldBlock;
+      BlockState iblockdata2 = actualBlock;
+      if (iblockdata2 == iblockdata) {
+         if (iblockdata1 != iblockdata2) {
+            this.func_225319_b(blockposition, iblockdata1, iblockdata2);
+         }
+         if ((i & 2) != 0 && (!this.field_72995_K || (i & 4) == 0) && (this.field_72995_K || chunk == null || (chunk.func_217321_u() != null && chunk.func_217321_u().func_219065_a(ChunkHolder.LocationType.TICKING)))) { // allow chunk to be null here as chunk.isReady() is false when we send our notification during block placement
+            this.func_184138_a(blockposition, iblockdata1, iblockdata, i);
+         }
+         if (!this.field_72995_K && (i & 1) != 0) {
+            this.func_195592_c(blockposition, iblockdata1.func_177230_c());
+            if (iblockdata.func_185912_n()) {
+               this.func_175666_e(blockposition, newBlock.func_177230_c());
+            }
+         }
+
+         if ((i & 16) == 0) {
+            int j = i & -2;
+
+            // CraftBukkit start
+            iblockdata1.func_196948_b(this, blockposition, j); // Don't call an event for the old block to limit event spam
+            CraftWorld world = ((ServerWorld) this).getWorldCB();
+            if (world != null) {
+               BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(blockposition.func_177958_n(), blockposition.func_177956_o(), blockposition.func_177952_p()), CraftBlockData.fromData(iblockdata));
+               this.getServerCB().getPluginManager().callEvent(event);
+
+               if (event.isCancelled()) {
+                  return;
+               }
+            }
+            // CraftBukkit end
+            iblockdata.func_196946_a(this, blockposition, j);
+            iblockdata.func_196948_b(this, blockposition, j);
+         }
+         this.func_217393_a(blockposition, iblockdata1, iblockdata2);
+      }
+   }
+   // CraftBukkit end
+
+   // Split off from original setBlockState(BlockPos, BlockState, int) method in order to directly send client and physic updates
+   public void markAndNotifyBlock(BlockPos p_180501_1_, @Nullable Chunk chunk, BlockState blockstate, BlockState p_180501_2_, int p_180501_3_)
+   {
+      Block block = p_180501_2_.func_177230_c();
+      BlockState blockstate1 = func_180495_p(p_180501_1_);
+      {
+         {
             if (blockstate1 == p_180501_2_) {
                if (blockstate != blockstate1) {
                   this.func_225319_b(p_180501_1_, blockstate, blockstate1);
                }
 
-               if ((p_180501_3_ & 2) != 0 && (!this.field_72995_K || (p_180501_3_ & 4) == 0) && (this.field_72995_K || chunk.func_217321_u() != null && chunk.func_217321_u().func_219065_a(ChunkHolder.LocationType.TICKING))) {
+               if ((p_180501_3_ & 2) != 0 && (!this.field_72995_K || (p_180501_3_ & 4) == 0) && (this.field_72995_K || chunk == null || chunk.func_217321_u() != null && chunk.func_217321_u().func_219065_a(ChunkHolder.LocationType.TICKING))) {
                   this.func_184138_a(p_180501_1_, blockstate, p_180501_2_, p_180501_3_);
                }
 
@@ -194,8 +409,6 @@
 
                this.func_217393_a(p_180501_1_, blockstate, blockstate1);
             }
-
-            return true;
          }
       }
    }
@@ -210,13 +423,13 @@
 
    public boolean func_225521_a_(BlockPos p_225521_1_, boolean p_225521_2_, @Nullable Entity p_225521_3_) {
       BlockState blockstate = this.func_180495_p(p_225521_1_);
-      if (blockstate.func_196958_f()) {
+      if (blockstate.isAir(this, p_225521_1_)) {
          return false;
       } else {
          IFluidState ifluidstate = this.func_204610_c(p_225521_1_);
          this.func_217379_c(2001, p_225521_1_, Block.func_196246_j(blockstate));
          if (p_225521_2_) {
-            TileEntity tileentity = blockstate.func_177230_c().func_149716_u() ? this.func_175625_s(p_225521_1_) : null;
+            TileEntity tileentity = blockstate.hasTileEntity() ? this.func_175625_s(p_225521_1_) : null;
             Block.func_220054_a(blockstate, this, p_225521_1_, tileentity, p_225521_3_, ItemStack.field_190927_a);
          }
 
@@ -232,6 +445,11 @@
 
    public void func_195592_c(BlockPos p_195592_1_, Block p_195592_2_) {
       if (this.field_72986_A.func_76067_t() != WorldType.field_180272_g) {
+         // CraftBukkit start
+         if (populating) {
+            return;
+         }
+         // CraftBukkit end
          this.func_195593_d(p_195592_1_, p_195592_2_);
       }
 
@@ -241,6 +459,8 @@
    }
 
    public void func_195593_d(BlockPos p_195593_1_, Block p_195593_2_) {
+      if (net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_195593_1_, this.func_180495_p(p_195593_1_), java.util.EnumSet.allOf(Direction.class), false).isCanceled())
+         return;
       this.func_190524_a(p_195593_1_.func_177976_e(), p_195593_2_, p_195593_1_);
       this.func_190524_a(p_195593_1_.func_177974_f(), p_195593_2_, p_195593_1_);
       this.func_190524_a(p_195593_1_.func_177977_b(), p_195593_2_, p_195593_1_);
@@ -250,6 +470,11 @@
    }
 
    public void func_175695_a(BlockPos p_175695_1_, Block p_175695_2_, Direction p_175695_3_) {
+      java.util.EnumSet<Direction> directions = java.util.EnumSet.allOf(Direction.class);
+      directions.remove(p_175695_3_);
+      if (net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_175695_1_, this.func_180495_p(p_175695_1_), directions, false).isCanceled())
+         return;
+
       if (p_175695_3_ != Direction.WEST) {
          this.func_190524_a(p_175695_1_.func_177976_e(), p_175695_2_, p_175695_1_);
       }
@@ -281,15 +506,30 @@
          BlockState blockstate = this.func_180495_p(p_190524_1_);
 
          try {
+            // CraftBukkit start
+            CraftWorld world = ((ServerWorld) this).getWorldCB();
+            if (world != null) {
+               BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(p_190524_1_.func_177958_n(), p_190524_1_.func_177956_o(), p_190524_1_.func_177952_p()), CraftBlockData.fromData(blockstate), world.getBlockAt(p_190524_3_.func_177958_n(), p_190524_3_.func_177956_o(), p_190524_3_.func_177952_p()));
+               this.getServerCB().getPluginManager().callEvent(event);
+
+               if (event.isCancelled()) {
+                  return;
+               }
+            }
+            // CraftBukkit end
             blockstate.func_215697_a(this, p_190524_1_, p_190524_2_, p_190524_3_, false);
+            // Spigot Start
+         } catch (StackOverflowError ex) {
+            lastPhysicsProblem = new BlockPos(p_190524_1_);
+            // Spigot End
          } catch (Throwable throwable) {
             CrashReport crashreport = CrashReport.func_85055_a(throwable, "Exception while updating neighbours");
             CrashReportCategory crashreportcategory = crashreport.func_85058_a("Block being updated");
             crashreportcategory.func_189529_a("Source block type", () -> {
                try {
-                  return String.format("ID #%s (%s // %s)", Registry.field_212618_g.func_177774_c(p_190524_2_), p_190524_2_.func_149739_a(), p_190524_2_.getClass().getCanonicalName());
+                  return String.format("ID #%s (%s // %s)", p_190524_2_.getRegistryName(), p_190524_2_.func_149739_a(), p_190524_2_.getClass().getCanonicalName());
                } catch (Throwable var2) {
-                  return "ID #" + Registry.field_212618_g.func_177774_c(p_190524_2_);
+                  return "ID #" + p_190524_2_.getRegistryName();
                }
             });
             CrashReportCategory.func_175750_a(crashreportcategory, p_190524_1_, blockstate);
@@ -318,6 +558,14 @@
    }
 
    public BlockState func_180495_p(BlockPos p_180495_1_) {
+      // CraftBukkit start - tree generation
+      if (captureTreeGeneration) {
+         CapturedBlockState previous = capturedBlockStates.get(p_180495_1_);
+         if (previous != null) {
+            return previous.getHandle();
+         }
+      }
+      // CraftBukkit end
       if (func_189509_E(p_180495_1_)) {
          return Blocks.field_201940_ji.func_176223_P();
       } else {
@@ -336,11 +584,11 @@
    }
 
    public boolean func_72935_r() {
-      return this.field_73011_w.func_186058_p() == DimensionType.field_223227_a_ && this.field_73008_k < 4;
+      return this.field_73011_w.func_186058_p().getType() == DimensionType.field_223227_a_ && this.field_73008_k < 4; // CraftBukkit
    }
 
    public boolean func_226690_K_() {
-      return this.field_73011_w.func_186058_p() == DimensionType.field_223227_a_ && !this.func_72935_r();
+      return this.field_73011_w.func_186058_p().getType() == DimensionType.field_223227_a_ && !this.func_72935_r(); // CraftBukkit
    }
 
    public void func_184133_a(@Nullable PlayerEntity p_184133_1_, BlockPos p_184133_2_, SoundEvent p_184133_3_, SoundCategory p_184133_4_, float p_184133_5_, float p_184133_6_) {
@@ -373,10 +621,12 @@
    }
 
    public boolean func_175700_a(TileEntity p_175700_1_) {
+      if (p_175700_1_.func_145831_w() != this) p_175700_1_.func_226984_a_(this, p_175700_1_.func_174877_v()); // Forge - set the world early as vanilla doesn't set it until next tick
       if (this.field_147481_N) {
          field_195596_d.error("Adding block entity while ticking: {} @ {}", () -> {
             return Registry.field_212626_o.func_177774_c(p_175700_1_.func_200662_C());
          }, p_175700_1_::func_174877_v);
+         return field_147484_a.add(p_175700_1_); // Forge: wait to add new TE if we're currently processing existing ones
       }
 
       boolean flag = this.field_147482_g.add(p_175700_1_);
@@ -384,6 +634,8 @@
          this.field_175730_i.add(p_175700_1_);
       }
 
+      p_175700_1_.onLoad();
+
       if (this.field_72995_K) {
          BlockPos blockpos = p_175700_1_.func_174877_v();
          BlockState blockstate = this.func_180495_p(blockpos);
@@ -395,6 +647,7 @@
 
    public void func_147448_a(Collection<TileEntity> p_147448_1_) {
       if (this.field_147481_N) {
+         p_147448_1_.stream().filter(te -> te.func_145831_w() != this).forEach(te -> te.func_226984_a_(this, te.func_174877_v())); // Forge - set the world early as vanilla doesn't set it until next tick
          this.field_147484_a.addAll(p_147448_1_);
       } else {
          for(TileEntity tileentity : p_147448_1_) {
@@ -407,24 +660,39 @@
    public void func_217391_K() {
       IProfiler iprofiler = this.func_217381_Z();
       iprofiler.func_76320_a("blockEntities");
+      timings.tileEntityTick.startTiming(); // Spigot
+      this.field_147481_N = true;// Forge: Move above remove to prevent CMEs
       if (!this.field_147483_b.isEmpty()) {
+         this.field_147483_b.forEach(e -> e.onChunkUnloaded());
          this.field_175730_i.removeAll(this.field_147483_b);
          this.field_147482_g.removeAll(this.field_147483_b);
          this.field_147483_b.clear();
       }
 
-      this.field_147481_N = true;
-      Iterator<TileEntity> iterator = this.field_175730_i.iterator();
-
-      while(iterator.hasNext()) {
-         TileEntity tileentity = iterator.next();
+      // Spigot start
+      int tilesThisCycle = 0;
+      for (tileLimiter.initTick();
+          tilesThisCycle <  field_175730_i.size() && (tilesThisCycle % 10 != 0 || tileLimiter.shouldContinue());
+          tileTickPosition++, tilesThisCycle++) {
+         tileTickPosition = (tileTickPosition < field_175730_i.size()) ? tileTickPosition : 0;
+         TileEntity tileentity = (TileEntity) this.field_175730_i.get(tileTickPosition);
+         // Spigot start
+         if (tileentity == null) {
+            getServerCB().getLogger().severe("Spigot has detected a null entity and has removed it, preventing a crash");
+            tilesThisCycle--;
+            this.field_175730_i.remove(tileTickPosition--);
+            continue;
+         }
+         // Spigot end
          if (!tileentity.func_145837_r() && tileentity.func_145830_o()) {
             BlockPos blockpos = tileentity.func_174877_v();
             if (this.field_73020_y.func_222866_a(blockpos) && this.func_175723_af().func_177746_a(blockpos)) {
                try {
+                  net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackStart(tileentity);
                   iprofiler.func_194340_a(() -> {
-                     return String.valueOf((Object)TileEntityType.func_200969_a(tileentity.func_200662_C()));
+                     return String.valueOf(tileentity.func_200662_C().getRegistryName());
                   });
+                  tileentity.tickTimer.startTiming(); // Spigot
                   if (tileentity.func_200662_C().func_223045_a(this.func_180495_p(blockpos).func_177230_c())) {
                      ((ITickableTileEntity)tileentity).func_73660_a();
                   } else {
@@ -436,35 +704,62 @@
                   CrashReport crashreport = CrashReport.func_85055_a(throwable, "Ticking block entity");
                   CrashReportCategory crashreportcategory = crashreport.func_85058_a("Block entity being ticked");
                   tileentity.func_145828_a(crashreportcategory);
+                  if (net.minecraftforge.common.ForgeConfig.SERVER.removeErroringTileEntities.get()) {
+                     LogManager.getLogger().fatal("{}", crashreport.func_71502_e());
+                     tileentity.func_145843_s();
+                     this.func_175713_t(tileentity.func_174877_v());
+                  } else
                   throw new ReportedException(crashreport);
                }
+               finally {
+                  // Spigot start
+                  tileentity.tickTimer.stopTiming();
+                  // Spigot end
+                  net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackEnd(tileentity);
+               }
             }
          }
 
          if (tileentity.func_145837_r()) {
-            iterator.remove();
+            // Spigot start
+            tilesThisCycle--;
+            this.field_175730_i.remove(tileTickPosition--);
+            // Spigot end
             this.field_147482_g.remove(tileentity);
             if (this.func_175667_e(tileentity.func_174877_v())) {
-               this.func_175726_f(tileentity.func_174877_v()).func_177425_e(tileentity.func_174877_v());
+               //Forge: Bugfix: If we set the tile entity it immediately sets it in the chunk, so we could be desyned
+               Chunk chunk = this.func_175726_f(tileentity.func_174877_v());
+               if (chunk.func_177424_a(tileentity.func_174877_v(), Chunk.CreateEntityType.CHECK) == tileentity)
+                  chunk.func_177425_e(tileentity.func_174877_v());
             }
          }
       }
 
+      timings.tileEntityTick.stopTiming(); // Spigot
+      timings.tileEntityPending.startTiming(); // Spigot
       this.field_147481_N = false;
       iprofiler.func_219895_b("pendingBlockEntities");
       if (!this.field_147484_a.isEmpty()) {
          for(int i = 0; i < this.field_147484_a.size(); ++i) {
             TileEntity tileentity1 = this.field_147484_a.get(i);
             if (!tileentity1.func_145837_r()) {
-               if (!this.field_147482_g.contains(tileentity1)) {
-                  this.func_175700_a(tileentity1);
+               /* CraftBukkit start - Order matters, moved down
+               if (!this.loadedTileEntityList.contains(tileentity1)) {
+                  this.addTileEntity(tileentity1);
                }
+               // CraftBukkit end */
 
                if (this.func_175667_e(tileentity1.func_174877_v())) {
                   Chunk chunk = this.func_175726_f(tileentity1.func_174877_v());
                   BlockState blockstate = chunk.func_180495_p(tileentity1.func_174877_v());
                   chunk.func_177426_a(tileentity1.func_174877_v(), tileentity1);
                   this.func_184138_a(tileentity1.func_174877_v(), blockstate, blockstate, 3);
+                  // CraftBukkit start
+                  // From above, don't screw this up - SPIGOT-1746
+                  if (!this.field_147482_g.contains(tileentity1)) {
+                     this.func_175700_a(tileentity1);
+                  }
+                  // CraftBukkit end
                }
             }
          }
@@ -472,17 +767,23 @@
          this.field_147484_a.clear();
       }
 
+      timings.tileEntityPending.stopTiming(); // Spigot
       iprofiler.func_76319_b();
    }
 
    public void func_217390_a(Consumer<Entity> p_217390_1_, Entity p_217390_2_) {
       try {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackStart(p_217390_2_);
+         SpigotTimings.tickEntityTimer.startTiming(); // Spigot
          p_217390_1_.accept(p_217390_2_);
+         SpigotTimings.tickEntityTimer.stopTiming(); // Spigot
       } catch (Throwable throwable) {
          CrashReport crashreport = CrashReport.func_85055_a(throwable, "Ticking entity");
          CrashReportCategory crashreportcategory = crashreport.func_85058_a("Entity being ticked");
          p_217390_2_.func_85029_a(crashreportcategory);
          throw new ReportedException(crashreport);
+      } finally {
+         net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackEnd(p_217390_2_);
       }
    }
 
@@ -499,7 +800,7 @@
             for(int l1 = k; l1 < l; ++l1) {
                for(int i2 = i1; i2 < j1; ++i2) {
                   BlockState blockstate = this.func_180495_p(blockpos$pooledmutable.func_181079_c(k1, l1, i2));
-                  if (!blockstate.func_196958_f()) {
+                  if (!blockstate.isAir(this, blockpos$pooledmutable)) {
                      boolean flag = true;
                      return flag;
                   }
@@ -523,8 +824,8 @@
             for(int k1 = i; k1 < j; ++k1) {
                for(int l1 = k; l1 < l; ++l1) {
                   for(int i2 = i1; i2 < j1; ++i2) {
-                     Block block = this.func_180495_p(blockpos$pooledmutable.func_181079_c(k1, l1, i2)).func_177230_c();
-                     if (block == Blocks.field_150480_ab || block == Blocks.field_150353_l) {
+                     BlockState state = this.func_180495_p(blockpos$pooledmutable.func_181079_c(k1, l1, i2));
+                     if (state.isBurning(this, blockpos$pooledmutable)) {
                         boolean flag = true;
                         return flag;
                      }
@@ -594,6 +895,7 @@
       if (p_217401_2_ != null) {
          explosion.func_199592_a(p_217401_2_);
       }
+      if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
 
       explosion.func_77278_a();
       explosion.func_77279_a(true);
@@ -617,23 +919,36 @@
    }
 
    @Nullable
+   // CraftBukkit start
    public TileEntity func_175625_s(BlockPos p_175625_1_) {
-      if (func_189509_E(p_175625_1_)) {
+      return getTileEntity(p_175625_1_, true);
+   }
+
+   @Nullable
+   public TileEntity getTileEntity(BlockPos pos, boolean validate) {
+      // CraftBukkit end
+      if (func_189509_E(pos)) {
          return null;
       } else if (!this.field_72995_K && Thread.currentThread() != this.field_217407_c) {
          return null;
       } else {
+         // CraftBukkit start
+         if(capturedTileEntities.containsKey(pos)){
+            return capturedTileEntities.get(pos);
+         }
+         // CraftBukkit end
+
          TileEntity tileentity = null;
          if (this.field_147481_N) {
-            tileentity = this.func_189508_F(p_175625_1_);
+            tileentity = this.func_189508_F(pos);
          }
 
          if (tileentity == null) {
-            tileentity = this.func_175726_f(p_175625_1_).func_177424_a(p_175625_1_, Chunk.CreateEntityType.IMMEDIATE);
+            tileentity = this.func_175726_f(pos).func_177424_a(pos, Chunk.CreateEntityType.IMMEDIATE);
          }
 
          if (tileentity == null) {
-            tileentity = this.func_189508_F(p_175625_1_);
+            tileentity = this.func_189508_F(pos);
          }
 
          return tileentity;
@@ -654,7 +969,15 @@
 
    public void func_175690_a(BlockPos p_175690_1_, @Nullable TileEntity p_175690_2_) {
       if (!func_189509_E(p_175690_1_)) {
+         p_175690_1_ = p_175690_1_.func_185334_h(); // Forge - prevent mutable BlockPos leaks
          if (p_175690_2_ != null && !p_175690_2_.func_145837_r()) {
+            // CraftBukkit start
+            if (captureBlockStates) {
+               p_175690_2_.func_226984_a_(this, p_175690_1_);
+               capturedTileEntities.put(p_175690_1_.func_185334_h(), p_175690_2_);
+               return;
+            }
+            // CraftBukkit end
             if (this.field_147481_N) {
                p_175690_2_.func_226984_a_(this, p_175690_1_);
                Iterator<TileEntity> iterator = this.field_147484_a.iterator();
@@ -669,7 +992,8 @@
 
                this.field_147484_a.add(p_175690_2_);
             } else {
-               this.func_175726_f(p_175690_1_).func_177426_a(p_175690_1_, p_175690_2_);
+               Chunk chunk = this.func_175726_f(p_175690_1_);
+               if (chunk != null) chunk.func_177426_a(p_175690_1_, p_175690_2_);
                this.func_175700_a(p_175690_2_);
             }
          }
@@ -678,10 +1002,12 @@
    }
 
    public void func_175713_t(BlockPos p_175713_1_) {
-      TileEntity tileentity = this.func_175625_s(p_175713_1_);
+      TileEntity tileentity = this.getTileEntity(p_175713_1_, false);  // CraftBukkit
       if (tileentity != null && this.field_147481_N) {
          tileentity.func_145843_s();
          this.field_147484_a.remove(tileentity);
+         if (!(tileentity instanceof ITickableTileEntity)) //Forge: If they are not tickable they wont be removed in the update loop.
+            this.field_147482_g.remove(tileentity);
       } else {
          if (tileentity != null) {
             this.field_147484_a.remove(tileentity);
@@ -691,7 +1017,7 @@
 
          this.func_175726_f(p_175713_1_).func_177425_e(p_175713_1_);
       }
-
+      this.func_175666_e(p_175713_1_, func_180495_p(p_175713_1_).func_177230_c()); //Notify neighbors of changes
    }
 
    public boolean func_195588_v(BlockPos p_195588_1_) {
@@ -716,9 +1042,14 @@
 
    public void func_72891_a(boolean p_72891_1_, boolean p_72891_2_) {
       this.func_72863_F().func_217203_a(p_72891_1_, p_72891_2_);
+      this.func_201675_m().setAllowedSpawnTypes(p_72891_1_, p_72891_2_);
    }
 
    protected void func_72947_a() {
+      this.field_73011_w.calculateInitialWeather();
+   }
+
+   public void calculateInitialWeatherBody() {
       if (this.field_72986_A.func_76059_o()) {
          this.field_73004_o = 1.0F;
          if (this.field_72986_A.func_76061_m()) {
@@ -740,10 +1071,10 @@
    public List<Entity> func_175674_a(@Nullable Entity p_175674_1_, AxisAlignedBB p_175674_2_, @Nullable Predicate<? super Entity> p_175674_3_) {
       this.func_217381_Z().func_230035_c_("getEntities");
       List<Entity> list = Lists.newArrayList();
-      int i = MathHelper.func_76128_c((p_175674_2_.field_72340_a - 2.0D) / 16.0D);
-      int j = MathHelper.func_76128_c((p_175674_2_.field_72336_d + 2.0D) / 16.0D);
-      int k = MathHelper.func_76128_c((p_175674_2_.field_72339_c - 2.0D) / 16.0D);
-      int l = MathHelper.func_76128_c((p_175674_2_.field_72334_f + 2.0D) / 16.0D);
+      int i = MathHelper.func_76128_c((p_175674_2_.field_72340_a - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.func_76128_c((p_175674_2_.field_72336_d + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.func_76128_c((p_175674_2_.field_72339_c - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.func_76128_c((p_175674_2_.field_72334_f + getMaxEntityRadius()) / 16.0D);
 
       for(int i1 = i; i1 <= j; ++i1) {
          for(int j1 = k; j1 <= l; ++j1) {
@@ -759,10 +1090,10 @@
 
    public <T extends Entity> List<T> func_217394_a(@Nullable EntityType<T> p_217394_1_, AxisAlignedBB p_217394_2_, Predicate<? super T> p_217394_3_) {
       this.func_217381_Z().func_230035_c_("getEntities");
-      int i = MathHelper.func_76128_c((p_217394_2_.field_72340_a - 2.0D) / 16.0D);
-      int j = MathHelper.func_76143_f((p_217394_2_.field_72336_d + 2.0D) / 16.0D);
-      int k = MathHelper.func_76128_c((p_217394_2_.field_72339_c - 2.0D) / 16.0D);
-      int l = MathHelper.func_76143_f((p_217394_2_.field_72334_f + 2.0D) / 16.0D);
+      int i = MathHelper.func_76128_c((p_217394_2_.field_72340_a - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.func_76143_f((p_217394_2_.field_72336_d + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.func_76128_c((p_217394_2_.field_72339_c - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.func_76143_f((p_217394_2_.field_72334_f + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
 
       for(int i1 = i; i1 < j; ++i1) {
@@ -779,10 +1110,10 @@
 
    public <T extends Entity> List<T> func_175647_a(Class<? extends T> p_175647_1_, AxisAlignedBB p_175647_2_, @Nullable Predicate<? super T> p_175647_3_) {
       this.func_217381_Z().func_230035_c_("getEntities");
-      int i = MathHelper.func_76128_c((p_175647_2_.field_72340_a - 2.0D) / 16.0D);
-      int j = MathHelper.func_76143_f((p_175647_2_.field_72336_d + 2.0D) / 16.0D);
-      int k = MathHelper.func_76128_c((p_175647_2_.field_72339_c - 2.0D) / 16.0D);
-      int l = MathHelper.func_76143_f((p_175647_2_.field_72334_f + 2.0D) / 16.0D);
+      int i = MathHelper.func_76128_c((p_175647_2_.field_72340_a - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.func_76143_f((p_175647_2_.field_72336_d + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.func_76128_c((p_175647_2_.field_72339_c - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.func_76143_f((p_175647_2_.field_72334_f + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
       AbstractChunkProvider abstractchunkprovider = this.func_72863_F();
 
@@ -800,10 +1131,10 @@
 
    public <T extends Entity> List<T> func_225316_b(Class<? extends T> p_225316_1_, AxisAlignedBB p_225316_2_, @Nullable Predicate<? super T> p_225316_3_) {
       this.func_217381_Z().func_230035_c_("getLoadedEntities");
-      int i = MathHelper.func_76128_c((p_225316_2_.field_72340_a - 2.0D) / 16.0D);
-      int j = MathHelper.func_76143_f((p_225316_2_.field_72336_d + 2.0D) / 16.0D);
-      int k = MathHelper.func_76128_c((p_225316_2_.field_72339_c - 2.0D) / 16.0D);
-      int l = MathHelper.func_76143_f((p_225316_2_.field_72334_f + 2.0D) / 16.0D);
+      int i = MathHelper.func_76128_c((p_225316_2_.field_72340_a - getMaxEntityRadius()) / 16.0D);
+      int j = MathHelper.func_76143_f((p_225316_2_.field_72336_d + getMaxEntityRadius()) / 16.0D);
+      int k = MathHelper.func_76128_c((p_225316_2_.field_72339_c - getMaxEntityRadius()) / 16.0D);
+      int l = MathHelper.func_76143_f((p_225316_2_.field_72334_f + getMaxEntityRadius()) / 16.0D);
       List<T> list = Lists.newArrayList();
       AbstractChunkProvider abstractchunkprovider = this.func_72863_F();
 
@@ -830,7 +1161,8 @@
    }
 
    public int func_181545_F() {
-      return 63;
+      // FORGE: Allow modded dimensions to customize this value via Dimension
+      return this.func_201675_m().getSeaLevel();
    }
 
    public World func_201672_e() {
@@ -878,7 +1210,7 @@
 
    public int func_175651_c(BlockPos p_175651_1_, Direction p_175651_2_) {
       BlockState blockstate = this.func_180495_p(p_175651_1_);
-      return blockstate.func_215686_e(this, p_175651_1_) ? this.func_175676_y(p_175651_1_) : blockstate.func_185911_a(this, p_175651_1_, p_175651_2_);
+      return blockstate.shouldCheckWeakPower(this, p_175651_1_, p_175651_2_) ? this.func_175676_y(p_175651_1_) : blockstate.func_185911_a(this, p_175651_1_, p_175651_2_);
    }
 
    public boolean func_175640_z(BlockPos p_175640_1_) {
@@ -923,7 +1255,7 @@
    }
 
    public long func_72905_C() {
-      return this.field_72986_A.func_76063_b();
+      return this.field_73011_w.getSeed();
    }
 
    public long func_82737_E() {
@@ -931,11 +1263,11 @@
    }
 
    public long func_72820_D() {
-      return this.field_72986_A.func_76073_f();
+      return this.field_73011_w.getWorldTime();
    }
 
    public void func_72877_b(long p_72877_1_) {
-      this.field_72986_A.func_76068_b(p_72877_1_);
+      this.field_73011_w.setWorldTime(p_72877_1_);
    }
 
    protected void func_217389_a() {
@@ -947,7 +1279,7 @@
    }
 
    public BlockPos func_175694_M() {
-      BlockPos blockpos = new BlockPos(this.field_72986_A.func_76079_c(), this.field_72986_A.func_76075_d(), this.field_72986_A.func_76074_e());
+      BlockPos blockpos = this.field_73011_w.getSpawnPoint();
       if (!this.func_175723_af().func_177746_a(blockpos)) {
          blockpos = this.func_205770_a(Heightmap.Type.MOTION_BLOCKING, new BlockPos(this.func_175723_af().func_177731_f(), 0.0D, this.func_175723_af().func_177721_g()));
       }
@@ -956,10 +1288,14 @@
    }
 
    public void func_175652_B(BlockPos p_175652_1_) {
-      this.field_72986_A.func_176143_a(p_175652_1_);
+      this.field_73011_w.setSpawnPoint(p_175652_1_);
    }
 
    public boolean func_175660_a(PlayerEntity p_175660_1_, BlockPos p_175660_2_) {
+      return field_73011_w.canMineBlock(p_175660_1_, p_175660_2_);
+   }
+
+   public boolean canMineBlockBody(PlayerEntity player, BlockPos pos) {
       return true;
    }
 
@@ -1027,8 +1363,7 @@
    }
 
    public boolean func_180502_D(BlockPos p_180502_1_) {
-      Biome biome = this.func_226691_t_(p_180502_1_);
-      return biome.func_76736_e();
+      return this.field_73011_w.isHighHumidity(p_180502_1_);
    }
 
    @Nullable
@@ -1042,7 +1377,7 @@
    }
 
    public int func_72940_L() {
-      return this.field_73011_w.func_177495_o() ? 128 : 256;
+      return this.field_73011_w.getActualHeight();
    }
 
    public CrashReportCategory func_72914_a(CrashReport p_72914_1_) {
@@ -1073,16 +1408,15 @@
    public abstract Scoreboard func_96441_U();
 
    public void func_175666_e(BlockPos p_175666_1_, Block p_175666_2_) {
-      for(Direction direction : Direction.Plane.HORIZONTAL) {
+      for(Direction direction : Direction.values()) { //Forge: TODO: change to VALUES once ATed
          BlockPos blockpos = p_175666_1_.func_177972_a(direction);
          if (this.func_175667_e(blockpos)) {
             BlockState blockstate = this.func_180495_p(blockpos);
-            if (blockstate.func_177230_c() == Blocks.field_196762_fd) {
-               blockstate.func_215697_a(this, blockpos, p_175666_2_, p_175666_1_, false);
-            } else if (blockstate.func_215686_e(this, blockpos)) {
+            blockstate.onNeighborChange(this, blockpos, p_175666_1_);
+            if (blockstate.func_215686_e(this, blockpos)) {
                blockpos = blockpos.func_177972_a(direction);
                blockstate = this.func_180495_p(blockpos);
-               if (blockstate.func_177230_c() == Blocks.field_196762_fd) {
+               if (blockstate.getWeakChanges(this, blockpos)) {
                   blockstate.func_215697_a(this, blockpos, p_175666_2_, p_175666_1_, false);
                }
             }
@@ -1150,4 +1484,17 @@
    public BiomeManager func_225523_d_() {
       return this.field_226689_w_;
    }
+
+   private double maxEntityRadius = 2.0D;
+   @Override
+   public double getMaxEntityRadius() {
+      return maxEntityRadius;
+   }
+   @Override
+   public double increaseMaxEntityRadius(double value) {
+      if (value > maxEntityRadius)
+         maxEntityRadius = value;
+      return maxEntityRadius;
+   }
+
 }
