--- ../src-base/minecraft/net/minecraft/world/World.java
+++ ../src-work/minecraft/net/minecraft/world/World.java
@@ -4,19 +4,20 @@
 import com.google.common.base.MoreObjects;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
 import java.util.Calendar;
 import java.util.Collection;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Random;
 import java.util.UUID;
-import java.util.function.Supplier;
 import javax.annotation.Nullable;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.advancements.FunctionManager;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockLiquid;
-import net.minecraft.block.BlockObserver;
 import net.minecraft.block.material.Material;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.crash.CrashReport;
@@ -24,12 +25,23 @@
 import net.minecraft.crash.ICrashReportDetail;
 import net.minecraft.entity.Entity;
 import net.minecraft.entity.EntityLiving;
+import net.minecraft.entity.EntityLivingBase;
+import net.minecraft.entity.EnumCreatureType;
+import net.minecraft.entity.item.EntityItem;
+import net.minecraft.entity.item.EntityXPOrb;
+import net.minecraft.entity.monster.EntityGhast;
+import net.minecraft.entity.monster.EntityGolem;
+import net.minecraft.entity.monster.EntityMob;
+import net.minecraft.entity.monster.EntitySlime;
+import net.minecraft.entity.passive.EntityAnimal;
+import net.minecraft.entity.passive.EntityWaterMob;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Biomes;
 import net.minecraft.init.Blocks;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.network.Packet;
+import net.minecraft.network.play.server.SPacketWorldBorder;
 import net.minecraft.pathfinding.PathWorldListener;
 import net.minecraft.profiler.Profiler;
 import net.minecraft.scoreboard.Scoreboard;
@@ -51,20 +63,46 @@
 import net.minecraft.village.VillageCollection;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.biome.BiomeProvider;
+import net.minecraft.world.border.IBorderListener;
 import net.minecraft.world.border.WorldBorder;
 import net.minecraft.world.chunk.Chunk;
 import net.minecraft.world.chunk.IChunkProvider;
+import net.minecraft.world.gen.ChunkProviderServer;
 import net.minecraft.world.gen.structure.StructureBoundingBox;
 import net.minecraft.world.storage.ISaveHandler;
 import net.minecraft.world.storage.MapStorage;
 import net.minecraft.world.storage.WorldInfo;
 import net.minecraft.world.storage.WorldSavedData;
 import net.minecraft.world.storage.loot.LootTableManager;
+import net.minecraftforge.common.DimensionManager;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_12_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_12_R1.CraftWorld;
+import org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory;
+import org.bukkit.craftbukkit.v1_12_R1.util.CraftMagicNumbers;
+import org.bukkit.entity.NPC;
+import org.bukkit.event.block.BlockCanBuildEvent;
+import org.bukkit.event.block.BlockPhysicsEvent;
+import org.bukkit.event.entity.CreatureSpawnEvent;
+import org.bukkit.generator.ChunkGenerator;
+import com.mohistmc.common.RealTimeTicking;
+import com.mohistmc.common.cache.WorldCache;
+import com.mohistmc.configuration.EntityWorldConfig;
+import com.mohistmc.configuration.MohistConfig;
+import com.mohistmc.configuration.MohistWorldConfig;
+import com.mohistmc.configuration.TileEntityWorldConfig;
 
-public abstract class World implements IBlockAccess
+public abstract class World implements IBlockAccess, net.minecraftforge.common.capabilities.ICapabilityProvider
 {
+    /**
+     * Used in the getEntitiesWithinAABB functions to expand the search area for entities.
+     * Modders should change this variable to a higher value if it is less then the radius
+     * of one of there entities.
+     */
+    public static double MAX_ENTITY_RADIUS = 2.0D;
+
     private int field_181546_a = 63;
     protected boolean field_72999_e;
     public final List<Entity> field_72996_f = Lists.<Entity>newArrayList();
@@ -86,30 +124,154 @@
     public float field_73017_q;
     private int field_73016_r;
     public final Random field_73012_v = new Random();
-    public final WorldProvider field_73011_w;
+    public WorldProvider field_73011_w;
     protected PathWorldListener field_184152_t = new PathWorldListener();
     protected List<IWorldEventListener> field_73021_x;
-    protected IChunkProvider field_73020_y;
+    public IChunkProvider field_73020_y;
     protected final ISaveHandler field_73019_z;
-    protected WorldInfo field_72986_A;
+    public WorldInfo field_72986_A;
     protected boolean field_72987_B;
-    protected MapStorage field_72988_C;
+    public MapStorage field_72988_C;
     public VillageCollection field_72982_D;
     protected LootTableManager field_184151_B;
     protected AdvancementManager field_191951_C;
     protected FunctionManager field_193036_D;
     public final Profiler field_72984_F;
     private final Calendar field_83016_L;
-    protected Scoreboard field_96442_D;
+    public Scoreboard field_96442_D;
     public final boolean field_72995_K;
-    protected boolean field_72985_G;
-    protected boolean field_72992_H;
+    public boolean field_72985_G;
+    public boolean field_72992_H;
     private boolean field_147481_N;
     private final WorldBorder field_175728_M;
     int[] field_72994_J;
 
+    public boolean restoringBlockSnapshots = false;
+    public boolean captureBlockSnapshots = false;
+    public java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot> capturedBlockSnapshots = new java.util.ArrayList<net.minecraftforge.common.util.BlockSnapshot>();
+    private net.minecraftforge.common.capabilities.CapabilityDispatcher capabilities;
+    private net.minecraftforge.common.util.WorldCapabilityData capabilityData;
+
+    private final CraftWorld craftWorld;
+    public boolean pvpMode;
+    public boolean keepSpawnInMemory = false;
+    public ChunkGenerator generator;
+    public boolean captureTreeGeneration = false;
+    public List<EntityItem> captureDrops;
+    public long ticksPerAnimalSpawns;
+    public long ticksPerMonsterSpawns;
+    public boolean populating;
+    private int tickPosition;
+    public final org.spigotmc.SpigotWorldConfig spigotConfig; // Spigot
+	public final co.aikar.timings.WorldTimingsHandler timings; // Spigot
+    public static boolean haveWeSilencedAPhysicsCrash;
+    public static String blockLocation;
+    private org.spigotmc.TickLimiter entityLimiter;
+    private org.spigotmc.TickLimiter tileLimiter;
+    private int tileTickPosition;
+    public final Map<Explosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
+
+    public MohistWorldConfig mohistConfig;
+    public EntityWorldConfig entityConfig;
+    public TileEntityWorldConfig tileentityConfig;
+
+    public CraftWorld getWorld() {
+        return this.craftWorld;
+    }
+
+    public CraftServer getServer() {
+        return (CraftServer) Bukkit.getServer();
+    }
+
+    public Chunk getChunkIfLoaded(int x, int z) {
+        // #271
+        return this.field_73020_y instanceof ChunkProviderServer ? ((ChunkProviderServer) this.field_73020_y).getChunkIfLoaded(x, z) : this.field_73020_y.func_186026_b(x, z);
+    }
+
+    protected World(ISaveHandler saveHandlerIn, WorldInfo info, WorldProvider providerIn, Profiler profilerIn, boolean client, ChunkGenerator gen, org.bukkit.World.Environment env) {
+        this.spigotConfig = new org.spigotmc.SpigotWorldConfig( info.func_76065_j() ); // Spigot
+        this.generator = gen;
+        this.craftWorld = new CraftWorld((WorldServer) this, gen, env);
+        this.ticksPerAnimalSpawns = this.getServer().getTicksPerAnimalSpawns(); // CraftBukkit
+        this.ticksPerMonsterSpawns = this.getServer().getTicksPerMonsterSpawns(); // CraftBukkit
+        // CraftBukkit end
+        this.field_73021_x = Lists.newArrayList(this.field_184152_t);
+        this.field_83016_L = Calendar.getInstance();
+        this.field_96442_D = new Scoreboard();
+        this.field_72985_G = true;
+        this.field_72992_H = true;
+        this.field_72994_J = new int[32768];
+        this.field_73019_z = saveHandlerIn;
+        this.field_72984_F = profilerIn;
+        this.field_72986_A = info;
+        this.field_73011_w = providerIn;
+        this.field_72995_K = client;
+        this.field_175728_M = providerIn.func_177501_r();
+        perWorldStorage = new MapStorage((ISaveHandler)null);
+        // Mohist start
+        this.mohistConfig = new MohistWorldConfig(info.func_76065_j(), MinecraftServer.mohistConfig);
+        this.entityConfig = new EntityWorldConfig(info.func_76065_j(), MinecraftServer.entityConfig);
+        this.tileentityConfig = new TileEntityWorldConfig(info.func_76065_j(), MinecraftServer.tileEntityConfig);
+        if(this.field_72986_A != null) // Use saved dimension from level.dat. Fixes issues with MultiVerse
+        {
+            if (this.field_72986_A.getDimension() != 0)
+                this.field_73011_w.setDimension(this.field_72986_A.getDimension());
+            else
+            {
+                this.field_72986_A.setDimension(this.field_73011_w.getDimension());
+            }
+        }
+
+        if (this.field_72986_A.getDimension() == 0)
+        {
+            generator = this.getServer().getGenerator(this.field_72986_A.func_76065_j());
+			getWorld().generator = generator;
+        }
+        // Mohist end
+        // CraftBukkit start
+        func_175723_af().world = (WorldServer) this;
+        // From PlayerList.setPlayerFileData
+        func_175723_af().func_177737_a(new IBorderListener() {
+            public void func_177694_a(WorldBorder worldborder, double d0) {
+                getServer().getHandle().sendAll(new SPacketWorldBorder(worldborder, SPacketWorldBorder.Action.SET_SIZE), worldborder.world);
+            }
+
+            public void func_177692_a(WorldBorder worldborder, double d0, double d1, long i) {
+                getServer().getHandle().sendAll(new SPacketWorldBorder(worldborder, SPacketWorldBorder.Action.LERP_SIZE), worldborder.world);
+            }
+
+            public void func_177693_a(WorldBorder worldborder, double d0, double d1) {
+                getServer().getHandle().sendAll(new SPacketWorldBorder(worldborder, SPacketWorldBorder.Action.SET_CENTER), worldborder.world);
+            }
+
+            public void func_177691_a(WorldBorder worldborder, int i) {
+                getServer().getHandle().sendAll(new SPacketWorldBorder(worldborder, SPacketWorldBorder.Action.SET_WARNING_TIME), worldborder.world);
+            }
+
+            public void func_177690_b(WorldBorder worldborder, int i) {
+                getServer().getHandle().sendAll(new SPacketWorldBorder(worldborder, SPacketWorldBorder.Action.SET_WARNING_BLOCKS), worldborder.world);
+            }
+
+            public void func_177696_b(WorldBorder worldborder, double d0) {}
+
+            public void func_177695_c(WorldBorder worldborder, double d0) {}
+        });
+        this.getServer().addWorld(this.craftWorld);
+        // CraftBukkit end
+        this.keepSpawnInMemory = MohistConfig.instance.keepSpawnInMemory.getValue(); // Paper
+        timings = new co.aikar.timings.WorldTimingsHandler(this); // Paper - code below can generate new world and access timings
+        this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
+        this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
+    }
+
+
     protected World(ISaveHandler p_i45749_1_, WorldInfo p_i45749_2_, WorldProvider p_i45749_3_, Profiler p_i45749_4_, boolean p_i45749_5_)
     {
+        this.spigotConfig = new org.spigotmc.SpigotWorldConfig( p_i45749_2_.func_76065_j() ); // Spigot
+        this.mohistConfig = new MohistWorldConfig(p_i45749_2_.func_76065_j(), MinecraftServer.mohistConfig);
+        this.entityConfig = new EntityWorldConfig(p_i45749_2_.func_76065_j(), MinecraftServer.entityConfig);
+        this.tileentityConfig = new TileEntityWorldConfig(p_i45749_2_.func_76065_j(), MinecraftServer.tileEntityConfig);
+        this.craftWorld = DimensionManager.getWorld(0) != null ? DimensionManager.getWorld(0).getWorld() : null;
         this.field_73021_x = Lists.newArrayList(this.field_184152_t);
         this.field_83016_L = Calendar.getInstance();
         this.field_96442_D = new Scoreboard();
@@ -122,6 +284,10 @@
         this.field_73011_w = p_i45749_3_;
         this.field_72995_K = p_i45749_5_;
         this.field_175728_M = p_i45749_3_.func_177501_r();
+        perWorldStorage = new MapStorage((ISaveHandler)null);
+        timings = new co.aikar.timings.WorldTimingsHandler(this); // Paper - code below can generate new world and access timings
+        this.entityLimiter = new org.spigotmc.TickLimiter(spigotConfig.entityMaxTickTime);
+        this.tileLimiter = new org.spigotmc.TickLimiter(spigotConfig.tileMaxTickTime);
     }
 
     public World func_175643_b()
@@ -131,6 +297,11 @@
 
     public Biome func_180494_b(final BlockPos p_180494_1_)
     {
+        return this.field_73011_w.getBiomeForCoords(p_180494_1_);
+    }
+
+    public Biome getBiomeForCoordsBody(final BlockPos p_180494_1_)
+    {
         if (this.func_175667_e(p_180494_1_))
         {
             Chunk chunk = this.func_175726_f(p_180494_1_);
@@ -207,7 +378,7 @@
 
     public boolean func_175623_d(BlockPos p_175623_1_)
     {
-        return this.func_180495_p(p_175623_1_).func_185904_a() == Material.field_151579_a;
+        return this.func_180495_p(p_175623_1_).func_177230_c().isAir(this.func_180495_p(p_175623_1_), this, p_175623_1_);
     }
 
     public boolean func_175667_e(BlockPos p_175667_1_)
@@ -278,7 +449,7 @@
         }
     }
 
-    protected abstract boolean func_175680_a(int p_175680_1_, int p_175680_2_, boolean p_175680_3_);
+    public abstract boolean func_175680_a(int p_175680_1_, int p_175680_2_, boolean p_175680_3_);
 
     public Chunk func_175726_f(BlockPos p_175726_1_)
     {
@@ -297,6 +468,26 @@
 
     public boolean func_180501_a(BlockPos p_180501_1_, IBlockState p_180501_2_, int p_180501_3_)
     {
+        // CraftBukkit start - tree generation
+        if (this.captureTreeGeneration) {
+            net.minecraftforge.common.util.BlockSnapshot blocksnapshot = null;
+
+            for (net.minecraftforge.common.util.BlockSnapshot previous : this.capturedBlockSnapshots)
+            {
+                if (previous.getPos().equals(p_180501_1_))
+                {
+                    blocksnapshot = previous;
+                    break;
+                }
+            }
+            if (blocksnapshot != null)
+            {
+                this.capturedBlockSnapshots.remove(blocksnapshot);
+            }
+            this.capturedBlockSnapshots.add(new net.minecraftforge.common.util.BlockSnapshot(this, p_180501_1_, p_180501_2_, p_180501_3_));
+            return true;
+        }
+        // CraftBukkit end
         if (this.func_189509_E(p_180501_1_))
         {
             return false;
@@ -308,24 +499,52 @@
         else
         {
             Chunk chunk = this.func_175726_f(p_180501_1_);
-            Block block = p_180501_2_.func_177230_c();
+
+            p_180501_1_ = p_180501_1_.func_185334_h(); // Forge - prevent mutable BlockPos leaks
+            net.minecraftforge.common.util.BlockSnapshot blockSnapshot = null;
+            if (this.captureBlockSnapshots && !this.field_72995_K)
+            {
+                blockSnapshot = net.minecraftforge.common.util.BlockSnapshot.getBlockSnapshot(this, p_180501_1_, p_180501_3_);
+                this.capturedBlockSnapshots.add(blockSnapshot);
+            }
+            IBlockState oldState = func_180495_p(p_180501_1_);
+            int oldLight = oldState.getLightValue(this, p_180501_1_);
+            int oldOpacity = oldState.getLightOpacity(this, p_180501_1_);
+
             IBlockState iblockstate = chunk.func_177436_a(p_180501_1_, p_180501_2_);
 
             if (iblockstate == null)
             {
+                if (blockSnapshot != null) this.capturedBlockSnapshots.remove(blockSnapshot);
                 return false;
             }
             else
             {
-                if (p_180501_2_.func_185891_c() != iblockstate.func_185891_c() || p_180501_2_.func_185906_d() != iblockstate.func_185906_d())
+                if (p_180501_2_.getLightOpacity(this, p_180501_1_) != oldOpacity || p_180501_2_.getLightValue(this, p_180501_1_) != oldLight)
                 {
                     this.field_72984_F.func_76320_a("checkLight");
-                    this.func_175664_x(p_180501_1_);
+                    BlockPos finalPos = p_180501_1_; // Final for next line
+                    chunk.runOrQueueLightUpdate(() -> this.func_175664_x(finalPos)); // Paper - Queue light update
                     this.field_72984_F.func_76319_b();
                 }
 
-                if ((p_180501_3_ & 2) != 0 && (!this.field_72995_K || (p_180501_3_ & 4) == 0) && chunk.func_150802_k())
+                if (blockSnapshot == null) // Don't notify clients or update physics while capturing blockstates
                 {
+                    this.markAndNotifyBlock(p_180501_1_, chunk, iblockstate, p_180501_2_, p_180501_3_);
+                }
+                return true;
+            }
+        }
+    }
+
+    // Split off from original setBlockState(BlockPos, IBlockState, int) method in order to directly send client and physic updates
+    public void markAndNotifyBlock(BlockPos p_180501_1_, @Nullable Chunk chunk, IBlockState iblockstate, IBlockState p_180501_2_, int p_180501_3_)
+    {
+        Block block = p_180501_2_.func_177230_c();
+        {
+            {
+                if ((p_180501_3_ & 2) != 0 && (!this.field_72995_K || (p_180501_3_ & 4) == 0) && (chunk == null || chunk.func_150802_k()))
+                {
                     this.func_184138_a(p_180501_1_, iblockstate, p_180501_2_, p_180501_3_);
                 }
 
@@ -342,8 +561,6 @@
                 {
                     this.func_190522_c(p_180501_1_, block);
                 }
-
-                return true;
             }
         }
     }
@@ -358,7 +575,7 @@
         IBlockState iblockstate = this.func_180495_p(p_175655_1_);
         Block block = iblockstate.func_177230_c();
 
-        if (iblockstate.func_185904_a() == Material.field_151579_a)
+        if (block.isAir(iblockstate, this, p_175655_1_))
         {
             return false;
         }
@@ -392,6 +609,11 @@
     {
         if (this.field_72986_A.func_76067_t() != WorldType.field_180272_g)
         {
+ 			// CraftBukkit start
+            if (populating) {
+                return;
+            }
+			// CraftBukkit end
             this.func_175685_c(p_175722_1_, p_175722_2_, p_175722_3_);
         }
     }
@@ -441,6 +663,8 @@
 
     public void func_175685_c(BlockPos p_175685_1_, Block p_175685_2_, boolean p_175685_3_)
     {
+        if(net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_175685_1_, this.func_180495_p(p_175685_1_), java.util.EnumSet.allOf(EnumFacing.class), p_175685_3_).isCanceled())
+            return;
         this.func_190524_a(p_175685_1_.func_177976_e(), p_175685_2_, p_175685_1_);
         this.func_190524_a(p_175685_1_.func_177974_f(), p_175685_2_, p_175685_1_);
         this.func_190524_a(p_175685_1_.func_177977_b(), p_175685_2_, p_175685_1_);
@@ -456,6 +680,11 @@
 
     public void func_175695_a(BlockPos p_175695_1_, Block p_175695_2_, EnumFacing p_175695_3_)
     {
+        java.util.EnumSet<EnumFacing> directions = java.util.EnumSet.allOf(EnumFacing.class);
+        directions.remove(p_175695_3_);
+        if(net.minecraftforge.event.ForgeEventFactory.onNeighborNotify(this, p_175695_1_, this.func_180495_p(p_175695_1_), directions, false).isCanceled())
+            return;
+
         if (p_175695_3_ != EnumFacing.WEST)
         {
             this.func_190524_a(p_175695_1_.func_177976_e(), p_175695_2_, p_175695_1_);
@@ -495,6 +724,15 @@
 
             try
             {
+                CraftWorld world = this.getWorld();
+                if (world != null) {
+                    BlockPhysicsEvent event = new BlockPhysicsEvent(world.getBlockAt(p_190524_1_.func_177958_n(), p_190524_1_.func_177956_o(), p_190524_1_.func_177952_p()), CraftMagicNumbers.getId(p_190524_2_), p_190524_3_.func_177958_n(), p_190524_3_.func_177956_o(), p_190524_3_.func_177952_p()); // Paper - add source block
+                    this.getServer().getPluginManager().callEvent(event);
+
+                    if (event.isCancelled()) {
+                        return;
+                    }
+                }
                 iblockstate.func_189546_a(this, p_190524_1_, p_190524_2_, p_190524_3_);
             }
             catch (Throwable throwable)
@@ -507,7 +745,7 @@
                     {
                         try
                         {
-                            return String.format("ID #%d (%s // %s)", Block.func_149682_b(p_190524_2_), p_190524_2_.func_149739_a(), p_190524_2_.getClass().getCanonicalName());
+                            return String.format("ID #%d (%s // %s // %s)", Block.func_149682_b(p_190524_2_), p_190524_2_.func_149739_a(), p_190524_2_.getClass().getName(), p_190524_2_.getRegistryName());
                         }
                         catch (Throwable var2)
                         {
@@ -527,12 +765,17 @@
         {
             IBlockState iblockstate = this.func_180495_p(p_190529_1_);
 
-            if (iblockstate.func_177230_c() == Blocks.field_190976_dk)
+            if (true)
             {
                 try
                 {
-                    ((BlockObserver)iblockstate.func_177230_c()).func_190962_b(iblockstate, this, p_190529_1_, p_190529_2_, p_190529_3_);
+                    iblockstate.func_177230_c().observedNeighborChange(iblockstate, this, p_190529_1_, p_190529_2_, p_190529_3_);
                 }
+                catch (StackOverflowError stackoverflowerror) { // Spigot Start
+                    haveWeSilencedAPhysicsCrash = true;
+                    blockLocation = p_190529_1_.func_177958_n() + ", " + p_190529_1_.func_177956_o() + ", " + p_190529_1_.func_177952_p();
+                    // Spigot End
+                }
                 catch (Throwable throwable)
                 {
                     CrashReport crashreport = CrashReport.func_85055_a(throwable, "Exception while updating neighbours");
@@ -588,7 +831,7 @@
                 {
                     IBlockState iblockstate = this.func_180495_p(blockpos1);
 
-                    if (iblockstate.func_185891_c() > 0 && !iblockstate.func_185904_a().func_76224_d())
+                    if (iblockstate.func_177230_c().getLightOpacity(iblockstate, this, blockpos) > 0 && !iblockstate.func_185904_a().func_76224_d())
                     {
                         return false;
                     }
@@ -611,11 +854,45 @@
             {
                 p_175699_1_ = new BlockPos(p_175699_1_.func_177958_n(), 255, p_175699_1_.func_177952_p());
             }
-
             return this.func_175726_f(p_175699_1_).func_177443_a(p_175699_1_, 0);
         }
     }
 
+    // Paper start - test if meets light level, return faster
+    // logic copied from below
+    public boolean isLightLevel(BlockPos blockposition, int level) {
+        if (blockposition.isValidLocation()) {
+            if (this.func_180495_p(blockposition).func_185916_f()) {
+                if (this.func_175721_c(blockposition.func_177984_a(), false) >= level) {
+                    return true;
+                }
+                if (this.func_175721_c(blockposition.func_177974_f(), false) >= level) {
+                    return true;
+                }
+                if (this.func_175721_c(blockposition.func_177976_e(), false) >= level) {
+                    return true;
+                }
+                if (this.func_175721_c(blockposition.func_177968_d(), false) >= level) {
+                    return true;
+                }
+                if (this.func_175721_c(blockposition.func_177978_c(), false) >= level) {
+                    return true;
+                }
+                return false;
+            } else {
+                if (blockposition.func_177956_o() >= 256) {
+                    blockposition = new BlockPos(blockposition.func_177958_n(), 255, blockposition.func_177952_p());
+                }
+
+                Chunk chunk = this.func_175726_f(blockposition);
+                return chunk.func_177443_a(blockposition, this.func_175657_ab()) >= level;
+            }
+        } else {
+            return true;
+        }
+    }
+    // Paper end
+
     public int func_175671_l(BlockPos p_175671_1_)
     {
         return this.func_175721_c(p_175671_1_, true);
@@ -666,6 +943,8 @@
                     p_175721_1_ = new BlockPos(p_175721_1_.func_177958_n(), 255, p_175721_1_.func_177952_p());
                 }
 
+                if (!this.func_175667_e(p_175721_1_)) return 0; // Paper
+
                 Chunk chunk = this.func_175726_f(p_175721_1_);
                 return chunk.func_177443_a(p_175721_1_, this.field_73008_k);
             }
@@ -740,7 +1019,7 @@
             }
 
             if (!this.func_175701_a(p_175705_2_))
-            {
+			{
                 return p_175705_1_.field_77198_c;
             }
             else if (!this.func_175667_e(p_175705_2_))
@@ -793,7 +1072,7 @@
         }
 
         if (!this.func_175701_a(p_175642_2_))
-        {
+		{
             return p_175642_1_.field_77198_c;
         }
         else if (!this.func_175667_e(p_175642_2_))
@@ -810,7 +1089,7 @@
     public void func_175653_a(EnumSkyBlock p_175653_1_, BlockPos p_175653_2_, int p_175653_3_)
     {
         if (this.func_175701_a(p_175653_2_))
-        {
+		{
             if (this.func_175667_e(p_175653_2_))
             {
                 Chunk chunk = this.func_175726_f(p_175653_2_);
@@ -849,6 +1128,17 @@
 
     public IBlockState func_180495_p(BlockPos p_180495_1_)
     {
+		// CraftBukkit start - tree generation
+        if (captureTreeGeneration)
+		{
+            for (net.minecraftforge.common.util.BlockSnapshot blocksnapshot : this.capturedBlockSnapshots)
+            {
+                if (blocksnapshot.getPos().equals(p_180495_1_)) { 
+                    return blocksnapshot.getReplacedBlock();
+				}
+            }
+        }
+        // CraftBukkit end
         if (this.func_189509_E(p_180495_1_))
         {
             return Blocks.field_150350_a.func_176223_P();
@@ -862,7 +1152,7 @@
 
     public boolean func_72935_r()
     {
-        return this.field_73008_k < 4;
+        return this.field_73011_w.isDaytime();
     }
 
     @Nullable
@@ -1065,6 +1355,13 @@
 
     public void func_184148_a(@Nullable EntityPlayer p_184148_1_, double p_184148_2_, double p_184148_4_, double p_184148_6_, SoundEvent p_184148_8_, SoundCategory p_184148_9_, float p_184148_10_, float p_184148_11_)
     {
+        net.minecraftforge.event.entity.PlaySoundAtEntityEvent event = net.minecraftforge.event.ForgeEventFactory.onPlaySoundAtEntity(p_184148_1_, p_184148_8_, p_184148_9_, p_184148_10_, p_184148_11_);
+        if (event.isCanceled() || event.getSound() == null) return;
+        p_184148_8_ = event.getSound();
+        p_184148_9_ = event.getCategory();
+        p_184148_10_ = event.getVolume();
+        p_184148_11_ = event.getPitch();
+
         for (int i = 0; i < this.field_73021_x.size(); ++i)
         {
             ((IWorldEventListener)this.field_73021_x.get(i)).func_184375_a(p_184148_1_, p_184148_8_, p_184148_9_, p_184148_2_, p_184148_4_, p_184148_6_, p_184148_10_, p_184148_11_);
@@ -1112,12 +1409,68 @@
 
     public boolean func_72942_c(Entity p_72942_1_)
     {
+        if(net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_72942_1_, this)))
+            return false;
+
         this.field_73007_j.add(p_72942_1_);
         return true;
     }
 
     public boolean func_72838_d(Entity p_72838_1_)
     {
+        if (p_72838_1_ == null) return false;
+        org.bukkit.event.Cancellable event = null;
+        CreatureSpawnEvent.SpawnReason spawnReason = CreatureSpawnEvent.SpawnReason.DEFAULT;
+        if (p_72838_1_ instanceof EntityLivingBase && !(p_72838_1_ instanceof EntityPlayerMP)) {
+            boolean isAnimal = p_72838_1_ instanceof EntityAnimal || p_72838_1_ instanceof EntityWaterMob || p_72838_1_ instanceof EntityGolem
+                    || p_72838_1_.isCreatureType(EnumCreatureType.CREATURE, false);
+            boolean isMonster = p_72838_1_ instanceof EntityMob || p_72838_1_ instanceof EntityGhast || p_72838_1_ instanceof EntitySlime
+                    || p_72838_1_.isCreatureType(EnumCreatureType.MONSTER, false);
+            boolean isNpc = p_72838_1_ instanceof NPC;
+
+            if (spawnReason != CreatureSpawnEvent.SpawnReason.CUSTOM) {
+                if (isAnimal && !field_72992_H || isMonster && !field_72985_G || isNpc && !getServer().getServer().func_71220_V()) {
+                    p_72838_1_.field_70128_L = true;
+                    return false;
+                }
+            }
+
+            event = CraftEventFactory.callCreatureSpawnEvent((EntityLivingBase) p_72838_1_, spawnReason);
+        } else if (p_72838_1_ instanceof EntityItem) {
+            event = CraftEventFactory.callItemSpawnEvent((EntityItem) p_72838_1_);
+        } else if (p_72838_1_.getBukkitEntity() instanceof org.bukkit.entity.Projectile) {
+            // Not all projectiles extend EntityProjectile, so check for Bukkit interface instead
+            event = CraftEventFactory.callProjectileLaunchEvent(p_72838_1_);
+        } else if (p_72838_1_.getBukkitEntity() instanceof org.bukkit.entity.Vehicle){
+            event = CraftEventFactory.callVehicleCreateEvent(p_72838_1_);
+        }
+
+        // Spigot start
+        else if (p_72838_1_ instanceof EntityXPOrb) {
+            EntityXPOrb xp = (EntityXPOrb) p_72838_1_;
+            double radius = spigotConfig.expMerge;
+            if (radius > 0) {
+                List<Entity> entities = this.func_72839_b(p_72838_1_, p_72838_1_.func_174813_aQ().func_72314_b(radius, radius, radius));
+                for (Entity e : entities) {
+                    if (e instanceof EntityXPOrb) {
+                        EntityXPOrb loopItem = (EntityXPOrb) e;
+                        if (!loopItem.field_70128_L) {
+                            xp.field_70530_e += loopItem.field_70530_e;
+                            loopItem.func_70106_y();
+                        }
+                    }
+                }
+            }
+        } // Spigot end
+
+        if (event != null && (event.isCancelled() || p_72838_1_.field_70128_L)) {
+            p_72838_1_.field_70128_L = true;
+            return false;
+        }
+        // CraftBukkit end
+        // do not drop any items while restoring blocksnapshots. Prevents dupes
+        if (!this.field_72995_K && (p_72838_1_ == null || (p_72838_1_ instanceof net.minecraft.entity.item.EntityItem && this.restoringBlockSnapshots))) return false;
+
         int i = MathHelper.func_76128_c(p_72838_1_.field_70165_t / 16.0D);
         int j = MathHelper.func_76128_c(p_72838_1_.field_70161_v / 16.0D);
         boolean flag = p_72838_1_.field_98038_p;
@@ -1140,31 +1493,135 @@
                 this.func_72854_c();
             }
 
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_72838_1_, this)) && !flag) return false;
+
             this.func_72964_e(i, j).func_76612_a(p_72838_1_);
+            if (p_72838_1_.field_70128_L) return false; // Paper - don't add dead entities, chunk registration may of killed it
             this.field_72996_f.add(p_72838_1_);
             this.func_72923_a(p_72838_1_);
             return true;
         }
     }
 
+    public boolean addEntity(Entity entity, CreatureSpawnEvent.SpawnReason spawnReason) {
+        org.spigotmc.AsyncCatcher.catchOp("entity add"); // Spigot
+        if (entity == null) return false;
+        org.bukkit.event.Cancellable event = null;
+        // Cauldron start - workaround for handling CraftBukkit's SpawnReason with customspawners and block spawners
+        if (entity.spawnReason != null && entity.spawnReason.equals("natural"))
+        {
+            spawnReason = CreatureSpawnEvent.SpawnReason.NATURAL;
+        }
+        else if (entity.spawnReason != null && entity.spawnReason.equals("spawner"))
+        {
+            spawnReason = CreatureSpawnEvent.SpawnReason.SPAWNER;
+        }
+        // Cauldron end
+        if (entity instanceof EntityLivingBase && !(entity instanceof EntityPlayerMP)) {
+            boolean isAnimal = entity instanceof EntityAnimal || entity instanceof EntityWaterMob || entity instanceof EntityGolem;
+            boolean isMonster = entity instanceof EntityMob || entity instanceof EntityGhast || entity instanceof EntitySlime;
+            boolean isNpc = entity instanceof NPC;
+
+            if (spawnReason != CreatureSpawnEvent.SpawnReason.CUSTOM) {
+                if (isAnimal && !field_72992_H || isMonster && !field_72985_G || isNpc && !getServer().getServer().func_71220_V()) {
+                    entity.field_70128_L = true;
+                    return false;
+                }
+            }
+
+            event = CraftEventFactory.callCreatureSpawnEvent((EntityLivingBase) entity, spawnReason);
+        } else if (entity instanceof EntityItem) {
+            event = CraftEventFactory.callItemSpawnEvent((EntityItem) entity);
+        } else if (entity.getBukkitEntity() instanceof org.bukkit.entity.Projectile) {
+            // Not all projectiles extend EntityProjectile, so check for Bukkit interface instead
+            event = CraftEventFactory.callProjectileLaunchEvent(entity);
+        } else if (entity.getBukkitEntity() instanceof org.bukkit.entity.Vehicle){
+            event = CraftEventFactory.callVehicleCreateEvent(entity);
+        }
+
+        // Spigot start
+        else if (entity instanceof EntityXPOrb) {
+            EntityXPOrb xp = (EntityXPOrb) entity;
+            double radius = spigotConfig.expMerge;
+            if (radius > 0) {
+                List<Entity> entities = this.func_72839_b(entity, entity.func_174813_aQ().func_72314_b(radius, radius, radius));
+                for (Entity e : entities) {
+                    if (e instanceof EntityXPOrb) {
+                        EntityXPOrb loopItem = (EntityXPOrb) e;
+                        if (!loopItem.field_70128_L) {
+                            xp.field_70530_e += loopItem.field_70530_e;
+                            loopItem.func_70106_y();
+                        }
+                    }
+                }
+            }
+        } // Spigot end
+
+        if (event != null && (event.isCancelled() || entity.field_70128_L)) {
+            entity.field_70128_L = true;
+            return false;
+        }
+        // CraftBukkit end
+        // do not drop any items while restoring blocksnapshots. Prevents dupes
+        if (!this.field_72995_K && (entity == null || (entity instanceof net.minecraft.entity.item.EntityItem && this.restoringBlockSnapshots))) return false;
+
+        int i = MathHelper.func_76128_c(entity.field_70165_t / 16.0D);
+        int j = MathHelper.func_76128_c(entity.field_70161_v / 16.0D);
+        boolean flag = entity.field_98038_p;
+
+        if (entity instanceof EntityPlayer)
+        {
+            flag = true;
+        }
+
+        if (!flag && !this.func_175680_a(i, j, false))
+        {
+            return false;
+        }
+        else
+        {
+            if (entity instanceof EntityPlayer)
+            {
+                EntityPlayer entityplayer = (EntityPlayer)entity;
+                this.field_73010_i.add(entityplayer);
+                this.func_72854_c();
+            }
+
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entity, this)) && !flag) return false;
+
+            this.func_72964_e(i, j).func_76612_a(entity);
+            if (entity.field_70128_L) return false; // Paper - don't add dead entities, chunk registration may of killed it
+            this.field_72996_f.add(entity);
+            this.func_72923_a(entity);
+            return true;
+        }
+    }
+
     public void func_72923_a(Entity p_72923_1_)
     {
         for (int i = 0; i < this.field_73021_x.size(); ++i)
         {
-            ((IWorldEventListener)this.field_73021_x.get(i)).func_72703_a(p_72923_1_);
+           ((IWorldEventListener)this.field_73021_x.get(i)).func_72703_a(p_72923_1_);
         }
+        p_72923_1_.onAddedToWorld();
+        p_72923_1_.valid = true; // CraftBukkit
+        new com.destroystokyo.paper.event.entity.EntityAddToWorldEvent(p_72923_1_.getBukkitEntity()).callEvent(); // Paper - fire while valid
     }
 
     public void func_72847_b(Entity p_72847_1_)
     {
         for (int i = 0; i < this.field_73021_x.size(); ++i)
         {
-            ((IWorldEventListener)this.field_73021_x.get(i)).func_72709_b(p_72847_1_);
+            ((IWorldEventListener) this.field_73021_x.get(i)).func_72709_b(p_72847_1_);
         }
+        p_72847_1_.onRemovedFromWorld();
+        new com.destroystokyo.paper.event.entity.EntityRemoveFromWorldEvent(p_72847_1_.getBukkitEntity()).callEvent(); // Paper - fire while valid
+        p_72847_1_.valid = false; // CraftBukkit
     }
 
     public void func_72900_e(Entity p_72900_1_)
     {
+        org.spigotmc.AsyncCatcher.catchOp("entity kill"); // Spigot
         if (p_72900_1_.func_184207_aI())
         {
             p_72900_1_.func_184226_ay();
@@ -1187,11 +1644,12 @@
 
     public void func_72973_f(Entity p_72973_1_)
     {
+        org.spigotmc.AsyncCatcher.catchOp("entity remove"); // Spigot
         p_72973_1_.func_184174_b(false);
         p_72973_1_.func_70106_y();
 
         if (p_72973_1_ instanceof EntityPlayer)
-        {
+		{
             this.field_73010_i.remove(p_72973_1_);
             this.func_72854_c();
         }
@@ -1203,8 +1661,15 @@
         {
             this.func_72964_e(i, j).func_76622_b(p_72973_1_);
         }
-
-        this.field_72996_f.remove(p_72973_1_);
+        // CraftBukkit start - Decrement loop variable field if we've already ticked this entity
+        int index = this.field_72996_f.indexOf(p_72973_1_);
+        if (index != -1) {
+            if (index <= this.tickPosition) {
+                this.tickPosition--;
+            }
+            this.field_72996_f.remove(index);
+        }
+        // CraftBukkit end
         this.func_72847_b(p_72973_1_);
     }
 
@@ -1227,6 +1692,7 @@
         IBlockState iblockstate = Blocks.field_150348_b.func_176223_P();
         BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.func_185346_s();
 
+        if (p_191504_3_ && !net.minecraftforge.event.ForgeEventFactory.gatherCollisionBoxes(this, p_191504_1_, p_191504_2_, p_191504_4_)) return true;
         try
         {
             for (int k1 = i; k1 < j; ++k1)
@@ -1269,7 +1735,7 @@
 
                                 iblockstate1.func_185908_a(this, blockpos$pooledmutableblockpos, p_191504_2_, p_191504_4_, p_191504_1_, false);
 
-                                if (p_191504_3_ && !p_191504_4_.isEmpty())
+                                if (p_191504_3_ && !net.minecraftforge.event.ForgeEventFactory.gatherCollisionBoxes(this, p_191504_1_, p_191504_2_, p_191504_4_))
                                 {
                                     boolean flag5 = true;
                                     return flag5;
@@ -1290,6 +1756,11 @@
 
     public List<AxisAlignedBB> func_184144_a(@Nullable Entity p_184144_1_, AxisAlignedBB p_184144_2_)
     {
+        // From performant and uses GPL-3.0 LICENSE
+        List<AxisAlignedBB> rs = WorldCache.bbCache.get(p_184144_2_);
+        if (rs != null) {
+            return rs;
+        }
         List<AxisAlignedBB> list = Lists.<AxisAlignedBB>newArrayList();
         this.func_191504_a(p_184144_1_, p_184144_2_, false, list);
 
@@ -1319,11 +1790,12 @@
                 }
             }
         }
-
+        net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.GetCollisionBoxesEvent(this, p_184144_1_, p_184144_2_, list));
+        // From performant and uses GPL-3.0 LICENSE
+        WorldCache.bbCache.put(p_184144_2_, list);
         return list;
     }
 
-    @SideOnly(Side.CLIENT)
     public void func_72848_b(IWorldEventListener p_72848_1_)
     {
         this.field_73021_x.remove(p_72848_1_);
@@ -1361,19 +1833,38 @@
 
     public int func_72967_a(float p_72967_1_)
     {
+        float f = field_73011_w.getSunBrightnessFactor(p_72967_1_);
+        f = 1 - f;
+        return (int)(f * 11);
+    }
+
+    /**
+     * The current sun brightness factor for this dimension.
+     * 0.0f means no light at all, and 1.0f means maximum sunlight.
+     * Highly recommended for sunlight detection like solar panel.
+     *
+     * @return The current brightness factor
+     * */
+    public float getSunBrightnessFactor(float p_72967_1_)
+    {
         float f = this.func_72826_c(p_72967_1_);
         float f1 = 1.0F - (MathHelper.func_76134_b(f * ((float)Math.PI * 2F)) * 2.0F + 0.5F);
         f1 = MathHelper.func_76131_a(f1, 0.0F, 1.0F);
         f1 = 1.0F - f1;
         f1 = (float)((double)f1 * (1.0D - (double)(this.func_72867_j(p_72967_1_) * 5.0F) / 16.0D));
         f1 = (float)((double)f1 * (1.0D - (double)(this.func_72819_i(p_72967_1_) * 5.0F) / 16.0D));
-        f1 = 1.0F - f1;
-        return (int)(f1 * 11.0F);
+        return f1;
     }
 
     @SideOnly(Side.CLIENT)
     public float func_72971_b(float p_72971_1_)
     {
+        return this.field_73011_w.getSunBrightness(p_72971_1_);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public float getSunBrightnessBody(float p_72971_1_)
+    {
         float f = this.func_72826_c(p_72971_1_);
         float f1 = 1.0F - (MathHelper.func_76134_b(f * ((float)Math.PI * 2F)) * 2.0F + 0.2F);
         f1 = MathHelper.func_76131_a(f1, 0.0F, 1.0F);
@@ -1386,6 +1877,12 @@
     @SideOnly(Side.CLIENT)
     public Vec3d func_72833_a(Entity p_72833_1_, float p_72833_2_)
     {
+        return this.field_73011_w.getSkyColor(p_72833_1_, p_72833_2_);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3d getSkyColorBody(Entity p_72833_1_, float p_72833_2_)
+    {
         float f = this.func_72826_c(p_72833_2_);
         float f1 = MathHelper.func_76134_b(f * ((float)Math.PI * 2F)) * 2.0F + 0.5F;
         f1 = MathHelper.func_76131_a(f1, 0.0F, 1.0F);
@@ -1393,9 +1890,7 @@
         int j = MathHelper.func_76128_c(p_72833_1_.field_70163_u);
         int k = MathHelper.func_76128_c(p_72833_1_.field_70161_v);
         BlockPos blockpos = new BlockPos(i, j, k);
-        Biome biome = this.func_180494_b(blockpos);
-        float f2 = biome.func_180626_a(blockpos);
-        int l = biome.func_76731_a(f2);
+        int l = net.minecraftforge.client.ForgeHooksClient.getSkyBlendColour(this, blockpos);
         float f3 = (float)(l >> 16 & 255) / 255.0F;
         float f4 = (float)(l >> 8 & 255) / 255.0F;
         float f5 = (float)(l & 255) / 255.0F;
@@ -1444,20 +1939,25 @@
 
     public float func_72826_c(float p_72826_1_)
     {
-        return this.field_73011_w.func_76563_a(this.field_72986_A.func_76073_f(), p_72826_1_);
+        return this.field_73011_w.func_76563_a(this.func_72820_D(), p_72826_1_);
     }
 
     @SideOnly(Side.CLIENT)
     public int func_72853_d()
     {
-        return this.field_73011_w.func_76559_b(this.field_72986_A.func_76073_f());
+        return this.field_73011_w.func_76559_b(this.func_72820_D());
     }
 
     public float func_130001_d()
     {
-        return WorldProvider.field_111203_a[this.field_73011_w.func_76559_b(this.field_72986_A.func_76073_f())];
+        return field_73011_w.getCurrentMoonPhaseFactor();
     }
 
+    public float getCurrentMoonPhaseFactorBody()
+    {
+        return WorldProvider.field_111203_a[this.field_73011_w.func_76559_b(this.func_72820_D())];
+    }
+
     public float func_72929_e(float p_72929_1_)
     {
         float f = this.func_72826_c(p_72929_1_);
@@ -1467,6 +1967,12 @@
     @SideOnly(Side.CLIENT)
     public Vec3d func_72824_f(float p_72824_1_)
     {
+        return this.field_73011_w.getCloudColor(p_72824_1_);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public Vec3d getCloudColorBody(float p_72824_1_)
+    {
         float f = this.func_72826_c(p_72824_1_);
         float f1 = MathHelper.func_76134_b(f * ((float)Math.PI * 2F)) * 2.0F + 0.5F;
         f1 = MathHelper.func_76131_a(f1, 0.0F, 1.0F);
@@ -1522,9 +2028,9 @@
         for (blockpos = new BlockPos(p_175672_1_.func_177958_n(), chunk.func_76625_h() + 16, p_175672_1_.func_177952_p()); blockpos.func_177956_o() >= 0; blockpos = blockpos1)
         {
             blockpos1 = blockpos.func_177977_b();
-            Material material = chunk.func_177435_g(blockpos1).func_185904_a();
+            IBlockState state = chunk.func_177435_g(blockpos1);
 
-            if (material.func_76230_c() && material != Material.field_151584_j)
+            if (state.func_185904_a().func_76230_c() && !state.func_177230_c().isLeaves(state, this, blockpos1) && !state.func_177230_c().isFoliage(this, blockpos1))
             {
                 break;
             }
@@ -1536,6 +2042,12 @@
     @SideOnly(Side.CLIENT)
     public float func_72880_h(float p_72880_1_)
     {
+        return this.field_73011_w.getStarBrightness(p_72880_1_);
+    }
+
+    @SideOnly(Side.CLIENT)
+    public float getStarBrightnessBody(float p_72880_1_)
+    {
         float f = this.func_72826_c(p_72880_1_);
         float f1 = 1.0F - (MathHelper.func_76134_b(f * ((float)Math.PI * 2F)) * 2.0F + 0.25F);
         f1 = MathHelper.func_76131_a(f1, 0.0F, 1.0F);
@@ -1567,9 +2079,14 @@
         for (int i = 0; i < this.field_73007_j.size(); ++i)
         {
             Entity entity = this.field_73007_j.get(i);
-
+            // CraftBukkit start - Fixed an NPE
+            if (entity == null) {
+                continue;
+            }
+            // CraftBukkit end
             try
             {
+                if(entity.updateBlocked) continue;
                 ++entity.field_70173_aa;
                 entity.func_70071_h_();
             }
@@ -1587,6 +2104,12 @@
                     entity.func_85029_a(crashreportcategory);
                 }
 
+                if (net.minecraftforge.common.ForgeModContainer.removeErroringEntities)
+                {
+                    net.minecraftforge.fml.common.FMLLog.log.fatal("{}", crashreport.func_71502_e());
+                    func_72900_e(entity);
+                }
+                else
                 throw new ReportedException(crashreport);
             }
 
@@ -1597,6 +2120,7 @@
         }
 
         this.field_72984_F.func_76318_c("remove");
+        timings.entityRemoval.startTiming(); // Paper
         this.field_72996_f.removeAll(this.field_72997_g);
 
         for (int k = 0; k < this.field_72997_g.size(); ++k)
@@ -1618,11 +2142,19 @@
 
         this.field_72997_g.clear();
         this.func_184147_l();
+        timings.entityRemoval.stopTiming(); // Paper
         this.field_72984_F.func_76318_c("regular");
 
-        for (int i1 = 0; i1 < this.field_72996_f.size(); ++i1)
-        {
-            Entity entity2 = this.field_72996_f.get(i1);
+        org.spigotmc.ActivationRange.activateEntities(this); // Spigot
+		timings.entityTick.startTiming(); // Spigot
+        co.aikar.timings.TimingHistory.entityTicks += this.field_72996_f.size(); // Paper
+        // CraftBukkit start - Use field for loop variable
+        int entitiesThisCycle = 0;
+        if (tickPosition < 0) tickPosition = 0;
+        for (entityLimiter.initTick(); entitiesThisCycle < field_72996_f.size() && (entitiesThisCycle % 10 != 0 || entityLimiter.shouldContinue()); tickPosition++, entitiesThisCycle++) {
+            tickPosition = (tickPosition < field_72996_f.size()) ? tickPosition : 0;
+            Entity entity2 = (Entity) this.field_72996_f.get(this.tickPosition);
+
             Entity entity3 = entity2.func_184187_bx();
 
             if (entity3 != null)
@@ -1641,13 +2173,27 @@
             {
                 try
                 {
-                    this.func_72870_g(entity2);
+                    entity2.tickTimer.startTiming(); // Paper
+                    net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackStart(entity2);
+
+                    if (com.mohistmc.util.Entity.canEntityTick(entity2, this)) {
+                        this.func_72870_g(entity2);
+                    }
+
+                    net.minecraftforge.server.timings.TimeTracker.ENTITY_UPDATE.trackEnd(entity2);
+                    entity2.tickTimer.stopTiming(); // Paper
                 }
                 catch (Throwable throwable1)
                 {
                     CrashReport crashreport1 = CrashReport.func_85055_a(throwable1, "Ticking entity");
                     CrashReportCategory crashreportcategory1 = crashreport1.func_85058_a("Entity being ticked");
                     entity2.func_85029_a(crashreportcategory1);
+                    if (net.minecraftforge.common.ForgeModContainer.removeErroringEntities)
+                    {
+                        net.minecraftforge.fml.common.FMLLog.log.fatal("{}", crashreport1.func_71502_e());
+                        func_72900_e(entity2);
+                    }
+                    else
                     throw new ReportedException(crashreport1);
                 }
             }
@@ -1665,34 +2211,50 @@
                     this.func_72964_e(l1, i2).func_76622_b(entity2);
                 }
 
-                this.field_72996_f.remove(i1--);
+                this.field_72996_f.remove(this.tickPosition--); // CraftBukkit - Use field for loop variable
                 this.func_72847_b(entity2);
             }
 
             this.field_72984_F.func_76319_b();
         }
 
+        timings.entityTick.stopTiming(); // Spigot
         this.field_72984_F.func_76318_c("blockEntities");
+        timings.tileEntityTick.startTiming(); // Spigot
 
+        this.field_147481_N = true; //FML Move above remove to prevent CMEs
+
         if (!this.field_147483_b.isEmpty())
         {
-            this.field_175730_i.removeAll(this.field_147483_b);
-            this.field_147482_g.removeAll(this.field_147483_b);
+            for (Object tile : field_147483_b)
+            {
+               ((TileEntity)tile).onChunkUnload();
+            }
+
+            // forge: faster "contains" makes this removal much more efficient
+            java.util.Set<TileEntity> remove = java.util.Collections.newSetFromMap(new java.util.IdentityHashMap<>());
+            remove.addAll(field_147483_b);
+            this.field_175730_i.removeAll(remove);
+            this.field_147482_g.removeAll(remove);
             this.field_147483_b.clear();
         }
 
-        this.field_147481_N = true;
-        Iterator<TileEntity> iterator = this.field_175730_i.iterator();
-
-        while (iterator.hasNext())
-        {
-            TileEntity tileentity = iterator.next();
-
+        int tilesThisCycle = 0;
+        for (tileLimiter.initTick(); tilesThisCycle < this.field_175730_i.size() && (tilesThisCycle % 10 != 0 || tileLimiter.shouldContinue()); tileTickPosition++, tilesThisCycle++) {
+            tileTickPosition = (tileTickPosition < field_175730_i.size()) ? tileTickPosition : 0;
+            TileEntity tileentity = (TileEntity) this.field_175730_i.get(tileTickPosition);
+            // Spigot start
+            if (tileentity == null) {
+                tilesThisCycle--;
+                this.field_175730_i.remove(tileTickPosition--);
+                continue;
+            }
+            // Spigot end
             if (!tileentity.func_145837_r() && tileentity.func_145830_o())
             {
                 BlockPos blockpos = tileentity.func_174877_v();
 
-                if (this.func_175667_e(blockpos) && this.field_175728_M.func_177746_a(blockpos))
+                if (this.func_175668_a(blockpos, false) && this.field_175728_M.func_177746_a(blockpos)) //Forge: Fix TE's getting an extra tick on the client side....
                 {
                     try
                     {
@@ -1700,7 +2262,14 @@
                         {
                             return String.valueOf((Object)TileEntity.func_190559_a(tileentity.getClass()));
                         });
-                        ((ITickable)tileentity).func_73660_a();
+                        tileentity.tickTimer.startTiming(); // Spigot
+                        net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackStart(tileentity);
+
+                        if (com.mohistmc.util.TileEntity.canTileEntityTick(tileentity, this)) {
+                            ((ITickable)tileentity).func_73660_a();
+                        }
+
+                        net.minecraftforge.server.timings.TimeTracker.TILE_ENTITY_UPDATE.trackEnd(tileentity);
                         this.field_72984_F.func_76319_b();
                     }
                     catch (Throwable throwable)
@@ -1708,23 +2277,42 @@
                         CrashReport crashreport2 = CrashReport.func_85055_a(throwable, "Ticking block entity");
                         CrashReportCategory crashreportcategory2 = crashreport2.func_85058_a("Block entity being ticked");
                         tileentity.func_145828_a(crashreportcategory2);
+                        if (net.minecraftforge.common.ForgeModContainer.removeErroringTileEntities)
+                        {
+                            net.minecraftforge.fml.common.FMLLog.log.fatal("{}", crashreport2.func_71502_e());
+                            tileentity.func_145843_s();
+                            this.func_175713_t(tileentity.func_174877_v());
+                        }
+                        else
                         throw new ReportedException(crashreport2);
                     }
+                    // Spigot start
+                    finally {
+                        tileentity.tickTimer.stopTiming();
+                    }
+                    // Spigot end
+
                 }
             }
 
             if (tileentity.func_145837_r())
             {
-                iterator.remove();
+                tilesThisCycle--;
+                this.field_175730_i.remove(tileTickPosition--);
                 this.field_147482_g.remove(tileentity);
 
                 if (this.func_175667_e(tileentity.func_174877_v()))
                 {
-                    this.func_175726_f(tileentity.func_174877_v()).func_177425_e(tileentity.func_174877_v());
+                    //Forge: Bugfix: If we set the tile entity it immediately sets it in the chunk, so we could be desyned
+                    Chunk chunk = this.func_175726_f(tileentity.func_174877_v());
+                    if (chunk.func_177424_a(tileentity.func_174877_v(), net.minecraft.world.chunk.Chunk.EnumCreateEntityType.CHECK) == tileentity)
+                        chunk.func_177425_e(tileentity.func_174877_v());
                 }
             }
         }
 
+        timings.tileEntityTick.stopTiming(); // Spigot
+        timings.tileEntityPending.startTiming(); // Spigot
         this.field_147481_N = false;
         this.field_72984_F.func_76318_c("pendingBlockEntities");
 
@@ -1736,10 +2324,12 @@
 
                 if (!tileentity1.func_145837_r())
                 {
-                    if (!this.field_147482_g.contains(tileentity1))
+                    /* CraftBukkit start - Order matters, moved down
+                    if (!this.loadedTileEntityList.contains(tileentity1))
                     {
-                        this.func_175700_a(tileentity1);
+                        this.addTileEntity(tileentity1);
                     }
+                    // CraftBukkit end */
 
                     if (this.func_175667_e(tileentity1.func_174877_v()))
                     {
@@ -1747,6 +2337,12 @@
                         IBlockState iblockstate = chunk.func_177435_g(tileentity1.func_174877_v());
                         chunk.func_177426_a(tileentity1.func_174877_v(), tileentity1);
                         this.func_184138_a(tileentity1.func_174877_v(), iblockstate, iblockstate, 3);
+                        // CraftBukkit start
+                        // From above, don't screw this up - SPIGOT-1746
+                        if (!this.field_147482_g.contains(tileentity1)) {
+                            this.func_175700_a(tileentity1);
+                        }
+                        // CraftBukkit end
                     }
                 }
             }
@@ -1754,6 +2350,8 @@
             this.field_147484_a.clear();
         }
 
+        timings.tileEntityPending.stopTiming(); // Spigot
+        co.aikar.timings.TimingHistory.tileEntityTicks += this.field_147482_g.size(); // Paper
         this.field_72984_F.func_76319_b();
         this.field_72984_F.func_76319_b();
     }
@@ -1764,12 +2362,18 @@
 
     public boolean func_175700_a(TileEntity p_175700_1_)
     {
+        // Forge - set the world early as vanilla doesn't set it until next tick
+        if (p_175700_1_.func_145831_w() != this) p_175700_1_.func_145834_a(this);
+        // Forge: wait to add new TE if we're currently processing existing ones
+        if (field_147481_N) return field_147484_a.add(p_175700_1_);
+
         boolean flag = this.field_147482_g.add(p_175700_1_);
 
         if (flag && p_175700_1_ instanceof ITickable)
-        {
+		{
             this.field_175730_i.add(p_175700_1_);
         }
+        p_175700_1_.onLoad();
 
         if (this.field_72995_K)
         {
@@ -1785,6 +2389,11 @@
     {
         if (this.field_147481_N)
         {
+            for (TileEntity te : p_147448_1_)
+            {
+                if (te.func_145831_w() != this) // Forge - set the world early as vanilla doesn't set it until next tick
+                    te.func_145834_a(this);
+            }
             this.field_147484_a.addAll(p_147448_1_);
         }
         else
@@ -1803,17 +2412,32 @@
 
     public void func_72866_a(Entity p_72866_1_, boolean p_72866_2_)
     {
+        if (p_72866_1_.field_70128_L) {
+            return;
+        }
         if (!(p_72866_1_ instanceof EntityPlayer))
         {
             int j2 = MathHelper.func_76128_c(p_72866_1_.field_70165_t);
             int k2 = MathHelper.func_76128_c(p_72866_1_.field_70161_v);
-            int l2 = 32;
 
-            if (p_72866_2_ && !this.func_175663_a(j2 - 32, 0, k2 - 32, j2 + 32, 0, k2 + 32, true))
+            boolean isForced = !this.field_72995_K && getPersistentChunks().containsKey(new net.minecraft.util.math.ChunkPos(j2 >> 4, k2 >> 4));
+            int range = isForced ? 0 : 32;
+            boolean canUpdate = !p_72866_2_ || this.func_175663_a(j2 - range, 0, k2 - range, j2 + range, 0, k2 + range, true);
+            if (!canUpdate) canUpdate = net.minecraftforge.event.ForgeEventFactory.canEntityUpdate(p_72866_1_);
+
+            if (!canUpdate)
             {
                 return;
             }
+		}
+
+        // Spigot start
+        if (p_72866_2_ && !org.spigotmc.ActivationRange.checkIfActive(p_72866_1_)) {
+        	p_72866_1_.field_70173_aa++;
+        	p_72866_1_.inactiveTick();
+        	return;
         }
+        // Spigot end
 
         p_72866_1_.field_70142_S = p_72866_1_.field_70165_t;
         p_72866_1_.field_70137_T = p_72866_1_.field_70163_u;
@@ -1831,7 +2455,9 @@
             }
             else
             {
+                if(!p_72866_1_.updateBlocked)
                 p_72866_1_.func_70071_h_();
+                p_72866_1_.postTick();
             }
         }
 
@@ -1914,7 +2540,7 @@
         {
             Entity entity4 = list.get(j2);
 
-            if (!entity4.field_70128_L && entity4.field_70156_m && entity4 != p_72917_2_ && (p_72917_2_ == null || entity4.func_184223_x(p_72917_2_)))
+            if (!entity4.field_70128_L && entity4.field_70156_m && entity4 != p_72917_2_ && (p_72917_2_ == null || !entity4.func_184223_x(p_72917_2_))) // Forge: fix MC-103516
             {
                 return false;
             }
@@ -1972,6 +2598,12 @@
                 {
                     IBlockState iblockstate1 = this.func_180495_p(blockpos$pooledmutableblockpos.func_181079_c(l3, i4, j4));
 
+                    Boolean result = iblockstate1.func_177230_c().isAABBInsideLiquid(this, blockpos$pooledmutableblockpos, p_72953_1_);
+                    if (result != null) {
+                        if (!result) continue;
+                        blockpos$pooledmutableblockpos.func_185344_t();
+                        return true;
+                    }
                     if (iblockstate1.func_185904_a().func_76224_d())
                     {
                         blockpos$pooledmutableblockpos.func_185344_t();
@@ -2011,6 +2643,11 @@
                             blockpos$pooledmutableblockpos.func_185344_t();
                             return true;
                         }
+                        else if (block.isBurning(this, new BlockPos(l3, i4, j4)))
+                        {
+                            blockpos$pooledmutableblockpos.func_185344_t();
+                            return true;
+                        }
                     }
                 }
             }
@@ -2050,6 +2687,16 @@
                         IBlockState iblockstate1 = this.func_180495_p(blockpos$pooledmutableblockpos);
                         Block block = iblockstate1.func_177230_c();
 
+                        Boolean result = block.isEntityInsideMaterial(this, blockpos$pooledmutableblockpos, iblockstate1, p_72918_3_, (double)i3, p_72918_2_, false);
+                        if (result != null && result == true)
+                        {
+                            // Forge: When requested call blocks modifyAcceleration method, and more importantly cause this method to return true, which results in an entity being "inWater"
+                            flag = true;
+                            vec3d = block.func_176197_a(this, blockpos$pooledmutableblockpos, p_72918_3_, vec3d);
+                            continue;
+                        }
+                        else if (result != null && result == false) continue;
+
                         if (iblockstate1.func_185904_a() == p_72918_2_)
                         {
                             double d0 = (double)((float)(i4 + 1) - BlockLiquid.func_149801_b(((Integer)iblockstate1.func_177229_b(BlockLiquid.field_176367_b)).intValue()));
@@ -2095,7 +2742,14 @@
             {
                 for (int j4 = j3; j4 < k3; ++j4)
                 {
-                    if (this.func_180495_p(blockpos$pooledmutableblockpos.func_181079_c(l3, i4, j4)).func_185904_a() == p_72875_2_)
+                    IBlockState iblockstate1 = this.func_180495_p(blockpos$pooledmutableblockpos.func_181079_c(l3, i4, j4));
+                    Boolean result = iblockstate1.func_177230_c().isAABBInsideMaterial(this, blockpos$pooledmutableblockpos, p_72875_1_, p_72875_2_);
+                    if (result != null) {
+                        if (!result) continue;
+                        blockpos$pooledmutableblockpos.func_185344_t();
+                        return true;
+                    }
+                    if (iblockstate1.func_185904_a() == p_72875_2_)
                     {
                         blockpos$pooledmutableblockpos.func_185344_t();
                         return true;
@@ -2116,6 +2770,7 @@
     public Explosion func_72885_a(@Nullable Entity p_72885_1_, double p_72885_2_, double p_72885_4_, double p_72885_6_, float p_72885_8_, boolean p_72885_9_, boolean p_72885_10_)
     {
         Explosion explosion = new Explosion(this, p_72885_1_, p_72885_2_, p_72885_4_, p_72885_6_, p_72885_8_, p_72885_9_, p_72885_10_);
+        if (net.minecraftforge.event.ForgeEventFactory.onExplosionStart(this, explosion)) return explosion;
         explosion.func_77278_a();
         explosion.func_77279_a(true);
         return explosion;
@@ -2190,29 +2845,35 @@
         return this.field_73020_y.func_73148_d();
     }
 
+    public Map<BlockPos, TileEntity> capturedTileEntities = Maps.newHashMap();
     @Nullable
     public TileEntity func_175625_s(BlockPos p_175625_1_)
     {
         if (this.func_189509_E(p_175625_1_))
-        {
+		{
             return null;
         }
-        else
-        {
+		else
+		{
+            // CraftBukkit start
+            if (capturedTileEntities.containsKey(p_175625_1_)) {
+                // return capturedTileEntities.get(pos); // Mohist - Remove intermediate tile caching (#931, #987)
+            }
+            // CraftBukkit end
             TileEntity tileentity2 = null;
 
             if (this.field_147481_N)
-            {
+			{
                 tileentity2 = this.func_189508_F(p_175625_1_);
             }
 
             if (tileentity2 == null)
-            {
+			{
                 tileentity2 = this.func_175726_f(p_175625_1_).func_177424_a(p_175625_1_, Chunk.EnumCreateEntityType.IMMEDIATE);
             }
 
             if (tileentity2 == null)
-            {
+			{
                 tileentity2 = this.func_189508_F(p_175625_1_);
             }
 
@@ -2227,7 +2888,7 @@
         {
             TileEntity tileentity2 = this.field_147484_a.get(j2);
 
-            if (!tileentity2.func_145837_r() && tileentity2.func_174877_v().equals(p_189508_1_))
+            if (tileentity2 != null && !tileentity2.func_145837_r() && tileentity2.func_174877_v().equals(p_189508_1_))
             {
                 return tileentity2;
             }
@@ -2238,14 +2899,19 @@
 
     public void func_175690_a(BlockPos p_175690_1_, @Nullable TileEntity p_175690_2_)
     {
+        p_175690_1_ = p_175690_1_.func_185334_h(); // Forge - prevent mutable BlockPos leaks
         if (!this.func_189509_E(p_175690_1_))
-        {
+		{
             if (p_175690_2_ != null && !p_175690_2_.func_145837_r())
             {
+                capturedTileEntities.put(p_175690_1_, p_175690_2_);
                 if (this.field_147481_N)
                 {
                     p_175690_2_.func_174878_a(p_175690_1_);
+                    if (p_175690_2_.func_145831_w() != this)
+                        p_175690_2_.func_145834_a(this); // Forge - set the world early as vanilla doesn't set it until next tick
                     Iterator<TileEntity> iterator1 = this.field_147484_a.iterator();
+                    List<TileEntity> toInvalidate = Lists.newArrayList();
 
                     while (iterator1.hasNext())
                     {
@@ -2253,16 +2919,19 @@
 
                         if (tileentity2.func_174877_v().equals(p_175690_1_))
                         {
-                            tileentity2.func_145843_s();
+                            toInvalidate.add(tileentity2); // Forge - don't call invalidate while iterating
                             iterator1.remove();
                         }
                     }
 
+                    toInvalidate.forEach(TileEntity::func_145843_s);
+                    p_175690_2_.func_145834_a(this); // Spigot - No null worlds
                     this.field_147484_a.add(p_175690_2_);
                 }
                 else
                 {
-                    this.func_175726_f(p_175690_1_).func_177426_a(p_175690_1_, p_175690_2_);
+                    Chunk chunk = this.func_175726_f(p_175690_1_);
+                    if (chunk != null) chunk.func_177426_a(p_175690_1_, p_175690_2_);
                     this.func_175700_a(p_175690_2_);
                 }
             }
@@ -2277,11 +2946,14 @@
         {
             tileentity2.func_145843_s();
             this.field_147484_a.remove(tileentity2);
+            if (!(tileentity2 instanceof ITickable)) //Forge: If they are not tickable they wont be removed in the update loop.
+                this.field_147482_g.remove(tileentity2);
         }
         else
         {
             if (tileentity2 != null)
             {
+                capturedTileEntities.remove(p_175713_1_);
                 this.field_147484_a.remove(tileentity2);
                 this.field_147482_g.remove(tileentity2);
                 this.field_175730_i.remove(tileentity2);
@@ -2289,6 +2961,7 @@
 
             this.func_175726_f(p_175713_1_).func_177425_e(p_175713_1_);
         }
+        this.func_175666_e(p_175713_1_, func_180495_p(p_175713_1_).func_177230_c()); //Notify neighbors of changes
     }
 
     public void func_147457_a(TileEntity p_147457_1_)
@@ -2305,7 +2978,7 @@
     public boolean func_175677_d(BlockPos p_175677_1_, boolean p_175677_2_)
     {
         if (this.func_189509_E(p_175677_1_))
-        {
+		{
             return false;
         }
         else
@@ -2315,7 +2988,7 @@
             if (chunk1 != null && !chunk1.func_76621_g())
             {
                 IBlockState iblockstate1 = this.func_180495_p(p_175677_1_);
-                return iblockstate1.func_185904_a().func_76218_k() && iblockstate1.func_185917_h();
+                return iblockstate1.func_177230_c().isNormalCube(iblockstate1, this, p_175677_1_);
             }
             else
             {
@@ -2338,6 +3011,7 @@
     {
         this.field_72985_G = p_72891_1_;
         this.field_72992_H = p_72891_2_;
+        this.field_73011_w.setAllowedSpawnTypes(p_72891_1_, p_72891_2_);
     }
 
     public void func_72835_b()
@@ -2347,6 +3021,11 @@
 
     protected void func_72947_a()
     {
+        this.field_73011_w.calculateInitialWeather();
+    }
+
+    public void calculateInitialWeatherBody()
+    {
         if (this.field_72986_A.func_76059_o())
         {
             this.field_73004_o = 1.0F;
@@ -2360,6 +3039,11 @@
 
     protected void func_72979_l()
     {
+        this.field_73011_w.updateWeather();
+    }
+
+    public void updateWeatherBody()
+    {
         if (this.field_73011_w.func_191066_m())
         {
             if (!this.field_72995_K)
@@ -2451,6 +3135,11 @@
                 }
 
                 this.field_73004_o = MathHelper.func_76131_a(this.field_73004_o, 0.0F, 1.0F);
+                for (int idx = 0; idx < this.field_73010_i.size(); ++idx) {
+                    if (((EntityPlayerMP) this.field_73010_i.get(idx)).field_70170_p == this) {
+                        ((EntityPlayerMP) this.field_73010_i.get(idx)).tickWeather();
+                    }
+                }
             }
         }
     }
@@ -2484,6 +3173,11 @@
 
     public boolean func_175670_e(BlockPos p_175670_1_, boolean p_175670_2_)
     {
+        return this.field_73011_w.canBlockFreeze(p_175670_1_, p_175670_2_);
+    }
+
+    public boolean canBlockFreezeBody(BlockPos p_175670_1_, boolean p_175670_2_)
+    {
         Biome biome = this.func_180494_b(p_175670_1_);
         float f = biome.func_180626_a(p_175670_1_);
 
@@ -2525,6 +3219,11 @@
 
     public boolean func_175708_f(BlockPos p_175708_1_, boolean p_175708_2_)
     {
+        return this.field_73011_w.canSnowAt(p_175708_1_, p_175708_2_);
+    }
+
+    public boolean canSnowAtBody(BlockPos p_175708_1_, boolean p_175708_2_)
+    {
         Biome biome = this.func_180494_b(p_175708_1_);
         float f = biome.func_180626_a(p_175708_1_);
 
@@ -2542,7 +3241,7 @@
             {
                 IBlockState iblockstate1 = this.func_180495_p(p_175708_1_);
 
-                if (iblockstate1.func_185904_a() == Material.field_151579_a && Blocks.field_150431_aC.func_176196_c(this, p_175708_1_))
+                if (iblockstate1.func_177230_c().isAir(iblockstate1, this, p_175708_1_) && Blocks.field_150431_aC.func_176196_c(this, p_175708_1_))
                 {
                     return true;
                 }
@@ -2574,10 +3273,10 @@
         else
         {
             IBlockState iblockstate1 = this.func_180495_p(p_175638_1_);
-            int j2 = p_175638_2_ == EnumSkyBlock.SKY ? 0 : iblockstate1.func_185906_d();
-            int k2 = iblockstate1.func_185891_c();
+            int j2 = p_175638_2_ == EnumSkyBlock.SKY ? 0 : iblockstate1.func_177230_c().getLightValue(iblockstate1, this, p_175638_1_);
+            int k2 = iblockstate1.func_177230_c().getLightOpacity(iblockstate1, this, p_175638_1_);
 
-            if (k2 >= 15 && iblockstate1.func_185906_d() > 0)
+            if (false) // Forge: fix MC-119932
             {
                 k2 = 1;
             }
@@ -2589,7 +3288,7 @@
 
             if (k2 >= 15)
             {
-                return 0;
+                return j2; // Forge: fix MC-119932
             }
             else if (j2 >= 14)
             {
@@ -2630,12 +3329,16 @@
 
     public boolean func_180500_c(EnumSkyBlock p_180500_1_, BlockPos p_180500_2_)
     {
-        if (!this.func_175648_a(p_180500_2_, 17, false))
+        // CraftBukkit start - Use neighbor cache instead of looking up
+        Chunk chunk = this.getChunkIfLoaded(p_180500_2_.func_177958_n() >> 4, p_180500_2_.func_177952_p() >> 4);
+        if (chunk == null || !chunk.areNeighborsLoaded(1) /*!this.isAreaLoaded(pos, 16, false)*/)
         {
+            // CraftBukkit end
             return false;
         }
         else
         {
+            int updateRange = this.func_175648_a(p_180500_2_, 18, false) ? 17 : 15;
             int j2 = 0;
             int k2 = 0;
             this.field_72984_F.func_76320_a("getBrightness");
@@ -2673,7 +3376,7 @@
                             int l5 = MathHelper.func_76130_a(k4 - k3);
                             int i6 = MathHelper.func_76130_a(l4 - l3);
 
-                            if (k5 + l5 + i6 < 17)
+                            if (k5 + l5 + i6 < updateRange)
                             {
                                 BlockPos.PooledMutableBlockPos blockpos$pooledmutableblockpos = BlockPos.PooledMutableBlockPos.func_185346_s();
 
@@ -2683,7 +3386,8 @@
                                     int k6 = k4 + enumfacing.func_96559_d();
                                     int l6 = l4 + enumfacing.func_82599_e();
                                     blockpos$pooledmutableblockpos.func_181079_c(j6, k6, l6);
-                                    int i7 = Math.max(1, this.func_180495_p(blockpos$pooledmutableblockpos).func_185891_c());
+                                    IBlockState bs = this.func_180495_p(blockpos$pooledmutableblockpos);
+                                    int i7 = Math.max(1, bs.func_177230_c().getLightOpacity(bs, this, blockpos$pooledmutableblockpos));
                                     j5 = this.func_175642_b(p_180500_1_, blockpos$pooledmutableblockpos);
 
                                     if (j5 == i5 - i7 && k2 < this.field_72994_J.length)
@@ -2725,7 +3429,7 @@
                         int j9 = Math.abs(i8 - l3);
                         boolean flag = k2 < this.field_72994_J.length - 6;
 
-                        if (l8 + i9 + j9 < 17 && flag)
+                        if (l8 + i9 + j9 < updateRange && flag)
                         {
                             if (this.func_175642_b(p_180500_1_, blockpos2.func_177976_e()) < k8)
                             {
@@ -2790,11 +3494,31 @@
 
     public List<Entity> func_175674_a(@Nullable Entity p_175674_1_, AxisAlignedBB p_175674_2_, @Nullable Predicate <? super Entity > p_175674_3_)
     {
+        // From performant and uses GPL-3.0 LICENSE
+        List<Entity> entities = WorldCache.eeCache.get(p_175674_2_);
+        if (entities != null && !entities.isEmpty()) {
+            if (p_175674_3_ == null ) {
+                return entities;
+            }
+
+            boolean allValid = true;
+
+            for (Entity entity : entities) {
+                if (!p_175674_3_.apply(entity)) {
+                    allValid = false;
+                    break;
+                }
+            }
+
+            if (allValid) {
+                return entities;
+            }
+        }
         List<Entity> list = Lists.<Entity>newArrayList();
-        int j2 = MathHelper.func_76128_c((p_175674_2_.field_72340_a - 2.0D) / 16.0D);
-        int k2 = MathHelper.func_76128_c((p_175674_2_.field_72336_d + 2.0D) / 16.0D);
-        int l2 = MathHelper.func_76128_c((p_175674_2_.field_72339_c - 2.0D) / 16.0D);
-        int i3 = MathHelper.func_76128_c((p_175674_2_.field_72334_f + 2.0D) / 16.0D);
+        int j2 = MathHelper.func_76128_c((p_175674_2_.field_72340_a - MAX_ENTITY_RADIUS) / 16.0D);
+        int k2 = MathHelper.func_76128_c((p_175674_2_.field_72336_d + MAX_ENTITY_RADIUS) / 16.0D);
+        int l2 = MathHelper.func_76128_c((p_175674_2_.field_72339_c - MAX_ENTITY_RADIUS) / 16.0D);
+        int i3 = MathHelper.func_76128_c((p_175674_2_.field_72334_f + MAX_ENTITY_RADIUS) / 16.0D);
 
         for (int j3 = j2; j3 <= k2; ++j3)
         {
@@ -2806,19 +3530,20 @@
                 }
             }
         }
-
+        // From performant and uses GPL-3.0 LICENSE
+        WorldCache.eeCache.put(p_175674_2_, list);
         return list;
     }
 
-    public <T extends Entity> List<T> func_175644_a(Class <? extends T > p_175644_1_, Predicate <? super T > p_175644_2_)
-    {
+    public <T extends Entity> List<T> func_175644_a(Class<? extends T> p_175644_1_, Predicate<? super T> p_175644_2_)
+	{
         List<T> list = Lists.<T>newArrayList();
 
         for (Entity entity4 : this.field_72996_f)
-        {
-            if (p_175644_1_.isAssignableFrom(entity4.getClass()) && p_175644_2_.apply((T)entity4))
-            {
-                list.add((T)entity4);
+		{
+            if (p_175644_1_.isAssignableFrom(entity4.getClass()) && p_175644_2_.apply((T) entity4))
+			{
+                list.add((T) entity4);
             }
         }
 
@@ -2847,10 +3572,31 @@
 
     public <T extends Entity> List<T> func_175647_a(Class <? extends T > p_175647_1_, AxisAlignedBB p_175647_2_, @Nullable Predicate <? super T > p_175647_3_)
     {
-        int j2 = MathHelper.func_76128_c((p_175647_2_.field_72340_a - 2.0D) / 16.0D);
-        int k2 = MathHelper.func_76143_f((p_175647_2_.field_72336_d + 2.0D) / 16.0D);
-        int l2 = MathHelper.func_76128_c((p_175647_2_.field_72339_c - 2.0D) / 16.0D);
-        int i3 = MathHelper.func_76143_f((p_175647_2_.field_72334_f + 2.0D) / 16.0D);
+        // From performant and uses GPL-3.0 LICENSE
+        List<Entity> entities = WorldCache.eeCache.get(p_175647_2_);
+        if (entities != null && !entities.isEmpty()) {
+            boolean allValid = true;
+
+            for (Entity entity : entities) {
+                if (!p_175647_1_.isInstance(entity)) {
+                    allValid = false;
+                    break;
+                }
+
+                if (p_175647_3_ != null && !p_175647_3_.apply((T)entity)) {
+                    allValid = false;
+                    break;
+                }
+            }
+
+            if (allValid) {
+                return (List<T>) entities;
+            }
+        }
+        int j2 = MathHelper.func_76128_c((p_175647_2_.field_72340_a - MAX_ENTITY_RADIUS) / 16.0D);
+        int k2 = MathHelper.func_76143_f((p_175647_2_.field_72336_d + MAX_ENTITY_RADIUS) / 16.0D);
+        int l2 = MathHelper.func_76128_c((p_175647_2_.field_72339_c - MAX_ENTITY_RADIUS) / 16.0D);
+        int i3 = MathHelper.func_76143_f((p_175647_2_.field_72334_f + MAX_ENTITY_RADIUS) / 16.0D);
         List<T> list = Lists.<T>newArrayList();
 
         for (int j3 = j2; j3 < k2; ++j3)
@@ -2863,7 +3609,8 @@
                 }
             }
         }
-
+        // From performant and uses GPL-3.0 LICENSE
+        WorldCache.eeCache.put(p_175647_2_, (List<Entity>) list);
         return list;
     }
 
@@ -2919,7 +3666,16 @@
 
         for (Entity entity4 : this.field_72996_f)
         {
-            if ((!(entity4 instanceof EntityLiving) || !((EntityLiving)entity4).func_104002_bU()) && p_72907_1_.isAssignableFrom(entity4.getClass()))
+            // CraftBukkit start - Split out persistent check, don't apply it to special persistent mobs
+            if (entity4 instanceof EntityLiving) {
+                EntityLiving entityinsentient = (EntityLiving) entity4;
+                if (entityinsentient.func_70692_ba() && entityinsentient.func_104002_bU()) {
+                    continue;
+                }
+            }
+
+            // if ((!(entity4 instanceof EntityLiving) || !((EntityLiving)entity4).isNoDespawnRequired()) && entityType.isAssignableFrom(entity4.getClass()))
+            if (p_72907_1_.isAssignableFrom(entity4.getClass()))
             {
                 ++j2;
             }
@@ -2930,11 +3686,19 @@
 
     public void func_175650_b(Collection<Entity> p_175650_1_)
     {
-        this.field_72996_f.addAll(p_175650_1_);
-
+        org.spigotmc.AsyncCatcher.catchOp("entity world add"); // Spigot
+        // CraftBukkit start
         for (Entity entity4 : p_175650_1_)
         {
-            this.func_72923_a(entity4);
+            if (!net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(entity4, this)))
+            {
+                if (entity4 == null || entity4.field_70128_L || entity4.valid) { // Paper - prevent adding already added or dead entities
+                    continue;
+                }
+                field_72996_f.add(entity4);
+                // CraftBukkit end
+                this.func_72923_a(entity4);
+            }
         }
     }
 
@@ -2948,18 +3712,24 @@
         IBlockState iblockstate1 = this.func_180495_p(p_190527_2_);
         AxisAlignedBB axisalignedbb = p_190527_3_ ? null : p_190527_1_.func_176223_P().func_185890_d(this, p_190527_2_);
 
-        if (axisalignedbb != Block.field_185506_k && !this.func_72917_a(axisalignedbb.func_186670_a(p_190527_2_), p_190527_5_))
+        boolean defaultReturn;
+        if (!((p_190527_5_ instanceof EntityPlayer) || !net.minecraftforge.event.ForgeEventFactory.onBlockPlace(p_190527_5_, new net.minecraftforge.common.util.BlockSnapshot(this, p_190527_2_, p_190527_1_.func_176223_P()), p_190527_4_).isCanceled())) return false;
+        if (axisalignedbb != Block.field_185506_k && !this.func_72855_b(axisalignedbb.func_186670_a(p_190527_2_))) // Forge: Remove second parameter, we patch placer to be non-null, passing it here skips collision checks for the placer
         {
-            return false;
+            defaultReturn = false;
         }
         else if (iblockstate1.func_185904_a() == Material.field_151594_q && p_190527_1_ == Blocks.field_150467_bQ)
         {
-            return true;
+            defaultReturn = true;
         }
         else
         {
-            return iblockstate1.func_185904_a().func_76222_j() && p_190527_1_.func_176198_a(this, p_190527_2_, p_190527_4_);
+            defaultReturn = iblockstate1.func_177230_c().func_176200_f(this, p_190527_2_) && p_190527_1_.func_176198_a(this, p_190527_2_, p_190527_4_);
         }
+        BlockCanBuildEvent event = new BlockCanBuildEvent(this.getWorld().getBlockAt(p_190527_2_.func_177958_n(), p_190527_2_.func_177956_o(), p_190527_2_.func_177952_p()), CraftMagicNumbers.getId(p_190527_1_), defaultReturn);
+        this.getServer().getPluginManager().callEvent(event);
+
+        return event.isBuildable();
     }
 
     public int func_181545_F()
@@ -3042,7 +3812,7 @@
     public int func_175651_c(BlockPos p_175651_1_, EnumFacing p_175651_2_)
     {
         IBlockState iblockstate1 = this.func_180495_p(p_175651_1_);
-        return iblockstate1.func_185915_l() ? this.func_175676_y(p_175651_1_) : iblockstate1.func_185911_a(this, p_175651_1_, p_175651_2_);
+        return iblockstate1.func_177230_c().shouldCheckWeakPower(iblockstate1, this, p_175651_1_, p_175651_2_) ? this.func_175676_y(p_175651_1_) : iblockstate1.func_185911_a(this, p_175651_1_, p_175651_2_);
     }
 
     public boolean func_175640_z(BlockPos p_175640_1_)
@@ -3124,6 +3894,11 @@
         {
             EntityPlayer entityplayer1 = this.field_73010_i.get(j2);
 
+			// CraftBukkit start - Fixed an NPE
+            if (entityplayer1 == null || entityplayer1.field_70128_L) {
+                continue;
+            }
+            // CraftBukkit end
             if (p_190525_9_.apply(entityplayer1))
             {
                 double d1 = entityplayer1.func_70092_e(p_190525_1_, p_190525_3_, p_190525_5_);
@@ -3141,7 +3916,7 @@
 
     public boolean func_175636_b(double p_175636_1_, double p_175636_3_, double p_175636_5_, double p_175636_7_)
     {
-        for (int j2 = 0; j2 < this.field_73010_i.size(); ++j2)
+		for (int j2 = 0; j2 < this.field_73010_i.size(); ++j2)
         {
             EntityPlayer entityplayer = this.field_73010_i.get(j2);
 
@@ -3156,8 +3931,8 @@
             }
         }
 
-        return false;
-    }
+        return false;    
+	}
 
     @Nullable
     public EntityPlayer func_184142_a(Entity p_184142_1_, double p_184142_2_, double p_184142_4_)
@@ -3180,7 +3955,6 @@
         for (int j2 = 0; j2 < this.field_73010_i.size(); ++j2)
         {
             EntityPlayer entityplayer1 = this.field_73010_i.get(j2);
-
             if (!entityplayer1.field_71075_bZ.field_75102_a && entityplayer1.func_70089_S() && !entityplayer1.func_175149_v() && (p_184150_12_ == null || p_184150_12_.apply(entityplayer1)))
             {
                 double d1 = entityplayer1.func_70092_e(p_184150_1_, entityplayer1.field_70163_u, p_184150_5_);
@@ -3208,6 +3982,8 @@
                     d2 *= ((Double)MoreObjects.firstNonNull(p_184150_11_.apply(entityplayer1), Double.valueOf(1.0D))).doubleValue();
                 }
 
+                d2 = net.minecraftforge.common.ForgeHooks.getPlayerVisibilityDistance(entityplayer1, d2, p_184150_9_);
+
                 if ((p_184150_9_ < 0.0D || Math.abs(entityplayer1.field_70163_u - p_184150_3_) < p_184150_9_ * p_184150_9_) && (p_184150_7_ < 0.0D || d1 < d2 * d2) && (d0 == -1.0D || d1 < d0))
                 {
                     d0 = d1;
@@ -3269,7 +4045,7 @@
 
     public long func_72905_C()
     {
-        return this.field_72986_A.func_76063_b();
+        return this.field_73011_w.getSeed();
     }
 
     public long func_82737_E()
@@ -3279,17 +4055,17 @@
 
     public long func_72820_D()
     {
-        return this.field_72986_A.func_76073_f();
+        return this.field_73011_w.getWorldTime();
     }
 
     public void func_72877_b(long p_72877_1_)
     {
-        this.field_72986_A.func_76068_b(p_72877_1_);
+        this.field_73011_w.setWorldTime(p_72877_1_);
     }
 
     public BlockPos func_175694_M()
     {
-        BlockPos blockpos1 = new BlockPos(this.field_72986_A.func_76079_c(), this.field_72986_A.func_76075_d(), this.field_72986_A.func_76074_e());
+        BlockPos blockpos1 = this.field_73011_w.getSpawnPoint();
 
         if (!this.func_175723_af().func_177746_a(blockpos1))
         {
@@ -3301,7 +4077,7 @@
 
     public void func_175652_B(BlockPos p_175652_1_)
     {
-        this.field_72986_A.func_176143_a(p_175652_1_);
+        this.field_73011_w.setSpawnPoint(p_175652_1_);
     }
 
     @SideOnly(Side.CLIENT)
@@ -3321,12 +4097,18 @@
 
         if (!this.field_72996_f.contains(p_72897_1_))
         {
+            if (!net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.entity.EntityJoinWorldEvent(p_72897_1_, this)))
             this.field_72996_f.add(p_72897_1_);
         }
     }
 
     public boolean func_175660_a(EntityPlayer p_175660_1_, BlockPos p_175660_2_)
     {
+        return this.field_73011_w.canMineBlock(p_175660_1_, p_175660_2_);
+    }
+
+    public boolean canMineBlockBody(EntityPlayer p_175660_1_, BlockPos p_175660_2_)
+    {
         return true;
     }
 
@@ -3363,6 +4145,16 @@
     {
     }
 
+    // CraftBukkit start
+    // Calls the method that checks to see if players are sleeping
+    // Called by CraftPlayer.setPermanentSleeping()
+    public void checkSleepStatus() {
+        if (!this.field_72995_K) {
+            this.func_72854_c();
+        }
+    }
+    // CraftBukkit end
+
     public float func_72819_i(float p_72819_1_)
     {
         return (this.field_73018_p + (this.field_73017_q - this.field_73018_p) * p_72819_1_) * this.func_72867_j(p_72819_1_);
@@ -3428,8 +4220,7 @@
 
     public boolean func_180502_D(BlockPos p_180502_1_)
     {
-        Biome biome = this.func_180494_b(p_180502_1_);
-        return biome.func_76736_e();
+        return this.field_73011_w.isBlockHighHumidity(p_180502_1_);
     }
 
     @Nullable
@@ -3490,12 +4281,12 @@
 
     public int func_72800_K()
     {
-        return 256;
+        return this.field_73011_w.getHeight();
     }
 
     public int func_72940_L()
     {
-        return this.field_73011_w.func_177495_o() ? 128 : 256;
+        return this.field_73011_w.getActualHeight();
     }
 
     public Random func_72843_D(int p_72843_1_, int p_72843_2_, int p_72843_3_)
@@ -3539,7 +4330,7 @@
     @SideOnly(Side.CLIENT)
     public double func_72919_O()
     {
-        return this.field_72986_A.func_76067_t() == WorldType.field_77138_c ? 0.0D : 63.0D;
+        return field_73011_w.getHorizon();
     }
 
     public void func_175715_c(int p_175715_1_, BlockPos p_175715_2_, int p_175715_3_)
@@ -3573,7 +4364,7 @@
 
     public void func_175666_e(BlockPos p_175666_1_, Block p_175666_2_)
     {
-        for (EnumFacing enumfacing : EnumFacing.Plane.HORIZONTAL)
+        for (EnumFacing enumfacing : EnumFacing.field_82609_l)
         {
             BlockPos blockpos1 = p_175666_1_.func_177972_a(enumfacing);
 
@@ -3581,18 +4372,15 @@
             {
                 IBlockState iblockstate1 = this.func_180495_p(blockpos1);
 
-                if (Blocks.field_150441_bU.func_185547_C(iblockstate1))
+                iblockstate1.func_177230_c().onNeighborChange(this, blockpos1, p_175666_1_);
+                if (iblockstate1.func_177230_c().isNormalCube(iblockstate1, this, blockpos1))
                 {
-                    iblockstate1.func_189546_a(this, blockpos1, p_175666_2_, p_175666_1_);
-                }
-                else if (iblockstate1.func_185915_l())
-                {
                     blockpos1 = blockpos1.func_177972_a(enumfacing);
                     iblockstate1 = this.func_180495_p(blockpos1);
 
-                    if (Blocks.field_150441_bU.func_185547_C(iblockstate1))
+                    if (iblockstate1.func_177230_c().getWeakChanges(this, blockpos1))
                     {
-                        iblockstate1.func_189546_a(this, blockpos1, p_175666_2_, p_175666_1_);
+                        iblockstate1.func_177230_c().onNeighborChange(this, blockpos1, p_175666_1_);
                     }
                 }
             }
@@ -3655,9 +4443,131 @@
         int j2 = p_72916_1_ * 16 + 8 - blockpos1.func_177958_n();
         int k2 = p_72916_2_ * 16 + 8 - blockpos1.func_177952_p();
         int l2 = 128;
-        return j2 >= -128 && j2 <= 128 && k2 >= -128 && k2 <= 128;
+        return j2 >= -128 && j2 <= 128 && k2 >= -128 && k2 <= 128 && this.keepSpawnInMemory;
     }
 
+    /* ======================================== FORGE START =====================================*/
+    /**
+     * Determine if the given block is considered solid on the
+     * specified side.  Used by placement logic.
+     *
+     * @param pos Block Position
+     * @param side The Side in question
+     * @return True if the side is solid
+    */
+    public boolean isSideSolid(BlockPos pos, EnumFacing side)
+    {
+       return isSideSolid(pos, side, false);
+    }
+
+    /**
+     * Determine if the given block is considered solid on the
+     * specified side.  Used by placement logic.
+     *
+     * @param pos Block Position
+     * @param side The Side in question
+     * @param _default The default to return if the block doesn't exist.
+     * @return True if the side is solid
+     */
+    @Override
+    public boolean isSideSolid(BlockPos pos, EnumFacing side, boolean _default)
+    {
+        if (!this.func_175701_a(pos)) return _default;
+
+        Chunk chunk = func_175726_f(pos);
+        if (chunk == null || chunk.func_76621_g()) return _default;
+        return func_180495_p(pos).isSideSolid(this, pos, side);
+    }
+
+    /**
+     * Get the persistent chunks for this world
+     *
+     * @return
+     */
+    public com.google.common.collect.ImmutableSetMultimap<net.minecraft.util.math.ChunkPos, net.minecraftforge.common.ForgeChunkManager.Ticket> getPersistentChunks()
+    {
+        return net.minecraftforge.common.ForgeChunkManager.getPersistentChunksFor(this);
+    }
+
+    public Iterator<Chunk> getPersistentChunkIterable(Iterator<Chunk> chunkIterator)
+    {
+        if (MohistConfig.instance.disableForgeChunkForceSystem.getValue())
+        {
+            return chunkIterator;
+        }
+        return net.minecraftforge.common.ForgeChunkManager.getPersistentChunksIterableFor(this, chunkIterator);
+    }
+    /**
+     * Readded as it was removed, very useful helper function
+     *
+     * @param pos Block position
+     * @return The blocks light opacity
+     */
+    public int getBlockLightOpacity(BlockPos pos)
+    {
+        if (!this.func_175701_a(pos)) return 0;
+        return func_175726_f(pos).func_177437_b(pos);
+    }
+
+    /**
+     * Returns a count of entities that classify themselves as the specified creature type.
+     */
+    public int countEntities(net.minecraft.entity.EnumCreatureType type, boolean forSpawnCount)
+    {
+        int count = 0;
+        for (int x = 0; x < field_72996_f.size(); x++)
+        {
+            if (((Entity)field_72996_f.get(x)).isCreatureType(type, forSpawnCount))
+            {
+                count++;
+            }
+        }
+        return count;
+    }
+
+    @Deprecated // remove in 1.13
+    public void markTileEntitiesInChunkForRemoval(Chunk chunk)
+    {
+        for (TileEntity tileentity : chunk.func_177434_r().values())
+        {
+            func_147457_a(tileentity);
+        }
+    }
+
+    protected void initCapabilities()
+    {
+        net.minecraftforge.common.capabilities.ICapabilityProvider parent = field_73011_w.initCapabilities();
+        capabilities = net.minecraftforge.event.ForgeEventFactory.gatherCapabilities(this, parent);
+        net.minecraftforge.common.util.WorldCapabilityData data = (net.minecraftforge.common.util.WorldCapabilityData)perWorldStorage.func_75742_a(net.minecraftforge.common.util.WorldCapabilityData.class, net.minecraftforge.common.util.WorldCapabilityData.ID);
+        if (data == null)
+        {
+            capabilityData = new net.minecraftforge.common.util.WorldCapabilityData(capabilities);
+            perWorldStorage.func_75745_a(capabilityData.field_76190_i, capabilityData);
+        }
+        else
+        {
+            capabilityData = data;
+            capabilityData.setCapabilities(field_73011_w, capabilities);
+        }
+    }
+    @Override
+    public boolean hasCapability(net.minecraftforge.common.capabilities.Capability<?> capability, @Nullable EnumFacing facing)
+    {
+        return capabilities == null ? false : capabilities.hasCapability(capability, facing);
+    }
+    @Override
+    @Nullable
+    public <T> T getCapability(net.minecraftforge.common.capabilities.Capability<T> capability, @Nullable EnumFacing facing)
+    {
+        return capabilities == null ? null : capabilities.getCapability(capability, facing);
+    }
+
+    protected MapStorage perWorldStorage; //Moved to a getter to simulate final without being final so we can load in subclasses.
+    public MapStorage getPerWorldStorage()
+    {
+        return perWorldStorage;
+    }
+
     public void func_184135_a(Packet<?> p_184135_1_)
     {
         throw new UnsupportedOperationException("Can't send packets to server unless you're on the client.");
@@ -3673,4 +4583,11 @@
     {
         return null;
     }
+
+    public long getRealTimeTicks() {
+        if (this.func_73046_m() != null) {
+            return ((RealTimeTicking) this.func_73046_m()).getRealTimeTicks();
+        }
+        return 1;
+    }
\ No newline at end of file
 }
