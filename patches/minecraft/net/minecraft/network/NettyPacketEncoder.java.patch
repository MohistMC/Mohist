--- a/net/minecraft/network/NettyPacketEncoder.java
+++ b/net/minecraft/network/NettyPacketEncoder.java
@@ -4,6 +_,8 @@
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToByteEncoder;
 import java.io.IOException;
+
+import io.papermc.paper.adventure.PaperAdventure;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.apache.logging.log4j.Marker;
@@ -25,19 +_,21 @@
       } else {
          Integer integer = protocoltype.func_179246_a(this.field_152500_c, p_encode_2_);
          if (field_150798_a.isDebugEnabled()) {
-            field_150798_a.debug(field_150797_b, "OUT: [{}:{}] {}", p_encode_1_.channel().attr(NetworkManager.field_150739_c).get(), integer, p_encode_2_.getClass().getName());
+            field_150798_a.debug(com.mohistmc.util.i18n.i18n.get("nettypacketencoder.1", p_encode_1_.channel().attr(NetworkManager.field_150739_c).get(), integer, p_encode_2_.getClass().getName()));
          }
 
          if (integer == null) {
             throw new IOException("Can't serialize unregistered packet");
          } else {
             PacketBuffer packetbuffer = new PacketBuffer(p_encode_3_);
+            packetbuffer.adventure$locale = p_encode_1_.channel().attr(PaperAdventure.LOCALE_ATTRIBUTE).get(); // Paper
+
             packetbuffer.func_150787_b(integer);
 
             try {
                p_encode_2_.func_148840_b(packetbuffer);
             } catch (Throwable throwable) {
-               field_150798_a.error(throwable);
+               field_150798_a.error("Error encoding packet", throwable); // Forge: Get Minecraft to spit out more information about the Throwable we got.
                if (p_encode_2_.func_211402_a()) {
                   throw new SkipableEncoderException(throwable);
                } else {
