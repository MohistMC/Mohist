--- a/net/minecraft/network/NetworkManager.java
+++ b/net/minecraft/network/NetworkManager.java
<<<<<<< HEAD
@@ -1,7 +_,22 @@
=======
@@ -1,7 +_,23 @@
>>>>>>> parent of a3db1b5ab (Fix Badly compressed packet)
 package net.minecraft.network;
 
+import com.mohistmc.util.i18n.i18n;
+import java.net.InetAddress;
+import java.net.SocketAddress;
+import java.util.Queue;
+
+import javax.annotation.Nullable;
+import javax.crypto.Cipher;
+
+import org.apache.commons.lang3.Validate;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.MarkerManager;
+
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.mohistmc.netty.NettyPacketCompressor;
+import com.mohistmc.netty.NettyPacketDecompressor;
+
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelException;
@@ -26,25 +_,16 @@
 import io.netty.util.AttributeKey;
 import io.netty.util.concurrent.Future;
 import io.netty.util.concurrent.GenericFutureListener;
-import java.net.InetAddress;
-import java.net.SocketAddress;
-import java.util.Queue;
-import javax.annotation.Nullable;
-import javax.crypto.Cipher;
 import net.minecraft.network.login.ServerLoginNetHandler;
 import net.minecraft.network.play.ServerPlayNetHandler;
 import net.minecraft.network.play.server.SDisconnectPacket;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.LazyValue;
 import net.minecraft.util.math.MathHelper;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TranslationTextComponent;
 import net.minecraftforge.api.distmarker.Dist;
 import net.minecraftforge.api.distmarker.OnlyIn;
-import org.apache.commons.lang3.Validate;
-import org.apache.logging.log4j.LogManager;
-import org.apache.logging.log4j.Logger;
-import org.apache.logging.log4j.Marker;
-import org.apache.logging.log4j.MarkerManager;
 
 public class NetworkManager extends SimpleChannelInboundHandler<IPacket<?>> {
    private static final Logger field_150735_g = LogManager.getLogger();
@@ -62,8 +_,13 @@
    });
    private final PacketDirection field_179294_g;
    private final Queue<NetworkManager.QueuedPacket> field_150745_j = Queues.newConcurrentLinkedQueue();
-   private Channel field_150746_k;
-   private SocketAddress field_150743_l;
+   public Channel field_150746_k;
+   public SocketAddress field_150743_l;
+   // Spigot Start
+   public java.util.UUID spoofedUUID;
+   public com.mojang.authlib.properties.Property[] spoofedProfile;
+   public boolean preparing = true;
+   // Spigot End
    private INetHandler field_150744_m;
    private ITextComponent field_150742_o;
    private boolean field_152463_r;
@@ -74,6 +_,7 @@
    private float field_211397_t;
    private int field_211398_u;
    private boolean field_211399_v;
+   private java.util.function.Consumer<NetworkManager> activationHandler;
 
    public NetworkManager(PacketDirection p_i46004_1_) {
       this.field_179294_g = p_i46004_1_;
@@ -83,6 +_,10 @@
       super.channelActive(p_channelActive_1_);
       this.field_150746_k = p_channelActive_1_.channel();
       this.field_150743_l = this.field_150746_k.remoteAddress();
+      if (activationHandler != null) activationHandler.accept(this);
+      // Spigot Start
+      this.preparing = false;
+      // Spigot End
 
       try {
          this.func_150723_a(ProtocolType.HANDSHAKING);
@@ -95,7 +_,7 @@
    public void func_150723_a(ProtocolType p_150723_1_) {
       this.field_150746_k.attr(field_150739_c).set(p_150723_1_);
       this.field_150746_k.config().setAutoRead(true);
-      field_150735_g.debug("Enabled auto read");
+      field_150735_g.debug(i18n.get("networkmanager.1"));
    }
 
    public void channelInactive(ChannelHandlerContext p_channelInactive_1_) throws Exception {
@@ -104,30 +_,31 @@
 
    public void exceptionCaught(ChannelHandlerContext p_exceptionCaught_1_, Throwable p_exceptionCaught_2_) {
       if (p_exceptionCaught_2_ instanceof SkipableEncoderException) {
-         field_150735_g.debug("Skipping packet due to errors", p_exceptionCaught_2_.getCause());
+         field_150735_g.debug(i18n.get("networkmanager.2"), p_exceptionCaught_2_.getCause());
       } else {
          boolean flag = !this.field_211399_v;
          this.field_211399_v = true;
          if (this.field_150746_k.isOpen()) {
             if (p_exceptionCaught_2_ instanceof TimeoutException) {
-               field_150735_g.debug("Timeout", p_exceptionCaught_2_);
+               field_150735_g.debug(i18n.get("networkmanager.3"), p_exceptionCaught_2_);
                this.func_150718_a(new TranslationTextComponent("disconnect.timeout"));
             } else {
                ITextComponent itextcomponent = new TranslationTextComponent("disconnect.genericReason", "Internal Exception: " + p_exceptionCaught_2_);
                if (flag) {
-                  field_150735_g.debug("Failed to sent packet", p_exceptionCaught_2_);
+                  field_150735_g.debug(i18n.get("networkmanager.4"), p_exceptionCaught_2_);
                   this.func_201058_a(new SDisconnectPacket(itextcomponent), (p_211391_2_) -> {
                      this.func_150718_a(itextcomponent);
                   });
                   this.func_150721_g();
                } else {
-                  field_150735_g.debug("Double fault", p_exceptionCaught_2_);
+                  field_150735_g.debug(i18n.get("networkmanager.5"), p_exceptionCaught_2_);
                   this.func_150718_a(itextcomponent);
                }
             }
 
          }
       }
+      if (MinecraftServer.getServer().isDebugging()) p_exceptionCaught_2_.printStackTrace(); // Spigot
    }
 
    protected void channelRead0(ChannelHandlerContext p_channelRead0_1_, IPacket<?> p_channelRead0_2_) throws Exception {
@@ -170,8 +_,8 @@
       ProtocolType protocoltype1 = this.field_150746_k.attr(field_150739_c).get();
       ++this.field_211395_r;
       if (protocoltype1 != protocoltype) {
-         field_150735_g.debug("Disabled auto read");
-         this.field_150746_k.config().setAutoRead(false);
+         field_150735_g.debug(i18n.get("networkmanager.6"));
+         this.field_150746_k.eventLoop().execute(()->this.field_150746_k.config().setAutoRead(false));
       }
 
       if (this.field_150746_k.eventLoop().inEventLoop()) {
@@ -246,8 +_,11 @@
    }
 
    public void func_150718_a(ITextComponent p_150718_1_) {
+      // Spigot Start
+      this.preparing = false;
+      // Spigot End
       if (this.field_150746_k.isOpen()) {
-         this.field_150746_k.close().awaitUninterruptibly();
+         this.field_150746_k.close(); // We can't wait as this may be called from an event loop.
          this.field_150742_o = p_150718_1_;
       }
 
@@ -259,7 +_,9 @@
 
    @OnlyIn(Dist.CLIENT)
    public static NetworkManager func_181124_a(InetAddress p_181124_0_, int p_181124_1_, boolean p_181124_2_) {
+      if (p_181124_0_ instanceof java.net.Inet6Address) System.setProperty("java.net.preferIPv4Stack", "false");
       final NetworkManager networkmanager = new NetworkManager(PacketDirection.CLIENTBOUND);
+      networkmanager.activationHandler = net.minecraftforge.fml.network.NetworkHooks::registerClientLoginChannel;
       Class<? extends SocketChannel> oclass;
       LazyValue<? extends EventLoopGroup> lazyvalue;
       if (Epoll.isAvailable() && p_181124_2_) {
@@ -286,6 +_,7 @@
    @OnlyIn(Dist.CLIENT)
    public static NetworkManager func_150722_a(SocketAddress p_150722_0_) {
       final NetworkManager networkmanager = new NetworkManager(PacketDirection.CLIENTBOUND);
+      networkmanager.activationHandler = net.minecraftforge.fml.network.NetworkHooks::registerClientLoginChannel;
       (new Bootstrap()).group(field_179296_e.func_179281_c()).handler(new ChannelInitializer<Channel>() {
          protected void initChannel(Channel p_initChannel_1_) throws Exception {
             p_initChannel_1_.pipeline().addLast("packet_handler", networkmanager);
@@ -328,23 +_,23 @@
 
    public void func_179289_a(int p_179289_1_) {
       if (p_179289_1_ >= 0) {
-         if (this.field_150746_k.pipeline().get("decompress") instanceof NettyCompressionDecoder) {
-            ((NettyCompressionDecoder)this.field_150746_k.pipeline().get("decompress")).func_179303_a(p_179289_1_);
+         if (this.field_150746_k.pipeline().get("decompress") instanceof NettyPacketDecompressor) {
+            ((NettyPacketDecompressor)this.field_150746_k.pipeline().get("decompress")).setThreshold(p_179289_1_);
          } else {
-            this.field_150746_k.pipeline().addBefore("decoder", "decompress", new NettyCompressionDecoder(p_179289_1_));
+            this.field_150746_k.pipeline().addBefore("decoder", "decompress", new NettyPacketDecompressor(p_179289_1_));
          }
 
-         if (this.field_150746_k.pipeline().get("compress") instanceof NettyCompressionEncoder) {
-            ((NettyCompressionEncoder)this.field_150746_k.pipeline().get("compress")).func_179299_a(p_179289_1_);
+         if (this.field_150746_k.pipeline().get("compress") instanceof NettyPacketCompressor) {
+            ((NettyPacketCompressor)this.field_150746_k.pipeline().get("compress")).setThreshold(p_179289_1_);
          } else {
-            this.field_150746_k.pipeline().addBefore("encoder", "compress", new NettyCompressionEncoder(p_179289_1_));
+            this.field_150746_k.pipeline().addBefore("encoder", "compress", new NettyPacketCompressor(p_179289_1_));
          }
       } else {
-         if (this.field_150746_k.pipeline().get("decompress") instanceof NettyCompressionDecoder) {
+         if (this.field_150746_k.pipeline().get("decompress") instanceof NettyPacketDecompressor) {
             this.field_150746_k.pipeline().remove("decompress");
          }
 
-         if (this.field_150746_k.pipeline().get("compress") instanceof NettyCompressionEncoder) {
+         if (this.field_150746_k.pipeline().get("compress") instanceof NettyPacketCompressor) {
             this.field_150746_k.pipeline().remove("compress");
          }
       }
@@ -354,7 +_,7 @@
    public void func_179293_l() {
       if (this.field_150746_k != null && !this.field_150746_k.isOpen()) {
          if (this.field_179297_n) {
-            field_150735_g.warn("handleDisconnection() called twice");
+            field_150735_g.warn(i18n.get("networkmanager.7"));
          } else {
             this.field_179297_n = true;
             if (this.func_150730_f() != null) {
@@ -362,6 +_,7 @@
             } else if (this.func_150729_e() != null) {
                this.func_150729_e().func_147231_a(new TranslationTextComponent("multiplayer.disconnect.generic"));
             }
+            this.field_150745_j.clear(); // Free up packet queue.
          }
 
       }
@@ -376,6 +_,14 @@
       return this.field_211397_t;
    }
 
+   public Channel channel() {
+      return field_150746_k;
+   }
+
+   public PacketDirection getDirection() {
+      return this.field_179294_g;
+   }
+
    static class QueuedPacket {
       private final IPacket<?> field_150774_a;
       @Nullable
@@ -386,4 +_,11 @@
          this.field_201049_b = p_i48604_2_;
       }
    }
+
+   // Spigot Start
+   public SocketAddress getRawAddress()
+   {
+      return this.field_150746_k.remoteAddress();
+   }
+   // Spigot End
 }
