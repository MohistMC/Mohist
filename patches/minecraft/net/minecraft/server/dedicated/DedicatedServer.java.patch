--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -52,6 +_,7 @@
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.CreativeModeTab;
 import net.minecraft.world.item.Items;
+import net.minecraft.world.level.DataPackConfig;
 import net.minecraft.world.level.GameRules;
 import net.minecraft.world.level.GameType;
 import net.minecraft.world.level.Level;
@@ -60,6 +_,10 @@
 import net.minecraft.world.level.storage.WorldData;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.apache.logging.log4j.io.IoBuilder;
+import org.bukkit.command.CommandSender;
+import org.bukkit.event.server.RemoteServerCommandEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 
 public class DedicatedServer extends MinecraftServer implements ServerInterface {
    static final Logger f_139598_ = LogManager.getLogger();
@@ -80,8 +_,8 @@
    @Nullable
    private final Component f_142863_;
 
-   public DedicatedServer(Thread p_139609_, RegistryAccess.RegistryHolder p_139610_, LevelStorageSource.LevelStorageAccess p_139611_, PackRepository p_139612_, ServerResources p_139613_, WorldData p_139614_, DedicatedServerSettings p_139615_, DataFixer p_139616_, MinecraftSessionService p_139617_, GameProfileRepository p_139618_, GameProfileCache p_139619_, ChunkProgressListenerFactory p_139620_) {
-      super(p_139609_, p_139610_, p_139611_, p_139614_, p_139612_, Proxy.NO_PROXY, p_139616_, p_139613_, p_139617_, p_139618_, p_139619_, p_139620_);
+   public DedicatedServer( joptsimple.OptionSet p_139607_, DataPackConfig p_139608_, Thread p_139609_, RegistryAccess.RegistryHolder p_139610_, LevelStorageSource.LevelStorageAccess p_139611_, PackRepository p_139612_, ServerResources p_139613_, WorldData p_139614_, DedicatedServerSettings p_139615_, DataFixer p_139616_, MinecraftSessionService p_139617_, GameProfileRepository p_139618_, GameProfileCache p_139619_, ChunkProgressListenerFactory p_139620_) {
+      super(p_139607_,p_139608_,p_139609_, p_139610_, p_139611_, p_139614_, p_139612_, Proxy.NO_PROXY, p_139616_, p_139613_, p_139617_, p_139618_, p_139619_, p_139620_);
       this.f_139604_ = p_139615_;
       this.f_139602_ = new RconConsoleSource(this);
       this.f_139606_ = TextFilterClient.m_143736_(p_139615_.m_139777_().f_139724_);
@@ -91,12 +_,43 @@
    public boolean m_7038_() throws IOException {
       Thread thread = new Thread("Server console handler") {
          public void run() {
-            BufferedReader bufferedreader = new BufferedReader(new InputStreamReader(System.in, StandardCharsets.UTF_8));
+            if (net.minecraftforge.server.console.TerminalHandler.handleCommands(DedicatedServer.this)) return;
+            // CraftBukkit start
+            if (!org.bukkit.craftbukkit.Main.useConsole) {
+               return;
+            }
+            jline.console.ConsoleReader bufferedreader = reader;
 
+            // MC-33041, SPIGOT-5538: if System.in is not valid due to javaw, then return
+            try {
+               System.in.available();
+            } catch (IOException ex) {
+               return;
+            }
+            // CraftBukkit end
             String s1;
             try {
-               while(!DedicatedServer.this.m_129918_() && DedicatedServer.this.m_130010_() && (s1 = bufferedreader.readLine()) != null) {
-                  DedicatedServer.this.m_139645_(s1, DedicatedServer.this.m_129893_());
+               // CraftBukkit start - JLine disabling compatibility
+               while (!DedicatedServer.this.m_129918_() && DedicatedServer.this.m_130010_()) {
+                  if (org.bukkit.craftbukkit.Main.useJline) {
+                     s1 = bufferedreader.readLine(">", null);
+                  } else {
+                     s1 = bufferedreader.readLine();
+                  }
+
+                  // SPIGOT-5220: Throttle if EOF (ctrl^d) or stdin is /dev/null
+                  if (s1 == null) {
+                     try {
+                        Thread.sleep(50L);
+                     } catch (InterruptedException ex) {
+                        Thread.currentThread().interrupt();
+                     }
+                     continue;
+                  }
+                  if (s1.trim().length() > 0) { // Trim to filter lines which are just spaces
+                     DedicatedServer.this.m_139645_(s1, DedicatedServer.this.m_129893_());
+                  }
+                  // CraftBukkit end
                }
             } catch (IOException ioexception1) {
                DedicatedServer.f_139598_.error("Exception handling console input", (Throwable)ioexception1);
@@ -104,6 +_,26 @@
 
          }
       };
+      // CraftBukkit start - TODO: handle command-line logging arguments
+      java.util.logging.Logger global = java.util.logging.Logger.getLogger("");
+      global.setUseParentHandlers(false);
+      for (java.util.logging.Handler handler : global.getHandlers()) {
+         global.removeHandler(handler);
+      }
+      global.addHandler(new org.bukkit.craftbukkit.v1_18_R1.util.ForwardLogHandler());
+
+      final org.apache.logging.log4j.core.Logger logger = ((org.apache.logging.log4j.core.Logger) LogManager.getRootLogger());
+      for (org.apache.logging.log4j.core.Appender appender : logger.getAppenders().values()) {
+         if (appender instanceof org.apache.logging.log4j.core.appender.ConsoleAppender) {
+            logger.removeAppender(appender);
+         }
+      }
+
+      new org.bukkit.craftbukkit.v1_18_R1.util.TerminalConsoleWriterThread(System.out, this.reader).start();
+
+      System.setOut(IoBuilder.forLogger(logger).setLevel( org.apache.logging.log4j.Level.INFO).buildPrintStream());
+      System.setErr(IoBuilder.forLogger(logger).setLevel( org.apache.logging.log4j.Level.WARN).buildPrintStream());
+      // CraftBukkit end
       thread.setDaemon(true);
       thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(f_139598_));
       thread.start();
@@ -165,15 +_,26 @@
       if (!OldUsersConverter.m_11106_(this)) {
          return false;
       } else {
+         // CraftBukkit start
          this.m_129823_(new DedicatedPlayerList(this, this.f_129746_, this.f_129745_));
+         server.loadPlugins();
+         server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
+         // CraftBukkit end
+         // Spigot start
+         org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
+         org.spigotmc.SpigotConfig.registerCommands();
+         // Spigot end
+
          long i = Util.m_137569_();
          SkullBlockEntity.m_196700_(this.m_129927_(), this.m_129925_(), this);
          GameProfileCache.m_11004_(this.m_129797_());
+         if (!net.minecraftforge.server.ServerLifecycleHooks.handleServerAboutToStart(this)) return false;
          f_139598_.info("Preparing level \"{}\"", (Object)this.m_7123_());
          this.m_130006_();
          long j = Util.m_137569_() - i;
          String s = String.format(Locale.ROOT, "%.3fs", (double)j / 1.0E9D);
          f_139598_.info("Done ({})! For help, type \"help\"", (Object)s);
+         this.f_129726_ = Util.m_137550_(); //Forge: Update server time to prevent watchdog/spaming during long load.
          if (dedicatedserverproperties.f_139744_ != null) {
             this.m_129900_().m_46170_(GameRules.f_46153_).m_46246_(dedicatedserverproperties.f_139744_, this);
          }
@@ -186,6 +_,8 @@
          if (dedicatedserverproperties.f_139747_) {
             f_139598_.info("Starting remote control listener");
             this.f_139603_ = RconThread.m_11615_(this);
+            this.remoteConsole = new org.bukkit.craftbukkit.v1_18_R1.command.CraftRemoteConsoleCommandSender(this.f_139602_); // CraftBukkit
+
          }
 
          if (this.m_139669_() > 0L) {
@@ -197,12 +_,13 @@
          }
 
          Items.f_41852_.m_6787_(CreativeModeTab.f_40754_, NonNullList.m_122779_());
+         // <3 you Grum for this, saves us ~30 patch files! --^
          if (dedicatedserverproperties.f_139721_) {
             MinecraftServerStatistics.m_18328_(this);
             f_139598_.info("JMX monitoring enabled");
          }
 
-         return true;
+         return net.minecraftforge.server.ServerLifecycleHooks.handleServerStarting(this);
       }
    }
 
@@ -318,6 +_,7 @@
          this.f_139601_.m_7530_();
       }
 
+      System.exit( 0 );
    }
 
    public void m_5703_(BooleanSupplier p_139661_) {
@@ -335,8 +_,17 @@
 
    public void m_139665_() {
       while(!this.f_139600_.isEmpty()) {
-         ConsoleInput consoleinput = this.f_139600_.remove(0);
-         this.m_129892_().m_82117_(consoleinput.f_135929_, consoleinput.f_135928_);
+         ConsoleInput servercommand = (ConsoleInput) this.f_139600_.remove(0);
+
+         // CraftBukkit start - ServerCommand for preprocessing
+         ServerCommandEvent event = new ServerCommandEvent(console, servercommand.f_135928_);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) continue;
+         servercommand = new ConsoleInput(event.getCommand(), servercommand.f_135929_);
+
+         // this.getCommands().performCommand(servercommand.source, servercommand.msg); // Called in dispatchServerCommand
+         server.dispatchServerCommand(console, servercommand);
+         // CraftBukkit end
       }
 
    }
@@ -441,6 +_,11 @@
       return this.m_7913_().f_139718_;
    }
 
+   @Override
+   public CommandSender getBukkitSender(CommandSourceStack wrapper) {
+      return console;
+   }
+
    public int m_6329_() {
       return this.m_7913_().f_139719_;
    }
@@ -520,13 +_,44 @@
    }
 
    public String m_7138_() {
-      return "";
+      // CraftBukkit start - Whole method
+      StringBuilder result = new StringBuilder();
+      org.bukkit.plugin.Plugin[] plugins = server.getPluginManager().getPlugins();
+
+      result.append(server.getName());
+      result.append(" on Bukkit ");
+      result.append(server.getBukkitVersion());
+
+      if (plugins.length > 0 && server.getQueryPlugins()) {
+         result.append(": ");
+
+         for (int i = 0; i < plugins.length; i++) {
+            if (i > 0) {
+               result.append("; ");
+            }
+
+            result.append(plugins[i].getDescription().getName());
+            result.append(" ");
+            result.append(plugins[i].getDescription().getVersion().replaceAll(";", ","));
+         }
+      }
+
+      return result.toString();
+      // CraftBukkit end
    }
 
    public String m_7261_(String p_139644_) {
       this.f_139602_.m_11512_();
       this.m_18709_(() -> {
-         this.m_129892_().m_82117_(this.f_139602_.m_11514_(), p_139644_);
+         // CraftBukkit start - fire RemoteServerCommandEvent
+         RemoteServerCommandEvent event = new RemoteServerCommandEvent(remoteConsole, p_139644_);
+         server.getPluginManager().callEvent(event);
+         if (event.isCancelled()) {
+            return;
+         }
+         ConsoleInput serverCommand = new ConsoleInput(event.getCommand(), f_139602_.m_11514_());
+         server.dispatchServerCommand(remoteConsole, serverCommand);
+         // CraftBukkit end
       });
       return this.f_139602_.m_11513_();
    }
@@ -547,6 +_,11 @@
       return false;
    }
 
+   @Override //Forge: Enable formated text for colors in console.
+   public void m_6352_(net.minecraft.network.chat.Component message, java.util.UUID p_108776_) {
+      f_139598_.info(message.getString());
+   }
+
    public int m_7186_(int p_139659_) {
       return this.m_7913_().f_139723_ * p_139659_ / 100;
    }
@@ -590,4 +_,11 @@
    public Component m_141958_() {
       return this.f_142863_;
    }
+
+   // CraftBukkit start
+   public boolean isDebugging() {
+      return this.m_7913_().debug;
+   }
+
+   // CraftBukkit end
 }
