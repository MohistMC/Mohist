--- a/net/minecraft/server/Main.java
+++ b/net/minecraft/server/Main.java
@@ -1,6 +_,7 @@
 package net.minecraft.server;
 
 import com.google.common.collect.ImmutableSet;
+import com.mohistmc.util.DatapackCodecUtils;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.yggdrasil.YggdrasilAuthenticationService;
@@ -11,6 +_,7 @@
 import java.net.Proxy;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.Arrays;
 import java.util.Optional;
 import java.util.concurrent.CompletableFuture;
 import java.util.function.BooleanSupplier;
@@ -31,6 +_,7 @@
 import net.minecraft.server.management.PlayerProfileCache;
 import net.minecraft.util.DefaultUncaughtExceptionHandler;
 import net.minecraft.util.RegistryKey;
+import net.minecraft.util.SharedConstants;
 import net.minecraft.util.Util;
 import net.minecraft.util.WorldOptimizer;
 import net.minecraft.util.datafix.DataFixesManager;
@@ -71,31 +_,57 @@
       OptionSpec<Integer> optionspec11 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
       OptionSpec<String> optionspec12 = optionparser.accepts("serverId").withRequiredArg();
       OptionSpec<String> optionspec13 = optionparser.nonOptions();
+      optionparser.accepts("allowUpdates").withRequiredArg().ofType(Boolean.class).defaultsTo(Boolean.TRUE); // Forge: allow mod updates to proceed
+      optionparser.accepts("gameDir").withRequiredArg().ofType(File.class).defaultsTo(new File(".")); //Forge: Consume this argument, we use it in the launcher, and the client side.
+      optionparser.acceptsAll(Arrays.asList("b", "bukkit-settings"), "File for bukkit settings")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("bukkit.yml"))
+              .describedAs("Yml file");
+
+      optionparser.acceptsAll(Arrays.asList("C", "commands-settings"), "File for command settings")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("commands.yml"))
+              .describedAs("Yml file");
+      optionparser.acceptsAll(Arrays.asList("S", "spigot-settings"), "File for spigot settings")
+                .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("spigot.yml"))
+              .describedAs("Yml file");
+      optionparser.acceptsAll(Arrays.asList("P", "plugins"), "Plugin directory to use")
+              .withRequiredArg()
+              .ofType(File.class)
+              .defaultsTo(new File("plugins"))
+              .describedAs("Plugin directory");
+
 
       try {
          OptionSet optionset = optionparser.parse(p_main_0_);
+         MinecraftServer.options = optionset;
          if (optionset.has(optionspec7)) {
             optionparser.printHelpOn(System.err);
             return;
          }
+         Path path1 = Paths.get("eula.txt");
+         ServerEula servereula = new ServerEula(path1);
+
+         if (!servereula.func_154346_a()) {
+            field_240759_a_.info(com.mohistmc.util.i18n.i18n.get("main.1"));
+            return;
+         }
 
          CrashReport.func_230188_h_();
          Bootstrap.func_151354_b();
          Bootstrap.func_218821_c();
          Util.func_240994_l_();
+         if (!optionset.has(optionspec1)) net.minecraftforge.fml.server.ServerModLoader.load(); // Load mods before we load almost anything else anymore. Single spot now. Only loads if they haven't passed the initserver param
          DynamicRegistries.Impl dynamicregistries$impl = DynamicRegistries.func_239770_b_();
          Path path = Paths.get("server.properties");
          ServerPropertiesProvider serverpropertiesprovider = new ServerPropertiesProvider(dynamicregistries$impl, path);
          serverpropertiesprovider.func_219035_b();
-         Path path1 = Paths.get("eula.txt");
-         ServerEula servereula = new ServerEula(path1);
          if (optionset.has(optionspec1)) {
-            field_240759_a_.info("Initialized '{}' and '{}'", path.toAbsolutePath(), path1.toAbsolutePath());
-            return;
-         }
-
-         if (!servereula.func_154346_a()) {
-            field_240759_a_.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+            field_240759_a_.info(com.mohistmc.util.i18n.i18n.get("main.2", path.toAbsolutePath(), path1.toAbsolutePath()));
             return;
          }
 
@@ -105,24 +_,46 @@
          GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
          PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository, new File(file1, MinecraftServer.field_152367_a.getName()));
          String s = Optional.ofNullable(optionset.valueOf(optionspec10)).orElse(serverpropertiesprovider.func_219034_a().field_219021_o);
+         if (s == null || s.isEmpty() || new File(file1, s).getAbsolutePath().equals(new File(s).getAbsolutePath())) {
+            field_240759_a_.error("Invalid world directory specified, must not be null, empty or the same directory as your universe! " + s);
+            return;
+         }
          SaveFormat saveformat = SaveFormat.func_237269_a_(file1.toPath());
          SaveFormat.LevelSave saveformat$levelsave = saveformat.func_237274_c_(s);
          MinecraftServer.func_240777_a_(saveformat$levelsave);
          DatapackCodec datapackcodec = saveformat$levelsave.func_237297_e_();
          boolean flag = optionset.has(optionspec6);
          if (flag) {
-            field_240759_a_.warn("Safe mode active, only vanilla datapack will be loaded");
+            field_240759_a_.warn(com.mohistmc.util.i18n.i18n.get("main.3"));
          }
 
          ResourcePackList resourcepacklist = new ResourcePackList(new ServerPackFinder(), new FolderPackFinder(saveformat$levelsave.func_237285_a_(FolderName.field_237251_g_).toFile(), IPackNameDecorator.field_232627_c_));
+         // CraftBukkit start
+         File bukkitDataPackFolder = new File(saveformat$levelsave.func_237285_a_(FolderName.field_237251_g_).toFile(), "bukkit");
+         if (!bukkitDataPackFolder.exists()) {
+            bukkitDataPackFolder.mkdirs();
+         }
+         File mcMeta = new File(bukkitDataPackFolder, "pack.mcmeta");
+         try {
+            com.google.common.io.Files.write("{\n"
+                    + "    \"pack\": {\n"
+                    + "        \"description\": \"Data pack for resources provided by Bukkit plugins\",\n"
+                    + "        \"pack_format\": " + SharedConstants.func_215069_a().getPackVersion() + "\n"
+                    + "    }\n"
+                    + "}\n", mcMeta, com.google.common.base.Charsets.UTF_8);
+         } catch (java.io.IOException ex) {
+            throw new RuntimeException("Could not initialize Bukkit datapack", ex);
+         }
+         // CraftBukkit end
          DatapackCodec datapackcodec1 = MinecraftServer.func_240772_a_(resourcepacklist, datapackcodec == null ? DatapackCodec.field_234880_a_ : datapackcodec, flag);
+         DatapackCodecUtils.putDatapackConfig(datapackcodec1);
          CompletableFuture<DataPackRegistries> completablefuture = DataPackRegistries.func_240961_a_(resourcepacklist.func_232623_f_(), Commands.EnvironmentType.DEDICATED, serverpropertiesprovider.func_219034_a().field_225395_K, Util.func_215072_e(), Runnable::run);
 
          DataPackRegistries datapackregistries;
          try {
             datapackregistries = completablefuture.get();
          } catch (Exception exception) {
-            field_240759_a_.warn("Failed to load datapacks, can't proceed with server load. You can either fix your datapacks or reset to vanilla with --safeMode", (Throwable)exception);
+            field_240759_a_.warn(com.mohistmc.util.i18n.i18n.get("main.4", (Throwable)exception));
             resourcepacklist.close();
             return;
          }
@@ -142,6 +_,8 @@
                dimensiongeneratorsettings = optionset.has(optionspec3) ? serverproperties.field_241082_U_.func_236230_k_() : serverproperties.field_241082_U_;
             }
 
+            // Forge: Deserialize the DimensionGeneratorSettings to ensure modded dims are loaded on first server load (see SimpleRegistryCodec#decode). Vanilla behaviour only loads from the server.properties and deserializes only after the 2nd server load.
+            dimensiongeneratorsettings = DimensionGeneratorSettings.field_236201_a_.encodeStart(net.minecraft.util.registry.WorldGenSettingsExport.func_240896_a_(NBTDynamicOps.field_210820_a, dynamicregistries$impl), dimensiongeneratorsettings).flatMap(nbt -> DimensionGeneratorSettings.field_236201_a_.parse(worldsettingsimport, nbt)).getOrThrow(false, errorMsg->{});
             iserverconfiguration = new ServerWorldInfo(worldsettings, dimensiongeneratorsettings, Lifecycle.stable());
          }
 
@@ -159,28 +_,25 @@
             dedicatedserver1.func_71208_b(optionset.valueOf(optionspec11));
             dedicatedserver1.func_71204_b(optionset.has(optionspec2));
             dedicatedserver1.func_213208_c(optionset.valueOf(optionspec12));
-            boolean flag1 = !optionset.has(optionspec) && !optionset.valuesOf(optionspec13).contains("nogui");
-            if (flag1 && !GraphicsEnvironment.isHeadless()) {
-               dedicatedserver1.func_120011_ar();
-            }
 
             return dedicatedserver1;
          });
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
                dedicatedserver.func_71263_m(true);
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
          thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(field_240759_a_));
          Runtime.getRuntime().addShutdownHook(thread);
       } catch (Exception exception1) {
-         field_240759_a_.fatal("Failed to start the minecraft server", (Throwable)exception1);
+         field_240759_a_.fatal(com.mohistmc.util.i18n.i18n.get("main.5", (Throwable)exception1));
       }
 
    }
 
    private static void func_240761_a_(SaveFormat.LevelSave p_240761_0_, DataFixer p_240761_1_, boolean p_240761_2_, BooleanSupplier p_240761_3_, ImmutableSet<RegistryKey<World>> p_240761_4_) {
-      field_240759_a_.info("Forcing world upgrade!");
+      field_240759_a_.info(com.mohistmc.util.i18n.i18n.get("main.6"));
       WorldOptimizer worldoptimizer = new WorldOptimizer(p_240761_0_, p_240761_1_, p_240761_4_, p_240761_2_);
       ITextComponent itextcomponent = null;
 
@@ -194,7 +_,7 @@
          int i = worldoptimizer.func_212211_j();
          if (i > 0) {
             int j = worldoptimizer.func_212208_k() + worldoptimizer.func_212209_l();
-            field_240759_a_.info("{}% completed ({} / {} chunks)...", MathHelper.func_76141_d((float)j / (float)i * 100.0F), j, i);
+            field_240759_a_.info(com.mohistmc.util.i18n.i18n.get("main.7", MathHelper.func_76141_d((float)j / (float)i * 100.0F), j, i));
          }
 
          if (!p_240761_3_.getAsBoolean()) {
