--- ../src-base/minecraft/net/minecraft/server/management/PlayerChunkMap.java
+++ ../src-work/minecraft/net/minecraft/server/management/PlayerChunkMap.java
@@ -1,5 +1,6 @@
 package net.minecraft.server.management;
 
+import co.aikar.timings.Timing;
 import com.google.common.base.Predicate;
 import com.google.common.collect.AbstractIterator;
 import com.google.common.collect.ComparisonChain;
@@ -7,12 +8,15 @@
 import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
+import java.util.ArrayList;
 import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
+import java.util.LinkedList;
 import java.util.List;
 import java.util.Set;
 import javax.annotation.Nullable;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
@@ -20,6 +24,7 @@
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.WorldServer;
 import net.minecraft.world.chunk.Chunk;
+import net.minecraftforge.common.util.ChunkCoordComparator;
 
 public class PlayerChunkMap
 {
@@ -45,6 +50,7 @@
     private final List<PlayerChunkMapEntry> field_187311_h = Lists.<PlayerChunkMapEntry>newLinkedList();
     private final List<PlayerChunkMapEntry> field_111193_e = Lists.<PlayerChunkMapEntry>newArrayList();
     private int field_72698_e;
+    public int getViewDistance() { return field_72698_e; } // Paper OBFHELPER
     private long field_111192_g;
     private boolean field_187312_l = true;
     private boolean field_187313_m = true;
@@ -52,7 +58,7 @@
     public PlayerChunkMap(WorldServer p_i1176_1_)
     {
         this.field_72701_a = p_i1176_1_;
-        this.func_152622_a(p_i1176_1_.func_73046_m().func_184103_al().func_72395_o());
+        this.func_152622_a(p_i1176_1_.spigotConfig.viewDistance); // Spigot
     }
 
     public WorldServer func_72688_a()
@@ -109,6 +115,7 @@
 
         if (i - this.field_111192_g > 8000L)
         {
+            try (Timing ignored = field_72701_a.timings.doChunkMapUpdate.startTiming()) { // Paper
             this.field_111192_g = i;
 
             for (int j = 0; j < this.field_111193_e.size(); ++j)
@@ -117,21 +124,25 @@
                 playerchunkmapentry.func_187280_d();
                 playerchunkmapentry.func_187279_c();
             }
+            } // Paper timing
         }
 
         if (!this.field_72697_d.isEmpty())
         {
+            try (Timing ignored = field_72701_a.timings.doChunkMapToUpdate.startTiming()) { // Paper
             for (PlayerChunkMapEntry playerchunkmapentry2 : this.field_72697_d)
             {
                 playerchunkmapentry2.func_187280_d();
             }
 
             this.field_72697_d.clear();
+            } // Paper timing
         }
 
         if (this.field_187312_l && i % 4L == 0L)
         {
             this.field_187312_l = false;
+            try (Timing ignored = field_72701_a.timings.doChunkMapSortMissing.startTiming()) { // Paper
             Collections.sort(this.field_187311_h, new Comparator<PlayerChunkMapEntry>()
             {
                 public int compare(PlayerChunkMapEntry p_compare_1_, PlayerChunkMapEntry p_compare_2_)
@@ -139,11 +150,13 @@
                     return ComparisonChain.start().compare(p_compare_1_.func_187270_g(), p_compare_2_.func_187270_g()).result();
                 }
             });
+            } // Paper timing
         }
 
         if (this.field_187313_m && i % 4L == 2L)
         {
             this.field_187313_m = false;
+            try (Timing ignored = field_72701_a.timings.doChunkMapSortSendToPlayers.startTiming()) { // Paper
             Collections.sort(this.field_187310_g, new Comparator<PlayerChunkMapEntry>()
             {
                 public int compare(PlayerChunkMapEntry p_compare_1_, PlayerChunkMapEntry p_compare_2_)
@@ -151,10 +164,12 @@
                     return ComparisonChain.start().compare(p_compare_1_.func_187270_g(), p_compare_2_.func_187270_g()).result();
                 }
             });
+            } // Paper timing
         }
 
         if (!this.field_187311_h.isEmpty())
         {
+            try (Timing ignored = field_72701_a.timings.doChunkMapPlayersNeedingChunks.startTiming()) { // Paper
             long l = System.nanoTime() + 50000000L;
             int k = 49;
             Iterator<PlayerChunkMapEntry> iterator = this.field_187311_h.iterator();
@@ -183,13 +198,18 @@
                             break;
                         }
                     }
+                } else {
+                    // CraftBukkit - SPIGOT-2891: remove once chunk has been provided
+                    iterator.remove();
                 }
             }
+            } // Paper timing
         }
 
         if (!this.field_187310_g.isEmpty())
         {
             int i1 = 81;
+            try (Timing ignored = field_72701_a.timings.doChunkMapPendingSendToPlayers.startTiming()) { // Paper
             Iterator<PlayerChunkMapEntry> iterator1 = this.field_187310_g.iterator();
 
             while (iterator1.hasNext())
@@ -207,16 +227,19 @@
                     }
                 }
             }
+            } // Paper timing
         }
 
         if (this.field_72699_b.isEmpty())
         {
+            try (Timing ignored = field_72701_a.timings.doChunkMapUnloadChunks.startTiming()) { // Paper
             WorldProvider worldprovider = this.field_72701_a.field_73011_w;
 
-            if (!worldprovider.func_76567_e())
+            if (!worldprovider.func_76567_e() && !this.field_72701_a.field_73058_d) // Paper - respect saving disabled setting
             {
                 this.field_72701_a.func_72863_F().func_73240_a();
             }
+            } // Paper timing
         }
     }
 
@@ -257,6 +280,16 @@
         return playerchunkmapentry;
     }
 
+    // CraftBukkit start - add method
+    public final boolean isChunkInUse(int x, int z) {
+        PlayerChunkMapEntry pi = func_187301_b(x, z);
+        if (pi != null) {
+            return (pi.field_187283_c.size() > 0);
+        }
+        return false;
+    }
+    // CraftBukkit end
+
     public void func_180244_a(BlockPos p_180244_1_)
     {
         int i = p_180244_1_.func_177958_n() >> 4;
@@ -276,14 +309,26 @@
         p_72683_1_.field_71131_d = p_72683_1_.field_70165_t;
         p_72683_1_.field_71132_e = p_72683_1_.field_70161_v;
 
-        for (int k = i - this.field_72698_e; k <= i + this.field_72698_e; ++k)
+        // CraftBukkit start - Load nearby chunks first
+        List<ChunkPos> chunkList = new LinkedList<>();
+
+        // Paper start - Player view distance API
+        int viewDistance = p_72683_1_.getViewDistance();
+        for (int k = i - viewDistance; k <= i + viewDistance; ++k)
         {
-            for (int l = j - this.field_72698_e; l <= j + this.field_72698_e; ++l)
+            for (int l = j - viewDistance; l <= j + viewDistance; ++l)
             {
-                this.func_187302_c(k, l).func_187276_a(p_72683_1_);
+                // Paper end
+                chunkList.add(new ChunkPos(k, l));
             }
         }
 
+        Collections.sort(chunkList, new ChunkCoordComparator(p_72683_1_));
+        for (ChunkPos pair : chunkList) {
+            this.func_187302_c(pair.field_77276_a, pair.field_77275_b).func_187276_a(p_72683_1_);
+        }
+        // CraftBukkit end
+
         this.field_72699_b.add(p_72683_1_);
         this.func_187306_e();
     }
@@ -293,10 +338,13 @@
         int i = (int)p_72695_1_.field_71131_d >> 4;
         int j = (int)p_72695_1_.field_71132_e >> 4;
 
-        for (int k = i - this.field_72698_e; k <= i + this.field_72698_e; ++k)
+        // Paper start - Player view distance API
+        int viewDistance = p_72695_1_.getViewDistance();
+        for (int k = i - viewDistance; k <= i + viewDistance; ++k)
         {
-            for (int l = j - this.field_72698_e; l <= j + this.field_72698_e; ++l)
+            for (int l = j - viewDistance; l <= j + viewDistance; ++l)
             {
+                // Paper end
                 PlayerChunkMapEntry playerchunkmapentry = this.func_187301_b(k, l);
 
                 if (playerchunkmapentry != null)
@@ -337,19 +385,23 @@
         {
             int k = (int)p_72685_1_.field_71131_d >> 4;
             int l = (int)p_72685_1_.field_71132_e >> 4;
-            int i1 = this.field_72698_e;
+            final int viewDistance = p_72685_1_.getViewDistance(); // Paper - Player view distance API
+            int i1 = Math.max(getViewDistance(), viewDistance); // Paper - Player view distance API
             int j1 = i - k;
             int k1 = j - l;
 
+            List<ChunkPos> chunksToLoad = new LinkedList<>();
+
             if (j1 != 0 || k1 != 0)
             {
                 for (int l1 = i - i1; l1 <= i + i1; ++l1)
                 {
                     for (int i2 = j - i1; i2 <= j + i1; ++i2)
                     {
-                        if (!this.func_72684_a(l1, i2, k, l, i1))
+                        if (!this.func_72684_a(l1, i2, k, l, viewDistance)) // Paper - Player view distance API
                         {
-                            this.func_187302_c(l1, i2).func_187276_a(p_72685_1_);
+                            // this.getOrCreateEntry(l1, i2).addPlayer(player);
+                            chunksToLoad.add(new ChunkPos(l1, i2)); // CraftBukkit
                         }
 
                         if (!this.func_72684_a(l1 - j1, i2 - k1, i, j, i1))
@@ -367,6 +419,12 @@
                 p_72685_1_.field_71131_d = p_72685_1_.field_70165_t;
                 p_72685_1_.field_71132_e = p_72685_1_.field_70161_v;
                 this.func_187306_e();
+                // CraftBukkit start - send nearest chunks first
+                Collections.sort(chunksToLoad, new ChunkCoordComparator(p_72685_1_));
+                for (ChunkPos pair : chunksToLoad) {
+                    this.func_187302_c(pair.field_77276_a, pair.field_77275_b).func_187276_a(p_72685_1_);
+                }
+                // CraftBukkit end
             }
         }
     }
@@ -377,6 +435,7 @@
         return playerchunkmapentry != null && playerchunkmapentry.func_187275_d(p_72694_1_) && playerchunkmapentry.func_187274_e();
     }
 
+    public final void setViewDistanceForAll(int viewDistance) { this.func_152622_a(viewDistance); } // Paper - OBFHELPER
     public void func_152622_a(int p_152622_1_)
     {
         p_152622_1_ = MathHelper.func_76125_a(p_152622_1_, 3, 32);
@@ -387,43 +446,54 @@
 
             for (EntityPlayerMP entityplayermp : Lists.newArrayList(this.field_72699_b))
             {
-                int j = (int)entityplayermp.field_70165_t >> 4;
-                int k = (int)entityplayermp.field_70161_v >> 4;
+                this.setViewDistance(entityplayermp, p_152622_1_, false); // Paper - Split, don't mark sort pending, we'll handle it after
+            }
 
-                if (i > 0)
-                {
-                    for (int j1 = j - p_152622_1_; j1 <= j + p_152622_1_; ++j1)
-                    {
-                        for (int k1 = k - p_152622_1_; k1 <= k + p_152622_1_; ++k1)
-                        {
-                            PlayerChunkMapEntry playerchunkmapentry = this.func_187302_c(j1, k1);
+            this.field_72698_e = p_152622_1_;
+            this.func_187306_e();
+        }
+    }
 
-                            if (!playerchunkmapentry.func_187275_d(entityplayermp))
-                            {
-                                playerchunkmapentry.func_187276_a(entityplayermp);
-                            }
+    public void setViewDistance(EntityPlayerMP entityplayer, int i)
+    {
+        this.setViewDistance(entityplayer, i, true); // Mark sort pending by default so we don't have to remember to do so all the time
+    }
+
+    public void setViewDistance(EntityPlayerMP entityplayer, int i, boolean markSort)
+    {
+        i = MathHelper.func_76125_a(i, 3, 32);
+        int oldViewDistance = entityplayer.getViewDistance();
+        if (i != oldViewDistance){
+            int j = i - oldViewDistance;
+            int k = (int)entityplayer.field_70165_t >> 4;
+            int l = (int)entityplayer.field_70161_v >> 4;
+            int i1;
+            int j1;
+            if (j > 0) {
+                for(i1 = k - i; i1 <= k + i; ++i1) {
+                    for(j1 = l - i; j1 <= l + i; ++j1) {
+                        PlayerChunkMapEntry playerchunk = this.func_187302_c(i1, j1);
+                        if (!playerchunk.func_187275_d(entityplayer)) {
+                            playerchunk.func_187276_a(entityplayer);
                         }
                     }
                 }
-                else
-                {
-                    for (int l = j - this.field_72698_e; l <= j + this.field_72698_e; ++l)
-                    {
-                        for (int i1 = k - this.field_72698_e; i1 <= k + this.field_72698_e; ++i1)
-                        {
-                            if (!this.func_72684_a(l, i1, j, k, p_152622_1_))
-                            {
-                                this.func_187302_c(l, i1).func_187277_b(entityplayermp);
-                            }
+            } else {
+                for(i1 = k - oldViewDistance; i1 <= k + oldViewDistance; ++i1) {
+                    for(j1 = l - oldViewDistance; j1 <= l + oldViewDistance; ++j1) {
+                        if (!this.func_72684_a(i1, j1, k, l, i)) {
+                            this.func_187302_c(i1, j1).func_187277_b(entityplayer);
                         }
                     }
                 }
-            }
 
-            this.field_72698_e = p_152622_1_;
-            this.func_187306_e();
+                if (markSort) {
+                    this.func_187306_e();
+                }
+            }
         }
     }
+    // Paper end
 
     private void func_187306_e()
     {
@@ -456,11 +526,73 @@
         this.field_72697_d.remove(p_187305_1_);
         this.field_187310_g.remove(p_187305_1_);
         this.field_187311_h.remove(p_187305_1_);
-        Chunk chunk = p_187305_1_.func_187266_f();
+    }
 
-        if (chunk != null)
-        {
-            this.func_72688_a().func_72863_F().func_189549_a(chunk);
+    // CraftBukkit start - Sorter to load nearby chunks first
+    private static class ChunkCoordComparator implements java.util.Comparator<ChunkPos> {
+        private int x;
+        private int z;
+
+        public ChunkCoordComparator (EntityPlayer entityplayer) {
+            x = (int) entityplayer.field_70165_t >> 4;
+            z = (int) entityplayer.field_70161_v >> 4;
         }
+
+        public int compare(ChunkPos a, ChunkPos b) {
+            if (a.equals(b)) {
+                return 0;
+            }
+
+            // Subtract current position to set center point
+            int ax = a.field_77276_a - this.x;
+            int az = a.field_77275_b - this.z;
+            int bx = b.field_77276_a - this.x;
+            int bz = b.field_77275_b - this.z;
+
+            int result = ((ax - bx) * (ax + bx)) + ((az - bz) * (az + bz));
+            if (result != 0) {
+                return result;
+            }
+
+            if (ax < 0) {
+                if (bx < 0) {
+                    return bz - az;
+                } else {
+                    return -1;
+                }
+            } else {
+                if (bx < 0) {
+                    return 1;
+                } else {
+                    return az - bz;
+                }
+            }
+        }
     }
+    // CraftBukkit end
+
+    // Paper start - Player view distance API
+    public void updateViewDistance(EntityPlayerMP player, int distanceIn) {
+        final int oldViewDistance = player.getViewDistance();
+
+        // This represents the view distance that we will set on the player
+        // It can exist as a negative value
+        int playerViewDistance = MathHelper.func_76125_a(distanceIn, 3, 32);
+
+        // This value is the one we actually use to update the chunk map
+        // We don't ever want this to be a negative
+        int toSet = playerViewDistance;
+
+        if (distanceIn < 0) {
+            playerViewDistance = -1;
+            toSet = field_72701_a.func_184164_w().getViewDistance();
+        }
+
+        if (toSet != oldViewDistance) {
+            // Order matters
+            this.setViewDistance(player, toSet);
+            player.setViewDistance(playerViewDistance);
+        }
+    }
+    // Paper end
\ No newline at end of file
 }
