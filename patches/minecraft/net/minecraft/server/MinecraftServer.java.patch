--- a/net/minecraft/server/MinecraftServer.java
+++ b/net/minecraft/server/MinecraftServer.java
@@ -38,18 +38,18 @@
 import java.util.Date;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.Optional;
 import java.util.Random;
 import java.util.UUID;
-import java.util.Map.Entry;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
+import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
-import joptsimple.OptionParser;
+import jline.console.ConsoleReader;
 import joptsimple.OptionSet;
-import joptsimple.OptionSpec;
 import net.minecraft.advancements.AdvancementManager;
 import net.minecraft.advancements.FunctionManager;
 import net.minecraft.block.Block;
@@ -87,7 +87,6 @@
 import net.minecraft.server.management.WhiteList;
 import net.minecraft.tags.NetworkTagManager;
 import net.minecraft.test.TestCollection;
-import net.minecraft.util.DefaultUncaughtExceptionHandler;
 import net.minecraft.util.FrameTimer;
 import net.minecraft.util.IProgressUpdate;
 import net.minecraft.util.ResourceLocation;
@@ -137,25 +136,37 @@
 import org.apache.commons.lang3.Validate;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_15_R1.CraftServer;
+import org.bukkit.craftbukkit.v1_15_R1.Main;
+import org.bukkit.craftbukkit.v1_15_R1.SpigotTimings;
+import org.bukkit.craftbukkit.v1_15_R1.scoreboard.CraftScoreboardManager;
+import org.bukkit.event.server.ServerLoadEvent;
+import org.bukkit.event.world.WorldInitEvent;
+import org.bukkit.event.world.WorldLoadEvent;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.plugin.PluginLoadOrder;
+import org.magmafoundation.magma.forge.ForgeInject;
+import org.spigotmc.SlackActivityAccountant;
 
 public abstract class MinecraftServer extends RecursiveEventLoop<TickDelayedTask> implements ISnooperInfo, ICommandSource, AutoCloseable, Runnable {
-   private static final Logger field_147145_h = LogManager.getLogger();
+   public static final Logger field_147145_h = LogManager.getLogger(); // private->public CraftBukkit
    public static final File field_152367_a = new File("usercache.json");
    private static final CompletableFuture<Unit> field_223713_i = CompletableFuture.completedFuture(Unit.INSTANCE);
    public static final WorldSettings field_213219_c = (new WorldSettings((long)"North Carolina".hashCode(), GameType.SURVIVAL, true, false, WorldType.field_77137_b)).func_77159_a();
-   private final SaveFormat field_71310_m;
+   public SaveFormat field_71310_m; // private final->public CraftBukkit
    private final Snooper field_71307_n = new Snooper("server", this, Util.func_211177_b());
-   private final File field_71308_o;
+   public File field_71308_o; // private final->public CraftBukkit
    private final List<Runnable> field_71322_p = Lists.newArrayList();
    private final DebugProfiler field_71304_b = new DebugProfiler(this::func_71259_af);
-   private final NetworkSystem field_147144_o;
-   protected final IChunkStatusListenerFactory field_213220_d;
+   private NetworkSystem field_147144_o; // Spigot
+   public final IChunkStatusListenerFactory field_213220_d; // protected->public CraftBukkit
    private final ServerStatusResponse field_147147_p = new ServerStatusResponse();
    private final Random field_147146_q = new Random();
-   private final DataFixer field_184112_s;
+   public final DataFixer field_184112_s; // private->public CraftBukkit
    private String field_71320_r;
    private int field_71319_s = -1;
-   private final Map<DimensionType, ServerWorld> field_71305_c = Maps.newIdentityHashMap();
+   public final Map<DimensionType, ServerWorld> field_71305_c = Maps.newIdentityHashMap(); // private->public CraftBukkit
    private PlayerList field_71318_t;
    private volatile boolean field_71317_u = true;
    private boolean field_71316_v;
@@ -196,7 +207,7 @@
    private final GameProfileRepository field_152365_W;
    private final PlayerProfileCache field_152366_X;
    private long field_147142_T;
-   protected final Thread field_175590_aa = Util.func_200696_a(new Thread(this, "Server thread"), (p_213187_0_) -> {
+   public final Thread field_175590_aa = Util.func_200696_a(new Thread(net.minecraftforge.fml.common.thread.SidedThreadGroups.SERVER, this, "Server thread"), (p_213187_0_) -> { // protected->public CraftBukkit
       p_213187_0_.setUncaughtExceptionHandler((p_213206_0_, p_213206_1_) -> {
          field_147145_h.error(p_213206_1_);
       });
@@ -210,7 +221,7 @@
    private final ResourcePackList<ResourcePackInfo> field_195577_ad = new ResourcePackList<>(ResourcePackInfo::new);
    @Nullable
    private FolderPackFinder field_195578_ae;
-   private final Commands field_195579_af;
+   public Commands field_195579_af; // private final->public CraftBukkit
    private final RecipeManager field_199530_ag = new RecipeManager();
    private final NetworkTagManager field_199736_ah = new NetworkTagManager();
    private final ServerScoreboard field_200255_ai = new ServerScoreboard(this);
@@ -221,37 +232,85 @@
    private final LootTableManager field_200256_aj = new LootTableManager(this.field_229734_an_);
    private final AdvancementManager field_200257_ak = new AdvancementManager();
    private final FunctionManager field_200258_al = new FunctionManager(this);
+   private final net.minecraftforge.common.loot.LootModifierManager lootManager = new net.minecraftforge.common.loot.LootModifierManager();
    private final FrameTimer field_213215_ap = new FrameTimer();
    private boolean field_205745_an;
    private boolean field_212205_ao;
    private boolean field_213216_as;
    private float field_211152_ao;
-   private final Executor field_213217_au;
+   public final Executor field_213217_au; // private->public CraftBukkit
    @Nullable
    private String field_213218_av;
 
-   public MinecraftServer(File p_i50590_1_, Proxy p_i50590_2_, DataFixer p_i50590_3_, Commands p_i50590_4_, YggdrasilAuthenticationService p_i50590_5_, MinecraftSessionService p_i50590_6_, GameProfileRepository p_i50590_7_, PlayerProfileCache p_i50590_8_, IChunkStatusListenerFactory p_i50590_9_, String p_i50590_10_) {
+   // CraftBukkit start
+   public CraftServer server;
+   public OptionSet options;
+   public org.bukkit.command.ConsoleCommandSender console;
+   public org.bukkit.command.RemoteConsoleCommandSender remoteConsole;
+   public ConsoleReader reader;
+   public static int currentTick = (int) (System.currentTimeMillis() / 50);
+   public java.util.Queue<Runnable> processQueue = new java.util.concurrent.ConcurrentLinkedQueue<Runnable>();
+   public int autosavePeriod;
+   public File bukkitDataPackFolder;
+   public Commands vanillaCommandDispatcher;
+   private boolean forceTicks;
+   // CraftBukkit end
+   // Spigot start
+   public static final int TPS = 20;
+   public static final int TICK_TIME = 1000000000 / TPS;
+   private static final int SAMPLE_INTERVAL = 100;
+   public final double[] recentTps = new double[ 3 ];
+   public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
+   // Spigot end
+
+   public MinecraftServer(OptionSet options, Proxy p_i50590_2_, DataFixer dataFixerIn, Commands p_i50590_4_, YggdrasilAuthenticationService p_i50590_5_, MinecraftSessionService p_i50590_6_, GameProfileRepository p_i50590_7_, PlayerProfileCache p_i50590_8_, IChunkStatusListenerFactory p_i50590_9_, String p_i50590_10_) {
       super("Server");
       this.field_110456_c = p_i50590_2_;
-      this.field_195579_af = p_i50590_4_;
+      this.field_195579_af = this.vanillaCommandDispatcher = p_i50590_4_; // CraftBukkit
       this.field_152364_T = p_i50590_5_;
       this.field_147143_S = p_i50590_6_;
       this.field_152365_W = p_i50590_7_;
       this.field_152366_X = p_i50590_8_;
-      this.field_71308_o = p_i50590_1_;
-      this.field_147144_o = new NetworkSystem(this);
+      // this.anvilFile = p_i50590_1_; // CraftBukkit
+      // this.networkSystem = new NetworkSystem(this); // Spigot
       this.field_213220_d = p_i50590_9_;
-      this.field_71310_m = new SaveFormat(p_i50590_1_.toPath(), p_i50590_1_.toPath().resolve("../backups"), p_i50590_3_);
-      this.field_184112_s = p_i50590_3_;
+      //this.anvilConverterForAnvilFile = new SaveFormat(p_i50590_1_.toPath(), p_i50590_1_.toPath().resolve("../backups"), dataFixerIn);
+      this.field_184112_s = dataFixerIn;
       this.field_195576_ac.func_219534_a(this.field_199736_ah);
       this.field_195576_ac.func_219534_a(this.field_229734_an_);
       this.field_195576_ac.func_219534_a(this.field_199530_ag);
       this.field_195576_ac.func_219534_a(this.field_200256_aj);
       this.field_195576_ac.func_219534_a(this.field_200258_al);
       this.field_195576_ac.func_219534_a(this.field_200257_ak);
+      field_195576_ac.func_219534_a(lootManager);
       this.field_213217_au = Util.func_215072_e();
       this.field_71294_K = p_i50590_10_;
+      // CraftBukkit start
+      this.options = options;
+      // Try to see if we're actually running in a terminal, disable jline if not
+      if (System.console() == null && System.getProperty("jline.terminal") == null) {
+         System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+         Main.useJline = false;
+      }
+
+      try {
+         reader = new ConsoleReader(System.in, System.out);
+         reader.setExpandEvents(false); // Avoid parsing exceptions for uncommonly used event designators
+      } catch (Throwable e) {
+         try {
+            // Try again with jline disabled for Windows users without C++ 2008 Redistributable
+            System.setProperty("jline.terminal", "jline.UnsupportedTerminal");
+            System.setProperty("user.language", "en");
+            Main.useJline = false;
+            reader = new ConsoleReader(System.in, System.out);
+            reader.setExpandEvents(false);
+         } catch (IOException ex) {
+            field_147145_h.warn((String) null, ex);
    }
+      }
+      Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.v1_15_R1.util.ServerShutdownThread(this));
+   }
+   // CraftBukkit end
 
    private void func_213204_a(DimensionSavedDataManager p_213204_1_) {
       ScoreboardSaveData scoreboardsavedata = p_213204_1_.func_215752_a(ScoreboardSaveData::new, "scoreboard");
@@ -261,7 +320,7 @@
 
    protected abstract boolean func_71197_b() throws IOException;
 
-   protected void func_71237_c(String p_71237_1_) {
+   public void func_71237_c(String p_71237_1_) { // protected->public CraftBukkit
       if (this.func_71254_M().func_75801_b(p_71237_1_)) {
          field_147145_h.info("Converting map!");
          this.func_200245_b(new TranslationTextComponent("menu.convertingLevel"));
@@ -293,10 +352,10 @@
       }
 
       if (this.field_212205_ao) {
-         field_147145_h.info("Forcing world upgrade!");
-         WorldInfo worldinfo = this.func_71254_M().func_75803_c(this.func_71270_I());
+         field_147145_h.info("Forcing world upgrade! {}", p_71237_1_);
+         WorldInfo worldinfo = this.func_71254_M().func_75803_c(p_71237_1_); // CraftBukkit
          if (worldinfo != null) {
-            WorldOptimizer worldoptimizer = new WorldOptimizer(this.func_71270_I(), this.func_71254_M(), worldinfo, this.field_213216_as);
+            WorldOptimizer worldoptimizer = new WorldOptimizer(p_71237_1_, this.func_71254_M(), worldinfo, this.field_213216_as);
             ITextComponent itextcomponent = null;
 
             while(!worldoptimizer.func_212218_b()) {
@@ -332,85 +391,141 @@
    }
 
    protected void func_71247_a(String p_71247_1_, String p_71247_2_, long p_71247_3_, WorldType p_71247_5_, JsonElement p_71247_6_) {
-      this.func_71237_c(p_71247_1_);
-      this.func_200245_b(new TranslationTextComponent("menu.loadingLevel"));
-      SaveHandler savehandler = this.func_71254_M().func_197715_a(p_71247_1_, this);
-      this.func_175584_a(this.func_71270_I(), savehandler);
-      WorldInfo worldinfo = savehandler.func_75757_d();
-      WorldSettings worldsettings;
-      if (worldinfo == null) {
-         if (this.func_71242_L()) {
-            worldsettings = field_213219_c;
-         } else {
-            worldsettings = new WorldSettings(p_71247_3_, this.func_71265_f(), this.func_71225_e(), this.func_71199_h(), p_71247_5_);
-            worldsettings.func_205390_a(p_71247_6_);
-            if (this.field_71289_N) {
-               worldsettings.func_77159_a();
+      this.func_200245_b(new TranslationTextComponent("menu.loadingLevel", new Object[0]));
+      int worldCount = 3;
+      for (int j = 0; j < worldCount; ++j) {
+         byte dimension = 0;
+         if (j == 1) {
+            if (!this.func_71255_r()) {
+               continue;
             }
+            dimension = -1;
          }
+         if (j == 2) {
+            if (!this.server.getAllowEnd()) {
+               continue;
+            }
+            dimension = 1;
+         }
+         final String worldType = org.bukkit.World.Environment.getEnvironment(dimension).toString().toLowerCase();
+         final String name = (dimension == 0) ? p_71247_1_ : (String.valueOf(p_71247_1_) + "_" + worldType);
+         this.func_71237_c(name);
+         final ChunkGenerator gen = this.server.getGenerator(name);
+         final WorldSettings worldsettings = new WorldSettings(p_71247_3_, this.func_71265_f(), this.func_71225_e(), this.func_71199_h(), p_71247_5_);
+         worldsettings.func_205390_a(p_71247_6_);
+         WorldInfo worlddata;
+         ServerWorld world;
+         if (j == 0) {
+            ForgeInject.injectForge(); // Magma
 
-         worldinfo = new WorldInfo(worldsettings, p_71247_2_);
-      } else {
-         worldinfo.func_76062_a(p_71247_2_);
-         worldsettings = new WorldSettings(worldinfo);
+            final SaveHandler worldnbtstorage = new SaveHandler(this.server.getWorldContainer(), p_71247_2_, this, this.field_184112_s);
+            worlddata = worldnbtstorage.func_75757_d();
+            if (worlddata == null) {
+               worlddata = new WorldInfo(worldsettings, p_71247_2_);
+            }
+            worlddata.checkName(p_71247_2_);
+            this.func_195560_a(worldnbtstorage.func_75765_b(), worlddata);
+            final IChunkStatusListener worldloadlistener = this.field_213220_d.create(11);
+         if (this.func_71242_L()) {
+               worlddata.func_176127_a(MinecraftServer.field_213219_c);
+            }
+            world = new ServerWorld(this, this.field_213217_au, worldnbtstorage, worlddata, DimensionType.field_223227_a_, this.field_71304_b, worldloadlistener, org.bukkit.World.Environment.getEnvironment(dimension), gen);
+            final DimensionSavedDataManager worldpersistentdata = world.func_217481_x();
+            this.func_213204_a(worldpersistentdata);
+            this.server.scoreboardManager = new CraftScoreboardManager(this, world.func_96441_U());
+            this.field_229733_al_ = new CommandStorage(worldpersistentdata);
+         }
+         else {
+            final String dim = "DIM" + dimension;
+            final File newWorld = new File(new File(name), dim);
+            final File oldWorld = new File(new File(p_71247_1_), dim);
+            final File oldLevelDat = new File(new File(p_71247_1_), "level.dat");
+            if (!newWorld.isDirectory() && oldWorld.isDirectory() && oldLevelDat.isFile()) {
+               MinecraftServer.field_147145_h.info("---- Migration of old " + worldType + " folder required ----");
+               MinecraftServer.field_147145_h.info("Unfortunately due to the way that Minecraft implemented multiworld support in 1.6, Bukkit requires that you move your " + worldType + " folder to a new location in order to operate correctly.");
+               MinecraftServer.field_147145_h.info("We will move this folder for you, but it will mean that you need to move it back should you wish to stop using Bukkit in the future.");
+               MinecraftServer.field_147145_h.info("Attempting to move " + oldWorld + " to " + newWorld + "...");
+               if (newWorld.exists()) {
+                  MinecraftServer.field_147145_h.warn("A file or folder already exists at " + newWorld + "!");
+                  MinecraftServer.field_147145_h.info("---- Migration of old " + worldType + " folder failed ----");
+               }
+               else if (newWorld.getParentFile().mkdirs()) {
+                  if (oldWorld.renameTo(newWorld)) {
+                     MinecraftServer.field_147145_h.info("Success! To restore " + worldType + " in the future, simply move " + newWorld + " to " + oldWorld);
+                     try {
+                        com.google.common.io.Files.copy(oldLevelDat, new File(new File(name), "level.dat"));
+                        org.apache.commons.io.FileUtils.copyDirectory(new File(new File(p_71247_1_), "data"), new File(new File(name), "data"));
+                     }
+                     catch (IOException exception) {
+                        MinecraftServer.field_147145_h.warn("Unable to migrate world data.");
+            }
+                     MinecraftServer.field_147145_h.info("---- Migration of old " + worldType + " folder complete ----");
+                  }
+                  else {
+                     MinecraftServer.field_147145_h.warn("Could not move folder " + oldWorld + " to " + newWorld + "!");
+                     MinecraftServer.field_147145_h.info("---- Migration of old " + worldType + " folder failed ----");
+                  }
+               }
+               else {
+                  MinecraftServer.field_147145_h.warn("Could not create path for " + newWorld + "!");
+                  MinecraftServer.field_147145_h.info("---- Migration of old " + worldType + " folder failed ----");
+         }
+            }
+            final SaveHandler worldnbtstorage2 = new SaveHandler(this.server.getWorldContainer(), name, this, this.field_184112_s);
+            worlddata = worldnbtstorage2.func_75757_d();
+            if (worlddata == null) {
+               worlddata = new WorldInfo(worldsettings, name);
+            }
+            worlddata.checkName(name);
+            final IChunkStatusListener worldloadlistener2 = this.field_213220_d.create(11);
+            world = new ServerMultiWorld(this.func_71218_a(DimensionType.field_223227_a_), this, this.field_213217_au, worldnbtstorage2, DimensionType.func_186069_a(dimension), this.field_71304_b, worldloadlistener2, worlddata, org.bukkit.World.Environment.getEnvironment(dimension), gen);
+         }
+         this.initWorld(world, worlddata, worldsettings);
+         this.server.getPluginManager().callEvent(new WorldInitEvent(world.getWorldCB()));
+         this.field_71305_c.put(world.func_201675_m().func_186058_p(), world);
+         this.func_184103_al().func_212504_a(world);
+         if (worlddata.func_201357_P() != null) {
+            this.func_201300_aS().func_201381_a(worlddata.func_201357_P());
       }
-
-      worldinfo.func_230145_a_(this.getServerModName(), this.func_230045_q_().isPresent());
-      this.func_195560_a(savehandler.func_75765_b(), worldinfo);
-      IChunkStatusListener ichunkstatuslistener = this.field_213220_d.create(11);
-      this.func_213194_a(savehandler, worldinfo, worldsettings, ichunkstatuslistener);
+         net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Load(world));
+      }
       this.func_147139_a(this.func_147135_j(), true);
-      this.func_213186_a(ichunkstatuslistener);
+      for (final ServerWorld worldserver : this.func_212370_w()) {
+         this.loadInitialChunks(worldserver.func_72863_F().field_217237_a.field_219266_t, worldserver);
+         this.server.getPluginManager().callEvent(new WorldLoadEvent(worldserver.getWorldCB()));
+      }
+      this.server.enablePlugins(PluginLoadOrder.POSTWORLD);
+      this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
+      this.field_147144_o.acceptConnections();
    }
 
-   protected void func_213194_a(SaveHandler p_213194_1_, WorldInfo p_213194_2_, WorldSettings p_213194_3_, IChunkStatusListener p_213194_4_) {
-      if (this.func_71242_L()) {
-         p_213194_2_.func_176127_a(field_213219_c);
+   // CraftBukkit start
+   public void initWorld(final ServerWorld worldserver1, final WorldInfo worlddata, final WorldSettings worldsettings) {
+      worldserver1.func_175723_af().func_222519_b(worlddata);
+      if (worldserver1.generator != null) {
+         worldserver1.getWorldCB().getPopulators().addAll(worldserver1.generator.getDefaultPopulators(worldserver1.getWorldCB()));
       }
-
-      ServerWorld serverworld = new ServerWorld(this, this.field_213217_au, p_213194_1_, p_213194_2_, DimensionType.field_223227_a_, this.field_71304_b, p_213194_4_);
-      this.field_71305_c.put(DimensionType.field_223227_a_, serverworld);
-      DimensionSavedDataManager dimensionsaveddatamanager = serverworld.func_217481_x();
-      this.func_213204_a(dimensionsaveddatamanager);
-      this.field_229733_al_ = new CommandStorage(dimensionsaveddatamanager);
-      serverworld.func_175723_af().func_222519_b(p_213194_2_);
-      ServerWorld serverworld1 = this.func_71218_a(DimensionType.field_223227_a_);
-      if (!p_213194_2_.func_76070_v()) {
+      if (!worlddata.func_76070_v()) {
          try {
-            serverworld1.func_73052_b(p_213194_3_);
-            if (p_213194_2_.func_76067_t() == WorldType.field_180272_g) {
-               this.func_213188_a(p_213194_2_);
+            worldserver1.func_73052_b(worldsettings);
+            if (worlddata.func_76067_t() == WorldType.field_180272_g) {
+               this.func_213188_a(worlddata);
             }
-
-            p_213194_2_.func_76091_d(true);
-         } catch (Throwable throwable) {
-            CrashReport crashreport = CrashReport.func_85055_a(throwable, "Exception initializing level");
-
+            worlddata.func_76091_d(true);
+         }
+         catch (Throwable throwable) {
+            final CrashReport crashreport = CrashReport.func_85055_a(throwable, "Exception initializing level");
             try {
-               serverworld1.func_72914_a(crashreport);
-            } catch (Throwable var11) {
-               ;
+               worldserver1.func_72914_a(crashreport);
             }
-
+            catch (Throwable t) {}
             throw new ReportedException(crashreport);
          }
-
-         p_213194_2_.func_76091_d(true);
+         worlddata.func_76091_d(true);
       }
-
-      this.func_184103_al().func_212504_a(serverworld1);
-      if (p_213194_2_.func_201357_P() != null) {
-         this.func_201300_aS().func_201381_a(p_213194_2_.func_201357_P());
       }
+   // CraftBukkit end
 
-      for(DimensionType dimensiontype : DimensionType.func_212681_b()) {
-         if (dimensiontype != DimensionType.field_223227_a_) {
-            this.field_71305_c.put(dimensiontype, new ServerMultiWorld(serverworld1, this, this.field_213217_au, p_213194_1_, dimensiontype, this.field_71304_b, p_213194_4_));
-         }
-      }
-
-   }
-
    private void func_213188_a(WorldInfo p_213188_1_) {
       p_213188_1_.func_176128_f(false);
       p_213188_1_.func_176121_c(true);
@@ -428,6 +543,25 @@
    protected void func_195560_a(File p_195560_1_, WorldInfo p_195560_2_) {
       this.field_195577_ad.func_198982_a(new ServerPackFinder());
       this.field_195578_ae = new FolderPackFinder(new File(p_195560_1_, "datapacks"));
+
+      // CraftBukkit start
+      bukkitDataPackFolder = new File(new File(p_195560_1_, "datapacks"), "bukkit");
+      if (!bukkitDataPackFolder.exists()) {
+         bukkitDataPackFolder.mkdirs();
+      }
+      File mcMeta = new File(bukkitDataPackFolder, "pack.mcmeta");
+      try {
+         com.google.common.io.Files.write("{\n"
+             + "    \"pack\": {\n"
+             + "        \"description\": \"Data pack for resources provided by Bukkit plugins\",\n"
+             + "        \"pack_format\": " + SharedConstants.func_215069_a().getPackVersion() + "\n"
+             + "    }\n"
+             + "}\n", mcMeta, com.google.common.base.Charsets.UTF_8);
+      } catch (IOException ex) {
+         throw new RuntimeException("Could not initialize Bukkit datapack", ex);
+      }
+      // CraftBukkit end
+
       this.field_195577_ad.func_198982_a(this.field_195578_ae);
       this.field_195577_ad.func_198983_a();
       List<ResourcePackInfo> list = Lists.newArrayList();
@@ -446,10 +580,13 @@
       this.func_229737_ba_();
    }
 
-   protected void func_213186_a(IChunkStatusListener p_213186_1_) {
+   public void loadInitialChunks(IChunkStatusListener p_213186_1_, ServerWorld serverworld) {
+      if (!serverworld.getWorldCB().getKeepSpawnInMemory()) {
+         return;
+      }
       this.func_200245_b(new TranslationTextComponent("menu.generatingTerrain"));
-      ServerWorld serverworld = this.func_71218_a(DimensionType.field_223227_a_);
-      field_147145_h.info("Preparing start region for dimension " + DimensionType.func_212678_a(serverworld.field_73011_w.func_186058_p()));
+      this.forceTicks = true;
+      field_147145_h.info("Preparing start region for dimension '{}'/{}", serverworld.func_72912_H().func_76065_j(), DimensionType.func_212678_a(serverworld.field_73011_w.func_186058_p().getType()));
       BlockPos blockpos = serverworld.func_175694_M();
       p_213186_1_.func_219509_a(new ChunkPos(blockpos));
       ServerChunkProvider serverchunkprovider = serverworld.func_72863_F();
@@ -458,31 +595,26 @@
       serverchunkprovider.func_217228_a(TicketType.field_219488_a, new ChunkPos(blockpos), 11, Unit.INSTANCE);
 
       while(serverchunkprovider.func_217229_b() != 441) {
-         this.field_211151_aa = Util.func_211177_b() + 10L;
-         this.func_213202_o();
+         this.executeModerately();
       }
+      this.executeModerately();
 
-      this.field_211151_aa = Util.func_211177_b() + 10L;
-      this.func_213202_o();
 
-      for(DimensionType dimensiontype : DimensionType.func_212681_b()) {
-         ForcedChunksSaveData forcedchunkssavedata = this.func_71218_a(dimensiontype).func_217481_x().func_215753_b(ForcedChunksSaveData::new, "chunks");
-         if (forcedchunkssavedata != null) {
-            ServerWorld serverworld1 = this.func_71218_a(dimensiontype);
-            LongIterator longiterator = forcedchunkssavedata.func_212438_a().iterator();
-
+      DimensionType dimensionmanager = serverworld.field_73011_w.func_186058_p();
+      ForcedChunksSaveData forcedchunk = serverworld.func_217481_x().func_215753_b(ForcedChunksSaveData::new, "chunks");
+      if (forcedchunk != null) {
+         ServerWorld worldserver2 = this.func_71218_a(dimensionmanager);
+         LongIterator longiterator = forcedchunk.func_212438_a().iterator();
             while(longiterator.hasNext()) {
                long i = longiterator.nextLong();
-               ChunkPos chunkpos = new ChunkPos(i);
-               serverworld1.func_72863_F().func_217206_a(chunkpos, true);
+            ChunkPos chunkcoordintpair = new ChunkPos(i);
+            worldserver2.func_72863_F().func_217206_a(chunkcoordintpair, true);
             }
          }
-      }
-
-      this.field_211151_aa = Util.func_211177_b() + 10L;
-      this.func_213202_o();
+      this.executeModerately();
       p_213186_1_.func_219510_b();
       serverchunkprovider.func_212863_j_().func_215598_a(5);
+      this.forceTicks = false;
    }
 
    protected void func_175584_a(String p_175584_1_, SaveHandler p_175584_2_) {
@@ -528,11 +660,15 @@
          flag = true;
       }
 
-      ServerWorld serverworld1 = this.func_71218_a(DimensionType.field_223227_a_);
-      WorldInfo worldinfo = serverworld1.func_72912_H();
-      serverworld1.func_175723_af().func_222520_a(worldinfo);
-      worldinfo.func_201356_c(this.func_201300_aS().func_201380_c());
-      serverworld1.func_217485_w().func_75755_a(worldinfo, this.func_184103_al().func_72378_q());
+      // CraftBukkit start - moved to WorldServer.save
+      /*
+      ServerWorld serverworld1 = this.getWorld(DimensionType.OVERWORLD);
+      WorldInfo worldinfo = serverworld1.getWorldInfo();
+      serverworld1.getWorldBorder().copyTo(worldinfo);
+      worldinfo.setCustomBossEvents(this.getCustomBossEvents().write());
+      serverworld1.getSaveHandler().saveWorldInfoWithPlayer(worldinfo, this.getPlayerList().getHostPlayerData());
+       */
+      // CraftBukkit end
       return flag;
    }
 
@@ -540,8 +676,28 @@
       this.func_71260_j();
    }
 
+   // CraftBukkit start
+   private boolean hasStopped = false;
+   private final Object stopLock = new Object();
+   public final boolean hasStopped() {
+      synchronized (stopLock) {
+         return hasStopped;
+      }
+   }
+   // CraftBukkit end
+
    protected void func_71260_j() {
+      // CraftBukkit start - prevent double stopping on multiple threads
+      synchronized (this.stopLock) {
+         if (this.hasStopped) {
+            return;
+         }
+         this.hasStopped = true;
+      }
       field_147145_h.info("Stopping server");
+      if (this.server != null) {
+         this.server.disablePlugins();
+      }
       if (this.func_147137_ag() != null) {
          this.func_147137_ag().func_151268_b();
       }
@@ -550,6 +706,7 @@
          field_147145_h.info("Saving players");
          this.field_71318_t.func_72389_g();
          this.field_71318_t.func_72392_r();
+         try { Thread.sleep(100); } catch (InterruptedException ex) {} // CraftBukkit - SPIGOT-625 - give server at least a chance to send packets
       }
 
       field_147145_h.info("Saving worlds");
@@ -565,6 +722,7 @@
       for(ServerWorld serverworld1 : this.func_212370_w()) {
          if (serverworld1 != null) {
             try {
+               net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(new net.minecraftforge.event.world.WorldEvent.Unload(serverworld1));
                serverworld1.close();
             } catch (IOException ioexception) {
                field_147145_h.error("Exception closing the level", (Throwable)ioexception);
@@ -576,6 +734,13 @@
          this.field_71307_n.func_76470_e();
       }
 
+      // Spigot start
+      if (org.spigotmc.SpigotConfig.saveUserCacheOnStopOnly) {
+         field_147145_h.info("Saving usercache.json");
+         this.field_152366_X.func_152658_c();
+      }
+      // Spigot end
+
    }
 
    public String func_71211_k() {
@@ -602,23 +767,47 @@
 
    }
 
+   // Spigot Start
+   private static double calcTps(double avg, double exp, double tps)
+   {
+      return ( avg * exp ) + ( tps * ( 1 - exp ) );
+   }
+   // Spigot End
+
    public void run() {
       try {
          if (this.func_71197_b()) {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStarted(this);
             this.field_211151_aa = Util.func_211177_b();
             this.field_147147_p.func_151315_a(new StringTextComponent(this.field_71286_C));
             this.field_147147_p.func_151321_a(new ServerStatusResponse.Version(SharedConstants.func_215069_a().getName(), SharedConstants.func_215069_a().getProtocolVersion()));
             this.func_184107_a(this.field_147147_p);
 
+            // Spigot start
+            Arrays.fill( recentTps, 20 );
+            long curTime, tickSection = Util.func_211177_b(), tickCount = 1;
             while(this.field_71317_u) {
-               long i = Util.func_211177_b() - this.field_211151_aa;
-               if (i > 2000L && this.field_211151_aa - this.field_71299_R >= 15000L) {
+               long i = (curTime = Util.func_211177_b()) - this.field_211151_aa;
+
+               if (i > 5000L && this.field_211151_aa - this.field_71299_R >= 30000L) {
                   long j = i / 50L;
+                  if (server.getWarnOnOverload()) // CraftBukkit
                   field_147145_h.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
                   this.field_211151_aa += j * 50L;
                   this.field_71299_R = this.field_211151_aa;
                }
 
+               if ( tickCount++ % SAMPLE_INTERVAL == 0 )
+               {
+                  double currentTps = 1E3 / ( curTime - tickSection ) * SAMPLE_INTERVAL;
+                  recentTps[0] = calcTps( recentTps[0], 0.92, currentTps ); // 1/exp(5sec/1min)
+                  recentTps[1] = calcTps( recentTps[1], 0.9835, currentTps ); // 1/exp(5sec/5min)
+                  recentTps[2] = calcTps( recentTps[2], 0.9945, currentTps ); // 1/exp(5sec/15min)
+                  tickSection = curTime;
+               }
+               // Spigot end
+
+               MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit
                this.field_211151_aa += 50L;
                if (this.field_71295_T) {
                   this.field_71295_T = false;
@@ -636,11 +825,23 @@
                this.field_71304_b.func_219897_b();
                this.field_71296_Q = true;
             }
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopping(this);
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          } else {
+            net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
             this.func_71228_a((CrashReport)null);
          }
+      } catch (net.minecraftforge.fml.StartupQuery.AbortedException e) {
+         // ignore silently
+         net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
       } catch (Throwable throwable1) {
          field_147145_h.error("Encountered an unexpected exception", throwable1);
+         // Spigot Start
+         if ( throwable1.getCause() != null )
+         {
+            MinecraftServer.field_147145_h.error( "\tCause of unexpected exception was", throwable1.getCause() );
+         }
+         // Spigot End
          CrashReport crashreport;
          if (throwable1 instanceof ReportedException) {
             crashreport = this.func_71230_b(((ReportedException)throwable1).func_71575_a());
@@ -655,6 +856,7 @@
             field_147145_h.error("We were unable to save this crash report to disk.");
          }
 
+         net.minecraftforge.fml.server.ServerLifecycleHooks.expectServerStopped(); // has to come before finalTick to avoid race conditions
          this.func_71228_a(crashreport);
       } finally {
          try {
@@ -663,6 +865,14 @@
          } catch (Throwable throwable) {
             field_147145_h.error("Exception stopping the server", throwable);
          } finally {
+            org.spigotmc.WatchdogThread.doStop(); // Spigot
+            net.minecraftforge.fml.server.ServerLifecycleHooks.handleServerStopped(this);
+            // CraftBukkit start - Restore terminal to original settings
+            try {
+               reader.getTerminal().restore();
+            } catch (Exception ignored) {
+            }
+            // CraftBukkit end
             this.func_71240_o();
          }
 
@@ -671,9 +881,14 @@
    }
 
    private boolean func_212379_aT() {
-      return this.func_213182_bg() || Util.func_211177_b() < (this.field_213214_ac ? this.field_213213_ab : this.field_211151_aa);
+      return this.forceTicks || this.func_213182_bg() || Util.func_211177_b() < (this.field_213214_ac ? this.field_213213_ab : this.field_211151_aa);
    }
 
+   private void executeModerately() {
+      this.func_213160_bf();
+      LockSupport.parkNanos("executing tasks", 1000L);
+   }
+
    protected void func_213202_o() {
       this.func_213160_bf();
       this.func_213161_c(() -> {
@@ -681,7 +896,7 @@
       });
    }
 
-   protected TickDelayedTask func_212875_d_(Runnable p_212875_1_) {
+   public TickDelayedTask func_212875_d_(Runnable p_212875_1_) {
       return new TickDelayedTask(this.field_71315_w, p_212875_1_);
    }
 
@@ -763,7 +978,10 @@
    }
 
    protected void func_71217_p(BooleanSupplier p_71217_1_) {
+      SpigotTimings.serverTickTimer.startTiming(); // Spigot
+      this.slackActivityAccountant.tickStarted(); // Spigot
       long i = Util.func_211178_c();
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPreServerTick();
       ++this.field_71315_w;
       this.func_71190_q(p_71217_1_);
       if (i - this.field_147142_T >= 5000000000L) {
@@ -778,15 +996,18 @@
 
          Collections.shuffle(Arrays.asList(agameprofile));
          this.field_147147_p.func_151318_b().func_151330_a(agameprofile);
+         this.field_147147_p.invalidateJson();
       }
 
-      if (this.field_71315_w % 6000 == 0) {
+      if (autosavePeriod > 0 && this.field_71315_w % autosavePeriod == 0) { // CraftBukkit
+         SpigotTimings.worldSaveTimer.startTiming(); // Spigot
          field_147145_h.debug("Autosave started");
          this.field_71304_b.func_76320_a("save");
          this.field_71318_t.func_72389_g();
          this.func_213211_a(true, false, false);
          this.field_71304_b.func_76319_b();
          field_147145_h.debug("Autosave finished");
+         SpigotTimings.worldSaveTimer.stopTiming(); // Spigot
       }
 
       this.field_71304_b.func_76320_a("snooper");
@@ -805,52 +1026,101 @@
       long i1 = Util.func_211178_c();
       this.field_213215_ap.func_181747_a(i1 - i);
       this.field_71304_b.func_76319_b();
+      org.spigotmc.WatchdogThread.tick(); // Spigot
+      this.slackActivityAccountant.tickEnded(l); // Spigot
+      SpigotTimings.serverTickTimer.stopTiming(); // Spigot
+      org.spigotmc.CustomTimingsHandler.tick(); // Spigot
+      net.minecraftforge.fml.hooks.BasicEventHooks.onPostServerTick();
    }
 
    protected void func_71190_q(BooleanSupplier p_71190_1_) {
+      SpigotTimings.schedulerTimer.startTiming(); // Spigot
+      this.server.getScheduler().mainThreadHeartbeat(this.field_71315_w);
+      SpigotTimings.schedulerTimer.stopTiming(); // Spigot
       this.field_71304_b.func_76320_a("commandFunctions");
+      SpigotTimings.commandFunctionsTimer.startTiming(); // Spigot
       this.func_193030_aL().func_73660_a();
+      SpigotTimings.commandFunctionsTimer.stopTiming(); // Spigot
       this.field_71304_b.func_219895_b("levels");
+      // Run tasks that are waiting on processing
+      SpigotTimings.processQueueTimer.startTiming(); // Spigot
+      while (!this.processQueue.isEmpty()) {
+         this.processQueue.remove().run();
+      }
+      SpigotTimings.processQueueTimer.stopTiming(); // Spigot
 
-      for(ServerWorld serverworld : this.func_212370_w()) {
-         if (serverworld.field_73011_w.func_186058_p() == DimensionType.field_223227_a_ || this.func_71255_r()) {
+      SpigotTimings.timeUpdateTimer.startTiming(); // Spigot
+      // Send time updates to everyone, it will get the right time from the world the player is in.
+      if (this.field_71315_w % 20 == 0) {
+         for (int i = 0; i < this.func_184103_al().field_72404_b.size(); ++i) {
+            ServerPlayerEntity entityplayer = this.func_184103_al().field_72404_b.get(i);
+            entityplayer.field_71135_a.func_147359_a(new SUpdateTimePacket(entityplayer.field_70170_p.func_82737_E(), entityplayer.getPlayerTime(), entityplayer.field_70170_p.func_82736_K().func_223586_b(GameRules.field_223607_j)));
+         }
+      }
+      SpigotTimings.timeUpdateTimer.stopTiming(); // Spigot
+
+      for(ServerWorld serverworld : this.getWorldArray()) {
+         long tickStart = Util.func_211178_c();
+         if (true || serverworld.field_73011_w.func_186058_p() == DimensionType.field_223227_a_ || this.func_71255_r()) {
             this.field_71304_b.func_194340_a(() -> {
                return serverworld.func_72912_H().func_76065_j() + " " + Registry.field_212622_k.func_177774_c(serverworld.field_73011_w.func_186058_p());
             });
-            if (this.field_71315_w % 20 == 0) {
-               this.field_71304_b.func_76320_a("timeSync");
-               this.field_71318_t.func_148537_a(new SUpdateTimePacket(serverworld.func_82737_E(), serverworld.func_72820_D(), serverworld.func_82736_K().func_223586_b(GameRules.field_223607_j)), serverworld.field_73011_w.func_186058_p());
-               this.field_71304_b.func_76319_b();
+            /* Drop global time updates
+            if (this.tickCounter % 20 == 0) {
+               this.profiler.startSection("timeSync");
+               this.playerList.sendPacketToAllPlayersInDimension(new SUpdateTimePacket(serverworld.getGameTime(), serverworld.getDayTime(), serverworld.getGameRules().getBoolean(GameRules.DO_DAYLIGHT_CYCLE)), serverworld.dimension.getType());
+               this.profiler.endSection();
             }
+            // CraftBukkit end */
 
             this.field_71304_b.func_76320_a("tick");
+            net.minecraftforge.fml.hooks.BasicEventHooks.onPreWorldTick(serverworld);
 
             try {
+               serverworld.timings.doTick.startTiming(); // Spigot
                serverworld.func_72835_b(p_71190_1_);
+               serverworld.timings.doTick.stopTiming(); // Spigot
             } catch (Throwable throwable) {
-               CrashReport crashreport = CrashReport.func_85055_a(throwable, "Exception ticking world");
+               // Spigot Start
+               CrashReport crashreport;
+               try {
+                  crashreport = CrashReport.func_85055_a(throwable, "Exception ticking world");
+               } catch (Throwable t) {
+                  throw new RuntimeException("Error generating crash report", t);
+               }
+               // Spigot End
                serverworld.func_72914_a(crashreport);
                throw new ReportedException(crashreport);
             }
+            net.minecraftforge.fml.hooks.BasicEventHooks.onPostWorldTick(serverworld);
 
             this.field_71304_b.func_76319_b();
             this.field_71304_b.func_76319_b();
          }
+         perWorldTickTimes.computeIfAbsent(serverworld.func_201675_m().func_186058_p(), k -> new long[100])[this.field_71315_w % 100] = Util.func_211178_c() - tickStart;
       }
 
+      this.field_71304_b.func_219895_b("dim_unloading");
+      net.minecraftforge.common.DimensionManager.unloadWorlds(this, this.field_71315_w % 200 == 0);
       this.field_71304_b.func_219895_b("connection");
+      SpigotTimings.connectionTimer.startTiming(); // Spigot
       this.func_147137_ag().func_151269_c();
+      SpigotTimings.connectionTimer.stopTiming(); // Spigot
       this.field_71304_b.func_219895_b("players");
+      SpigotTimings.playerListTimer.startTiming(); // Spigot
       this.field_71318_t.func_72374_b();
+      SpigotTimings.playerListTimer.stopTiming(); // Spigot
       if (SharedConstants.field_206244_b) {
          TestCollection.field_229570_a_.func_229574_b_();
       }
 
       this.field_71304_b.func_219895_b("server gui refresh");
 
+      SpigotTimings.tickablesTimer.startTiming(); // Spigot
       for(int i = 0; i < this.field_71322_p.size(); ++i) {
          this.field_71322_p.get(i).run();
       }
+      SpigotTimings.tickablesTimer.stopTiming(); // Spigot
 
       this.field_71304_b.func_76319_b();
    }
@@ -864,39 +1134,31 @@
    }
 
    public static void main(String[] p_main_0_) {
-      OptionParser optionparser = new OptionParser();
-      OptionSpec<Void> optionspec = optionparser.accepts("nogui");
-      OptionSpec<Void> optionspec1 = optionparser.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
-      OptionSpec<Void> optionspec2 = optionparser.accepts("demo");
-      OptionSpec<Void> optionspec3 = optionparser.accepts("bonusChest");
-      OptionSpec<Void> optionspec4 = optionparser.accepts("forceUpgrade");
-      OptionSpec<Void> optionspec5 = optionparser.accepts("eraseCache");
-      OptionSpec<Void> optionspec6 = optionparser.accepts("help").forHelp();
-      OptionSpec<String> optionspec7 = optionparser.accepts("singleplayer").withRequiredArg();
-      OptionSpec<String> optionspec8 = optionparser.accepts("universe").withRequiredArg().defaultsTo(".");
-      OptionSpec<String> optionspec9 = optionparser.accepts("world").withRequiredArg();
-      OptionSpec<Integer> optionspec10 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1);
-      OptionSpec<String> optionspec11 = optionparser.accepts("serverId").withRequiredArg();
-      OptionSpec<String> optionspec12 = optionparser.nonOptions();
-
       try {
-         OptionSet optionset = optionparser.parse(p_main_0_);
-         if (optionset.has(optionspec6)) {
-            optionparser.printHelpOn(System.err);
+         OptionSet optionset = Main.main(p_main_0_);
+         if (optionset == null) {
             return;
          }
-
          Path path = Paths.get("server.properties");
          ServerPropertiesProvider serverpropertiesprovider = new ServerPropertiesProvider(path);
-         serverpropertiesprovider.func_219035_b();
+         if (optionset.has("initSettings") || !Files.exists(path)) serverpropertiesprovider.func_219035_b();
          Path path1 = Paths.get("eula.txt");
          ServerEula servereula = new ServerEula(path1);
-         if (optionset.has(optionspec1)) {
+         if (optionset.has("initSettings")) {
             field_147145_h.info("Initialized '" + path.toAbsolutePath().toString() + "' and '" + path1.toAbsolutePath().toString() + "'");
             return;
          }
 
-         if (!servereula.func_154346_a()) {
+         // Spigot Start
+         boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
+         if ( eulaAgreed )
+         {
+            System.err.println( "You have used the Spigot command line EULA agreement flag." );
+            System.err.println( "By using this setting you are indicating your agreement to Mojang's EULA (https://account.mojang.com/documents/minecraft_eula)." );
+            System.err.println( "If you do not agree to the above EULA please stop your server and remove this flag immediately." );
+         }
+         // Spigot End
+         if (!servereula.func_154346_a()) { // Spigot
             field_147145_h.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
             return;
          }
@@ -904,33 +1166,47 @@
          CrashReport.func_230188_h_();
          Bootstrap.func_151354_b();
          Bootstrap.func_218821_c();
-         String s = optionset.valueOf(optionspec8);
+         File s = (File) optionset.valueOf("universe"); // CraftBukkit
          YggdrasilAuthenticationService yggdrasilauthenticationservice = new YggdrasilAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString());
          MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
          GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
          PlayerProfileCache playerprofilecache = new PlayerProfileCache(gameprofilerepository, new File(s, field_152367_a.getName()));
-         String s1 = Optional.ofNullable(optionset.valueOf(optionspec9)).orElse(serverpropertiesprovider.func_219034_a().field_219021_o);
-         final DedicatedServer dedicatedserver = new DedicatedServer(new File(s), serverpropertiesprovider, DataFixesManager.func_210901_a(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache, LoggingChunkStatusListener::new, s1);
-         dedicatedserver.func_71224_l(optionset.valueOf(optionspec7));
-         dedicatedserver.func_71208_b(optionset.valueOf(optionspec10));
-         dedicatedserver.func_71204_b(optionset.has(optionspec2));
-         dedicatedserver.func_71194_c(optionset.has(optionspec3));
-         dedicatedserver.func_212204_b(optionset.has(optionspec4));
-         dedicatedserver.func_213197_c(optionset.has(optionspec5));
-         dedicatedserver.func_213208_c(optionset.valueOf(optionspec11));
-         boolean flag = !optionset.has(optionspec) && !optionset.valuesOf(optionspec12).contains("nogui");
+         String s1 = (String) Optional.ofNullable(optionset.valueOf("world")).orElse(serverpropertiesprovider.func_219034_a().field_219021_o);
+         final DedicatedServer dedicatedserver = new DedicatedServer(optionset, serverpropertiesprovider, DataFixesManager.func_210901_a(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, playerprofilecache, LoggingChunkStatusListener::new, s1);
+
+         boolean flag = !optionset.has("nogui") && !optionset.nonOptionArguments().contains("nogui");
          if (flag && !GraphicsEnvironment.isHeadless()) {
             dedicatedserver.func_120011_ar();
          }
 
-         dedicatedserver.func_71256_s();
+         /*
+         dedicatedserver.startServerThread();
          Thread thread = new Thread("Server Shutdown Thread") {
             public void run() {
-               dedicatedserver.func_71263_m(true);
+               dedicatedserver.initiateShutdown(true);
+               LogManager.shutdown(); // we're manually managing the logging shutdown on the server. Make sure we do it here at the end.
             }
          };
-         thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(field_147145_h));
+         thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER));
          Runtime.getRuntime().addShutdownHook(thread);
+          */
+
+         if (optionset.has("port")) {
+            int port = (Integer) optionset.valueOf("port");
+            if (port > 0) {
+               dedicatedserver.func_71208_b(port);
+            }
+         }
+         if (optionset.has("universe")) {
+            dedicatedserver.field_71308_o = (File) optionset.valueOf("universe");
+         }
+         if (optionset.has("forceUpgrade")) {
+            dedicatedserver.func_212204_b(true);
+         }
+         if (optionset.has("eraseCache")) {
+            dedicatedserver.func_213197_c(true);
+         }
+         dedicatedserver.field_175590_aa.start();
       } catch (Exception exception) {
          field_147145_h.fatal("Failed to start the minecraft server", (Throwable)exception);
       }
@@ -950,7 +1226,9 @@
    }
 
    public void func_71256_s() {
-      this.field_175590_aa.start();
+      /* CraftBukkit start - prevent abuse
+      this.serverThread.start();
+      // CraftBukkit end */
    }
 
    @OnlyIn(Dist.CLIENT)
@@ -971,7 +1249,7 @@
    }
 
    public ServerWorld func_71218_a(DimensionType p_71218_1_) {
-      return this.field_71305_c.get(p_71218_1_);
+      return net.minecraftforge.common.DimensionManager.getWorld(this, p_71218_1_, true, true);
    }
 
    public Iterable<ServerWorld> func_212370_w() {
@@ -1010,7 +1288,7 @@
    }
 
    public String getServerModName() {
-      return "vanilla";
+      return server.getName(); // CraftBukkit - cb > vanilla!
    }
 
    public CrashReport func_71230_b(CrashReport p_71230_1_) {
@@ -1048,7 +1326,7 @@
    public abstract Optional<String> func_230045_q_();
 
    public boolean func_175578_N() {
-      return this.field_71308_o != null;
+      return true;
    }
 
    public void func_145747_a(ITextComponent p_145747_1_) {
@@ -1290,7 +1568,7 @@
 
    @Nullable
    public NetworkSystem func_147137_ag() {
-      return this.field_147144_o;
+      return this.field_147144_o == null ? this.field_147144_o = new NetworkSystem(this) : this.field_147144_o;
    }
 
    @OnlyIn(Dist.CLIENT)
@@ -1396,6 +1674,10 @@
    public FunctionManager func_193030_aL() {
       return this.field_200258_al;
    }
+   
+   public net.minecraftforge.common.loot.LootModifierManager getLootModifierManager() {
+	   return lootManager;
+   }
 
    public void func_193031_aM() {
       if (!this.func_213162_bc()) {
@@ -1567,6 +1849,31 @@
 
    public abstract boolean func_213199_b(GameProfile p_213199_1_);
 
+   private Map<DimensionType, long[]> perWorldTickTimes = Maps.newIdentityHashMap();
+   @Nullable
+   public long[] getTickTime(DimensionType dim) {
+      return perWorldTickTimes.get(dim);
+   }
+
+   @Deprecated //Forge Internal use Only, You can screw up a lot of things if you mess with this map.
+   public synchronized Map<DimensionType, ServerWorld> forgeGetWorldMap() {
+      return this.field_71305_c;
+   }
+   private int worldArrayMarker = 0;
+   private int worldArrayLast = -1;
+   private ServerWorld[] worldArray;
+   @Deprecated //Forge Internal use Only, use to protect against concurrent modifications in the world tick loop.
+   public synchronized void markWorldsDirty() {
+      worldArrayMarker++;
+   }
+   private ServerWorld[] getWorldArray() {
+      if (worldArrayMarker == worldArrayLast && worldArray != null)
+         return worldArray;
+      worldArray = this.field_71305_c.values().stream().toArray(x -> new ServerWorld[x]);
+      worldArrayLast = worldArrayMarker;
+      return worldArray;
+   }
+
    public void func_223711_a(Path p_223711_1_) throws IOException {
       Path path = p_223711_1_.resolve("levels");
 
@@ -1609,8 +1916,8 @@
          final List<String> list = Lists.newArrayList();
          final GameRules gamerules = this.func_200252_aR();
          GameRules.func_223590_a(new GameRules.IRuleEntryVisitor() {
-            public <T extends GameRules.RuleValue<T>> void func_223481_a(GameRules.RuleKey<T> p_223481_1_, GameRules.RuleType<T> p_223481_2_) {
-               list.add(String.format("%s=%s\n", p_223481_1_.func_223576_a(), gamerules.<T>func_223585_a(p_223481_1_).toString()));
+            public <T extends GameRules.RuleValue<T>> void func_223481_a(GameRules.RuleKey<T> key, GameRules.RuleType<T> type) {
+               list.add(String.format("%s=%s\n", key.func_223576_a(), gamerules.<T>func_223585_a(key).toString()));
             }
          });
 
@@ -1651,4 +1958,16 @@
    private void func_229737_ba_() {
       Block.field_176229_d.forEach(BlockState::func_215692_c);
    }
+
+   // CraftBukkit start
+   @Override
+   public boolean func_213162_bc() {
+      return super.func_213162_bc() || this.func_71241_aa(); // CraftBukkit - MC-142590
+   }
+
+   @Deprecated
+   public static MinecraftServer getServer() {
+      return (Bukkit.getServer() instanceof CraftServer) ? ((CraftServer) Bukkit.getServer()).getServer() : null;
+   }
+   // CraftBukkit end
 }
