--- ../src-base/minecraft/net/minecraft/command/CommandHandler.java
+++ ../src-work/minecraft/net/minecraft/command/CommandHandler.java
@@ -14,28 +14,32 @@
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.text.TextComponentTranslation;
 import net.minecraft.util.text.TextFormatting;
+import net.minecraftforge.server.command.TextComponentHelper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.command.CommandWrapper;
+import org.bukkit.craftbukkit.v1_12_R1.command.CraftSimpleCommandMap;
+import org.bukkit.craftbukkit.v1_12_R1.command.ModCustomCommand;
+import org.bukkit.help.GenericCommandHelpTopic;
+import com.mohistmc.api.ServerAPI;
+import com.mohistmc.util.i18n.Message;
 
 public abstract class CommandHandler implements ICommandManager
 {
     private static final Logger field_147175_a = LogManager.getLogger();
     private final Map<String, ICommand> field_71562_a = Maps.<String, ICommand>newHashMap();
+    private final Map<String, ICommand> commandMod = Maps.<String, ICommand>newHashMap();
     private final Set<ICommand> field_71561_b = Sets.<ICommand>newHashSet();
 
     public int func_71556_a(ICommandSender p_71556_1_, String p_71556_2_)
     {
         p_71556_2_ = p_71556_2_.trim();
 
-        if (p_71556_2_.startsWith("/"))
-        {
-            p_71556_2_ = p_71556_2_.substring(1);
-        }
-
         String[] astring = p_71556_2_.split(" ");
         String s = astring[0];
         astring = func_71559_a(astring);
         ICommand icommand = this.field_71562_a.get(s);
+        if (icommand == null) icommand = CommandWrapper.toNMSCommand(p_71556_1_, s);
         int i = 0;
 
         try
@@ -50,6 +54,17 @@
             }
             else if (icommand.func_184882_a(this.func_184879_a(), p_71556_1_))
             {
+                net.minecraftforge.event.CommandEvent event = new net.minecraftforge.event.CommandEvent(icommand, p_71556_1_, astring);
+                if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event))
+                {
+                    if (event.getException() != null)
+                    {
+                        com.google.common.base.Throwables.throwIfUnchecked(event.getException());
+                    }
+                    return 1;
+                }
+                if (event.getParameters() != null) astring = event.getParameters();
+
                 if (j > -1)
                 {
                     List<Entity> list = EntitySelector.<Entity>func_179656_b(p_71556_1_, astring[j], Entity.class);
@@ -135,20 +150,51 @@
 
     public ICommand func_71560_a(ICommand p_71560_1_)
     {
-        this.field_71562_a.put(p_71560_1_.func_71517_b(), p_71560_1_);
-        this.field_71561_b.add(p_71560_1_);
-
-        for (String s : p_71560_1_.func_71514_a())
+        String pre = p_71560_1_.getClass().getName().substring(p_71560_1_.getClass().getName().lastIndexOf('.')+1).toLowerCase() + "." + p_71560_1_.func_71517_b();
+        if (p_71560_1_ instanceof CommandBase)
         {
-            ICommand icommand = this.field_71562_a.get(s);
+        	if (!((CommandBase)p_71560_1_).permissionNode.equals("minecraft"))
+        	{
+        		pre = ((CommandBase)p_71560_1_).permissionNode;
+        		this.commandMod.put(p_71560_1_.func_71517_b(), p_71560_1_);
+        	}
+        }
+        return registerCommand(p_71560_1_, pre);
+    }
 
-            if (icommand == null || !icommand.func_71517_b().equals(s))
-            {
-                this.field_71562_a.put(s, p_71560_1_);
+    public ICommand registerCommand(String permissionGroup, ICommand par1ICommand)
+    {
+        return registerCommand(par1ICommand, permissionGroup + "." + par1ICommand.func_71517_b());
+    }
+
+    public ICommand registerCommand(ICommand command, String permissionNode) {
+        List<String> list = command.func_71514_a();
+        this.field_71562_a.put(command.func_71517_b(), command);
+        this.field_71561_b.add(command);
+        // register vanilla commands with Bukkit to support permissions.
+        CraftSimpleCommandMap commandMap = MinecraftServer.getServerInst().server.getCraftCommandMap();
+
+        String modid = ServerAPI.forgecmd.get(command.func_71517_b());
+        String description =  "A "+ modid +" provided command.";
+        net.minecraft.util.text.TextComponentBase tcb = TextComponentHelper.createComponentTranslation(MinecraftServer.getServerInst(), command.func_71518_a(MinecraftServer.getServerInst()));
+        String usage = command.func_71518_a(MinecraftServer.getServerInst()) != null ? tcb.func_150254_d() : "/" + command.func_71517_b();
+        ModCustomCommand customCommand = new ModCustomCommand(command.func_71517_b(), description, usage, command.func_71514_a());
+        customCommand.setPermission(permissionNode);
+        if (list != null) customCommand.setAliases(list);
+        commandMap.register(command.func_71517_b(), customCommand);
+        // Add mods command to helps
+        func_184879_a().server.helpMap.addTopic(new GenericCommandHelpTopic(customCommand));
+        LogManager.getLogger().debug(Message.getFormatString("command.register", new Object[]{command.func_71517_b(), permissionNode}));
+        if (list != null) {
+            for (String s : list) {
+                ICommand icommand = (ICommand)this.field_71562_a.get(s);
+                if (icommand == null || !icommand.func_71517_b().equals(s)) {
+                    this.field_71562_a.put(s, command);
+                }
             }
         }
 
-        return p_71560_1_;
+        return command;
     }
 
     private static String[] func_71559_a(String[] p_71559_0_)
@@ -212,6 +258,11 @@
     {
         return this.field_71562_a;
     }
+    
+    public Map<String, ICommand> getCommandMod()
+    {
+        return this.commandMod;
+    }
\ No newline at end of file
 
     private int func_82370_a(ICommand p_82370_1_, String[] p_82370_2_) throws CommandException
     {
