--- a/net/minecraft/command/Commands.java
+++ b/net/minecraft/command/Commands.java
@@ -1,5 +1,6 @@
 package net.minecraft.command;
 
+import com.google.common.base.Joiner;
 import com.google.common.collect.Maps;
 import com.mojang.brigadier.CommandDispatcher;
 import com.mojang.brigadier.ParseResults;
@@ -11,6 +12,8 @@
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.tree.CommandNode;
 import com.mojang.brigadier.tree.RootCommandNode;
+import java.util.Collection;
+import java.util.LinkedHashSet;
 import java.util.Map;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
@@ -96,12 +99,15 @@
 import net.minecraft.util.text.event.HoverEvent;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.bukkit.event.player.PlayerCommandSendEvent;
+import org.bukkit.event.server.ServerCommandEvent;
 
 public class Commands {
    private static final Logger field_197061_a = LogManager.getLogger();
    private final CommandDispatcher<CommandSource> field_197062_b = new CommandDispatcher<>();
 
-   public Commands(boolean p_i49161_1_) {
+   // CraftBukkit start
+   public final Commands init(boolean isDedicatedServer) {
       AdvancementCommand.func_198199_a(this.field_197062_b);
       ExecuteCommand.func_198378_a(this.field_197062_b);
       BossBarCommand.func_201413_a(this.field_197062_b);
@@ -160,7 +166,7 @@
          TestCommand.func_229613_a_(this.field_197062_b);
       }
 
-      if (p_i49161_1_) {
+      if (isDedicatedServer) {
          BanIpCommand.func_198220_a(this.field_197062_b);
          BanListCommand.func_198229_a(this.field_197062_b);
          BanCommand.func_198235_a(this.field_197062_b);
@@ -177,35 +183,82 @@
       }
 
       this.field_197062_b.findAmbiguities((p_201302_1_, p_201302_2_, p_201302_3_, p_201302_4_) -> {
-         field_197061_a.warn("Ambiguity between arguments {} and {} with inputs: {}", this.field_197062_b.getPath(p_201302_2_), this.field_197062_b.getPath(p_201302_3_), p_201302_4_);
+         //LOGGER.warn("Ambiguity between arguments {} and {} with inputs: {}", this.dispatcher.getPath(p_201302_2_), this.dispatcher.getPath(p_201302_3_), p_201302_4_);  // CraftBukkit
       });
+      return this;
+   }
+
+   public Commands() {
+      // CraftBukkit end
       this.field_197062_b.setConsumer((p_197058_0_, p_197058_1_, p_197058_2_) -> {
          p_197058_0_.getSource().func_197038_a(p_197058_0_, p_197058_1_, p_197058_2_);
       });
    }
 
+   // CraftBukkit start
+   public int dispatchServerCommand(CommandSource sender, String command) {
+      Joiner joiner = Joiner.on(" ");
+      if (command.startsWith("/")) {
+         command = command.substring(1);
+      }
+      ServerCommandEvent event = new ServerCommandEvent(sender.getBukkitSender(), command);
+      org.bukkit.Bukkit.getPluginManager().callEvent(event);
+      if (event.isCancelled()) {
+         return 0;
+      }
+      command = event.getCommand();
+      String[] args = command.split(" ");
+      String cmd = args[0];
+      if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
+      if (cmd.startsWith("bukkit:")) cmd = cmd.substring("bukkit:".length());
+      // Block disallowed commands
+      if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op")
+          || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip")
+          || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")) {
+         return 0;
+      }
+      // Handle vanilla commands;
+      if (sender.func_197023_e().getServerCB().getCommandBlockOverride(args[0])) {
+         args[0] = "minecraft:" + args[0];
+      }
+      return this.func_197059_a(sender, joiner.join(args));
+   }
+
    public int func_197059_a(CommandSource p_197059_1_, String p_197059_2_) {
-      StringReader stringreader = new StringReader(p_197059_2_);
+      return this.handleCommand(p_197059_1_, p_197059_2_, p_197059_2_);
+   }
+
+   public int handleCommand(CommandSource source, String command, String label) {
+      // CraftBukkit end
+      StringReader stringreader = new StringReader(command);
       if (stringreader.canRead() && stringreader.peek() == '/') {
          stringreader.skip();
       }
 
-      p_197059_1_.func_197028_i().func_213185_aS().func_76320_a(p_197059_2_);
+      source.func_197028_i().func_213185_aS().func_76320_a(command);
 
       try {
          try {
-            int lvt_4_3_ = this.field_197062_b.execute(stringreader, p_197059_1_);
+            com.mojang.brigadier.ParseResults<CommandSource> parse = this.field_197062_b.parse(stringreader, source);
+            net.minecraftforge.event.CommandEvent event = new net.minecraftforge.event.CommandEvent(parse);
+            if (net.minecraftforge.common.MinecraftForge.EVENT_BUS.post(event)) {
+               if (event.getException() != null) {
+                  com.google.common.base.Throwables.throwIfUnchecked(event.getException());
+               }
+               return 1;
+            }
+            int lvt_4_3_ = this.field_197062_b.execute(event.getParseResults());
             return lvt_4_3_;
          } catch (CommandException commandexception) {
-            p_197059_1_.func_197021_a(commandexception.func_197003_a());
+            source.func_197021_a(commandexception.func_197003_a());
             byte b1 = 0;
             return b1;
          } catch (CommandSyntaxException commandsyntaxexception) {
-            p_197059_1_.func_197021_a(TextComponentUtils.func_202465_a(commandsyntaxexception.getRawMessage()));
+            source.func_197021_a(TextComponentUtils.func_202465_a(commandsyntaxexception.getRawMessage()));
             if (commandsyntaxexception.getInput() != null && commandsyntaxexception.getCursor() >= 0) {
                int k = Math.min(commandsyntaxexception.getInput().length(), commandsyntaxexception.getCursor());
                ITextComponent itextcomponent1 = (new StringTextComponent("")).func_211708_a(TextFormatting.GRAY).func_211710_a((p_211705_1_) -> {
-                  p_211705_1_.func_150241_a(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, p_197059_2_));
+                  p_211705_1_.func_150241_a(new ClickEvent(ClickEvent.Action.SUGGEST_COMMAND, label)); // CraftBukkit
                });
                if (k > 10) {
                   itextcomponent1.func_150258_a("...");
@@ -218,12 +271,12 @@
                }
 
                itextcomponent1.func_150257_a((new TranslationTextComponent("command.context.here")).func_211709_a(new TextFormatting[]{TextFormatting.RED, TextFormatting.ITALIC}));
-               p_197059_1_.func_197021_a(itextcomponent1);
+               source.func_197021_a(itextcomponent1);
             }
          } catch (Exception exception) {
             ITextComponent itextcomponent = new StringTextComponent(exception.getMessage() == null ? exception.getClass().getName() : exception.getMessage());
             if (field_197061_a.isDebugEnabled()) {
-               field_197061_a.error("Command exception: {}", p_197059_2_, exception);
+               field_197061_a.error("Command exception: {}", command, exception);
                StackTraceElement[] astacktraceelement = exception.getStackTrace();
 
                for(int j = 0; j < Math.min(astacktraceelement.length, 3); ++j) {
@@ -231,12 +284,12 @@
                }
             }
 
-            p_197059_1_.func_197021_a((new TranslationTextComponent("command.failed")).func_211710_a((p_211704_1_) -> {
+            source.func_197021_a((new TranslationTextComponent("command.failed")).func_211710_a((p_211704_1_) -> {
                p_211704_1_.func_150209_a(new HoverEvent(HoverEvent.Action.SHOW_TEXT, itextcomponent));
             }));
             if (SharedConstants.field_206244_b) {
-               p_197059_1_.func_197021_a(new StringTextComponent(Util.func_229758_d_(exception)));
-               field_197061_a.error("'" + p_197059_2_ + "' threw an exception", (Throwable)exception);
+               source.func_197021_a(new StringTextComponent(Util.func_229758_d_(exception)));
+               field_197061_a.error("'" + command + "' threw an exception", (Throwable)exception);
             }
 
             byte b2 = 0;
@@ -246,15 +299,39 @@
          byte b0 = 0;
          return b0;
       } finally {
-         p_197059_1_.func_197028_i().func_213185_aS().func_76319_b();
+         source.func_197028_i().func_213185_aS().func_76319_b();
       }
    }
 
    public void func_197051_a(ServerPlayerEntity p_197051_1_) {
-      Map<CommandNode<CommandSource>, CommandNode<ISuggestionProvider>> map = Maps.newHashMap();
+      if ( org.spigotmc.SpigotConfig.tabComplete < 0 ) return; // Spigot
+      // Register Vanilla commands into builtRoot as before
+      Map<CommandNode<CommandSource>, CommandNode<ISuggestionProvider>> map = Maps.newIdentityHashMap(); // Use identity to prevent aliasing issues
+      RootCommandNode vanillaRoot = new RootCommandNode();
+      RootCommandNode<CommandSource> vanilla = p_197051_1_.field_71133_b.vanillaCommandDispatcher.func_197054_a().getRoot();
+      map.put(vanilla, vanillaRoot);
+      this.func_197052_a(vanilla, vanillaRoot, p_197051_1_.func_195051_bN(), (Map) map);
+
+      // Now build the global commands in a second pass
       RootCommandNode<ISuggestionProvider> rootcommandnode = new RootCommandNode<>();
+
       map.put(this.field_197062_b.getRoot(), rootcommandnode);
       this.func_197052_a(this.field_197062_b.getRoot(), rootcommandnode, p_197051_1_.func_195051_bN(), map);
+
+      Collection<String> bukkit = new LinkedHashSet<>();
+      for (CommandNode node : rootcommandnode.getChildren()) {
+         bukkit.add(node.getName());
+      }
+      PlayerCommandSendEvent event = new PlayerCommandSendEvent(p_197051_1_.getBukkitEntity(), new LinkedHashSet<>(bukkit));
+      event.getPlayer().getServer().getPluginManager().callEvent(event);
+      // Remove labels that were removed during the event
+      for (String orig : bukkit) {
+         if (!event.getCommands().contains(orig)) {
+            rootcommandnode.removeCommand(orig);
+         }
+      }
+      // CraftBukkit end
+
       p_197051_1_.field_71135_a.func_147359_a(new SCommandListPacket(rootcommandnode));
    }
 
