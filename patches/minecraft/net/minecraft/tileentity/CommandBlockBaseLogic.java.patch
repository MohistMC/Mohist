--- ../src-base/minecraft/net/minecraft/tileentity/CommandBlockBaseLogic.java
+++ ../src-work/minecraft/net/minecraft/tileentity/CommandBlockBaseLogic.java
@@ -1,23 +1,40 @@
 package net.minecraft.tileentity;
 
+import com.google.common.base.Joiner;
 import io.netty.buffer.ByteBuf;
 import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 import java.util.Date;
 import javax.annotation.Nullable;
+import net.minecraft.advancements.FunctionManager;
+import net.minecraft.command.CommandException;
 import net.minecraft.command.CommandResultStats;
+import net.minecraft.command.CommandSenderWrapper;
+import net.minecraft.command.EntitySelector;
 import net.minecraft.command.ICommandSender;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ICrashReportDetail;
+import net.minecraft.entity.item.EntityMinecartCommandBlock;
 import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.nbt.NBTTagCompound;
+import net.minecraft.network.rcon.RConConsoleSource;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.util.ReportedException;
 import net.minecraft.util.text.ITextComponent;
 import net.minecraft.util.text.TextComponentString;
+import net.minecraft.util.text.TextComponentTranslation;
+import net.minecraft.util.text.TextFormatting;
 import net.minecraft.world.World;
+import net.minecraft.world.WorldServer;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.v1_12_R1.command.CraftRemoteConsoleCommandSender;
+import org.bukkit.craftbukkit.v1_12_R1.command.VanillaCommandWrapper;
+import org.bukkit.event.server.ServerCommandEvent;
+import com.mohistmc.MohistMC;
 
 public abstract class CommandBlockBaseLogic implements ICommandSender
 {
@@ -30,6 +47,7 @@
     private String field_145763_e = "";
     private String field_145761_f = "@";
     private final CommandResultStats field_175575_g = new CommandResultStats();
+    protected org.bukkit.command.CommandSender sender = new org.bukkit.craftbukkit.v1_12_R1.command.CraftBlockCommandSender(this);
 
     public int func_145760_g()
     {
@@ -122,6 +140,10 @@
         return p_70003_1_ <= 2;
     }
 
+    public boolean canUseCommand(int permLevel, String commandName, String perm) {
+        return permLevel <= 2;
+    }
+
     public void func_145752_a(String p_145752_1_)
     {
         this.field_145763_e = p_145752_1_;
@@ -152,7 +174,8 @@
                     try
                     {
                         this.field_145762_d = null;
-                        this.field_145764_b = minecraftserver.func_71187_D().func_71556_a(this, this.field_145763_e);
+//                        this.successCount = minecraftserver.getCommandManager().executeCommand(this, this.commandStored);
+                        this.field_145764_b = executeSafely(this, sender, this.field_145763_e);
                     }
                     catch (Throwable throwable)
                     {
@@ -198,6 +221,173 @@
         }
     }
 
+    public static int executeSafely(ICommandSender sender, org.bukkit.command.CommandSender bSender, String command) {
+        try {
+            return executeCommand(sender, bSender, command);
+        } catch (CommandException commandexception) {
+            // Taken from CommandHandler
+            TextComponentTranslation chatmessage = new TextComponentTranslation(commandexception.getMessage(), commandexception.func_74844_a());
+            chatmessage.func_150256_b().func_150238_a(TextFormatting.RED);
+            sender.func_145747_a(chatmessage);
+        }
+
+        return 0;
+    }
+
+    public static int executeCommand(ICommandSender sender, org.bukkit.command.CommandSender bSender, String command) throws CommandException {
+        org.bukkit.command.SimpleCommandMap commandMap = sender.func_130014_f_().getServer().getCommandMap();
+        Joiner joiner = Joiner.on(" ");
+        if (command.startsWith("/")) {
+            command = command.substring(1);
+        }
+
+        ServerCommandEvent event = new ServerCommandEvent(bSender, command);
+        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return 0;
+        }
+        command = event.getCommand();
+
+        String[] args = command.split(" ");
+        ArrayList<String[]> commands = new ArrayList<String[]>();
+
+        String cmd = args[0];
+        if (cmd.startsWith("minecraft:")) cmd = cmd.substring("minecraft:".length());
+        if (cmd.startsWith("bukkit:")) cmd = cmd.substring("bukkit:".length());
+        if (cmd.startsWith("mohist:")) cmd = cmd.substring("mohist:".length());
+
+        // Block disallowed commands
+        if (cmd.equalsIgnoreCase("stop") || cmd.equalsIgnoreCase("kick") || cmd.equalsIgnoreCase("op")
+                || cmd.equalsIgnoreCase("deop") || cmd.equalsIgnoreCase("ban") || cmd.equalsIgnoreCase("ban-ip")
+                || cmd.equalsIgnoreCase("pardon") || cmd.equalsIgnoreCase("pardon-ip") || cmd.equalsIgnoreCase("reload")
+                || cmd.equalsIgnoreCase("mohist")) {
+            return 0;
+        }
+
+        // Handle vanilla commands;
+        org.bukkit.command.Command commandBlockCommand = commandMap.getCommand(args[0]);
+        if (sender.func_130014_f_().getServer().getCommandBlockOverride(args[0])) {
+            commandBlockCommand = commandMap.getCommand("minecraft:" + args[0]);
+        }
+        if (commandBlockCommand instanceof VanillaCommandWrapper) {
+            command = command.trim();
+            if (command.startsWith("/")) {
+                command = command.substring(1);
+            }
+            String as[] = command.split(" ");
+            as = VanillaCommandWrapper.dropFirstArgument(as);
+            if (!sender.func_130014_f_().getServer().getPermissionOverride(sender) && !((VanillaCommandWrapper) commandBlockCommand).testPermission(bSender)) {
+                return 0;
+            }
+            return ((VanillaCommandWrapper) commandBlockCommand).dispatchVanillaCommand(bSender, sender, as);
+        }
+
+        // Make sure this is a valid command
+        if (commandMap.getCommand(args[0]) == null) {
+            net.minecraft.command.ICommandManager icommandmanager = MinecraftServer.getServerInst().func_71187_D();
+            icommandmanager.func_71556_a(sender, command);
+            return 0;
+        }
+
+        commands.add(args);
+
+        // Find positions of command block syntax, if any
+        WorldServer[] prev = MinecraftServer.getServerInst().field_71305_c;
+        MinecraftServer server = MinecraftServer.getServerInst();
+        server.field_71305_c = new WorldServer[server.worldServerList.size()];
+        server.field_71305_c[0] = (WorldServer) sender.func_130014_f_();
+        int bpos = 0;
+        for (int pos = 1; pos < server.field_71305_c.length; pos++) {
+            WorldServer world = server.worldServerList.get(bpos++);
+            if (server.field_71305_c[0] == world) {
+                pos--;
+                continue;
+            }
+            server.field_71305_c[pos] = world;
+        }
+        try {
+            ArrayList<String[]> newCommands = new ArrayList<String[]>();
+            for (int i = 0; i < args.length; i++) {
+                if (EntitySelector.isSelectorDefault(args[i])) {
+                    for (int j = 0; j < commands.size(); j++) {
+                        newCommands.addAll(buildCommands(sender, commands.get(j), i));
+                    }
+                    ArrayList<String[]> temp = commands;
+                    commands = newCommands;
+                    newCommands = temp;
+                    newCommands.clear();
+                }
+            }
+        } finally {
+            MinecraftServer.getServerInst().field_71305_c = prev;
+        }
+
+        int completed = 0;
+
+        // Now dispatch all of the commands we ended up with
+        for (int i = 0; i < commands.size(); i++) {
+            try {
+                if (commandMap.dispatch(bSender, joiner.join(java.util.Arrays.asList(commands.get(i))))) {
+                    completed++;
+                }
+            } catch (Throwable exception) {
+                if (sender.func_174793_f() instanceof EntityMinecartCommandBlock) {
+                    MohistMC.LOGGER.warn(String.format("MinecartCommandBlock at (%d,%d,%d) failed to handle command", sender.func_180425_c().func_177958_n(), sender.func_180425_c().func_177956_o(), sender.func_180425_c().func_177952_p()), exception);
+                } else if (sender instanceof CommandBlockBaseLogic) {
+                    CommandBlockBaseLogic listener = (CommandBlockBaseLogic) sender;
+                    MohistMC.LOGGER.warn(String.format("CommandBlock at (%d,%d,%d) failed to handle command", listener.func_180425_c().func_177958_n(), listener.func_180425_c().func_177956_o(), listener.func_180425_c().func_177952_p()), exception);
+                } else {
+                    MohistMC.LOGGER.warn(String.format("Unknown CommandBlock failed to handle command"), exception);
+                }
+            }
+        }
+
+        return completed;
+    }
+
+    private static ArrayList<String[]> buildCommands(ICommandSender sender, String[] args, int pos) throws CommandException {
+        ArrayList<String[]> commands = new ArrayList<String[]>();
+        java.util.List<EntityPlayer> players = (java.util.List<EntityPlayer>) EntitySelector.matchEntitiesDefault(sender, args[pos], EntityPlayer.class);
+
+        if (players != null) {
+            for (EntityPlayer player : players) {
+                if (player.field_70170_p != sender.func_130014_f_()) {
+                    continue;
+                }
+                String[] command = args.clone();
+                command[pos] = player.func_70005_c_();
+                commands.add(command);
+            }
+        }
+
+        return commands;
+    }
+
+    public static CommandSender unwrapSender(ICommandSender listener) {
+        org.bukkit.command.CommandSender sender = null;
+        if (listener instanceof DedicatedServer) {
+            sender = ((DedicatedServer) listener).console;
+        } else if (listener instanceof RConConsoleSource) {
+            sender = new CraftRemoteConsoleCommandSender((RConConsoleSource) listener);
+        } else if (listener instanceof CommandBlockBaseLogic) {
+            sender = ((CommandBlockBaseLogic) listener).sender;
+        } else if (listener instanceof FunctionManager.CustomFunctionListener) {
+            sender = ((FunctionManager.CustomFunctionListener) listener).sender;
+        } else if (listener instanceof CommandSenderWrapper) {
+            sender = unwrapSender(((CommandSenderWrapper) listener).field_193043_a); // Search deeper
+        } else if (VanillaCommandWrapper.lastSender != null) {
+            sender = VanillaCommandWrapper.lastSender;
+        } else if (listener.func_174793_f() != null) {
+            sender = listener.func_174793_f().getBukkitEntity();
+        } else if (listener instanceof net.minecraft.entity.Entity) {
+            sender = ((net.minecraft.entity.Entity) sender).getBukkitEntity();
+        } else {
+            throw new RuntimeException("Unhandled executor " + listener.getClass().getSimpleName());
+        }
+
+        return sender;
+    }
+
\ No newline at end of file
     public String func_70005_c_()
     {
         return this.field_145761_f;
