--- ../src-base/minecraft/net/minecraft/tileentity/TileEntitySkull.java
+++ ../src-work/minecraft/net/minecraft/tileentity/TileEntitySkull.java
@@ -1,15 +1,30 @@
 package net.minecraft.tileentity;
 
+import com.google.common.base.Predicate;
+import com.google.common.cache.CacheBuilder;
+import com.google.common.cache.CacheLoader;
+import com.google.common.cache.LoadingCache;
 import com.google.common.collect.Iterables;
+import com.google.common.util.concurrent.Futures;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import com.mojang.authlib.Agent;
 import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.ProfileLookupCallback;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.authlib.properties.Property;
 import java.util.UUID;
+import java.util.concurrent.Callable;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.concurrent.TimeUnit;
 import javax.annotation.Nullable;
 import net.minecraft.block.BlockSkull;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.nbt.NBTTagCompound;
 import net.minecraft.nbt.NBTUtil;
 import net.minecraft.network.play.server.SPacketUpdateTileEntity;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.management.PlayerProfileCache;
 import net.minecraft.util.EnumFacing;
 import net.minecraft.util.ITickable;
@@ -18,17 +33,65 @@
 import net.minecraft.util.StringUtils;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import com.mohistmc.common.async.MohistThreadBox;
 
 public class TileEntitySkull extends TileEntity implements ITickable
 {
     private int field_145908_a;
-    private int field_145910_i;
+    public int field_145910_i;
     private GameProfile field_152110_j;
     private int field_184296_h;
     private boolean field_184297_i;
     private static PlayerProfileCache field_184298_j;
     private static MinecraftSessionService field_184299_k;
+    // Spigot start
+    public static final LoadingCache<String, GameProfile> skinCache = CacheBuilder.newBuilder()
+            .maximumSize( 5000 )
+            .expireAfterAccess( 60, TimeUnit.MINUTES )
+            .build( new CacheLoader<String, GameProfile>()
+            {
+                @Override
+                public GameProfile load(String key) throws Exception
+                {
+                    final GameProfile[] profiles = new GameProfile[1];
+                    ProfileLookupCallback gameProfileLookup = new ProfileLookupCallback() {
 
+                        @Override
+                        public void onProfileLookupSucceeded(GameProfile gp) {
+                            profiles[0] = gp;
+                        }
+
+                        @Override
+                        public void onProfileLookupFailed(GameProfile gp, Exception excptn) {
+                            profiles[0] = gp;
+                        }
+                    };
+
+                    MinecraftServer.getServerInst().func_152359_aw().findProfilesByNames(new String[] { key }, Agent.MINECRAFT, gameProfileLookup);
+
+                    GameProfile profile = profiles[ 0 ];
+                    if (profile == null) {
+                        UUID uuid = EntityPlayer.func_146094_a(new GameProfile(null, key));
+                        profile = new GameProfile(uuid, key);
+
+                        gameProfileLookup.onProfileLookupSucceeded(profile);
+                    } else
+                    {
+
+                        Property property = Iterables.getFirst( profile.getProperties().get( "textures" ), null );
+
+                        if ( property == null )
+                        {
+                            profile = MinecraftServer.getServerInst().func_147130_as().fillProfileProperties( profile, true );
+                        }
+                    }
+
+
+                    return profile;
+                }
+            } );
+    // Spigot end
+
     public static void func_184293_a(PlayerProfileCache p_184293_0_)
     {
         field_184298_j = p_184293_0_;
@@ -134,49 +197,90 @@
 
     private void func_152109_d()
     {
-        this.field_152110_j = func_174884_b(this.field_152110_j);
-        this.func_70296_d();
+        // Spigot start
+        GameProfile profile = this.field_152110_j;
+        func_152107_a( 0 ); // Work around client bug
+        updateGameprofile(profile, new Predicate<GameProfile>() {
+
+            @Override
+            public boolean apply(GameProfile input) {
+                func_152107_a(3); // Work around client bug
+                field_152110_j = input;
+                func_70296_d();
+                if (field_145850_b != null) {
+                    field_145850_b.func_175679_n(field_174879_c); // PAIL: notify
+                }
+                return false;
+            }
+        }, false);
+        // Spigot end
+
     }
 
-    public static GameProfile func_174884_b(GameProfile p_174884_0_)
+    // Spigot start - Support async lookups
+    public static Future<GameProfile> updateGameprofile(final GameProfile input, final Predicate<GameProfile> callback, boolean sync)
     {
-        if (p_174884_0_ != null && !StringUtils.func_151246_b(p_174884_0_.getName()))
+        if (input != null && !StringUtils.func_151246_b(input.getName()))
         {
-            if (p_174884_0_.isComplete() && p_174884_0_.getProperties().containsKey("textures"))
+            if (input.isComplete() && input.getProperties().containsKey("textures"))
             {
-                return p_174884_0_;
-            }
-            else if (field_184298_j != null && field_184299_k != null)
-            {
-                GameProfile gameprofile = field_184298_j.func_152655_a(p_174884_0_.getName());
+                callback.apply(input);
+            } else if (MinecraftServer.getServerInst() == null) {
+                callback.apply(input);
+            } else {
+                GameProfile profile = skinCache.getIfPresent(input.getName().toLowerCase(java.util.Locale.ROOT));
+                if (profile != null && Iterables.getFirst(profile.getProperties().get("textures"), (Object) null) != null) {
+                    callback.apply(profile);
 
-                if (gameprofile == null)
-                {
-                    return p_174884_0_;
+                    return Futures.immediateFuture(profile);
                 }
                 else
                 {
-                    Property property = (Property)Iterables.getFirst(gameprofile.getProperties().get("textures"), (Object)null);
-
-                    if (property == null)
-                    {
-                        gameprofile = field_184299_k.fillProfileProperties(gameprofile, true);
+                    Callable<GameProfile> callable = new Callable<GameProfile>() {
+                        @Override
+                        public GameProfile call() {
+                            final GameProfile profile = skinCache.getUnchecked(input.getName().toLowerCase(java.util.Locale.ROOT));
+                            MinecraftServer.getServerInst().processQueue.add(new Runnable() {
+                                @Override
+                                public void run() {
+                                    if (profile == null) {
+                                        callback.apply(input);
+                                    } else {
+                                        callback.apply(profile);
+                                    }
+                                }
+                            });
+                            return profile;
+                        }
+                    };
+                    if (sync) {
+                        try {
+                            return Futures.immediateFuture(callable.call());
+                        } catch (Exception ex) {
+                            com.google.common.base.Throwables.throwIfUnchecked(ex);
+                            throw new RuntimeException(ex); // Not possible
+                        }
+                    } else {
+                        return MohistThreadBox.Head.submit(callable);
                     }
 
-                    return gameprofile;
                 }
             }
-            else
-            {
-                return p_174884_0_;
-            }
         }
         else
         {
-            return p_174884_0_;
+            callback.apply(input);
         }
+
+        return Futures.immediateFuture(input);
     }
+    // Spigot end
 
+    public static GameProfile func_174884_b(GameProfile p_174884_0_)
+    {
+        return com.google.common.util.concurrent.Futures.getUnchecked(updateGameprofile(p_174884_0_, com.google.common.base.Predicates.alwaysTrue(), true)); // Mohist
+    }
+
\ No newline at end of file
     public int func_145904_a()
     {
         return this.field_145908_a;
