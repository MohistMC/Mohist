--- a/net/minecraft/util/palette/PalettedContainer.java
+++ b/net/minecraft/util/palette/PalettedContainer.java
@@ -1,13 +_,14 @@
 package net.minecraft.util.palette;
 
-import it.unimi.dsi.fastutil.ints.Int2IntMap;
-import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import java.util.Arrays;
 import java.util.Objects;
 import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
+
+import it.unimi.dsi.fastutil.ints.Int2IntMap;
+import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import net.minecraft.crash.CrashReport;
 import net.minecraft.crash.CrashReportCategory;
 import net.minecraft.crash.ReportedException;
@@ -61,13 +_,16 @@
       this.func_186012_b(4);
    }
 
-   private static int func_186011_b(int p_186011_0_, int p_186011_1_, int p_186011_2_) {
+   public static int func_186011_b(int p_186011_0_, int p_186011_1_, int p_186011_2_) { // Mohist - Optimize Randomtick (2nd attempt)
       return p_186011_1_ << 8 | p_186011_2_ << 4 | p_186011_0_;
    }
 
    private void func_186012_b(int p_186012_1_) {
-      if (p_186012_1_ != this.field_186024_e) {
-         this.field_186024_e = p_186012_1_;
+      setBits(p_186012_1_, false);
+   }
+   private void setBits(int bitsIn, boolean forceBits) {
+      if (bitsIn != this.field_186024_e) {
+         this.field_186024_e = bitsIn;
          if (this.field_186024_e <= 4) {
             this.field_186024_e = 4;
             this.field_186022_c = new ArrayPalette<>(this.field_205523_d, this.field_186024_e, this, this.field_205524_e);
@@ -76,6 +_,8 @@
          } else {
             this.field_186022_c = this.field_205521_b;
             this.field_186024_e = MathHelper.func_151241_e(this.field_205523_d.func_186804_a());
+            if (forceBits)
+               this.field_186024_e = bitsIn;
          }
 
          this.field_186022_c.func_186041_a(this.field_205526_g);
@@ -138,12 +_,16 @@
       this.func_210459_b();
       int i = p_186010_1_.readByte();
       if (this.field_186024_e != i) {
-         this.func_186012_b(i);
+         this.setBits(i, true); //Forge, Force bit density to fix network issues, resize below if needed.
       }
 
       this.field_186022_c.func_186038_a(p_186010_1_);
       p_186010_1_.func_186873_b(this.field_186021_b.func_188143_a());
       this.func_210460_c();
+
+      int regSize = MathHelper.func_151241_e(this.field_205523_d.func_186804_a());
+      if (this.field_186022_c == field_205521_b && this.field_186024_e != regSize) // Resize bits to fit registry.
+         this.onResize(regSize, field_205526_g);
    }
 
    public void func_186009_b(PacketBuffer p_186009_1_) {
@@ -237,4 +_,23 @@
    public interface ICountConsumer<T> {
       void accept(T p_accept_1_, int p_accept_2_);
    }
+
+   // Mohist start - Optimize Randomtick (2nd attempt)
+   public void count(PalettedContainer.ICountConsumerTriple<T> p_225497_1_) {
+      Int2IntMap int2intmap = new Int2IntOpenHashMap();
+      Int2IntMap int2keymap = new Int2IntOpenHashMap();
+      this.field_186021_b.getAll((p_225498_1_, key) -> {
+         int2intmap.put(p_225498_1_, int2intmap.get(p_225498_1_) + 1);
+         int2keymap.put(p_225498_1_, key);
+      });
+      int2intmap.int2IntEntrySet().forEach((p_225499_2_) -> {
+         p_225497_1_.accept(this.field_186022_c.func_186039_a(p_225499_2_.getIntKey()), p_225499_2_.getIntValue(), int2keymap.get(p_225499_2_.getIntKey()));
+      });
+   }
+
+   @FunctionalInterface
+   public interface ICountConsumerTriple<T> {
+      void accept(T p_accept_1_, int p_accept_2_, int key);
+   }
+   // Mohist end
 }
