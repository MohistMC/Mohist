--- ../src-base/minecraft/net/minecraft/inventory/Container.java
+++ ../src-work/minecraft/net/minecraft/inventory/Container.java
@@ -2,7 +2,12 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 import javax.annotation.Nullable;
 import net.minecraft.entity.player.EntityPlayer;
@@ -18,6 +23,16 @@
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.v1_12_R1.entity.CraftPlayer;
+import org.bukkit.craftbukkit.v1_12_R1.inventory.CraftInventory;
+import org.bukkit.craftbukkit.v1_12_R1.inventory.CraftInventoryView;
+import org.bukkit.craftbukkit.v1_12_R1.inventory.CraftItemStack;
+import org.bukkit.event.Event;
+import org.bukkit.event.inventory.InventoryDragEvent;
+import org.bukkit.event.inventory.InventoryType;
+import org.bukkit.inventory.Inventory;
+import org.bukkit.inventory.InventoryView;
 
 public abstract class Container
 {
@@ -27,11 +42,93 @@
     @SideOnly(Side.CLIENT)
     private short field_75150_e;
     private int field_94535_f = -1;
-    private int field_94536_g;
+    public int field_94536_g;
     private final Set<Slot> field_94537_h = Sets.<Slot>newHashSet();
     protected List<IContainerListener> field_75149_d = Lists.<IContainerListener>newArrayList();
     private final Set<EntityPlayer> field_75148_f = Sets.<EntityPlayer>newHashSet();
+    private int tickCount; // Spigot
 
+    public boolean checkReachable = true;
+    private InventoryView bukkitView;
+    private boolean isBukkitViewCreated;
+
+    @Nullable
+    public InventoryView getBukkitView() {
+        if(!isBukkitViewCreated) {
+            isBukkitViewCreated = true;
+            bukkitView = computeBukkitView();
+            return bukkitView;
+        }
+        return bukkitView;
+    }
+
+    public void setBukkitView(InventoryView bukkitView) {
+        this.bukkitView = bukkitView;
+        isBukkitViewCreated = true;
+    }
+
+    @Nullable
+    private InventoryView computeBukkitView() {
+        Set<IInventory> uniqueInventorySet = new HashSet<>();
+        for(Slot slot : field_75151_b) {
+            if (slot.field_75224_c != null) uniqueInventorySet.add(slot.field_75224_c);
+        }
+        List<IInventory> inventories = new ArrayList<>(uniqueInventorySet);
+        InventoryPlayer playerInv = null;
+
+        for(Iterator<IInventory> it = inventories.iterator(); it.hasNext();) {
+            IInventory inv = it.next();
+            if(inv instanceof InventoryPlayer) {
+                playerInv = (InventoryPlayer) inv;
+                it.remove();
+                break;
+            }
+        }
+        if(playerInv == null) {
+            return null;
+        }
+        CraftPlayer bukkitPlayer = (CraftPlayer) playerInv.field_70458_d.getBukkitEntity();
+        Inventory craftInv;
+        if(inventories.size() != 1) {
+            craftInv = Bukkit.getServer().createInventory(bukkitPlayer, InventoryType.CHEST);
+        } else {
+            craftInv = new CraftInventory(inventories.get(0));
+        }
+        return new CraftInventoryView(bukkitPlayer, craftInv, this);
+    }
+
+    public void transferTo(Container other, org.bukkit.craftbukkit.v1_12_R1.entity.CraftHumanEntity player) {
+        InventoryView source = this.getBukkitView(), destination = other.getBukkitView();
+        // Cauldron start - add null checks to skip modded inventories with no Bukkit wrappers, and
+        // catch AbstractMethodErrors for modded IInventory's with no onClose()
+        if (source != null) {
+            try {
+                ((CraftInventory) source.getTopInventory()).getInventory().onClose(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+
+            try {
+                ((CraftInventory) source.getBottomInventory()).getInventory().onClose(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+        }
+        if (destination != null) {
+            try {
+                ((CraftInventory) destination.getTopInventory()).getInventory().onOpen(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+
+            try {
+                ((CraftInventory) destination.getBottomInventory()).getInventory().onOpen(player);
+            } catch (AbstractMethodError ex) {
+                // modded
+            }
+        }
+    }
+
     protected Slot func_75146_a(Slot p_75146_1_)
     {
         p_75146_1_.field_75222_d = this.field_75151_b.size();
@@ -44,7 +141,8 @@
     {
         if (this.field_75149_d.contains(p_75132_1_))
         {
-            throw new IllegalArgumentException("Listener already listening");
+            p_75132_1_.func_71110_a(this, this.func_75138_a());
+            this.func_75142_b();
         }
         else
         {
@@ -79,17 +177,20 @@
             ItemStack itemstack = ((Slot)this.field_75151_b.get(i)).func_75211_c();
             ItemStack itemstack1 = this.field_75153_a.get(i);
 
-            if (!ItemStack.func_77989_b(itemstack1, itemstack))
+            if (!ItemStack.fastMatches(itemstack1, itemstack) || (tickCount % org.spigotmc.SpigotConfig.itemDirtyTicks == 0 && !ItemStack.func_77989_b(itemstack1, itemstack))) // Spigot
             {
+                boolean clientStackChanged = !ItemStack.areItemStacksEqualUsingNBTShareTag(itemstack1, itemstack);
                 itemstack1 = itemstack.func_190926_b() ? ItemStack.field_190927_a : itemstack.func_77946_l();
                 this.field_75153_a.set(i, itemstack1);
 
+                if (clientStackChanged)
                 for (int j = 0; j < this.field_75149_d.size(); ++j)
                 {
                     ((IContainerListener)this.field_75149_d.get(j)).func_71111_a(this, i, itemstack1);
                 }
             }
         }
+        tickCount++; // Spigot
     }
 
     public boolean func_75140_a(EntityPlayer p_75140_1_, int p_75140_2_)
@@ -172,7 +273,7 @@
                 {
                     ItemStack itemstack9 = inventoryplayer.func_70445_o().func_77946_l();
                     int k1 = inventoryplayer.func_70445_o().func_190916_E();
-
+                    Map<Integer, ItemStack> draggedSlots = new HashMap<>(); // CraftBukkit - Store slots from drag in map (raw slot id -> new stack)
                     for (Slot slot8 : this.field_94537_h)
                     {
                         ItemStack itemstack13 = inventoryplayer.func_70445_o();
@@ -190,12 +291,50 @@
                             }
 
                             k1 -= itemstack14.func_190916_E() - j3;
-                            slot8.func_75215_d(itemstack14);
+                            // slot8.putStack(itemstack14);
+                            draggedSlots.put(slot8.field_75222_d, itemstack14); // CraftBukkit - Put in map instead of setting
                         }
                     }
 
-                    itemstack9.func_190920_e(k1);
-                    inventoryplayer.func_70437_b(itemstack9);
+                    // itemstack9.setCount(k1);
+                    // inventoryplayer.setItemStack(itemstack9);
+                    // CraftBukkit start - InventoryDragEvent
+                    InventoryView view = getBukkitView();
+                    org.bukkit.inventory.ItemStack newcursor = CraftItemStack.asCraftMirror(itemstack9);
+                    newcursor.setAmount(k1);
+                    Map<Integer, org.bukkit.inventory.ItemStack> eventmap = new HashMap<Integer, org.bukkit.inventory.ItemStack>();
+                    for (Map.Entry<Integer, ItemStack> ditem : draggedSlots.entrySet()) {
+                        eventmap.put(ditem.getKey(), CraftItemStack.asBukkitCopy(ditem.getValue()));
+                    }
+
+                    // It's essential that we set the cursor to the new value here to prevent item duplication if a plugin closes the inventory.
+                    ItemStack oldCursor = inventoryplayer.func_70445_o();
+                    inventoryplayer.func_70437_b(CraftItemStack.asNMSCopy(newcursor));
+
+                    InventoryDragEvent event = new InventoryDragEvent(view, (newcursor.getType() != org.bukkit.Material.AIR ? newcursor : null), CraftItemStack.asBukkitCopy(oldCursor), this.field_94535_f == 1, eventmap);
+                    p_184996_4_.field_70170_p.getServer().getPluginManager().callEvent(event);
+
+                    // Whether or not a change was made to the inventory that requires an update.
+                    boolean needsUpdate = event.getResult() != Event.Result.DEFAULT;
+
+                    if (event.getResult() != Event.Result.DENY) {
+                        for (Map.Entry<Integer, ItemStack> dslot : draggedSlots.entrySet()) {
+                            view.setItem(dslot.getKey(), CraftItemStack.asBukkitCopy(dslot.getValue()));
+                        }
+                        // The only time the carried item will be set to null is if the inventory is closed by the server.
+                        // If the inventory is closed by the server, then the cursor items are dropped.  This is why we change the cursor early.
+                        if (inventoryplayer.func_70445_o() != null) {
+                            inventoryplayer.func_70437_b(CraftItemStack.asNMSCopy(event.getCursor()));
+                            needsUpdate = true;
+                        }
+                    } else {
+                        inventoryplayer.func_70437_b(oldCursor);
+                    }
+
+                    if (needsUpdate && p_184996_4_ instanceof EntityPlayerMP) {
+                        ((EntityPlayerMP) p_184996_4_).func_71120_a(this);
+                    }
+                    // CraftBukkit end
                 }
 
                 this.func_94533_d();
@@ -217,8 +356,9 @@
                 {
                     if (p_184996_2_ == 0)
                     {
-                        p_184996_4_.func_71019_a(inventoryplayer.func_70445_o(), true);
+                        ItemStack carried = inventoryplayer.func_70445_o();
                         inventoryplayer.func_70437_b(ItemStack.field_190927_a);
+                        p_184996_4_.func_71019_a(carried, true);
                     }
 
                     if (p_184996_2_ == 1)
@@ -346,6 +486,15 @@
                     }
 
                     slot6.func_75218_e();
+                    // CraftBukkit start - Make sure the client has the right slot contents
+                    if (p_184996_4_ instanceof EntityPlayerMP && slot6.func_75219_a() != 64) {
+                        ((EntityPlayerMP) p_184996_4_).field_71135_a.func_147359_a(new SPacketSetSlot(this.field_75152_c, slot6.field_75222_d, slot6.func_75211_c()));
+                        // Updating a crafting inventory makes the client reset the result slot, have to send it again
+                        if (getBukkitView() != null && (this.getBukkitView().getType() == InventoryType.WORKBENCH || this.getBukkitView().getType() == InventoryType.CRAFTING)) {
+                            ((EntityPlayerMP) p_184996_4_).field_71135_a.func_147359_a(new SPacketSetSlot(this.field_75152_c, 0, this.func_75139_a(0).func_75211_c()));
+                        }
+                    }
+                    // CraftBukkit end
                 }
             }
         }
@@ -589,18 +738,19 @@
                 if (!itemstack.func_190926_b() && itemstack.func_77973_b() == p_75135_1_.func_77973_b() && (!p_75135_1_.func_77981_g() || p_75135_1_.func_77960_j() == itemstack.func_77960_j()) && ItemStack.func_77970_a(p_75135_1_, itemstack))
                 {
                     int j = itemstack.func_190916_E() + p_75135_1_.func_190916_E();
+                    int maxSize = Math.min(slot.func_75219_a(), p_75135_1_.func_77976_d());
 
-                    if (j <= p_75135_1_.func_77976_d())
+                    if (j <= maxSize)
                     {
                         p_75135_1_.func_190920_e(0);
                         itemstack.func_190920_e(j);
                         slot.func_75218_e();
                         flag = true;
                     }
-                    else if (itemstack.func_190916_E() < p_75135_1_.func_77976_d())
+                    else if (itemstack.func_190916_E() < maxSize)
                     {
-                        p_75135_1_.func_190918_g(p_75135_1_.func_77976_d() - itemstack.func_190916_E());
-                        itemstack.func_190920_e(p_75135_1_.func_77976_d());
+                        p_75135_1_.func_190918_g(maxSize - itemstack.func_190916_E());
+                        itemstack.func_190920_e(maxSize);
                         slot.func_75218_e();
                         flag = true;
                     }
@@ -738,7 +888,7 @@
                 p_94525_2_.func_190920_e(1);
                 break;
             case 2:
-                p_94525_2_.func_190920_e(p_94525_2_.func_77973_b().func_77639_j());
+                p_94525_2_.func_190920_e(p_94525_2_.func_77976_d());
         }
 
         p_94525_2_.func_190917_f(p_94525_3_);
@@ -794,7 +944,9 @@
                 p_192389_4_.func_193056_a(irecipe);
                 itemstack = irecipe.func_77572_b(p_192389_3_);
             }
-
+            if (p_192389_3_.resultInventory != null && getBukkitView() != null) {
+                itemstack = org.bukkit.craftbukkit.v1_12_R1.event.CraftEventFactory.callPreCraftEvent(p_192389_3_, itemstack, getBukkitView(), false); // CraftBukkit
+            }
\ No newline at end of file
             p_192389_4_.func_70299_a(0, itemstack);
             entityplayermp.field_71135_a.func_147359_a(new SPacketSetSlot(this.field_75152_c, 0, itemstack));
         }
