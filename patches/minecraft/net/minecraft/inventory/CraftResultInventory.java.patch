--- a/net/minecraft/inventory/CraftResultInventory.java
+++ b/net/minecraft/inventory/CraftResultInventory.java
@@ -1,15 +1,64 @@
 package net.minecraft.inventory;
 
+import java.util.ArrayList;
+import java.util.List;
 import javax.annotation.Nullable;
 import net.minecraft.entity.player.PlayerEntity;
 import net.minecraft.item.ItemStack;
 import net.minecraft.item.crafting.IRecipe;
 import net.minecraft.util.NonNullList;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.v1_15_R1.entity.CraftHumanEntity;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.inventory.InventoryHolder;
 
 public class CraftResultInventory implements IInventory, IRecipeHolder {
    private final NonNullList<ItemStack> field_70467_a = NonNullList.func_191197_a(1, ItemStack.field_190927_a);
    private IRecipe<?> field_193057_b;
 
+   // CraftBukkit start
+
+   private int maxStack = MAX_STACK;
+
+   @Override
+   public int func_70297_j_() {
+      return this.maxStack;
+   }
+
+   @Override
+   public List<ItemStack> getContents() {
+      return this.field_70467_a;
+   }
+
+   // Don't need a transaction; the InventoryCrafting keeps track of it for us
+   @Override public void onOpen(CraftHumanEntity who) {
+
+   }
+   @Override public void onClose(CraftHumanEntity who) {
+
+   }
+
+   @Override
+   public List<HumanEntity> getViewers() {
+      return new ArrayList<>();
+   }
+
+   @Override
+   public InventoryHolder getOwner() {
+      return null; // Result slots don't get an owner
+   }
+
+   @Override
+   public void setMaxStackSize(int size) {
+      this.maxStack = size;
+   }
+
+   @Override
+   public Location getLocation() {
+      return null;
+   }
+   // CraftBukkit end
+
    public int func_70302_i_() {
       return 1;
    }
@@ -40,11 +89,14 @@
       this.field_70467_a.set(0, p_70299_2_);
    }
 
+   @Override
    public void func_70296_d() {
+
    }
 
+   @Override
    public boolean func_70300_a(PlayerEntity p_70300_1_) {
-      return true;
+      return false;
    }
 
    public void func_174888_l() {
