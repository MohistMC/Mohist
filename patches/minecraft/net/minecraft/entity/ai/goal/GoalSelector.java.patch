--- a/net/minecraft/entity/ai/goal/GoalSelector.java
+++ b/net/minecraft/entity/ai/goal/GoalSelector.java
@@ -9,9 +9,12 @@
 import net.minecraft.profiler.IProfiler;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import red.mohist.extra.ExtraExtendedGoal;
 
 public class GoalSelector {
    private static final Logger field_151506_a = LogManager.getLogger();
+   private boolean[] disabledControlsArray;
+   private PrioritizedGoal[] goalsByControlArray;
    private static final PrioritizedGoal field_220890_b = new PrioritizedGoal(Integer.MAX_VALUE, new Goal() {
       public boolean func_75250_a() {
          return false;
@@ -44,53 +47,152 @@
       });
    }
 
+   private void init(IProfiler profiler) {
+      this.disabledControlsArray = new boolean[4];
+      this.goalsByControlArray = new PrioritizedGoal[4];
+   }
    public void func_75774_a() {
-      this.field_75781_c.func_76320_a("goalCleanup");
-      this.func_220888_c().filter((p_220881_1_) -> {
-         return !p_220881_1_.func_220773_g() || p_220881_1_.func_220686_i().stream().anyMatch(this.field_220893_f::contains) || !p_220881_1_.func_75253_b();
-      }).forEach(Goal::func_75251_c);
-      this.field_220891_c.forEach((p_220885_1_, p_220885_2_) -> {
-         if (!p_220885_2_.func_220773_g()) {
-            this.field_220891_c.remove(p_220885_1_);
-         }
+      this.updateGoalStates();
+      this.tickGoals();
+   }
 
-      });
-      this.field_75781_c.func_76319_b();
+   private void updateGoalStates() {
       this.field_75781_c.func_76320_a("goalUpdate");
-      this.field_220892_d.stream().filter((p_220883_0_) -> {
-         return !p_220883_0_.func_220773_g();
-      }).filter((p_220879_1_) -> {
-         return p_220879_1_.func_220686_i().stream().noneMatch(this.field_220893_f::contains);
-      }).filter((p_220889_1_) -> {
-         return p_220889_1_.func_220686_i().stream().allMatch((p_220887_2_) -> {
-            return this.field_220891_c.getOrDefault(p_220887_2_, field_220890_b).func_220771_a(p_220889_1_);
-         });
-      }).filter(PrioritizedGoal::func_75250_a).forEach((p_220877_1_) -> {
-         p_220877_1_.func_220686_i().forEach((p_220876_2_) -> {
-            PrioritizedGoal prioritizedgoal = this.field_220891_c.getOrDefault(p_220876_2_, field_220890_b);
-            prioritizedgoal.func_75251_c();
-            this.field_220891_c.put(p_220876_2_, p_220877_1_);
-         });
-         p_220877_1_.func_75249_e();
-      });
+
+      // Stop any goals which are disabled or shouldn't continue executing
+      this.stopGoals();
+
+      // Update the controls
+      this.cleanupControls();
+
+      // Try to start new goals where possible
+      this.startGoals();
+
       this.field_75781_c.func_76319_b();
+   }
+
+   private void stopGoals() {
+      for (PrioritizedGoal goal : this.field_220892_d) {
+         // Filter out goals which are not running
+         if (!goal.func_220773_g()) {
+            continue;
+         }
+
+         // If the goal shouldn't continue or any of its controls have been disabled, then stop the goal
+         if (!goal.func_75253_b() || this.areControlsDisabled(goal)) {
+            goal.func_75251_c();
+         }
+      }
+   }
+
+   private void cleanupControls() {
+      for (int i = 0; i < this.goalsByControlArray.length; i++) {
+         PrioritizedGoal goal = this.goalsByControlArray[i];
+
+         // If the control has been acquired by a goal, check if the goal should still be running
+         // If the goal should not be running anymore, release the control held by it
+         if (goal != null && !goal.func_220773_g()) {
+            this.goalsByControlArray[i] = null;
+         }
+      }
+   }
+
+   private void startGoals() {
+      for (PrioritizedGoal goal : this.field_220892_d) {
+         // Filter out goals which are already running or can't be started
+         if (goal.func_220773_g() || !goal.func_75250_a()) {
+            continue;
+         }
+
+         // Check if the goal's controls are available or can be replaced
+         if (!this.areGoalControlsAvailable(goal)) {
+            continue;
+         }
+
+         // Hand over controls to this goal and stop any goals which depended on those controls
+         for (Goal.Flag control : getControls(goal)) {
+            PrioritizedGoal otherGoal = this.getGoalOccupyingControl(control);
+
+            if (otherGoal != null) {
+               otherGoal.func_75251_c();
+            }
+
+            this.setGoalOccupyingControl(control, goal);
+         }
+
+         goal.func_75249_e();
+      }
+   }
+
+   private void tickGoals() {
       this.field_75781_c.func_76320_a("goalTick");
-      this.func_220888_c().forEach(PrioritizedGoal::func_75246_d);
+
+      // Tick all currently running goals
+      for (PrioritizedGoal goal : this.field_220892_d) {
+         if (goal.func_220773_g()) {
+            goal.func_75246_d();
+         }
+      }
+
       this.field_75781_c.func_76319_b();
    }
 
+   private boolean areControlsDisabled(PrioritizedGoal goal) {
+      for (Goal.Flag control : getControls(goal)) {
+         if (this.isControlDisabled(control)) {
+            return true;
+         }
+      }
+
+      return false;
+   }
+
+   private boolean areGoalControlsAvailable(PrioritizedGoal goal) {
+      for (Goal.Flag control : getControls(goal)) {
+         if (this.isControlDisabled(control)) {
+            return false;
+         }
+
+         PrioritizedGoal occupied = this.getGoalOccupyingControl(control);
+
+         if (occupied != null && !occupied.func_220771_a(goal)) {
+            return false;
+         }
+      }
+
+      return true;
+   }
+
+
+
    public Stream<PrioritizedGoal> func_220888_c() {
       return this.field_220892_d.stream().filter(PrioritizedGoal::func_220773_g);
    }
 
    public void func_220880_a(Goal.Flag p_220880_1_) {
-      this.field_220893_f.add(p_220880_1_);
+      this.disabledControlsArray[p_220880_1_.ordinal()] = true;
    }
 
    public void func_220886_b(Goal.Flag p_220886_1_) {
-      this.field_220893_f.remove(p_220886_1_);
+      this.disabledControlsArray[p_220886_1_.ordinal()] = false;
    }
 
+   private boolean isControlDisabled(Goal.Flag p_220886_1_) {
+      return this.disabledControlsArray[p_220886_1_.ordinal()];
+   }
+
+   private PrioritizedGoal getGoalOccupyingControl(Goal.Flag p_220886_1_) {
+      return this.goalsByControlArray[p_220886_1_.ordinal()];
+   }
+
+   private void setGoalOccupyingControl(Goal.Flag control, PrioritizedGoal goal) {
+      this.goalsByControlArray[control.ordinal()] = goal;
+   }
+
+   private static Goal.Flag[] getControls(PrioritizedGoal goal) {
+      return ((ExtraExtendedGoal) goal.func_220772_j()).getRequiredControls();
+   }
+
    public void func_220878_a(Goal.Flag p_220878_1_, boolean p_220878_2_) {
       if (p_220878_2_) {
          this.func_220886_b(p_220878_1_);
