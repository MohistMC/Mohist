buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://files.minecraftforge.net/maven' }
        // maven { url 'http://bmclapi2.bangbang93.com/maven' }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
    id "java"
    id "idea"
    id "net.nemerosa.versioning" version "2.11.0"
    id "edu.sc.seis.launch4j" version "2.4.6"
}

def patcher_plugin = plugins.apply('net.minecraftforge.gradle.patcher')

group = 'red.mohist'
version = '1.12.2-' + versioning.info.build

repositories {
    mavenCentral()
    maven { url 'https://files.minecraftforge.net/maven' }
    // maven { url 'http://bmclapi2.bangbang93.com/maven' }
    maven { url 'https://hub.spigotmc.org/nexus/content/groups/public/' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://libraries.minecraft.net/' }
}

dependencies {
    compile 'junit:junit:4.12'
    compile 'org.junit.jupiter:junit-jupiter-api:5.0.0'
    compile 'org.opentest4j:opentest4j:1.0.0'
    compile 'org.hamcrest:hamcrest-core:1.3'
    compile 'com.google.code.findbugs:jsr305:3.0.1'
    compile 'com.mojang:patchy:1.1'
    compile 'oshi-project:oshi-core:1.1'
    compile 'net.java.dev.jna:jna:4.4.0'
    compile 'net.java.dev.jna:platform:3.4.0'
    compile 'com.ibm.icu:icu4j-core-mojang:51.2'
    compile 'net.sf.jopt-simple:jopt-simple:5.0.3'
    compile 'com.paulscode:codecjorbis:20101023'
    compile 'com.paulscode:codecwav:20101023'
    compile 'com.paulscode:libraryjavasound:20101123'
    compile 'com.paulscode:librarylwjglopenal:20100824'
    compile 'com.paulscode:soundsystem:20120107'
    compile 'io.netty:netty-all:4.1.9.Final'
    compile 'com.google.guava:guava:21.0'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-io:commons-io:2.5'
    compile 'commons-codec:commons-codec:1.10'
    compile 'net.java.jinput:jinput:2.0.5'
    compile 'net.java.jutils:jutils:1.0.0'
    compile 'com.google.code.gson:gson:2.8.0'
    compile 'com.mojang:authlib:1.5.25'
    compile 'com.mojang:realms:1.10.22'
    compile 'org.apache.commons:commons-compress:1.8.1'
    compile 'org.apache.httpcomponents:httpclient:4.3.3'
    compile 'commons-logging:commons-logging:1.1.3'
    compile 'org.apache.httpcomponents:httpcore:4.3.2'
    compile 'it.unimi.dsi:fastutil:7.1.0'
    compile 'org.apache.logging.log4j:log4j-api:2.8.1'
    compile 'org.apache.logging.log4j:log4j-core:2.8.1'
    compile 'org.lwjgl.lwjgl:lwjgl:2.9.4-nightly-20150209'
    compile 'org.lwjgl.lwjgl:lwjgl_util:2.9.4-nightly-20150209'
    compile 'com.mojang:text2speech:1.10.3'
    compile 'net.minecraft:launchwrapper:1.12'
    compile 'org.jline:jline:3.5.1'
    compile 'jline:jline:2.13'
    compile 'com.google.code.findbugs:jsr305:1.3.9'
    compile 'org.ow2.asm:asm-debug-all:5.2'
    compile 'com.typesafe.akka:akka-actor_2.11:2.3.3'
    compile 'com.typesafe:config:1.3.1'
    compile 'org.scala-lang:scala-actors-migration_2.11:1.1.0'
    compile 'org.scala-lang:scala-compiler:2.11.1'
    compile 'org.scala-lang.plugins:scala-continuations-library_2.11:1.0.2'
    compile 'org.scala-lang.plugins:scala-continuations-plugin_2.11.1:1.0.2'
    compile 'org.scala-lang:scala-library:2.11.1'
    compile 'org.scala-lang.modules:scala-parser-combinators_2.11:1.0.1'
    compile 'org.scala-lang:scala-reflect:2.11.1'
    compile 'org.scala-lang.modules:scala-swing_2.11:1.0.1'
    compile 'org.scala-lang.modules:scala-xml_2.11:1.0.2'
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.yaml:snakeyaml:1.19'
    compile 'lzma:lzma:0.0.1'
    compile 'java3d:vecmath:1.5.2'
    compile 'net.sf.trove4j:trove4j:3.0.3'
    compile 'org.xerial:sqlite-jdbc:3.21.0.1'
    compile 'mysql:mysql-connector-java:5.1.46'
    compile 'mysql:mysql-connector-java:8.0.19'
    compile 'net.md-5:SpecialSource:1.8.5'
    compile 'net.md-5:bungeecord-chat:1.12-SNAPSHOT'
    compile 'org.apache.commons:commons-lang3:3.5'
    compile 'commons-lang:commons-lang:2.6'
    compile 'org.jetbrains:annotations:18.0.0'
    compile 'org.apache.maven:maven-artifact:3.5.3'

    compile "org.cache2k:cache2k-api:1.3.1.Alpha"
    compile "org.cache2k:cache2k-core:1.3.1.Alpha"
    compile "org.slf4j:slf4j-api:1.7.30"
    compile "org.slf4j:slf4j-nop:1.7.30"
}

targetCompatibility = '1.8'
sourceCompatibility = '1.8'
compileJava.options.encoding = 'UTF-8'

sourceSets {
    // Fix idea can't import module automatically
    main.java.srcDir 'src/main/java/'
    main.java.srcDir 'projects/Mohist/src/main/java/'
    main.java.srcDir 'projects/Mohist/src/main/start/'
}

minecraft.version = "1.12.2"

minecraft {
    mappings = 'snapshot_nodoc_20171003'
    workspaceDir = "projects"
    versionJson = "forge/${minecraft.version}-mohist-dev.json"
    buildUserdev = true
    buildInstaller = true
    installerVersion = "1.5"

    def common = {
        patchPrefixOriginal "../src-base/minecraft"
        patchPrefixChanged "../src-work/minecraft"
        mainClassClient "net.minecraft.launchwrapper.Launch"
        tweakClassClient "net.minecraftforge.fml.common.launcher.FMLTweaker"
        mainClassServer "net.minecraft.launchwrapper.Launch"
        tweakClassServer "net.minecraftforge.fml.common.launcher.FMLServerTweaker"
    }

    projects {
        mohist {
            rootDir "."
            patchDir "patches/"
            patchAfter "clean"
            genPatchesFrom "clean"
            genMcpPatches = true
            applyMcpPatches = true
            s2sKeepImports = true
            with common
        }
    }
}

installer {
    archiveClassifier = 'installer'
    from "src/main/resources/mohist_logo.png"
    rename "mohist_logo\\.png", "big_logo.png"
}

task signUniversal(type: SignJar, dependsOn: 'outputJar') {
    onlyIf {
        project.hasProperty('jarsigner')
    }

    def jarsigner = [:]

    if (project.hasProperty('jarsigner'))
        jarsigner = project.jarsigner

    alias = 'forge'
    exclude "paulscode/**"
    storePass = jarsigner.storepass
    keyPass = jarsigner.keypass
    keyStore = jarsigner.keystore
    inputFile = outputJar.archiveFile.get().asFile
    outputFile = outputJar.archiveFile.get().asFile
}
build.dependsOn signUniversal
installer.dependsOn signUniversal

launch4j {
    jar = installer.archiveFile.get().asFile.canonicalPath
    outfile = file("build/distributions/${project.name}-${project.version}-installer-win.exe").canonicalPath
    icon = file('icon.ico').canonicalPath
    manifest = file('forge/l4jManifest.xml').canonicalPath
    jreMinVersion = '1.8.0_101'
    initialHeapPercent = 5
    maxHeapPercent = 100
}
tasks.createExe.dependsOn installer
tasks.build.dependsOn 'launch4j'

task reobfToSRG(type: net.minecraftforge.gradle.patcher.TaskReobfuscate, dependsOn: reobfuscate) {
    srg = patcher_plugin.delayedFile('{CACHE_DIR}/de/oceanlabs/mcp/mcp_{MAPPING_CHANNEL}/{MAPPING_VERSION}/{MC_VERSION}/srgs/mcp-srg.srg')
    exc = reobfuscate.exc
    preFFJar = reobfuscate.preFFJar
    methodsCsv = reobfuscate.methodsCsv
    fieldsCsv = reobfuscate.fieldsCsv
    addLibs reobfuscate.libs
    inJar = patcher_plugin.delayedFile('{BUILD_DIR}/localCache/Mohist/recompiled.jar')
    outJar = 'build/mohist_srg.jar'
}

outputJar {
    archiveClassifier = 'server'

    manifest.attributes([
            "Manifest-Version"      : "1.8",
            "Implementation-Title"  : "Mohist",
            "Implementation-Version": project.version,
            "Main-Class"            : "red.mohist.Mohist",
            "TweakClass"            : "net.minecraftforge.fml.common.launcher.FMLTweaker",
            "Class-Path"            : getServerClasspath(file("forge/${minecraft.version}-mohist-rel.json"))
    ])
}

processJson {
    releaseJson = "forge/${minecraft.version}-mohist-rel.json"
    addReplacements([
            "@minecraft_version@": project.minecraft.version,
            "@version@"          : project.version,
            "@project@"          : "mohist",
            "@artifact@"         : "red.mohist:mohist:${project.version}",
            "@universal_jar@"    : { outputJar.archiveFileName },
            "@timestamp@"        : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
    ])
}

extractMohistSources { exclude "**/SideOnly.java", "**/Side.java" }
extractMohistResources { exclude "**/log4j2.xml" }

genGradleProjects {
    addCompileDep "junit:junit:4.12"
    addCompileDep "org.junit.jupiter:junit-jupiter-api:5.0.0"
    addCompileDep "org.opentest4j:opentest4j:1.0.0" // needed for junit 5
    addCompileDep "org.hamcrest:hamcrest-core:1.3"
}

import groovy.json.JsonSlurper

String getServerClasspath(File file) {
    def node = new JsonSlurper().parse(file)
    def out = new StringBuilder()
    node.versionInfo.libraries.each { lib ->
        if (lib.serverreq) {
            def split = lib.name.split(':')
            def group = split[0].replace('.', '/')
            def artifact = split[1]
            def version = split[2]
            out += "libraries/$group/$artifact/$version/$artifact-${version}.jar "
        }
    }
    out += "libraries/net/minecraft/1.12.2/minecraft_server.${minecraft.version}.jar"
    return out.toString()
}

task dumpLibs(type: Copy) {
    into "libraries"
    from configurations.compile
}